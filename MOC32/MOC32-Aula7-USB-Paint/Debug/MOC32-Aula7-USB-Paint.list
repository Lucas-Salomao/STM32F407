
MOC32-Aula7-USB-Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025990  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ed34  0802ed34  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  0802ed34  0802ed34  0003ed34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ed3c  0802ed3c  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ed3c  0802ed3c  0003ed3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ed40  0802ed40  0003ed40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0802ed44  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040098  2**0
                  CONTENTS
 10 .bss          00000898  20000098  20000098  00040098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000930  20000930  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019dfc  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f86  00000000  00000000  00059ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  0005de50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  0005eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268f1  00000000  00000000  00060000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001824c  00000000  00000000  000868f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd695  00000000  00000000  0009eb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017c1d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c3c  00000000  00000000  0017c224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800938c 	.word	0x0800938c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0800938c 	.word	0x0800938c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800057a:	4b52      	ldr	r3, [pc, #328]	; (80006c4 <ili9341_Init+0x150>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	2b00      	cmp	r3, #0
 8000584:	d115      	bne.n	80005b2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8000586:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <ili9341_Init+0x150>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <ili9341_Init+0x150>)
 8000592:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8000594:	4b4b      	ldr	r3, [pc, #300]	; (80006c4 <ili9341_Init+0x150>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80005a0:	f000 fb6a 	bl	8000c78 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80005a4:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <ili9341_Init+0x150>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <ili9341_Init+0x150>)
 80005b0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80005b2:	200a      	movs	r0, #10
 80005b4:	f000 fb54 	bl	8000c60 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 fb87 	bl	8000ccc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f000 fb4e 	bl	8000c60 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80005c4:	2203      	movs	r2, #3
 80005c6:	4940      	ldr	r1, [pc, #256]	; (80006c8 <ili9341_Init+0x154>)
 80005c8:	20ef      	movs	r0, #239	; 0xef
 80005ca:	f000 fbdd 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80005ce:	2203      	movs	r2, #3
 80005d0:	493e      	ldr	r1, [pc, #248]	; (80006cc <ili9341_Init+0x158>)
 80005d2:	20cf      	movs	r0, #207	; 0xcf
 80005d4:	f000 fbd8 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80005d8:	2204      	movs	r2, #4
 80005da:	493d      	ldr	r1, [pc, #244]	; (80006d0 <ili9341_Init+0x15c>)
 80005dc:	20ed      	movs	r0, #237	; 0xed
 80005de:	f000 fbd3 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80005e2:	2203      	movs	r2, #3
 80005e4:	493b      	ldr	r1, [pc, #236]	; (80006d4 <ili9341_Init+0x160>)
 80005e6:	20e8      	movs	r0, #232	; 0xe8
 80005e8:	f000 fbce 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80005ec:	2205      	movs	r2, #5
 80005ee:	493a      	ldr	r1, [pc, #232]	; (80006d8 <ili9341_Init+0x164>)
 80005f0:	20cb      	movs	r0, #203	; 0xcb
 80005f2:	f000 fbc9 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	4938      	ldr	r1, [pc, #224]	; (80006dc <ili9341_Init+0x168>)
 80005fa:	20f7      	movs	r0, #247	; 0xf7
 80005fc:	f000 fbc4 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000600:	2202      	movs	r2, #2
 8000602:	4937      	ldr	r1, [pc, #220]	; (80006e0 <ili9341_Init+0x16c>)
 8000604:	20ea      	movs	r0, #234	; 0xea
 8000606:	f000 fbbf 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800060a:	2201      	movs	r2, #1
 800060c:	4935      	ldr	r1, [pc, #212]	; (80006e4 <ili9341_Init+0x170>)
 800060e:	20c0      	movs	r0, #192	; 0xc0
 8000610:	f000 fbba 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000614:	2201      	movs	r2, #1
 8000616:	4934      	ldr	r1, [pc, #208]	; (80006e8 <ili9341_Init+0x174>)
 8000618:	20c1      	movs	r0, #193	; 0xc1
 800061a:	f000 fbb5 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800061e:	2202      	movs	r2, #2
 8000620:	4932      	ldr	r1, [pc, #200]	; (80006ec <ili9341_Init+0x178>)
 8000622:	20c5      	movs	r0, #197	; 0xc5
 8000624:	f000 fbb0 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000628:	2201      	movs	r2, #1
 800062a:	4931      	ldr	r1, [pc, #196]	; (80006f0 <ili9341_Init+0x17c>)
 800062c:	20c7      	movs	r0, #199	; 0xc7
 800062e:	f000 fbab 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000632:	2201      	movs	r2, #1
 8000634:	492f      	ldr	r1, [pc, #188]	; (80006f4 <ili9341_Init+0x180>)
 8000636:	2037      	movs	r0, #55	; 0x37
 8000638:	f000 fba6 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800063c:	2201      	movs	r2, #1
 800063e:	492e      	ldr	r1, [pc, #184]	; (80006f8 <ili9341_Init+0x184>)
 8000640:	203a      	movs	r0, #58	; 0x3a
 8000642:	f000 fba1 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8000646:	2202      	movs	r2, #2
 8000648:	492c      	ldr	r1, [pc, #176]	; (80006fc <ili9341_Init+0x188>)
 800064a:	20b1      	movs	r0, #177	; 0xb1
 800064c:	f000 fb9c 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8000650:	2203      	movs	r2, #3
 8000652:	492b      	ldr	r1, [pc, #172]	; (8000700 <ili9341_Init+0x18c>)
 8000654:	20b6      	movs	r0, #182	; 0xb6
 8000656:	f000 fb97 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800065a:	2201      	movs	r2, #1
 800065c:	4925      	ldr	r1, [pc, #148]	; (80006f4 <ili9341_Init+0x180>)
 800065e:	20f2      	movs	r0, #242	; 0xf2
 8000660:	f000 fb92 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8000664:	2201      	movs	r2, #1
 8000666:	4927      	ldr	r1, [pc, #156]	; (8000704 <ili9341_Init+0x190>)
 8000668:	2026      	movs	r0, #38	; 0x26
 800066a:	f000 fb8d 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800066e:	220f      	movs	r2, #15
 8000670:	4925      	ldr	r1, [pc, #148]	; (8000708 <ili9341_Init+0x194>)
 8000672:	20e0      	movs	r0, #224	; 0xe0
 8000674:	f000 fb88 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8000678:	220f      	movs	r2, #15
 800067a:	4924      	ldr	r1, [pc, #144]	; (800070c <ili9341_Init+0x198>)
 800067c:	20e1      	movs	r0, #225	; 0xe1
 800067e:	f000 fb83 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000682:	2036      	movs	r0, #54	; 0x36
 8000684:	f000 fb22 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000688:	2028      	movs	r0, #40	; 0x28
 800068a:	f000 fb2f 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800068e:	2011      	movs	r0, #17
 8000690:	f000 fb1c 	bl	8000ccc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fae3 	bl	8000c60 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, COLOR_BLUE);
 800069a:	231f      	movs	r3, #31
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	23f0      	movs	r3, #240	; 0xf0
 80006a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8e4 	bl	8000874 <ili9341_FillRect>
  LCD_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fad7 	bl	8000c60 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80006b2:	2029      	movs	r0, #41	; 0x29
 80006b4:	f000 fb0a 	bl	8000ccc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fad1 	bl	8000c60 <LCD_Delay>
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000b4 	.word	0x200000b4
 80006c8:	080093a4 	.word	0x080093a4
 80006cc:	080093a8 	.word	0x080093a8
 80006d0:	080093ac 	.word	0x080093ac
 80006d4:	080093b4 	.word	0x080093b4
 80006d8:	080093b8 	.word	0x080093b8
 80006dc:	080093c0 	.word	0x080093c0
 80006e0:	080093c4 	.word	0x080093c4
 80006e4:	080093c8 	.word	0x080093c8
 80006e8:	080093cc 	.word	0x080093cc
 80006ec:	080093d0 	.word	0x080093d0
 80006f0:	080093d4 	.word	0x080093d4
 80006f4:	080093d8 	.word	0x080093d8
 80006f8:	080093dc 	.word	0x080093dc
 80006fc:	080093e0 	.word	0x080093e0
 8000700:	080093e4 	.word	0x080093e4
 8000704:	080093e8 	.word	0x080093e8
 8000708:	080093ec 	.word	0x080093ec
 800070c:	080093fc 	.word	0x080093fc

08000710 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
 800071a:	460b      	mov	r3, r1
 800071c:	80bb      	strh	r3, [r7, #4]
 800071e:	4613      	mov	r3, r2
 8000720:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000722:	202a      	movs	r0, #42	; 0x2a
 8000724:	f000 fad2 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fadb 	bl	8000cec <LCD_IO_WriteData8>
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fad6 	bl	8000cec <LCD_IO_WriteData8>
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f000 facf 	bl	8000cec <LCD_IO_WriteData8>
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 faca 	bl	8000cec <LCD_IO_WriteData8>
 8000758:	202b      	movs	r0, #43	; 0x2b
 800075a:	f000 fab7 	bl	8000ccc <LCD_IO_WriteCmd8>
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fac0 	bl	8000cec <LCD_IO_WriteData8>
 800076c:	88bb      	ldrh	r3, [r7, #4]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fabb 	bl	8000cec <LCD_IO_WriteData8>
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fab4 	bl	8000cec <LCD_IO_WriteData8>
 8000784:	88bb      	ldrh	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 faaf 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800078e:	202c      	movs	r0, #44	; 0x2c
 8000790:	f000 fa9c 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fab8 	bl	8000d0c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	4603      	mov	r3, r0
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
 80007be:	4613      	mov	r3, r2
 80007c0:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80007c2:	4a2a      	ldr	r2, [pc, #168]	; (800086c <ili9341_SetDisplayWindow+0xc8>)
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	8013      	strh	r3, [r2, #0]
 80007c8:	88ba      	ldrh	r2, [r7, #4]
 80007ca:	883b      	ldrh	r3, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <ili9341_SetDisplayWindow+0xcc>)
 80007d6:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80007d8:	202a      	movs	r0, #42	; 0x2a
 80007da:	f000 fa77 	bl	8000ccc <LCD_IO_WriteCmd8>
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fa80 	bl	8000cec <LCD_IO_WriteData8>
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fa7b 	bl	8000cec <LCD_IO_WriteData8>
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	4413      	add	r3, r2
 80007fc:	3b01      	subs	r3, #1
 80007fe:	121b      	asrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fa72 	bl	8000cec <LCD_IO_WriteData8>
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4413      	add	r3, r2
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa67 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800081e:	202b      	movs	r0, #43	; 0x2b
 8000820:	f000 fa54 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b29b      	uxth	r3, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fa5d 	bl	8000cec <LCD_IO_WriteData8>
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fa58 	bl	8000cec <LCD_IO_WriteData8>
 800083c:	88ba      	ldrh	r2, [r7, #4]
 800083e:	883b      	ldrh	r3, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	3b01      	subs	r3, #1
 8000844:	121b      	asrs	r3, r3, #8
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fa4f 	bl	8000cec <LCD_IO_WriteData8>
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	883b      	ldrh	r3, [r7, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4413      	add	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3b01      	subs	r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fa44 	bl	8000cec <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200000b6 	.word	0x200000b6
 8000870:	200000b8 	.word	0x200000b8

08000874 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000892:	202a      	movs	r0, #42	; 0x2a
 8000894:	f000 fa1a 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fa23 	bl	8000cec <LCD_IO_WriteData8>
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fa1e 	bl	8000cec <LCD_IO_WriteData8>
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	4413      	add	r3, r2
 80008b6:	3b01      	subs	r3, #1
 80008b8:	121b      	asrs	r3, r3, #8
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa15 	bl	8000cec <LCD_IO_WriteData8>
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	887b      	ldrh	r3, [r7, #2]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa0a 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80008d8:	202b      	movs	r0, #43	; 0x2b
 80008da:	f000 f9f7 	bl	8000ccc <LCD_IO_WriteCmd8>
 80008de:	88bb      	ldrh	r3, [r7, #4]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa00 	bl	8000cec <LCD_IO_WriteData8>
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f9fb 	bl	8000cec <LCD_IO_WriteData8>
 80008f6:	88ba      	ldrh	r2, [r7, #4]
 80008f8:	883b      	ldrh	r3, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	3b01      	subs	r3, #1
 80008fe:	121b      	asrs	r3, r3, #8
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f9f2 	bl	8000cec <LCD_IO_WriteData8>
 8000908:	88bb      	ldrh	r3, [r7, #4]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	883b      	ldrh	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f9e7 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	461a      	mov	r2, r3
 8000928:	8b3b      	ldrh	r3, [r7, #24]
 800092a:	4619      	mov	r1, r3
 800092c:	202c      	movs	r0, #44	; 0x2c
 800092e:	f000 fa05 	bl	8000d3c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <ili9341_DrawFastVLine>:

void  ili9341_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b085      	sub	sp, #20
 800093e:	af02      	add	r7, sp, #8
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
	ili9341_FillRect(x, y, 1, h, color);
 8000958:	88f8      	ldrh	r0, [r7, #6]
 800095a:	88b9      	ldrh	r1, [r7, #4]
 800095c:	887a      	ldrh	r2, [r7, #2]
 800095e:	883b      	ldrh	r3, [r7, #0]
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4613      	mov	r3, r2
 8000964:	2201      	movs	r2, #1
 8000966:	f7ff ff85 	bl	8000874 <ili9341_FillRect>
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <ili9341_DrawFastHLine>:
void  ili9341_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b085      	sub	sp, #20
 8000976:	af02      	add	r7, sp, #8
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4623      	mov	r3, r4
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4603      	mov	r3, r0
 8000986:	80bb      	strh	r3, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
 800098c:	4613      	mov	r3, r2
 800098e:	803b      	strh	r3, [r7, #0]
	ili9341_FillRect(x, y, w, 1, color);
 8000990:	88f8      	ldrh	r0, [r7, #6]
 8000992:	88b9      	ldrh	r1, [r7, #4]
 8000994:	887a      	ldrh	r2, [r7, #2]
 8000996:	883b      	ldrh	r3, [r7, #0]
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	f7ff ff6a 	bl	8000874 <ili9341_FillRect>
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	80fb      	strh	r3, [r7, #6]
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	88b9      	ldrh	r1, [r7, #4]
 80009cc:	88f8      	ldrh	r0, [r7, #6]
 80009ce:	f7ff fee9 	bl	80007a4 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	883a      	ldrh	r2, [r7, #0]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	69b9      	ldr	r1, [r7, #24]
 80009de:	202c      	movs	r0, #44	; 0x2c
 80009e0:	f000 f9f4 	bl	8000dcc <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ili9341_WriteLine>:
	setCursor(0, row);
	//while (*str) write (*str++);
	while (*str) write(*str++);
}
void ili9341_WriteLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000a0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a18:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a24:	1acb      	subs	r3, r1, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bfb8      	it	lt
 8000a2a:	425b      	neglt	r3, r3
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	bfcc      	ite	gt
 8000a30:	2301      	movgt	r3, #1
 8000a32:	2300      	movle	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8000a38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00b      	beq.n	8000a58 <ili9341_WriteLine+0x6c>
        _swap_int16_t(x0, y0);
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	833b      	strh	r3, [r7, #24]
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	8b3b      	ldrh	r3, [r7, #24]
 8000a4a:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	82fb      	strh	r3, [r7, #22]
 8000a50:	883b      	ldrh	r3, [r7, #0]
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	8afb      	ldrh	r3, [r7, #22]
 8000a56:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000a58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dd0b      	ble.n	8000a7c <ili9341_WriteLine+0x90>
        _swap_int16_t(x0, x1);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	82bb      	strh	r3, [r7, #20]
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	8abb      	ldrh	r3, [r7, #20]
 8000a6e:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	827b      	strh	r3, [r7, #18]
 8000a74:	883b      	ldrh	r3, [r7, #0]
 8000a76:	80bb      	strh	r3, [r7, #4]
 8000a78:	8a7b      	ldrh	r3, [r7, #18]
 8000a7a:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8000a86:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bfb8      	it	lt
 8000a94:	425b      	neglt	r3, r3
 8000a96:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000a98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a9c:	0fda      	lsrs	r2, r3, #31
 8000a9e:	4413      	add	r3, r2
 8000aa0:	105b      	asrs	r3, r3, #1
 8000aa2:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8000aa4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000aa8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	da02      	bge.n	8000ab6 <ili9341_WriteLine+0xca>
        ystep = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	83bb      	strh	r3, [r7, #28]
 8000ab4:	e02d      	b.n	8000b12 <ili9341_WriteLine+0x126>
    } else {
        ystep = -1;
 8000ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aba:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000abc:	e029      	b.n	8000b12 <ili9341_WriteLine+0x126>
        if (steep) {
 8000abe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <ili9341_WriteLine+0xe8>
        	ili9341_WritePixel(y0, x0, color);
 8000ac6:	88bb      	ldrh	r3, [r7, #4]
 8000ac8:	88f9      	ldrh	r1, [r7, #6]
 8000aca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fe1f 	bl	8000710 <ili9341_WritePixel>
 8000ad2:	e005      	b.n	8000ae0 <ili9341_WriteLine+0xf4>
        } else {
        	ili9341_WritePixel(x0, y0, color);
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	88b9      	ldrh	r1, [r7, #4]
 8000ad8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fe18 	bl	8000710 <ili9341_WritePixel>
        }
        err -= dy;
 8000ae0:	8bfa      	ldrh	r2, [r7, #30]
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8000aea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da09      	bge.n	8000b06 <ili9341_WriteLine+0x11a>
            y0 += ystep;
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	8bbb      	ldrh	r3, [r7, #28]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000afc:	8bfa      	ldrh	r2, [r7, #30]
 8000afe:	8a3b      	ldrh	r3, [r7, #16]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	ddcf      	ble.n	8000abe <ili9341_WriteLine+0xd2>
        }
    }
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3724      	adds	r7, #36	; 0x24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <ili9341_DrawLine>:

void ili9341_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8000b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d11a      	bne.n	8000b88 <ili9341_DrawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8000b52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dd05      	ble.n	8000b6a <ili9341_DrawLine+0x42>
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	81bb      	strh	r3, [r7, #12]
 8000b62:	883b      	ldrh	r3, [r7, #0]
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	89bb      	ldrh	r3, [r7, #12]
 8000b68:	803b      	strh	r3, [r7, #0]
        ili9341_DrawFastVLine(x0, y0, y1 - y0 + 1, color);
 8000b6a:	883a      	ldrh	r2, [r7, #0]
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3301      	adds	r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	8c3b      	ldrh	r3, [r7, #32]
 8000b7a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b82:	f7ff feda 	bl	800093a <ili9341_DrawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        ili9341_DrawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
    	ili9341_WriteLine(x0, y0, x1, y1, color);
    }
}
 8000b86:	e02d      	b.n	8000be4 <ili9341_DrawLine+0xbc>
    } else if(y0 == y1){
 8000b88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d11a      	bne.n	8000bca <ili9341_DrawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8000b94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dd05      	ble.n	8000bac <ili9341_DrawLine+0x84>
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	81fb      	strh	r3, [r7, #14]
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	807b      	strh	r3, [r7, #2]
        ili9341_DrawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000bac:	887a      	ldrh	r2, [r7, #2]
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	8c3b      	ldrh	r3, [r7, #32]
 8000bbc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bc0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bc4:	f7ff fed5 	bl	8000972 <ili9341_DrawFastHLine>
}
 8000bc8:	e00c      	b.n	8000be4 <ili9341_DrawLine+0xbc>
    	ili9341_WriteLine(x0, y0, x1, y1, color);
 8000bca:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000bce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bd2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bd6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bda:	8c3b      	ldrh	r3, [r7, #32]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4623      	mov	r3, r4
 8000be0:	f7ff ff04 	bl	80009ec <ili9341_WriteLine>
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}

08000bec <ili9341_DrawTriangle>:
    ili9341_FillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    ili9341_FillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
}

void ili9341_DrawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
	ili9341_DrawLine(x0, y0, x1, y1, color);
 8000c0a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000c0e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c16:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c1a:	8c3b      	ldrh	r3, [r7, #32]
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	4623      	mov	r3, r4
 8000c20:	f7ff ff82 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x1, y1, x2, y2, color);
 8000c24:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8000c28:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000c2c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000c30:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000c34:	8c3b      	ldrh	r3, [r7, #32]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4623      	mov	r3, r4
 8000c3a:	f7ff ff75 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x2, y2, x0, y0, color);
 8000c3e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000c42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c46:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8000c4a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8000c4e:	8c3b      	ldrh	r3, [r7, #32]
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4623      	mov	r3, r4
 8000c54:	f7ff ff68 	bl	8000b28 <ili9341_DrawLine>
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}

08000c60 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fed5 	bl	8001a18 <HAL_Delay>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <LCD_IO_Init>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RST);
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <LCD_IO_Init+0x48>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <LCD_IO_Init+0x48>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <LCD_IO_Init+0x4c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c90:	4a0c      	ldr	r2, [pc, #48]	; (8000cc4 <LCD_IO_Init+0x4c>)
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	6013      	str	r3, [r2, #0]
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LCD_IO_Init+0x50>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ffde 	bl	8000c60 <LCD_Delay>
  LCD_RST_ON;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LCD_IO_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ffd8 	bl	8000c60 <LCD_Delay>
  LCD_RST_OFF;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <LCD_IO_Init+0x50>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff ffd2 	bl	8000c60 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	4241828c 	.word	0x4241828c

08000ccc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
 8000cd6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	7013      	strb	r3, [r2, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <LCD_IO_WriteData8+0x1c>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	7013      	strb	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	600ffffe 	.word	0x600ffffe

08000d0c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8000d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1a:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	ba5b      	rev16	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <LCD_IO_WriteData16+0x2c>)
 8000d26:	b292      	uxth	r2, r2
 8000d28:	801a      	strh	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	600ffffe 	.word	0x600ffffe

08000d3c <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	603a      	str	r2, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	80bb      	strh	r3, [r7, #4]
  uint16_t d = RD(Data);
 8000d4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d50:	81bb      	strh	r3, [r7, #12]
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	ba5b      	rev16	r3, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	81fb      	strh	r3, [r7, #14]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000d5c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000d64:	e002      	b.n	8000d6c <LCD_IO_WriteCmd8DataFill16+0x30>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	603a      	str	r2, [r7, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f7      	bne.n	8000d66 <LCD_IO_WriteCmd8DataFill16+0x2a>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	600ffffe 	.word	0x600ffffe

08000d88 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000d96:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000d9e:	e006      	b.n	8000dae <LCD_IO_WriteCmd8MultipleData8+0x26>
  {
    *(volatile uint8_t *)LCD_ADDR_DATA =*pData;
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	7013      	strb	r3, [r2, #0]
    pData++;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1e5a      	subs	r2, r3, #1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f3      	bne.n	8000da0 <LCD_IO_WriteCmd8MultipleData8+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 0);
  #endif
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	600ffffe 	.word	0x600ffffe

08000dcc <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000dda:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 0
  while(Size--)
 8000de2:	e00d      	b.n	8000e00 <LCD_IO_WriteCmd8MultipleData16+0x34>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = RD(*pData);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	82fb      	strh	r3, [r7, #22]
 8000dec:	8afb      	ldrh	r3, [r7, #22]
 8000dee:	ba5b      	rev16	r3, r3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <LCD_IO_WriteCmd8MultipleData16+0x4c>)
 8000df6:	b292      	uxth	r2, r2
 8000df8:	801a      	strh	r2, [r3, #0]
    pData++;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1ec      	bne.n	8000de4 <LCD_IO_WriteCmd8MultipleData16+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 1);
  #endif
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	600ffffe 	.word	0x600ffffe

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e22:	f000 fd87 	bl	8001934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 f82d 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f000 f921 	bl	8001070 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e2e:	f000 f893 	bl	8000f58 <MX_ADC1_Init>
  MX_FSMC_Init();
 8000e32:	f000 f999 	bl	8001168 <MX_FSMC_Init>
  MX_USB_HOST_Init();
 8000e36:	f007 fb25 	bl	8008484 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000e3a:	f000 f8ef 	bl	800101c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ili9341_Init();
 8000e3e:	f7ff fb99 	bl	8000574 <ili9341_Init>
  ili9341_DrawRGBImage(0, 0, 320, 240, paint_resize);
 8000e42:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <main+0x58>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	23f0      	movs	r3, #240	; 0xf0
 8000e48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fdaa 	bl	80009a8 <ili9341_DrawRGBImage>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <main+0x5c>)
 8000e5a:	f001 fb11 	bl	8002480 <HAL_GPIO_WritePin>
//  ili9341_DrawTriangle(160, 120, 160, 137, 172, 132, COLOR_BLACK);
//  ili9341_DrawLine(165, 135, 167, 140, COLOR_BLACK);
//  ili9341_DrawLine(167, 140, 170, 138, COLOR_BLACK);
//  ili9341_DrawLine(170, 138, 168, 133, COLOR_BLACK);
  desenha_cursor(x_cursor,y_cursor);
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <main+0x60>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <main+0x64>)
 8000e64:	8812      	ldrh	r2, [r2, #0]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fafd 	bl	8001468 <desenha_cursor>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e6e:	f007 fb2f 	bl	80084d0 <MX_USB_HOST_Process>
 8000e72:	e7fc      	b.n	8000e6e <main+0x52>
 8000e74:	08009448 	.word	0x08009448
 8000e78:	40020800 	.word	0x40020800
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000002 	.word	0x20000002

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b094      	sub	sp, #80	; 0x50
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0320 	add.w	r3, r7, #32
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f007 fe04 	bl	8008aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a27      	ldr	r2, [pc, #156]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <SystemClock_Config+0xcc>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <SystemClock_Config+0xd0>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <SystemClock_Config+0xd0>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <SystemClock_Config+0xd0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef8:	23a8      	movs	r3, #168	; 0xa8
 8000efa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efc:	2302      	movs	r3, #2
 8000efe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f00:	2307      	movs	r3, #7
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f04:	f107 0320 	add.w	r3, r7, #32
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fedd 	bl	8003cc8 <HAL_RCC_OscConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f14:	f000 fb3c 	bl	8001590 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f18:	230f      	movs	r3, #15
 8000f1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2105      	movs	r1, #5
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f93e 	bl	80041b8 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f42:	f000 fb25 	bl	8001590 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3750      	adds	r7, #80	; 0x50
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40007000 	.word	0x40007000

08000f58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6a:	4b29      	ldr	r3, [pc, #164]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <MX_ADC1_Init+0xbc>)
 8000f6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f76:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000f78:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f80:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	; (8001018 <MX_ADC1_Init+0xc0>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fa6:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4815      	ldr	r0, [pc, #84]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fbc:	f000 fd50 	bl	8001a60 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000fc6:	f000 fae3 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fd2:	2307      	movs	r3, #7
 8000fd4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	480d      	ldr	r0, [pc, #52]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000fdc:	f000 fd84 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fe6:	f000 fad3 	bl	8001590 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000fea:	230b      	movs	r3, #11
 8000fec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4806      	ldr	r0, [pc, #24]	; (8001010 <MX_ADC1_Init+0xb8>)
 8000ff8:	f000 fd76 	bl	8001ae8 <HAL_ADC_ConfigChannel>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001002:	f000 fac5 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000bc 	.word	0x200000bc
 8001014:	40012000 	.word	0x40012000
 8001018:	0f000001 	.word	0x0f000001

0800101c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART2_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART2_UART_Init+0x4c>)
 8001054:	f003 fb18 	bl	8004688 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 fa97 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000104 	.word	0x20000104
 800106c:	40004400 	.word	0x40004400

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b34      	ldr	r3, [pc, #208]	; (800115c <MX_GPIO_Init+0xec>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a33      	ldr	r2, [pc, #204]	; (800115c <MX_GPIO_Init+0xec>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b31      	ldr	r3, [pc, #196]	; (800115c <MX_GPIO_Init+0xec>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_GPIO_Init+0xec>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0xec>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_GPIO_Init+0xec>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <MX_GPIO_Init+0xec>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a25      	ldr	r2, [pc, #148]	; (800115c <MX_GPIO_Init+0xec>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <MX_GPIO_Init+0xec>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_GPIO_Init+0xec>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <MX_GPIO_Init+0xec>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_GPIO_Init+0xec>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_GPIO_Init+0xec>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <MX_GPIO_Init+0xec>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_GPIO_Init+0xec>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2101      	movs	r1, #1
 8001116:	4812      	ldr	r0, [pc, #72]	; (8001160 <MX_GPIO_Init+0xf0>)
 8001118:	f001 f9b2 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	2301      	movs	r3, #1
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <MX_GPIO_Init+0xf0>)
 8001134:	f001 f808 	bl	8002148 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8001138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001142:	2301      	movs	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_GPIO_Init+0xf4>)
 800114e:	f000 fffb 	bl	8002148 <HAL_GPIO_Init>

}
 8001152:	bf00      	nop
 8001154:	3728      	adds	r7, #40	; 0x28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023800 	.word	0x40023800
 8001160:	40020800 	.word	0x40020800
 8001164:	40021000 	.word	0x40021000

08001168 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <MX_FSMC_Init+0xb8>)
 8001182:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001186:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <MX_FSMC_Init+0xb8>)
 800118a:	4a26      	ldr	r2, [pc, #152]	; (8001224 <MX_FSMC_Init+0xbc>)
 800118c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <MX_FSMC_Init+0xb8>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <MX_FSMC_Init+0xb8>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <MX_FSMC_Init+0xb8>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011b2:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_FSMC_Init+0xb8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 80011e4:	2306      	movs	r3, #6
 80011e6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80011e8:	230f      	movs	r3, #15
 80011ea:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 80011ec:	2306      	movs	r3, #6
 80011ee:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80011f0:	230f      	movs	r3, #15
 80011f2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80011f4:	2310      	movs	r3, #16
 80011f6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80011f8:	2311      	movs	r3, #17
 80011fa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	4806      	ldr	r0, [pc, #24]	; (8001220 <MX_FSMC_Init+0xb8>)
 8001208:	f003 f9f6 	bl	80045f8 <HAL_SRAM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001212:	f000 f9bd 	bl	8001590 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001216:	bf00      	nop
 8001218:	3720      	adds	r7, #32
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000148 	.word	0x20000148
 8001224:	a0000104 	.word	0xa0000104

08001228 <USBH_HID_EventCallback>:

/* USER CODE BEGIN 4 */
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af04      	add	r7, sp, #16
 800122e:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f005 fa6d 	bl	8006710 <USBH_HID_GetDeviceType>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	f040 8100 	bne.w	800143e <USBH_HID_EventCallback+0x216>
	{
		HID_MOUSE_Info_TypeDef *Mouse_Info;
		Mouse_Info = USBH_HID_GetMouseInfo(phost);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f005 fbe8 	bl	8006a14 <USBH_HID_GetMouseInfo>
 8001244:	60f8      	str	r0, [r7, #12]
		int X_Val = Mouse_Info->x;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	617b      	str	r3, [r7, #20]
		int Y_Val = Mouse_Info->y;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	785b      	ldrb	r3, [r3, #1]
 8001250:	613b      	str	r3, [r7, #16]
		if(X_Val > 127) X_Val -= 255;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b7f      	cmp	r3, #127	; 0x7f
 8001256:	dd02      	ble.n	800125e <USBH_HID_EventCallback+0x36>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3bff      	subs	r3, #255	; 0xff
 800125c:	617b      	str	r3, [r7, #20]
		if(Y_Val > 127) Y_Val -= 255;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	2b7f      	cmp	r3, #127	; 0x7f
 8001262:	dd02      	ble.n	800126a <USBH_HID_EventCallback+0x42>
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	3bff      	subs	r3, #255	; 0xff
 8001268:	613b      	str	r3, [r7, #16]
		int len = sprintf(Uart_buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\r\n", X_Val, Y_Val, Mouse_Info->buttons[0], Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	789b      	ldrb	r3, [r3, #2]
 800126e:	461a      	mov	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	78db      	ldrb	r3, [r3, #3]
 8001274:	4619      	mov	r1, r3
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	791b      	ldrb	r3, [r3, #4]
 800127a:	9302      	str	r3, [sp, #8]
 800127c:	9101      	str	r1, [sp, #4]
 800127e:	9200      	str	r2, [sp, #0]
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4970      	ldr	r1, [pc, #448]	; (8001448 <USBH_HID_EventCallback+0x220>)
 8001286:	4871      	ldr	r0, [pc, #452]	; (800144c <USBH_HID_EventCallback+0x224>)
 8001288:	f007 fd02 	bl	8008c90 <siprintf>
 800128c:	60b8      	str	r0, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_buf, len, 1000);
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	b29a      	uxth	r2, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001296:	496d      	ldr	r1, [pc, #436]	; (800144c <USBH_HID_EventCallback+0x224>)
 8001298:	486d      	ldr	r0, [pc, #436]	; (8001450 <USBH_HID_EventCallback+0x228>)
 800129a:	f003 fa42 	bl	8004722 <HAL_UART_Transmit>

		apaga_cursor(x_old, y_old);
 800129e:	4b6d      	ldr	r3, [pc, #436]	; (8001454 <USBH_HID_EventCallback+0x22c>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	4a6d      	ldr	r2, [pc, #436]	; (8001458 <USBH_HID_EventCallback+0x230>)
 80012a4:	8812      	ldrh	r2, [r2, #0]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f925 	bl	80014f8 <apaga_cursor>
		x_cursor=x_cursor+(int)(X_Val*MOUSE_SCALE);
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012bc:	ee17 3a90 	vmov	r3, s15
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	4b66      	ldr	r3, [pc, #408]	; (800145c <USBH_HID_EventCallback+0x234>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b64      	ldr	r3, [pc, #400]	; (800145c <USBH_HID_EventCallback+0x234>)
 80012cc:	801a      	strh	r2, [r3, #0]
		y_cursor=y_cursor+(int)(Y_Val*MOUSE_SCALE);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 3a90 	vmov	r3, s15
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b5f      	ldr	r3, [pc, #380]	; (8001460 <USBH_HID_EventCallback+0x238>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <USBH_HID_EventCallback+0x238>)
 80012ec:	801a      	strh	r2, [r3, #0]
		desenha_cursor(x_cursor, y_cursor);
 80012ee:	4b5b      	ldr	r3, [pc, #364]	; (800145c <USBH_HID_EventCallback+0x234>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	4a5b      	ldr	r2, [pc, #364]	; (8001460 <USBH_HID_EventCallback+0x238>)
 80012f4:	8812      	ldrh	r2, [r2, #0]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 f8b5 	bl	8001468 <desenha_cursor>
		x_old=x_cursor;
 80012fe:	4b57      	ldr	r3, [pc, #348]	; (800145c <USBH_HID_EventCallback+0x234>)
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	4b54      	ldr	r3, [pc, #336]	; (8001454 <USBH_HID_EventCallback+0x22c>)
 8001304:	801a      	strh	r2, [r3, #0]
		y_old=y_cursor;
 8001306:	4b56      	ldr	r3, [pc, #344]	; (8001460 <USBH_HID_EventCallback+0x238>)
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <USBH_HID_EventCallback+0x230>)
 800130c:	801a      	strh	r2, [r3, #0]

		if(Mouse_Info->buttons[0]==1&Mouse_Info->buttons[1]==0&Mouse_Info->buttons[2]==0) // botao direito
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	789b      	ldrb	r3, [r3, #2]
 8001312:	2b01      	cmp	r3, #1
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2da      	uxtb	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf0c      	ite	eq
 8001324:	2301      	moveq	r3, #1
 8001326:	2300      	movne	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4013      	ands	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	791b      	ldrb	r3, [r3, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf0c      	ite	eq
 8001338:	2301      	moveq	r3, #1
 800133a:	2300      	movne	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4013      	ands	r3, r2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00a      	beq.n	800135a <USBH_HID_EventCallback+0x132>
		{
			ili9341_WritePixel(x_cursor-1, y_cursor-1, COLOR_RED);
 8001344:	4b45      	ldr	r3, [pc, #276]	; (800145c <USBH_HID_EventCallback+0x234>)
 8001346:	881b      	ldrh	r3, [r3, #0]
 8001348:	3b01      	subs	r3, #1
 800134a:	4a45      	ldr	r2, [pc, #276]	; (8001460 <USBH_HID_EventCallback+0x238>)
 800134c:	8812      	ldrh	r2, [r2, #0]
 800134e:	1e51      	subs	r1, r2, #1
 8001350:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f9db 	bl	8000710 <ili9341_WritePixel>
		}
		if(Mouse_Info->buttons[0]==0&Mouse_Info->buttons[1]==1&Mouse_Info->buttons[2]==0) // botao esquerdo
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	789b      	ldrb	r3, [r3, #2]
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2da      	uxtb	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	78db      	ldrb	r3, [r3, #3]
 800136c:	2b01      	cmp	r3, #1
 800136e:	bf0c      	ite	eq
 8001370:	2301      	moveq	r3, #1
 8001372:	2300      	movne	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	4013      	ands	r3, r2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d009      	beq.n	80013a4 <USBH_HID_EventCallback+0x17c>
		{
			ili9341_WritePixel(x_cursor-1, y_cursor-1, COLOR_BLUE);
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <USBH_HID_EventCallback+0x234>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	3b01      	subs	r3, #1
 8001396:	4a32      	ldr	r2, [pc, #200]	; (8001460 <USBH_HID_EventCallback+0x238>)
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	1e51      	subs	r1, r2, #1
 800139c:	221f      	movs	r2, #31
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f9b6 	bl	8000710 <ili9341_WritePixel>
		}
		if(Mouse_Info->buttons[0]==0&Mouse_Info->buttons[1]==0&Mouse_Info->buttons[2]==1) // scroll pressionado
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	789a      	ldrb	r2, [r3, #2]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	78db      	ldrb	r3, [r3, #3]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf0c      	ite	eq
 80013b4:	2301      	moveq	r3, #1
 80013b6:	2300      	movne	r3, #0
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	791b      	ldrb	r3, [r3, #4]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4013      	ands	r3, r2
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d010      	beq.n	80013f2 <USBH_HID_EventCallback+0x1ca>
		{
			ili9341_DrawRGBImage(0, 0, 320, 240, paint_resize);
 80013d0:	4b24      	ldr	r3, [pc, #144]	; (8001464 <USBH_HID_EventCallback+0x23c>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	23f0      	movs	r3, #240	; 0xf0
 80013d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013da:	2100      	movs	r1, #0
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fae3 	bl	80009a8 <ili9341_DrawRGBImage>
			desenha_cursor(x_cursor, y_cursor);
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <USBH_HID_EventCallback+0x234>)
 80013e4:	881b      	ldrh	r3, [r3, #0]
 80013e6:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <USBH_HID_EventCallback+0x238>)
 80013e8:	8812      	ldrh	r2, [r2, #0]
 80013ea:	4611      	mov	r1, r2
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f83b 	bl	8001468 <desenha_cursor>
		}
		if(Mouse_Info->buttons[0]==1&Mouse_Info->buttons[1]==1&Mouse_Info->buttons[2]==0) // botao esquerdo
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	789b      	ldrb	r3, [r3, #2]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	78db      	ldrb	r3, [r3, #3]
 8001404:	2b01      	cmp	r3, #1
 8001406:	bf0c      	ite	eq
 8001408:	2301      	moveq	r3, #1
 800140a:	2300      	movne	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4013      	ands	r3, r2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	791b      	ldrb	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <USBH_HID_EventCallback+0x216>
		{
			ili9341_WritePixel(x_cursor-1, y_cursor-1, COLOR_GREEN);
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <USBH_HID_EventCallback+0x234>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	3b01      	subs	r3, #1
 800142e:	4a0c      	ldr	r2, [pc, #48]	; (8001460 <USBH_HID_EventCallback+0x238>)
 8001430:	8812      	ldrh	r2, [r2, #0]
 8001432:	1e51      	subs	r1, r2, #1
 8001434:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f969 	bl	8000710 <ili9341_WritePixel>
		}

	}

}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	08009410 	.word	0x08009410
 800144c:	20000198 	.word	0x20000198
 8001450:	20000104 	.word	0x20000104
 8001454:	20000004 	.word	0x20000004
 8001458:	20000006 	.word	0x20000006
 800145c:	20000000 	.word	0x20000000
 8001460:	20000002 	.word	0x20000002
 8001464:	08009448 	.word	0x08009448

08001468 <desenha_cursor>:
void desenha_cursor(uint16_t x, uint16_t y)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	b087      	sub	sp, #28
 800146c:	af04      	add	r7, sp, #16
 800146e:	4603      	mov	r3, r0
 8001470:	460a      	mov	r2, r1
 8001472:	80fb      	strh	r3, [r7, #6]
 8001474:	4613      	mov	r3, r2
 8001476:	80bb      	strh	r3, [r7, #4]
	ili9341_DrawTriangle(x, y, x, y+17, x+12, y+12, COLOR_BLACK);
 8001478:	88f8      	ldrh	r0, [r7, #6]
 800147a:	88b9      	ldrh	r1, [r7, #4]
 800147c:	88fc      	ldrh	r4, [r7, #6]
 800147e:	88bb      	ldrh	r3, [r7, #4]
 8001480:	f103 0511 	add.w	r5, r3, #17
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	330c      	adds	r3, #12
 8001488:	88ba      	ldrh	r2, [r7, #4]
 800148a:	320c      	adds	r2, #12
 800148c:	2600      	movs	r6, #0
 800148e:	9602      	str	r6, [sp, #8]
 8001490:	9201      	str	r2, [sp, #4]
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	462b      	mov	r3, r5
 8001496:	4622      	mov	r2, r4
 8001498:	f7ff fba8 	bl	8000bec <ili9341_DrawTriangle>
	ili9341_DrawLine(x+5, y+15, x+7, y+20, COLOR_BLACK);
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	1d58      	adds	r0, r3, #5
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	f103 010f 	add.w	r1, r3, #15
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	1dda      	adds	r2, r3, #7
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	3314      	adds	r3, #20
 80014ae:	2400      	movs	r4, #0
 80014b0:	9400      	str	r4, [sp, #0]
 80014b2:	f7ff fb39 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x+7, y+20, x+10, y+18, COLOR_BLACK);
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	1dd8      	adds	r0, r3, #7
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	f103 0114 	add.w	r1, r3, #20
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	f103 020a 	add.w	r2, r3, #10
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	3312      	adds	r3, #18
 80014ca:	2400      	movs	r4, #0
 80014cc:	9400      	str	r4, [sp, #0]
 80014ce:	f7ff fb2b 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x+10, y+18, x+8, y+13, COLOR_BLACK);
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	f103 000a 	add.w	r0, r3, #10
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	f103 0112 	add.w	r1, r3, #18
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	f103 0208 	add.w	r2, r3, #8
 80014e4:	88bb      	ldrh	r3, [r7, #4]
 80014e6:	330d      	adds	r3, #13
 80014e8:	2400      	movs	r4, #0
 80014ea:	9400      	str	r4, [sp, #0]
 80014ec:	f7ff fb1c 	bl	8000b28 <ili9341_DrawLine>
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014f8 <apaga_cursor>:
void apaga_cursor(uint16_t x, uint16_t y)
{
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	4603      	mov	r3, r0
 8001500:	460a      	mov	r2, r1
 8001502:	80fb      	strh	r3, [r7, #6]
 8001504:	4613      	mov	r3, r2
 8001506:	80bb      	strh	r3, [r7, #4]
	ili9341_DrawTriangle(x, y, x, y+17, x+12, y+12, COLOR_WHITE);
 8001508:	88f8      	ldrh	r0, [r7, #6]
 800150a:	88b9      	ldrh	r1, [r7, #4]
 800150c:	88fc      	ldrh	r4, [r7, #6]
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	f103 0511 	add.w	r5, r3, #17
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	330c      	adds	r3, #12
 8001518:	88ba      	ldrh	r2, [r7, #4]
 800151a:	320c      	adds	r2, #12
 800151c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8001520:	9602      	str	r6, [sp, #8]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	462b      	mov	r3, r5
 8001528:	4622      	mov	r2, r4
 800152a:	f7ff fb5f 	bl	8000bec <ili9341_DrawTriangle>
	ili9341_DrawLine(x+5, y+15, x+7, y+20, COLOR_WHITE);
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	1d58      	adds	r0, r3, #5
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	f103 010f 	add.w	r1, r3, #15
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	1dda      	adds	r2, r3, #7
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	3314      	adds	r3, #20
 8001540:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001544:	9400      	str	r4, [sp, #0]
 8001546:	f7ff faef 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x+7, y+20, x+10, y+18, COLOR_WHITE);
 800154a:	88fb      	ldrh	r3, [r7, #6]
 800154c:	1dd8      	adds	r0, r3, #7
 800154e:	88bb      	ldrh	r3, [r7, #4]
 8001550:	f103 0114 	add.w	r1, r3, #20
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	f103 020a 	add.w	r2, r3, #10
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	3312      	adds	r3, #18
 800155e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001562:	9400      	str	r4, [sp, #0]
 8001564:	f7ff fae0 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x+10, y+18, x+8, y+13, COLOR_WHITE);
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	f103 000a 	add.w	r0, r3, #10
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	f103 0112 	add.w	r1, r3, #18
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	f103 0208 	add.w	r2, r3, #8
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	330d      	adds	r3, #13
 800157e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8001582:	9400      	str	r4, [sp, #0]
 8001584:	f7ff fad0 	bl	8000b28 <ili9341_DrawLine>
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001590 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001594:	b672      	cpsid	i
}
 8001596:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001598:	e7fe      	b.n	8001598 <Error_Handler+0x8>
	...

0800159c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <HAL_MspInit+0x4c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a0f      	ldr	r2, [pc, #60]	; (80015e8 <HAL_MspInit+0x4c>)
 80015ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b0d      	ldr	r3, [pc, #52]	; (80015e8 <HAL_MspInit+0x4c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a08      	ldr	r2, [pc, #32]	; (80015e8 <HAL_MspInit+0x4c>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_MspInit+0x4c>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	40023800 	.word	0x40023800

080015ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	; 0x28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a24      	ldr	r2, [pc, #144]	; (800169c <HAL_ADC_MspInit+0xb0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d141      	bne.n	8001692 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	4a22      	ldr	r2, [pc, #136]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6453      	str	r3, [r2, #68]	; 0x44
 800161e:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a1b      	ldr	r2, [pc, #108]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a14      	ldr	r2, [pc, #80]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_ADC_MspInit+0xb4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001662:	2302      	movs	r3, #2
 8001664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001666:	2303      	movs	r3, #3
 8001668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <HAL_ADC_MspInit+0xb8>)
 8001676:	f000 fd67 	bl	8002148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800167a:	2302      	movs	r3, #2
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800167e:	2303      	movs	r3, #3
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	4806      	ldr	r0, [pc, #24]	; (80016a8 <HAL_ADC_MspInit+0xbc>)
 800168e:	f000 fd5b 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40012000 	.word	0x40012000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000

080016ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_UART_MspInit+0x8c>)
 8001722:	f000 fd11 	bl	8002148 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000

0800173c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001750:	4b1c      	ldr	r3, [pc, #112]	; (80017c4 <HAL_FSMC_MspInit+0x88>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d131      	bne.n	80017bc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001758:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_FSMC_MspInit+0x88>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	603b      	str	r3, [r7, #0]
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_FSMC_MspInit+0x8c>)
 8001764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001766:	4a18      	ldr	r2, [pc, #96]	; (80017c8 <HAL_FSMC_MspInit+0x8c>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6393      	str	r3, [r2, #56]	; 0x38
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <HAL_FSMC_MspInit+0x8c>)
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800177a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800177e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800178c:	230c      	movs	r3, #12
 800178e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <HAL_FSMC_MspInit+0x90>)
 8001796:	f000 fcd7 	bl	8002148 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800179a:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 800179e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80017ac:	230c      	movs	r3, #12
 80017ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4806      	ldr	r0, [pc, #24]	; (80017d0 <HAL_FSMC_MspInit+0x94>)
 80017b6:	f000 fcc7 	bl	8002148 <HAL_GPIO_Init>
 80017ba:	e000      	b.n	80017be <HAL_FSMC_MspInit+0x82>
    return;
 80017bc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200001fc 	.word	0x200001fc
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80017dc:	f7ff ffae 	bl	800173c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <NMI_Handler+0x4>

080017ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <HardFault_Handler+0x4>

080017f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <MemManage_Handler+0x4>

080017fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <UsageFault_Handler+0x4>

08001806 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001834:	f000 f8d0 	bl	80019d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}

0800183c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <OTG_FS_IRQHandler+0x10>)
 8001842:	f001 f8a1 	bl	8002988 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000061c 	.word	0x2000061c

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f007 f8d4 	bl	8008a2c <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20020000 	.word	0x20020000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	20000200 	.word	0x20000200
 80018b8:	20000930 	.word	0x20000930

080018bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <SystemInit+0x20>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <SystemInit+0x20>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001918 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018e6:	490e      	ldr	r1, [pc, #56]	; (8001920 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018e8:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018fc:	4c0b      	ldr	r4, [pc, #44]	; (800192c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800190a:	f7ff ffd7 	bl	80018bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800190e:	f007 f893 	bl	8008a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001912:	f7ff fa83 	bl	8000e1c <main>
  bx  lr    
 8001916:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800191c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001920:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001924:	0802ed44 	.word	0x0802ed44
  ldr r2, =_sbss
 8001928:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800192c:	20000930 	.word	0x20000930

08001930 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001930:	e7fe      	b.n	8001930 <ADC_IRQHandler>
	...

08001934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_Init+0x40>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a0d      	ldr	r2, [pc, #52]	; (8001974 <HAL_Init+0x40>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001942:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001944:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <HAL_Init+0x40>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_Init+0x40>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 fbb1 	bl	80020c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	200f      	movs	r0, #15
 8001964:	f000 f808 	bl	8001978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fe18 	bl	800159c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023c00 	.word	0x40023c00

08001978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001980:	4b12      	ldr	r3, [pc, #72]	; (80019cc <HAL_InitTick+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_InitTick+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001992:	fbb2 f3f3 	udiv	r3, r2, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f000 fbc9 	bl	800212e <HAL_SYSTICK_Config>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00e      	b.n	80019c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b0f      	cmp	r3, #15
 80019aa:	d80a      	bhi.n	80019c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ac:	2200      	movs	r2, #0
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f000 fb91 	bl	80020da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019b8:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <HAL_InitTick+0x5c>)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20000010 	.word	0x20000010
 80019d4:	2000000c 	.word	0x2000000c

080019d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_IncTick+0x20>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_IncTick+0x24>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	4a04      	ldr	r2, [pc, #16]	; (80019fc <HAL_IncTick+0x24>)
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	20000010 	.word	0x20000010
 80019fc:	20000204 	.word	0x20000204

08001a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return uwTick;
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_GetTick+0x14>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	20000204 	.word	0x20000204

08001a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a20:	f7ff ffee 	bl	8001a00 <HAL_GetTick>
 8001a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a30:	d005      	beq.n	8001a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <HAL_Delay+0x44>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a3e:	bf00      	nop
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d8f7      	bhi.n	8001a40 <HAL_Delay+0x28>
  {
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000010 	.word	0x20000010

08001a60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e033      	b.n	8001ade <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fdb4 	bl	80015ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aa6:	f023 0302 	bic.w	r3, r3, #2
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f93a 	bl	8001d2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	f043 0201 	orr.w	r2, r3, #1
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
 8001ace:	e001      	b.n	8001ad4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_ConfigChannel+0x1c>
 8001b00:	2302      	movs	r3, #2
 8001b02:	e105      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x228>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d925      	bls.n	8001b60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	68d9      	ldr	r1, [r3, #12]
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	3b1e      	subs	r3, #30
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43da      	mvns	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	400a      	ands	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68d9      	ldr	r1, [r3, #12]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4403      	add	r3, r0
 8001b52:	3b1e      	subs	r3, #30
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	e022      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6919      	ldr	r1, [r3, #16]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	2207      	movs	r2, #7
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	400a      	ands	r2, r1
 8001b82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	4603      	mov	r3, r0
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4403      	add	r3, r0
 8001b9c:	409a      	lsls	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d824      	bhi.n	8001bf8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b05      	subs	r3, #5
 8001bc0:	221f      	movs	r2, #31
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	3b05      	subs	r3, #5
 8001bea:	fa00 f203 	lsl.w	r2, r0, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf6:	e04c      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d824      	bhi.n	8001c4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	3b23      	subs	r3, #35	; 0x23
 8001c12:	221f      	movs	r2, #31
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43da      	mvns	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	400a      	ands	r2, r1
 8001c20:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	3b23      	subs	r3, #35	; 0x23
 8001c3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	430a      	orrs	r2, r1
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
 8001c48:	e023      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b41      	subs	r3, #65	; 0x41
 8001c5c:	221f      	movs	r2, #31
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	3b41      	subs	r3, #65	; 0x41
 8001c86:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_ADC_ConfigChannel+0x234>)
 8001c94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_ADC_ConfigChannel+0x238>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d109      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1cc>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b12      	cmp	r3, #18
 8001ca6:	d105      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_ADC_ConfigChannel+0x238>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d123      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b10      	cmp	r3, #16
 8001cc4:	d003      	beq.n	8001cce <HAL_ADC_ConfigChannel+0x1e6>
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b11      	cmp	r3, #17
 8001ccc:	d11b      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d111      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_ADC_ConfigChannel+0x23c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_ADC_ConfigChannel+0x240>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9a      	lsrs	r2, r3, #18
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf8:	e002      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f9      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	40012300 	.word	0x40012300
 8001d20:	40012000 	.word	0x40012000
 8001d24:	20000008 	.word	0x20000008
 8001d28:	431bde83 	.word	0x431bde83

08001d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d34:	4b79      	ldr	r3, [pc, #484]	; (8001f1c <ADC_Init+0x1f0>)
 8001d36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	021a      	lsls	r2, r3, #8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6899      	ldr	r1, [r3, #8]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	4a58      	ldr	r2, [pc, #352]	; (8001f20 <ADC_Init+0x1f4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d022      	beq.n	8001e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6899      	ldr	r1, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	e00f      	b.n	8001e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0202 	bic.w	r2, r2, #2
 8001e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6899      	ldr	r1, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	7e1b      	ldrb	r3, [r3, #24]
 8001e44:	005a      	lsls	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01b      	beq.n	8001e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6859      	ldr	r1, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	3b01      	subs	r3, #1
 8001e84:	035a      	lsls	r2, r3, #13
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	e007      	b.n	8001ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	051a      	lsls	r2, r3, #20
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	6899      	ldr	r1, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ee2:	025a      	lsls	r2, r3, #9
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	029a      	lsls	r2, r3, #10
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	bf00      	nop
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40012300 	.word	0x40012300
 8001f20:	0f000001 	.word	0x0f000001

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4907      	ldr	r1, [pc, #28]	; (8001fc0 <__NVIC_EnableIRQ+0x38>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	e000e100 	.word	0xe000e100

08001fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	6039      	str	r1, [r7, #0]
 8001fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	db0a      	blt.n	8001fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	490c      	ldr	r1, [pc, #48]	; (8002010 <__NVIC_SetPriority+0x4c>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	0112      	lsls	r2, r2, #4
 8001fe4:	b2d2      	uxtb	r2, r2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fec:	e00a      	b.n	8002004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <__NVIC_SetPriority+0x50>)
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	3b04      	subs	r3, #4
 8001ffc:	0112      	lsls	r2, r2, #4
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	440b      	add	r3, r1
 8002002:	761a      	strb	r2, [r3, #24]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr
 8002010:	e000e100 	.word	0xe000e100
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002018:	b480      	push	{r7}
 800201a:	b089      	sub	sp, #36	; 0x24
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f1c3 0307 	rsb	r3, r3, #7
 8002032:	2b04      	cmp	r3, #4
 8002034:	bf28      	it	cs
 8002036:	2304      	movcs	r3, #4
 8002038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3304      	adds	r3, #4
 800203e:	2b06      	cmp	r3, #6
 8002040:	d902      	bls.n	8002048 <NVIC_EncodePriority+0x30>
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3b03      	subs	r3, #3
 8002046:	e000      	b.n	800204a <NVIC_EncodePriority+0x32>
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43da      	mvns	r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	401a      	ands	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002060:	f04f 31ff 	mov.w	r1, #4294967295
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	43d9      	mvns	r1, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002070:	4313      	orrs	r3, r2
         );
}
 8002072:	4618      	mov	r0, r3
 8002074:	3724      	adds	r7, #36	; 0x24
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002090:	d301      	bcc.n	8002096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002092:	2301      	movs	r3, #1
 8002094:	e00f      	b.n	80020b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <SysTick_Config+0x40>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3b01      	subs	r3, #1
 800209c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209e:	210f      	movs	r1, #15
 80020a0:	f04f 30ff 	mov.w	r0, #4294967295
 80020a4:	f7ff ff8e 	bl	8001fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <SysTick_Config+0x40>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ae:	4b04      	ldr	r3, [pc, #16]	; (80020c0 <SysTick_Config+0x40>)
 80020b0:	2207      	movs	r2, #7
 80020b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	e000e010 	.word	0xe000e010

080020c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7ff ff29 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020da:	b580      	push	{r7, lr}
 80020dc:	b086      	sub	sp, #24
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ec:	f7ff ff3e 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68b9      	ldr	r1, [r7, #8]
 80020f6:	6978      	ldr	r0, [r7, #20]
 80020f8:	f7ff ff8e 	bl	8002018 <NVIC_EncodePriority>
 80020fc:	4602      	mov	r2, r0
 80020fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff5d 	bl	8001fc4 <__NVIC_SetPriority>
}
 800210a:	bf00      	nop
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff ff31 	bl	8001f88 <__NVIC_EnableIRQ>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7ff ffa2 	bl	8002080 <SysTick_Config>
 800213c:	4603      	mov	r3, r0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002148:	b480      	push	{r7}
 800214a:	b089      	sub	sp, #36	; 0x24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
 8002162:	e16b      	b.n	800243c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002164:	2201      	movs	r2, #1
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	f040 815a 	bne.w	8002436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b01      	cmp	r3, #1
 800218c:	d005      	beq.n	800219a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002196:	2b02      	cmp	r3, #2
 8002198:	d130      	bne.n	80021fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021d0:	2201      	movs	r2, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 0201 	and.w	r2, r3, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 0303 	and.w	r3, r3, #3
 8002204:	2b03      	cmp	r3, #3
 8002206:	d017      	beq.n	8002238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	2203      	movs	r2, #3
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d123      	bne.n	800228c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	220f      	movs	r2, #15
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	08da      	lsrs	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	69b9      	ldr	r1, [r7, #24]
 8002288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0203 	and.w	r2, r3, #3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80b4 	beq.w	8002436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b60      	ldr	r3, [pc, #384]	; (8002454 <HAL_GPIO_Init+0x30c>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a5f      	ldr	r2, [pc, #380]	; (8002454 <HAL_GPIO_Init+0x30c>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <HAL_GPIO_Init+0x30c>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ea:	4a5b      	ldr	r2, [pc, #364]	; (8002458 <HAL_GPIO_Init+0x310>)
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	3302      	adds	r3, #2
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0303 	and.w	r3, r3, #3
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	220f      	movs	r2, #15
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	4013      	ands	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_GPIO_Init+0x314>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d02b      	beq.n	800236e <HAL_GPIO_Init+0x226>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a51      	ldr	r2, [pc, #324]	; (8002460 <HAL_GPIO_Init+0x318>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d025      	beq.n	800236a <HAL_GPIO_Init+0x222>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a50      	ldr	r2, [pc, #320]	; (8002464 <HAL_GPIO_Init+0x31c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x21e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x320>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x21a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_GPIO_Init+0x324>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x216>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_GPIO_Init+0x328>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x212>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_GPIO_Init+0x32c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_GPIO_Init+0x330>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x20a>
 800234e:	2307      	movs	r3, #7
 8002350:	e00e      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002352:	2308      	movs	r3, #8
 8002354:	e00c      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002356:	2306      	movs	r3, #6
 8002358:	e00a      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800235a:	2305      	movs	r3, #5
 800235c:	e008      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800235e:	2304      	movs	r3, #4
 8002360:	e006      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002362:	2303      	movs	r3, #3
 8002364:	e004      	b.n	8002370 <HAL_GPIO_Init+0x228>
 8002366:	2302      	movs	r3, #2
 8002368:	e002      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x228>
 800236e:	2300      	movs	r3, #0
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	f002 0203 	and.w	r2, r2, #3
 8002376:	0092      	lsls	r2, r2, #2
 8002378:	4093      	lsls	r3, r2
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002380:	4935      	ldr	r1, [pc, #212]	; (8002458 <HAL_GPIO_Init+0x310>)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_GPIO_Init+0x334>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b2:	4a32      	ldr	r2, [pc, #200]	; (800247c <HAL_GPIO_Init+0x334>)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b8:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_GPIO_Init+0x334>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023dc:	4a27      	ldr	r2, [pc, #156]	; (800247c <HAL_GPIO_Init+0x334>)
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_GPIO_Init+0x334>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002406:	4a1d      	ldr	r2, [pc, #116]	; (800247c <HAL_GPIO_Init+0x334>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_GPIO_Init+0x334>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002430:	4a12      	ldr	r2, [pc, #72]	; (800247c <HAL_GPIO_Init+0x334>)
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	3301      	adds	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	f67f ae90 	bls.w	8002164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40023800 	.word	0x40023800
 8002458:	40013800 	.word	0x40013800
 800245c:	40020000 	.word	0x40020000
 8002460:	40020400 	.word	0x40020400
 8002464:	40020800 	.word	0x40020800
 8002468:	40020c00 	.word	0x40020c00
 800246c:	40021000 	.word	0x40021000
 8002470:	40021400 	.word	0x40021400
 8002474:	40021800 	.word	0x40021800
 8002478:	40021c00 	.word	0x40021c00
 800247c:	40013c00 	.word	0x40013c00

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800249c:	e003      	b.n	80024a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	041a      	lsls	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	619a      	str	r2, [r3, #24]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80024b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b4:	b08f      	sub	sp, #60	; 0x3c
 80024b6:	af0a      	add	r7, sp, #40	; 0x28
 80024b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e054      	b.n	800256e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f006 f82e 	bl	8008540 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2203      	movs	r2, #3
 80024e8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d102      	bne.n	80024fe <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f002 fdcc 	bl	80050a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	687e      	ldr	r6, [r7, #4]
 8002510:	466d      	mov	r5, sp
 8002512:	f106 0410 	add.w	r4, r6, #16
 8002516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800251c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800251e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002522:	e885 0003 	stmia.w	r5, {r0, r1}
 8002526:	1d33      	adds	r3, r6, #4
 8002528:	cb0e      	ldmia	r3, {r1, r2, r3}
 800252a:	6838      	ldr	r0, [r7, #0]
 800252c:	f002 fd46 	bl	8004fbc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fdc3 	bl	80050c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	687e      	ldr	r6, [r7, #4]
 8002544:	466d      	mov	r5, sp
 8002546:	f106 0410 	add.w	r4, r6, #16
 800254a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002556:	e885 0003 	stmia.w	r5, {r0, r1}
 800255a:	1d33      	adds	r3, r6, #4
 800255c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800255e:	6838      	ldr	r0, [r7, #0]
 8002560:	f002 ff4c 	bl	80053fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002576 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002576:	b590      	push	{r4, r7, lr}
 8002578:	b089      	sub	sp, #36	; 0x24
 800257a:	af04      	add	r7, sp, #16
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	4608      	mov	r0, r1
 8002580:	4611      	mov	r1, r2
 8002582:	461a      	mov	r2, r3
 8002584:	4603      	mov	r3, r0
 8002586:	70fb      	strb	r3, [r7, #3]
 8002588:	460b      	mov	r3, r1
 800258a:	70bb      	strb	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002596:	2b01      	cmp	r3, #1
 8002598:	d101      	bne.n	800259e <HAL_HCD_HC_Init+0x28>
 800259a:	2302      	movs	r3, #2
 800259c:	e076      	b.n	800268c <HAL_HCD_HC_Init+0x116>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	333d      	adds	r3, #61	; 0x3d
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3338      	adds	r3, #56	; 0x38
 80025c6:	787a      	ldrb	r2, [r7, #1]
 80025c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3340      	adds	r3, #64	; 0x40
 80025d8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80025da:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3339      	adds	r3, #57	; 0x39
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	333f      	adds	r3, #63	; 0x3f
 80025fc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	78ba      	ldrb	r2, [r7, #2]
 8002606:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800260a:	b2d0      	uxtb	r0, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	212c      	movs	r1, #44	; 0x2c
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	4413      	add	r3, r2
 8002616:	333a      	adds	r3, #58	; 0x3a
 8002618:	4602      	mov	r2, r0
 800261a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800261c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da09      	bge.n	8002638 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002624:	78fb      	ldrb	r3, [r7, #3]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	212c      	movs	r1, #44	; 0x2c
 800262a:	fb01 f303 	mul.w	r3, r1, r3
 800262e:	4413      	add	r3, r2
 8002630:	333b      	adds	r3, #59	; 0x3b
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e008      	b.n	800264a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	212c      	movs	r1, #44	; 0x2c
 800263e:	fb01 f303 	mul.w	r3, r1, r3
 8002642:	4413      	add	r3, r2
 8002644:	333b      	adds	r3, #59	; 0x3b
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800264a:	78fb      	ldrb	r3, [r7, #3]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	212c      	movs	r1, #44	; 0x2c
 8002650:	fb01 f303 	mul.w	r3, r1, r3
 8002654:	4413      	add	r3, r2
 8002656:	333c      	adds	r3, #60	; 0x3c
 8002658:	f897 2020 	ldrb.w	r2, [r7, #32]
 800265c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	787c      	ldrb	r4, [r7, #1]
 8002664:	78ba      	ldrb	r2, [r7, #2]
 8002666:	78f9      	ldrb	r1, [r7, #3]
 8002668:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	4623      	mov	r3, r4
 800267a:	f003 f845 	bl	8005708 <USB_HC_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}

08002694 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_HCD_HC_Halt+0x1e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e00f      	b.n	80026d2 <HAL_HCD_HC_Halt+0x3e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f003 fa95 	bl	8005bf2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	4608      	mov	r0, r1
 80026e6:	4611      	mov	r1, r2
 80026e8:	461a      	mov	r2, r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	70fb      	strb	r3, [r7, #3]
 80026ee:	460b      	mov	r3, r1
 80026f0:	70bb      	strb	r3, [r7, #2]
 80026f2:	4613      	mov	r3, r2
 80026f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	333b      	adds	r3, #59	; 0x3b
 8002704:	78ba      	ldrb	r2, [r7, #2]
 8002706:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	212c      	movs	r1, #44	; 0x2c
 800270e:	fb01 f303 	mul.w	r3, r1, r3
 8002712:	4413      	add	r3, r2
 8002714:	333f      	adds	r3, #63	; 0x3f
 8002716:	787a      	ldrb	r2, [r7, #1]
 8002718:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800271a:	7c3b      	ldrb	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d112      	bne.n	8002746 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3342      	adds	r3, #66	; 0x42
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	333d      	adds	r3, #61	; 0x3d
 8002740:	7f3a      	ldrb	r2, [r7, #28]
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e008      	b.n	8002758 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3342      	adds	r3, #66	; 0x42
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002758:	787b      	ldrb	r3, [r7, #1]
 800275a:	2b03      	cmp	r3, #3
 800275c:	f200 80c6 	bhi.w	80028ec <HAL_HCD_HC_SubmitRequest+0x210>
 8002760:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002766:	bf00      	nop
 8002768:	08002779 	.word	0x08002779
 800276c:	080028d9 	.word	0x080028d9
 8002770:	080027dd 	.word	0x080027dd
 8002774:	0800285b 	.word	0x0800285b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002778:	7c3b      	ldrb	r3, [r7, #16]
 800277a:	2b01      	cmp	r3, #1
 800277c:	f040 80b8 	bne.w	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002780:	78bb      	ldrb	r3, [r7, #2]
 8002782:	2b00      	cmp	r3, #0
 8002784:	f040 80b4 	bne.w	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002788:	8b3b      	ldrh	r3, [r7, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d108      	bne.n	80027a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3355      	adds	r3, #85	; 0x55
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	3355      	adds	r3, #85	; 0x55
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3342      	adds	r3, #66	; 0x42
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80027c6:	e093      	b.n	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027c8:	78fb      	ldrb	r3, [r7, #3]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	3342      	adds	r3, #66	; 0x42
 80027d6:	2202      	movs	r2, #2
 80027d8:	701a      	strb	r2, [r3, #0]
      break;
 80027da:	e089      	b.n	80028f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027dc:	78bb      	ldrb	r3, [r7, #2]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11d      	bne.n	800281e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	212c      	movs	r1, #44	; 0x2c
 80027e8:	fb01 f303 	mul.w	r3, r1, r3
 80027ec:	4413      	add	r3, r2
 80027ee:	3355      	adds	r3, #85	; 0x55
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f6:	78fb      	ldrb	r3, [r7, #3]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	3342      	adds	r3, #66	; 0x42
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002808:	e073      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800280a:	78fb      	ldrb	r3, [r7, #3]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3342      	adds	r3, #66	; 0x42
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]
      break;
 800281c:	e069      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281e:	78fb      	ldrb	r3, [r7, #3]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3354      	adds	r3, #84	; 0x54
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3342      	adds	r3, #66	; 0x42
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
      break;
 8002844:	e055      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	3342      	adds	r3, #66	; 0x42
 8002854:	2202      	movs	r2, #2
 8002856:	701a      	strb	r2, [r3, #0]
      break;
 8002858:	e04b      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800285a:	78bb      	ldrb	r3, [r7, #2]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11d      	bne.n	800289c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3355      	adds	r3, #85	; 0x55
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d109      	bne.n	8002888 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002874:	78fb      	ldrb	r3, [r7, #3]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3342      	adds	r3, #66	; 0x42
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002886:	e034      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3342      	adds	r3, #66	; 0x42
 8002896:	2202      	movs	r2, #2
 8002898:	701a      	strb	r2, [r3, #0]
      break;
 800289a:	e02a      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	212c      	movs	r1, #44	; 0x2c
 80028a2:	fb01 f303 	mul.w	r3, r1, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	3354      	adds	r3, #84	; 0x54
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	212c      	movs	r1, #44	; 0x2c
 80028b6:	fb01 f303 	mul.w	r3, r1, r3
 80028ba:	4413      	add	r3, r2
 80028bc:	3342      	adds	r3, #66	; 0x42
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
      break;
 80028c2:	e016      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	212c      	movs	r1, #44	; 0x2c
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	4413      	add	r3, r2
 80028d0:	3342      	adds	r3, #66	; 0x42
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
      break;
 80028d6:	e00c      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	3342      	adds	r3, #66	; 0x42
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
      break;
 80028ea:	e002      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80028ec:	bf00      	nop
 80028ee:	e000      	b.n	80028f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80028f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	212c      	movs	r1, #44	; 0x2c
 80028f8:	fb01 f303 	mul.w	r3, r1, r3
 80028fc:	4413      	add	r3, r2
 80028fe:	3344      	adds	r3, #68	; 0x44
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	8b3a      	ldrh	r2, [r7, #24]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	202c      	movs	r0, #44	; 0x2c
 800290c:	fb00 f303 	mul.w	r3, r0, r3
 8002910:	440b      	add	r3, r1
 8002912:	334c      	adds	r3, #76	; 0x4c
 8002914:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002916:	78fb      	ldrb	r3, [r7, #3]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	212c      	movs	r1, #44	; 0x2c
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	3360      	adds	r3, #96	; 0x60
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	212c      	movs	r1, #44	; 0x2c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3339      	adds	r3, #57	; 0x39
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	2200      	movs	r2, #0
 800295c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	78fb      	ldrb	r3, [r7, #3]
 8002964:	222c      	movs	r2, #44	; 0x2c
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	3338      	adds	r3, #56	; 0x38
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	18d1      	adds	r1, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	f002 ffe8 	bl	800594c <USB_HC_StartXfer>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop

08002988 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f002 fce9 	bl	8005376 <USB_GetMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	f040 80f6 	bne.w	8002b98 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f002 fccd 	bl	8005350 <USB_ReadInterrupts>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80ec 	beq.w	8002b96 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fcc4 	bl	8005350 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d2:	d104      	bne.n	80029de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fcb4 	bl	8005350 <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fca4 	bl	8005350 <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a12:	d104      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f002 fc94 	bl	8005350 <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d103      	bne.n	8002a3a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2202      	movs	r2, #2
 8002a38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fc86 	bl	8005350 <USB_ReadInterrupts>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4e:	d11c      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002a58:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a6a:	2110      	movs	r1, #16
 8002a6c:	6938      	ldr	r0, [r7, #16]
 8002a6e:	f002 fb75 	bl	800515c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a72:	6938      	ldr	r0, [r7, #16]
 8002a74:	f002 fba6 	bl	80051c4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f002 fd7c 	bl	800557c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f005 fdcb 	bl	8008620 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f002 fc5e 	bl	8005350 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9e:	d102      	bne.n	8002aa6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f001 f89e 	bl	8003be2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f002 fc50 	bl	8005350 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b08      	cmp	r3, #8
 8002ab8:	d106      	bne.n	8002ac8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f005 fd94 	bl	80085e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f002 fc3f 	bl	8005350 <USB_ReadInterrupts>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b10      	cmp	r3, #16
 8002ada:	d101      	bne.n	8002ae0 <HAL_HCD_IRQHandler+0x158>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_HCD_IRQHandler+0x15a>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d012      	beq.n	8002b0c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699a      	ldr	r2, [r3, #24]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0210 	bic.w	r2, r2, #16
 8002af4:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 ffa1 	bl	8003a3e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	699a      	ldr	r2, [r3, #24]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0210 	orr.w	r2, r2, #16
 8002b0a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 fc1d 	bl	8005350 <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b20:	d13a      	bne.n	8002b98 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f003 f852 	bl	8005bd0 <USB_HC_ReadInterrupt>
 8002b2c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	e025      	b.n	8002b80 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d018      	beq.n	8002b7a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5e:	d106      	bne.n	8002b6e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f8ab 	bl	8002cc2 <HCD_HC_IN_IRQHandler>
 8002b6c:	e005      	b.n	8002b7a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fbf9 	bl	800336c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3d4      	bcc.n	8002b34 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	e000      	b.n	8002b98 <HAL_HCD_IRQHandler+0x210>
      return;
 8002b96:	bf00      	nop
    }
  }
}
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_HCD_Start+0x16>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e013      	b.n	8002bdc <HAL_HCD_Start+0x3e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f002 fd3e 	bl	8005644 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f002 fa56 	bl	800507e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d101      	bne.n	8002bfa <HAL_HCD_Stop+0x16>
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	e00d      	b.n	8002c16 <HAL_HCD_Stop+0x32>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 f92c 	bl	8005e64 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fce0 	bl	80055f0 <USB_ResetPort>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	460b      	mov	r3, r1
 8002c44:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3360      	adds	r3, #96	; 0x60
 8002c54:	781b      	ldrb	r3, [r3, #0]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3350      	adds	r3, #80	; 0x50
 8002c7c:	681b      	ldr	r3, [r3, #0]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 fd24 	bl	80056e4 <USB_GetCurrentFrame>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fcff 	bl	80056b6 <USB_GetHostSpeed>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d11a      	bne.n	8002d28 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	015a      	lsls	r2, r3, #5
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2304      	movs	r3, #4
 8002d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3361      	adds	r3, #97	; 0x61
 8002d12:	2206      	movs	r2, #6
 8002d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	4611      	mov	r1, r2
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 ff66 	bl	8005bf2 <USB_HC_Halt>
 8002d26:	e0af      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3e:	d11b      	bne.n	8002d78 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3361      	adds	r3, #97	; 0x61
 8002d62:	2207      	movs	r2, #7
 8002d64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f002 ff3e 	bl	8005bf2 <USB_HC_Halt>
 8002d76:	e087      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	015a      	lsls	r2, r3, #5
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4413      	add	r3, r2
 8002d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0320 	and.w	r3, r3, #32
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d109      	bne.n	8002da2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	6093      	str	r3, [r2, #8]
 8002da0:	e072      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d11a      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2308      	movs	r3, #8
 8002dc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3361      	adds	r3, #97	; 0x61
 8002dd8:	2205      	movs	r2, #5
 8002dda:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 ff03 	bl	8005bf2 <USB_HC_Halt>
 8002dec:	e04c      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d11b      	bne.n	8002e3e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e12:	461a      	mov	r2, r3
 8002e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3361      	adds	r3, #97	; 0x61
 8002e28:	2208      	movs	r2, #8
 8002e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 fedb 	bl	8005bf2 <USB_HC_Halt>
 8002e3c:	e024      	b.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d119      	bne.n	8002e88 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	461a      	mov	r2, r3
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	212c      	movs	r1, #44	; 0x2c
 8002e6c:	fb01 f303 	mul.w	r3, r1, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	3361      	adds	r3, #97	; 0x61
 8002e74:	2206      	movs	r2, #6
 8002e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f002 feb5 	bl	8005bf2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9e:	d112      	bne.n	8002ec6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fea1 	bl	8005bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ec4:	e24e      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	f040 80df 	bne.w	800309c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d019      	beq.n	8002f1a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3348      	adds	r3, #72	; 0x48
 8002ef4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	0159      	lsls	r1, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	440b      	add	r3, r1
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f08:	1ad2      	subs	r2, r2, r3
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	202c      	movs	r0, #44	; 0x2c
 8002f10:	fb00 f303 	mul.w	r3, r0, r3
 8002f14:	440b      	add	r3, r1
 8002f16:	3350      	adds	r3, #80	; 0x50
 8002f18:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	212c      	movs	r1, #44	; 0x2c
 8002f20:	fb01 f303 	mul.w	r3, r1, r3
 8002f24:	4413      	add	r3, r2
 8002f26:	3361      	adds	r3, #97	; 0x61
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	335c      	adds	r3, #92	; 0x5c
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	333f      	adds	r3, #63	; 0x3f
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d009      	beq.n	8002f78 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	212c      	movs	r1, #44	; 0x2c
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	333f      	adds	r3, #63	; 0x3f
 8002f72:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d111      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	b2d2      	uxtb	r2, r2
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f002 fe35 	bl	8005bf2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f94:	461a      	mov	r2, r3
 8002f96:	2310      	movs	r3, #16
 8002f98:	6093      	str	r3, [r2, #8]
 8002f9a:	e03a      	b.n	8003012 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	212c      	movs	r1, #44	; 0x2c
 8002fa2:	fb01 f303 	mul.w	r3, r1, r3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	333f      	adds	r3, #63	; 0x3f
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d009      	beq.n	8002fc4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	212c      	movs	r1, #44	; 0x2c
 8002fb6:	fb01 f303 	mul.w	r3, r1, r3
 8002fba:	4413      	add	r3, r2
 8002fbc:	333f      	adds	r3, #63	; 0x3f
 8002fbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d126      	bne.n	8003012 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fe2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3360      	adds	r3, #96	; 0x60
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	b2d9      	uxtb	r1, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	202c      	movs	r0, #44	; 0x2c
 8003000:	fb00 f303 	mul.w	r3, r0, r3
 8003004:	4413      	add	r3, r2
 8003006:	3360      	adds	r3, #96	; 0x60
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f005 fb15 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12b      	bne.n	8003072 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	3348      	adds	r3, #72	; 0x48
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	202c      	movs	r0, #44	; 0x2c
 8003030:	fb00 f202 	mul.w	r2, r0, r2
 8003034:	440a      	add	r2, r1
 8003036:	3240      	adds	r2, #64	; 0x40
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	fbb3 f3f2 	udiv	r3, r3, r2
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 818e 	beq.w	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3354      	adds	r3, #84	; 0x54
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	f083 0301 	eor.w	r3, r3, #1
 800305c:	b2d8      	uxtb	r0, r3
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	212c      	movs	r1, #44	; 0x2c
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	4413      	add	r3, r2
 800306a:	3354      	adds	r3, #84	; 0x54
 800306c:	4602      	mov	r2, r0
 800306e:	701a      	strb	r2, [r3, #0]
}
 8003070:	e178      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	212c      	movs	r1, #44	; 0x2c
 8003078:	fb01 f303 	mul.w	r3, r1, r3
 800307c:	4413      	add	r3, r2
 800307e:	3354      	adds	r3, #84	; 0x54
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2d8      	uxtb	r0, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	3354      	adds	r3, #84	; 0x54
 8003096:	4602      	mov	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	e163      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	f040 80f6 	bne.w	80032a0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	212c      	movs	r1, #44	; 0x2c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4413      	add	r3, r2
 80030c0:	3361      	adds	r3, #97	; 0x61
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d109      	bne.n	80030dc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	3360      	adds	r3, #96	; 0x60
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
 80030da:	e0c9      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3361      	adds	r3, #97	; 0x61
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d109      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3360      	adds	r3, #96	; 0x60
 80030fe:	2205      	movs	r2, #5
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e0b5      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3361      	adds	r3, #97	; 0x61
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b06      	cmp	r3, #6
 8003116:	d009      	beq.n	800312c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	3361      	adds	r3, #97	; 0x61
 8003126:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003128:	2b08      	cmp	r3, #8
 800312a:	d150      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	212c      	movs	r1, #44	; 0x2c
 8003132:	fb01 f303 	mul.w	r3, r1, r3
 8003136:	4413      	add	r3, r2
 8003138:	335c      	adds	r3, #92	; 0x5c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	202c      	movs	r0, #44	; 0x2c
 8003144:	fb00 f303 	mul.w	r3, r0, r3
 8003148:	440b      	add	r3, r1
 800314a:	335c      	adds	r3, #92	; 0x5c
 800314c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	335c      	adds	r3, #92	; 0x5c
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d912      	bls.n	8003188 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	212c      	movs	r1, #44	; 0x2c
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	4413      	add	r3, r2
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	3360      	adds	r3, #96	; 0x60
 8003182:	2204      	movs	r2, #4
 8003184:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003186:	e073      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	212c      	movs	r1, #44	; 0x2c
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	3360      	adds	r3, #96	; 0x60
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80031b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80031b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80031cc:	e050      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3361      	adds	r3, #97	; 0x61
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b03      	cmp	r3, #3
 80031e0:	d122      	bne.n	8003228 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	212c      	movs	r1, #44	; 0x2c
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	2202      	movs	r2, #2
 80031f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800320a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003212:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003220:	461a      	mov	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e023      	b.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3361      	adds	r3, #97	; 0x61
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b07      	cmp	r3, #7
 800323a:	d119      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	212c      	movs	r1, #44	; 0x2c
 8003242:	fb01 f303 	mul.w	r3, r1, r3
 8003246:	4413      	add	r3, r2
 8003248:	335c      	adds	r3, #92	; 0x5c
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	202c      	movs	r0, #44	; 0x2c
 8003254:	fb00 f303 	mul.w	r3, r0, r3
 8003258:	440b      	add	r3, r1
 800325a:	335c      	adds	r3, #92	; 0x5c
 800325c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	3360      	adds	r3, #96	; 0x60
 800326c:	2204      	movs	r2, #4
 800326e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	2302      	movs	r3, #2
 8003280:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	b2d9      	uxtb	r1, r3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	202c      	movs	r0, #44	; 0x2c
 800328c:	fb00 f303 	mul.w	r3, r0, r3
 8003290:	4413      	add	r3, r2
 8003292:	3360      	adds	r3, #96	; 0x60
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f005 f9cf 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800329e:	e061      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d156      	bne.n	8003364 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	333f      	adds	r3, #63	; 0x3f
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d111      	bne.n	80032ee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	335c      	adds	r3, #92	; 0x5c
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	4611      	mov	r1, r2
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 fc83 	bl	8005bf2 <USB_HC_Halt>
 80032ec:	e031      	b.n	8003352 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	212c      	movs	r1, #44	; 0x2c
 80032f4:	fb01 f303 	mul.w	r3, r1, r3
 80032f8:	4413      	add	r3, r2
 80032fa:	333f      	adds	r3, #63	; 0x3f
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	333f      	adds	r3, #63	; 0x3f
 8003310:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003312:	2b02      	cmp	r3, #2
 8003314:	d11d      	bne.n	8003352 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	212c      	movs	r1, #44	; 0x2c
 800331c:	fb01 f303 	mul.w	r3, r1, r3
 8003320:	4413      	add	r3, r2
 8003322:	335c      	adds	r3, #92	; 0x5c
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d110      	bne.n	8003352 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3361      	adds	r3, #97	; 0x61
 800333e:	2203      	movs	r2, #3
 8003340:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f002 fc50 	bl	8005bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	461a      	mov	r2, r3
 8003360:	2310      	movs	r3, #16
 8003362:	6093      	str	r3, [r2, #8]
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003382:	78fb      	ldrb	r3, [r7, #3]
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	4413      	add	r3, r2
 800338e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b04      	cmp	r3, #4
 800339a:	d11a      	bne.n	80033d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a8:	461a      	mov	r2, r3
 80033aa:	2304      	movs	r3, #4
 80033ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	212c      	movs	r1, #44	; 0x2c
 80033b4:	fb01 f303 	mul.w	r3, r1, r3
 80033b8:	4413      	add	r3, r2
 80033ba:	3361      	adds	r3, #97	; 0x61
 80033bc:	2206      	movs	r2, #6
 80033be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f002 fc11 	bl	8005bf2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80033d0:	e331      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d12e      	bne.n	8003446 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2320      	movs	r3, #32
 80033f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	212c      	movs	r1, #44	; 0x2c
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	4413      	add	r3, r2
 8003406:	333d      	adds	r3, #61	; 0x3d
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b01      	cmp	r3, #1
 800340c:	f040 8313 	bne.w	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	212c      	movs	r1, #44	; 0x2c
 8003416:	fb01 f303 	mul.w	r3, r1, r3
 800341a:	4413      	add	r3, r2
 800341c:	333d      	adds	r3, #61	; 0x3d
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	212c      	movs	r1, #44	; 0x2c
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	4413      	add	r3, r2
 800342e:	3360      	adds	r3, #96	; 0x60
 8003430:	2202      	movs	r2, #2
 8003432:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f002 fbd7 	bl	8005bf2 <USB_HC_Halt>
}
 8003444:	e2f7      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d112      	bne.n	8003484 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4413      	add	r3, r2
 8003466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003470:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f002 fbb8 	bl	8005bf2 <USB_HC_Halt>
}
 8003482:	e2d8      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d140      	bne.n	800351c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	335c      	adds	r3, #92	; 0x5c
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d111      	bne.n	80034e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	333d      	adds	r3, #61	; 0x3d
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	461a      	mov	r2, r3
 80034e2:	2340      	movs	r3, #64	; 0x40
 80034e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f2:	461a      	mov	r2, r3
 80034f4:	2301      	movs	r3, #1
 80034f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	212c      	movs	r1, #44	; 0x2c
 80034fe:	fb01 f303 	mul.w	r3, r1, r3
 8003502:	4413      	add	r3, r2
 8003504:	3361      	adds	r3, #97	; 0x61
 8003506:	2201      	movs	r2, #1
 8003508:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	4611      	mov	r1, r2
 8003514:	4618      	mov	r0, r3
 8003516:	f002 fb6c 	bl	8005bf2 <USB_HC_Halt>
}
 800351a:	e28c      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352e:	2b40      	cmp	r3, #64	; 0x40
 8003530:	d12c      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	3361      	adds	r3, #97	; 0x61
 8003540:	2204      	movs	r2, #4
 8003542:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	333d      	adds	r3, #61	; 0x3d
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	212c      	movs	r1, #44	; 0x2c
 800355c:	fb01 f303 	mul.w	r3, r1, r3
 8003560:	4413      	add	r3, r2
 8003562:	335c      	adds	r3, #92	; 0x5c
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f002 fb3d 	bl	8005bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	2340      	movs	r3, #64	; 0x40
 8003588:	6093      	str	r3, [r2, #8]
}
 800358a:	e254      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11a      	bne.n	80035d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	2308      	movs	r3, #8
 80035b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	212c      	movs	r1, #44	; 0x2c
 80035ba:	fb01 f303 	mul.w	r3, r1, r3
 80035be:	4413      	add	r3, r2
 80035c0:	3361      	adds	r3, #97	; 0x61
 80035c2:	2205      	movs	r2, #5
 80035c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f002 fb0e 	bl	8005bf2 <USB_HC_Halt>
}
 80035d6:	e22e      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d140      	bne.n	8003670 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	335c      	adds	r3, #92	; 0x5c
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3361      	adds	r3, #97	; 0x61
 800360e:	2203      	movs	r2, #3
 8003610:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	333d      	adds	r3, #61	; 0x3d
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d112      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	fb01 f303 	mul.w	r3, r1, r3
 8003630:	4413      	add	r3, r2
 8003632:	333c      	adds	r3, #60	; 0x3c
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	333d      	adds	r3, #61	; 0x3d
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f002 facb 	bl	8005bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	4413      	add	r3, r2
 8003664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003668:	461a      	mov	r2, r3
 800366a:	2310      	movs	r3, #16
 800366c:	6093      	str	r3, [r2, #8]
}
 800366e:	e1e2      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	4413      	add	r3, r2
 8003678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003682:	2b80      	cmp	r3, #128	; 0x80
 8003684:	d164      	bne.n	8003750 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d111      	bne.n	80036b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3361      	adds	r3, #97	; 0x61
 800369c:	2206      	movs	r2, #6
 800369e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f002 faa1 	bl	8005bf2 <USB_HC_Halt>
 80036b0:	e044      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	202c      	movs	r0, #44	; 0x2c
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	440b      	add	r3, r1
 80036d0:	335c      	adds	r3, #92	; 0x5c
 80036d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	335c      	adds	r3, #92	; 0x5c
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d920      	bls.n	800372a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	335c      	adds	r3, #92	; 0x5c
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	3360      	adds	r3, #96	; 0x60
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	b2d9      	uxtb	r1, r3
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	202c      	movs	r0, #44	; 0x2c
 8003716:	fb00 f303 	mul.w	r3, r0, r3
 800371a:	4413      	add	r3, r2
 800371c:	3360      	adds	r3, #96	; 0x60
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	461a      	mov	r2, r3
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f004 ff8a 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003728:	e008      	b.n	800373c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	212c      	movs	r1, #44	; 0x2c
 8003730:	fb01 f303 	mul.w	r3, r1, r3
 8003734:	4413      	add	r3, r2
 8003736:	3360      	adds	r3, #96	; 0x60
 8003738:	2202      	movs	r2, #2
 800373a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	4413      	add	r3, r2
 8003744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003748:	461a      	mov	r2, r3
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	6093      	str	r3, [r2, #8]
}
 800374e:	e172      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	4413      	add	r3, r2
 8003758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003766:	d11b      	bne.n	80037a0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	; 0x61
 8003776:	2208      	movs	r2, #8
 8003778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	b2d2      	uxtb	r2, r2
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f002 fa34 	bl	8005bf2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	461a      	mov	r2, r3
 8003798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800379c:	6093      	str	r3, [r2, #8]
}
 800379e:	e14a      	b.n	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	f040 813f 	bne.w	8003a36 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	212c      	movs	r1, #44	; 0x2c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	3361      	adds	r3, #97	; 0x61
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d17d      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	212c      	movs	r1, #44	; 0x2c
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	3360      	adds	r3, #96	; 0x60
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	212c      	movs	r1, #44	; 0x2c
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	333f      	adds	r3, #63	; 0x3f
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d00a      	beq.n	8003808 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	333f      	adds	r3, #63	; 0x3f
 8003800:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	f040 8100 	bne.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	3355      	adds	r3, #85	; 0x55
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2d8      	uxtb	r0, r3
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	212c      	movs	r1, #44	; 0x2c
 800382c:	fb01 f303 	mul.w	r3, r1, r3
 8003830:	4413      	add	r3, r2
 8003832:	3355      	adds	r3, #85	; 0x55
 8003834:	4602      	mov	r2, r0
 8003836:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 80e3 	bne.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	334c      	adds	r3, #76	; 0x4c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80d8 	beq.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	334c      	adds	r3, #76	; 0x4c
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	202c      	movs	r0, #44	; 0x2c
 800386e:	fb00 f202 	mul.w	r2, r0, r2
 8003872:	440a      	add	r2, r1
 8003874:	3240      	adds	r2, #64	; 0x40
 8003876:	8812      	ldrh	r2, [r2, #0]
 8003878:	4413      	add	r3, r2
 800387a:	3b01      	subs	r3, #1
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	202c      	movs	r0, #44	; 0x2c
 8003882:	fb00 f202 	mul.w	r2, r0, r2
 8003886:	440a      	add	r2, r1
 8003888:	3240      	adds	r2, #64	; 0x40
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80b5 	beq.w	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3355      	adds	r3, #85	; 0x55
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	f083 0301 	eor.w	r3, r3, #1
 80038b2:	b2d8      	uxtb	r0, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	212c      	movs	r1, #44	; 0x2c
 80038ba:	fb01 f303 	mul.w	r3, r1, r3
 80038be:	4413      	add	r3, r2
 80038c0:	3355      	adds	r3, #85	; 0x55
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e09f      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3361      	adds	r3, #97	; 0x61
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d109      	bne.n	80038f0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	212c      	movs	r1, #44	; 0x2c
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	3360      	adds	r3, #96	; 0x60
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
 80038ee:	e08b      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	212c      	movs	r1, #44	; 0x2c
 80038f6:	fb01 f303 	mul.w	r3, r1, r3
 80038fa:	4413      	add	r3, r2
 80038fc:	3361      	adds	r3, #97	; 0x61
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	2b04      	cmp	r3, #4
 8003902:	d109      	bne.n	8003918 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3360      	adds	r3, #96	; 0x60
 8003912:	2202      	movs	r2, #2
 8003914:	701a      	strb	r2, [r3, #0]
 8003916:	e077      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	212c      	movs	r1, #44	; 0x2c
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	3361      	adds	r3, #97	; 0x61
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b05      	cmp	r3, #5
 800392a:	d109      	bne.n	8003940 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3360      	adds	r3, #96	; 0x60
 800393a:	2205      	movs	r2, #5
 800393c:	701a      	strb	r2, [r3, #0]
 800393e:	e063      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	212c      	movs	r1, #44	; 0x2c
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	4413      	add	r3, r2
 800394c:	3361      	adds	r3, #97	; 0x61
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d009      	beq.n	8003968 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003964:	2b08      	cmp	r3, #8
 8003966:	d14f      	bne.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	212c      	movs	r1, #44	; 0x2c
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	335c      	adds	r3, #92	; 0x5c
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	202c      	movs	r0, #44	; 0x2c
 8003980:	fb00 f303 	mul.w	r3, r0, r3
 8003984:	440b      	add	r3, r1
 8003986:	335c      	adds	r3, #92	; 0x5c
 8003988:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	212c      	movs	r1, #44	; 0x2c
 8003990:	fb01 f303 	mul.w	r3, r1, r3
 8003994:	4413      	add	r3, r2
 8003996:	335c      	adds	r3, #92	; 0x5c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	d912      	bls.n	80039c4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	212c      	movs	r1, #44	; 0x2c
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	4413      	add	r3, r2
 80039aa:	335c      	adds	r3, #92	; 0x5c
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	212c      	movs	r1, #44	; 0x2c
 80039b6:	fb01 f303 	mul.w	r3, r1, r3
 80039ba:	4413      	add	r3, r2
 80039bc:	3360      	adds	r3, #96	; 0x60
 80039be:	2204      	movs	r2, #4
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e021      	b.n	8003a08 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	3360      	adds	r3, #96	; 0x60
 80039d2:	2202      	movs	r2, #2
 80039d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	2302      	movs	r3, #2
 8003a18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	b2d9      	uxtb	r1, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	202c      	movs	r0, #44	; 0x2c
 8003a24:	fb00 f303 	mul.w	r3, r0, r3
 8003a28:	4413      	add	r3, r2
 8003a2a:	3360      	adds	r3, #96	; 0x60
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f004 fe03 	bl	800863c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a36:	bf00      	nop
 8003a38:	3720      	adds	r7, #32
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b08a      	sub	sp, #40	; 0x28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030f 	and.w	r3, r3, #15
 8003a5e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	0c5b      	lsrs	r3, r3, #17
 8003a64:	f003 030f 	and.w	r3, r3, #15
 8003a68:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a72:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d004      	beq.n	8003a84 <HCD_RXQLVL_IRQHandler+0x46>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b05      	cmp	r3, #5
 8003a7e:	f000 80a9 	beq.w	8003bd4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a82:	e0aa      	b.n	8003bda <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80a6 	beq.w	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3344      	adds	r3, #68	; 0x44
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 809b 	beq.w	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	3350      	adds	r3, #80	; 0x50
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	441a      	add	r2, r3
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	202c      	movs	r0, #44	; 0x2c
 8003abc:	fb00 f303 	mul.w	r3, r0, r3
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334c      	adds	r3, #76	; 0x4c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d87a      	bhi.n	8003bc0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	212c      	movs	r1, #44	; 0x2c
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	3344      	adds	r3, #68	; 0x44
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f001 fbdc 	bl	80052a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	212c      	movs	r1, #44	; 0x2c
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	4413      	add	r3, r2
 8003af4:	3344      	adds	r3, #68	; 0x44
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	441a      	add	r2, r3
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	202c      	movs	r0, #44	; 0x2c
 8003b02:	fb00 f303 	mul.w	r3, r0, r3
 8003b06:	440b      	add	r3, r1
 8003b08:	3344      	adds	r3, #68	; 0x44
 8003b0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	212c      	movs	r1, #44	; 0x2c
 8003b12:	fb01 f303 	mul.w	r3, r1, r3
 8003b16:	4413      	add	r3, r2
 8003b18:	3350      	adds	r3, #80	; 0x50
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	441a      	add	r2, r3
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	202c      	movs	r0, #44	; 0x2c
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3350      	adds	r3, #80	; 0x50
 8003b2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	0cdb      	lsrs	r3, r3, #19
 8003b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	212c      	movs	r1, #44	; 0x2c
 8003b4c:	fb01 f303 	mul.w	r3, r1, r3
 8003b50:	4413      	add	r3, r2
 8003b52:	3340      	adds	r3, #64	; 0x40
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d13c      	bne.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d039      	beq.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	212c      	movs	r1, #44	; 0x2c
 8003b9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	3354      	adds	r3, #84	; 0x54
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	f083 0301 	eor.w	r3, r3, #1
 8003baa:	b2d8      	uxtb	r0, r3
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	212c      	movs	r1, #44	; 0x2c
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3354      	adds	r3, #84	; 0x54
 8003bba:	4602      	mov	r2, r0
 8003bbc:	701a      	strb	r2, [r3, #0]
      break;
 8003bbe:	e00b      	b.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	3360      	adds	r3, #96	; 0x60
 8003bce:	2204      	movs	r2, #4
 8003bd0:	701a      	strb	r2, [r3, #0]
      break;
 8003bd2:	e001      	b.n	8003bd8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003bd4:	bf00      	nop
 8003bd6:	e000      	b.n	8003bda <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003bd8:	bf00      	nop
  }
}
 8003bda:	bf00      	nop
 8003bdc:	3728      	adds	r7, #40	; 0x28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003c0e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d10b      	bne.n	8003c32 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d102      	bne.n	8003c2a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f004 fced 	bl	8008604 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d132      	bne.n	8003ca2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	f043 0308 	orr.w	r3, r3, #8
 8003c42:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d126      	bne.n	8003c9c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d113      	bne.n	8003c7e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c60:	d106      	bne.n	8003c70 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2102      	movs	r1, #2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fc87 	bl	800557c <USB_InitFSLSPClkSel>
 8003c6e:	e011      	b.n	8003c94 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fc80 	bl	800557c <USB_InitFSLSPClkSel>
 8003c7c:	e00a      	b.n	8003c94 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d106      	bne.n	8003c94 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003c92:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f004 fcdf 	bl	8008658 <HAL_HCD_PortEnabled_Callback>
 8003c9a:	e002      	b.n	8003ca2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f004 fce9 	bl	8008674 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d103      	bne.n	8003cb4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e267      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d075      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce6:	4b88      	ldr	r3, [pc, #544]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d00c      	beq.n	8003d0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf2:	4b85      	ldr	r3, [pc, #532]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d112      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfe:	4b82      	ldr	r3, [pc, #520]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d0a:	d10b      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0c:	4b7e      	ldr	r3, [pc, #504]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d05b      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x108>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d157      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e242      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_OscConfig+0x74>
 8003d2e:	4b76      	ldr	r3, [pc, #472]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a75      	ldr	r2, [pc, #468]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e01d      	b.n	8003d78 <HAL_RCC_OscConfig+0xb0>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d44:	d10c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x98>
 8003d46:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6f      	ldr	r2, [pc, #444]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d50:	6013      	str	r3, [r2, #0]
 8003d52:	4b6d      	ldr	r3, [pc, #436]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6c      	ldr	r2, [pc, #432]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e00b      	b.n	8003d78 <HAL_RCC_OscConfig+0xb0>
 8003d60:	4b69      	ldr	r3, [pc, #420]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a68      	ldr	r2, [pc, #416]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	4b66      	ldr	r3, [pc, #408]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a65      	ldr	r2, [pc, #404]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd fe3e 	bl	8001a00 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fd fe3a 	bl	8001a00 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e207      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b5b      	ldr	r3, [pc, #364]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0xc0>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fd fe2a 	bl	8001a00 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fd fe26 	bl	8001a00 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1f3      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	4b51      	ldr	r3, [pc, #324]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0xe8>
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d063      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dde:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d11c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b44      	ldr	r3, [pc, #272]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d116      	bne.n	8003e30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d005      	beq.n	8003e1a <HAL_RCC_OscConfig+0x152>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e1c7      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1a:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4937      	ldr	r1, [pc, #220]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2e:	e03a      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d020      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e38:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCC_OscConfig+0x244>)
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fddf 	bl	8001a00 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e46:	f7fd fddb 	bl	8001a00 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e1a8      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4925      	ldr	r1, [pc, #148]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	e015      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_OscConfig+0x244>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fd fdbe 	bl	8001a00 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fd fdba 	bl	8001a00 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e187      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	4b1b      	ldr	r3, [pc, #108]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0308 	and.w	r3, r3, #8
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d036      	beq.n	8003f20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d016      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eba:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_RCC_OscConfig+0x248>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fd fd9e 	bl	8001a00 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fd9a 	bl	8001a00 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e167      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x240>)
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0f0      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x200>
 8003ee6:	e01b      	b.n	8003f20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <HAL_RCC_OscConfig+0x248>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eee:	f7fd fd87 	bl	8001a00 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	e00e      	b.n	8003f14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef6:	f7fd fd83 	bl	8001a00 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d907      	bls.n	8003f14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e150      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	42470000 	.word	0x42470000
 8003f10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f14:	4b88      	ldr	r3, [pc, #544]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1ea      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8097 	beq.w	800405c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f32:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10f      	bne.n	8003f5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	4b7d      	ldr	r3, [pc, #500]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4a7c      	ldr	r2, [pc, #496]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4e:	4b7a      	ldr	r3, [pc, #488]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5e:	4b77      	ldr	r3, [pc, #476]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d118      	bne.n	8003f9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f6a:	4b74      	ldr	r3, [pc, #464]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a73      	ldr	r2, [pc, #460]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f76:	f7fd fd43 	bl	8001a00 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7e:	f7fd fd3f 	bl	8001a00 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e10c      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	4b6a      	ldr	r3, [pc, #424]	; (800413c <HAL_RCC_OscConfig+0x474>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d0f0      	beq.n	8003f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d106      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x2ea>
 8003fa4:	4b64      	ldr	r3, [pc, #400]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	4a63      	ldr	r2, [pc, #396]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003faa:	f043 0301 	orr.w	r3, r3, #1
 8003fae:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb0:	e01c      	b.n	8003fec <HAL_RCC_OscConfig+0x324>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	2b05      	cmp	r3, #5
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x30c>
 8003fba:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a5b      	ldr	r2, [pc, #364]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd2:	e00b      	b.n	8003fec <HAL_RCC_OscConfig+0x324>
 8003fd4:	4b58      	ldr	r3, [pc, #352]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd8:	4a57      	ldr	r2, [pc, #348]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe0:	4b55      	ldr	r3, [pc, #340]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a54      	ldr	r2, [pc, #336]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f023 0304 	bic.w	r3, r3, #4
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d015      	beq.n	8004020 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff4:	f7fd fd04 	bl	8001a00 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffa:	e00a      	b.n	8004012 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ffc:	f7fd fd00 	bl	8001a00 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	f241 3288 	movw	r2, #5000	; 0x1388
 800400a:	4293      	cmp	r3, r2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0cb      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004012:	4b49      	ldr	r3, [pc, #292]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0ee      	beq.n	8003ffc <HAL_RCC_OscConfig+0x334>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004020:	f7fd fcee 	bl	8001a00 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004026:	e00a      	b.n	800403e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004028:	f7fd fcea 	bl	8001a00 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0b5      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403e:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ee      	bne.n	8004028 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d105      	bne.n	800405c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	4a38      	ldr	r2, [pc, #224]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800405a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80a1 	beq.w	80041a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b08      	cmp	r3, #8
 8004070:	d05c      	beq.n	800412c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b02      	cmp	r3, #2
 8004078:	d141      	bne.n	80040fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800407a:	4b31      	ldr	r3, [pc, #196]	; (8004140 <HAL_RCC_OscConfig+0x478>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fd fcbe 	bl	8001a00 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004088:	f7fd fcba 	bl	8001a00 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e087      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	4b27      	ldr	r3, [pc, #156]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	085b      	lsrs	r3, r3, #1
 80040be:	3b01      	subs	r3, #1
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	491b      	ldr	r1, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040d0:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <HAL_RCC_OscConfig+0x478>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d6:	f7fd fc93 	bl	8001a00 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040dc:	e008      	b.n	80040f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040de:	f7fd fc8f 	bl	8001a00 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d901      	bls.n	80040f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040ec:	2303      	movs	r3, #3
 80040ee:	e05c      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d0f0      	beq.n	80040de <HAL_RCC_OscConfig+0x416>
 80040fc:	e054      	b.n	80041a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <HAL_RCC_OscConfig+0x478>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004104:	f7fd fc7c 	bl	8001a00 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd fc78 	bl	8001a00 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e045      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_RCC_OscConfig+0x470>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x444>
 800412a:	e03d      	b.n	80041a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d107      	bne.n	8004144 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e038      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
 8004138:	40023800 	.word	0x40023800
 800413c:	40007000 	.word	0x40007000
 8004140:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x4ec>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d028      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d121      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416a:	429a      	cmp	r2, r3
 800416c:	d11a      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004174:	4013      	ands	r3, r2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800417a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	085b      	lsrs	r3, r3, #1
 800418c:	3b01      	subs	r3, #1
 800418e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0cc      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b68      	ldr	r3, [pc, #416]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0307 	and.w	r3, r3, #7
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d90c      	bls.n	80041f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0307 	and.w	r3, r3, #7
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d001      	beq.n	80041f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e0b8      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d020      	beq.n	8004242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800420c:	4b59      	ldr	r3, [pc, #356]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	4a58      	ldr	r2, [pc, #352]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004224:	4b53      	ldr	r3, [pc, #332]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	4a52      	ldr	r2, [pc, #328]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800422e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b50      	ldr	r3, [pc, #320]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	494d      	ldr	r1, [pc, #308]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d044      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004256:	4b47      	ldr	r3, [pc, #284]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d119      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e07f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d003      	beq.n	8004276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	2b03      	cmp	r3, #3
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e06f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3b      	ldr	r3, [pc, #236]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e067      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4934      	ldr	r1, [pc, #208]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a8:	f7fd fbaa 	bl	8001a00 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fd fba6 	bl	8001a00 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e04f      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b25      	ldr	r3, [pc, #148]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d20c      	bcs.n	8004300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ee:	4b20      	ldr	r3, [pc, #128]	; (8004370 <HAL_RCC_ClockConfig+0x1b8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d001      	beq.n	8004300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e032      	b.n	8004366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4916      	ldr	r1, [pc, #88]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0308 	and.w	r3, r3, #8
 8004326:	2b00      	cmp	r3, #0
 8004328:	d009      	beq.n	800433e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	490e      	ldr	r1, [pc, #56]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 800433a:	4313      	orrs	r3, r2
 800433c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433e:	f000 f821 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8004342:	4602      	mov	r2, r0
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	490a      	ldr	r1, [pc, #40]	; (8004378 <HAL_RCC_ClockConfig+0x1c0>)
 8004350:	5ccb      	ldrb	r3, [r1, r3]
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	4a09      	ldr	r2, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd fb0a 	bl	8001978 <HAL_InitTick>

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023c00 	.word	0x40023c00
 8004374:	40023800 	.word	0x40023800
 8004378:	0802ec48 	.word	0x0802ec48
 800437c:	20000008 	.word	0x20000008
 8004380:	2000000c 	.word	0x2000000c

08004384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004388:	b094      	sub	sp, #80	; 0x50
 800438a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800438c:	2300      	movs	r3, #0
 800438e:	647b      	str	r3, [r7, #68]	; 0x44
 8004390:	2300      	movs	r3, #0
 8004392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004394:	2300      	movs	r3, #0
 8004396:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800439c:	4b79      	ldr	r3, [pc, #484]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	d00d      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x40>
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	f200 80e1 	bhi.w	8004570 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x34>
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	d003      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x3a>
 80043b6:	e0db      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b8:	4b73      	ldr	r3, [pc, #460]	; (8004588 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043bc:	e0db      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043be:	4b73      	ldr	r3, [pc, #460]	; (800458c <HAL_RCC_GetSysClockFreq+0x208>)
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c2:	e0d8      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c4:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ce:	4b6d      	ldr	r3, [pc, #436]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043da:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	099b      	lsrs	r3, r3, #6
 80043e0:	2200      	movs	r2, #0
 80043e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ec:	633b      	str	r3, [r7, #48]	; 0x30
 80043ee:	2300      	movs	r3, #0
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
 80043f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80043f6:	4622      	mov	r2, r4
 80043f8:	462b      	mov	r3, r5
 80043fa:	f04f 0000 	mov.w	r0, #0
 80043fe:	f04f 0100 	mov.w	r1, #0
 8004402:	0159      	lsls	r1, r3, #5
 8004404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004408:	0150      	lsls	r0, r2, #5
 800440a:	4602      	mov	r2, r0
 800440c:	460b      	mov	r3, r1
 800440e:	4621      	mov	r1, r4
 8004410:	1a51      	subs	r1, r2, r1
 8004412:	6139      	str	r1, [r7, #16]
 8004414:	4629      	mov	r1, r5
 8004416:	eb63 0301 	sbc.w	r3, r3, r1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	f04f 0200 	mov.w	r2, #0
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004428:	4659      	mov	r1, fp
 800442a:	018b      	lsls	r3, r1, #6
 800442c:	4651      	mov	r1, sl
 800442e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004432:	4651      	mov	r1, sl
 8004434:	018a      	lsls	r2, r1, #6
 8004436:	4651      	mov	r1, sl
 8004438:	ebb2 0801 	subs.w	r8, r2, r1
 800443c:	4659      	mov	r1, fp
 800443e:	eb63 0901 	sbc.w	r9, r3, r1
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800444e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004452:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004456:	4690      	mov	r8, r2
 8004458:	4699      	mov	r9, r3
 800445a:	4623      	mov	r3, r4
 800445c:	eb18 0303 	adds.w	r3, r8, r3
 8004460:	60bb      	str	r3, [r7, #8]
 8004462:	462b      	mov	r3, r5
 8004464:	eb49 0303 	adc.w	r3, r9, r3
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004476:	4629      	mov	r1, r5
 8004478:	024b      	lsls	r3, r1, #9
 800447a:	4621      	mov	r1, r4
 800447c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004480:	4621      	mov	r1, r4
 8004482:	024a      	lsls	r2, r1, #9
 8004484:	4610      	mov	r0, r2
 8004486:	4619      	mov	r1, r3
 8004488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448a:	2200      	movs	r2, #0
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
 800448e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004490:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004494:	f7fb feec 	bl	8000270 <__aeabi_uldivmod>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4613      	mov	r3, r2
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	e058      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a2:	4b38      	ldr	r3, [pc, #224]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	2200      	movs	r2, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	4611      	mov	r1, r2
 80044ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044b2:	623b      	str	r3, [r7, #32]
 80044b4:	2300      	movs	r3, #0
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044bc:	4642      	mov	r2, r8
 80044be:	464b      	mov	r3, r9
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	0159      	lsls	r1, r3, #5
 80044ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044ce:	0150      	lsls	r0, r2, #5
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4641      	mov	r1, r8
 80044d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80044da:	4649      	mov	r1, r9
 80044dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044f4:	ebb2 040a 	subs.w	r4, r2, sl
 80044f8:	eb63 050b 	sbc.w	r5, r3, fp
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	f04f 0300 	mov.w	r3, #0
 8004504:	00eb      	lsls	r3, r5, #3
 8004506:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800450a:	00e2      	lsls	r2, r4, #3
 800450c:	4614      	mov	r4, r2
 800450e:	461d      	mov	r5, r3
 8004510:	4643      	mov	r3, r8
 8004512:	18e3      	adds	r3, r4, r3
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	464b      	mov	r3, r9
 8004518:	eb45 0303 	adc.w	r3, r5, r3
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800452a:	4629      	mov	r1, r5
 800452c:	028b      	lsls	r3, r1, #10
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004534:	4621      	mov	r1, r4
 8004536:	028a      	lsls	r2, r1, #10
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	61fa      	str	r2, [r7, #28]
 8004544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004548:	f7fb fe92 	bl	8000270 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0x200>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004564:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800456e:	e002      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetSysClockFreq+0x204>)
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004578:	4618      	mov	r0, r3
 800457a:	3750      	adds	r7, #80	; 0x50
 800457c:	46bd      	mov	sp, r7
 800457e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	00f42400 	.word	0x00f42400
 800458c:	007a1200 	.word	0x007a1200

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000008 	.word	0x20000008

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	0802ec58 	.word	0x0802ec58

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d4:	f7ff ffdc 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	0802ec58 	.word	0x0802ec58

080045f8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e038      	b.n	8004680 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7fd f8d6 	bl	80017d4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	3308      	adds	r3, #8
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f000 fbea 	bl	8004e0c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	461a      	mov	r2, r3
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	f000 fc4c 	bl	8004ee0 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6858      	ldr	r0, [r3, #4]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	f000 fc79 	bl	8004f4c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	6892      	ldr	r2, [r2, #8]
 8004662:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6892      	ldr	r2, [r2, #8]
 800466e:	f041 0101 	orr.w	r1, r1, #1
 8004672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e03f      	b.n	800471a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fc fffc 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2224      	movs	r2, #36	; 0x24
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f929 	bl	8004924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68da      	ldr	r2, [r3, #12]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b08a      	sub	sp, #40	; 0x28
 8004726:	af02      	add	r7, sp, #8
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b20      	cmp	r3, #32
 8004740:	d17c      	bne.n	800483c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <HAL_UART_Transmit+0x2c>
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e075      	b.n	800483e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_UART_Transmit+0x3e>
 800475c:	2302      	movs	r3, #2
 800475e:	e06e      	b.n	800483e <HAL_UART_Transmit+0x11c>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2221      	movs	r2, #33	; 0x21
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004776:	f7fd f943 	bl	8001a00 <HAL_GetTick>
 800477a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d108      	bne.n	80047a4 <HAL_UART_Transmit+0x82>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e003      	b.n	80047ac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047b4:	e02a      	b.n	800480c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2200      	movs	r2, #0
 80047be:	2180      	movs	r1, #128	; 0x80
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 f840 	bl	8004846 <UART_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e036      	b.n	800483e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e007      	b.n	80047fe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1cf      	bne.n	80047b6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2200      	movs	r2, #0
 800481e:	2140      	movs	r1, #64	; 0x40
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 f810 	bl	8004846 <UART_WaitOnFlagUntilTimeout>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e006      	b.n	800483e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b090      	sub	sp, #64	; 0x40
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	4613      	mov	r3, r2
 8004854:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004856:	e050      	b.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d04c      	beq.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <UART_WaitOnFlagUntilTimeout+0x30>
 8004866:	f7fd f8cb 	bl	8001a00 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004872:	429a      	cmp	r2, r3
 8004874:	d241      	bcs.n	80048fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	330c      	adds	r3, #12
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	330c      	adds	r3, #12
 8004894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004896:	637a      	str	r2, [r7, #52]	; 0x34
 8004898:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800489c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e5      	bne.n	8004876 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3314      	adds	r3, #20
 80048b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	613b      	str	r3, [r7, #16]
   return(result);
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3314      	adds	r3, #20
 80048c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ca:	623a      	str	r2, [r7, #32]
 80048cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	69f9      	ldr	r1, [r7, #28]
 80048d0:	6a3a      	ldr	r2, [r7, #32]
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2220      	movs	r2, #32
 80048ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00f      	b.n	800491a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	429a      	cmp	r2, r3
 8004908:	bf0c      	ite	eq
 800490a:	2301      	moveq	r3, #1
 800490c:	2300      	movne	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	461a      	mov	r2, r3
 8004912:	79fb      	ldrb	r3, [r7, #7]
 8004914:	429a      	cmp	r2, r3
 8004916:	d09f      	beq.n	8004858 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3740      	adds	r7, #64	; 0x40
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b0c0      	sub	sp, #256	; 0x100
 800492a:	af00      	add	r7, sp, #0
 800492c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	ea40 0301 	orr.w	r3, r0, r1
 800494c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800497c:	f021 010c 	bic.w	r1, r1, #12
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800498a:	430b      	orrs	r3, r1
 800498c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800499a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800499e:	6999      	ldr	r1, [r3, #24]
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	ea40 0301 	orr.w	r3, r0, r1
 80049aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b8f      	ldr	r3, [pc, #572]	; (8004bf0 <UART_SetConfig+0x2cc>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d005      	beq.n	80049c4 <UART_SetConfig+0xa0>
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b8d      	ldr	r3, [pc, #564]	; (8004bf4 <UART_SetConfig+0x2d0>)
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d104      	bne.n	80049ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7ff fe04 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 80049c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049cc:	e003      	b.n	80049d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ce:	f7ff fdeb 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80049d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e0:	f040 810c 	bne.w	8004bfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e8:	2200      	movs	r2, #0
 80049ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049f6:	4622      	mov	r2, r4
 80049f8:	462b      	mov	r3, r5
 80049fa:	1891      	adds	r1, r2, r2
 80049fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80049fe:	415b      	adcs	r3, r3
 8004a00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a06:	4621      	mov	r1, r4
 8004a08:	eb12 0801 	adds.w	r8, r2, r1
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	eb43 0901 	adc.w	r9, r3, r1
 8004a12:	f04f 0200 	mov.w	r2, #0
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a26:	4690      	mov	r8, r2
 8004a28:	4699      	mov	r9, r3
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	eb18 0303 	adds.w	r3, r8, r3
 8004a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a34:	462b      	mov	r3, r5
 8004a36:	eb49 0303 	adc.w	r3, r9, r3
 8004a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a52:	460b      	mov	r3, r1
 8004a54:	18db      	adds	r3, r3, r3
 8004a56:	653b      	str	r3, [r7, #80]	; 0x50
 8004a58:	4613      	mov	r3, r2
 8004a5a:	eb42 0303 	adc.w	r3, r2, r3
 8004a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a68:	f7fb fc02 	bl	8000270 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a84:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a94:	415b      	adcs	r3, r3
 8004a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004abc:	4692      	mov	sl, r2
 8004abe:	469b      	mov	fp, r3
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aca:	464b      	mov	r3, r9
 8004acc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ad0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ae0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ae4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	643b      	str	r3, [r7, #64]	; 0x40
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	647b      	str	r3, [r7, #68]	; 0x44
 8004af6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004afa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004afe:	f7fb fbb7 	bl	8000270 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004b0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	2264      	movs	r2, #100	; 0x64
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	1acb      	subs	r3, r1, r3
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b1e:	4b36      	ldr	r3, [pc, #216]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004b20:	fba3 2302 	umull	r2, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b2c:	441c      	add	r4, r3
 8004b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6339      	str	r1, [r7, #48]	; 0x30
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b84:	464b      	mov	r3, r9
 8004b86:	460a      	mov	r2, r1
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ba0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	18db      	adds	r3, r3, r3
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004baa:	4613      	mov	r3, r2
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bba:	f7fb fb59 	bl	8000270 <__aeabi_uldivmod>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	2164      	movs	r1, #100	; 0x64
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	3332      	adds	r3, #50	; 0x32
 8004bd6:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <UART_SetConfig+0x2d4>)
 8004bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	f003 0207 	and.w	r2, r3, #7
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4422      	add	r2, r4
 8004bea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bec:	e105      	b.n	8004dfa <UART_SetConfig+0x4d6>
 8004bee:	bf00      	nop
 8004bf0:	40011000 	.word	0x40011000
 8004bf4:	40011400 	.word	0x40011400
 8004bf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c0e:	4642      	mov	r2, r8
 8004c10:	464b      	mov	r3, r9
 8004c12:	1891      	adds	r1, r2, r2
 8004c14:	6239      	str	r1, [r7, #32]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1e:	4641      	mov	r1, r8
 8004c20:	1854      	adds	r4, r2, r1
 8004c22:	4649      	mov	r1, r9
 8004c24:	eb43 0501 	adc.w	r5, r3, r1
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	00eb      	lsls	r3, r5, #3
 8004c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c36:	00e2      	lsls	r2, r4, #3
 8004c38:	4614      	mov	r4, r2
 8004c3a:	461d      	mov	r5, r3
 8004c3c:	4643      	mov	r3, r8
 8004c3e:	18e3      	adds	r3, r4, r3
 8004c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c44:	464b      	mov	r3, r9
 8004c46:	eb45 0303 	adc.w	r3, r5, r3
 8004c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	008b      	lsls	r3, r1, #2
 8004c6e:	4621      	mov	r1, r4
 8004c70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c74:	4621      	mov	r1, r4
 8004c76:	008a      	lsls	r2, r1, #2
 8004c78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c7c:	f7fb faf8 	bl	8000270 <__aeabi_uldivmod>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4b60      	ldr	r3, [pc, #384]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004c86:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	011c      	lsls	r4, r3, #4
 8004c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	1891      	adds	r1, r2, r2
 8004ca6:	61b9      	str	r1, [r7, #24]
 8004ca8:	415b      	adcs	r3, r3
 8004caa:	61fb      	str	r3, [r7, #28]
 8004cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb0:	4641      	mov	r1, r8
 8004cb2:	1851      	adds	r1, r2, r1
 8004cb4:	6139      	str	r1, [r7, #16]
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	414b      	adcs	r3, r1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	f04f 0300 	mov.w	r3, #0
 8004cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc8:	4659      	mov	r1, fp
 8004cca:	00cb      	lsls	r3, r1, #3
 8004ccc:	4651      	mov	r1, sl
 8004cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	00ca      	lsls	r2, r1, #3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4642      	mov	r2, r8
 8004cde:	189b      	adds	r3, r3, r2
 8004ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ce4:	464b      	mov	r3, r9
 8004ce6:	460a      	mov	r2, r1
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d08:	4649      	mov	r1, r9
 8004d0a:	008b      	lsls	r3, r1, #2
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d12:	4641      	mov	r1, r8
 8004d14:	008a      	lsls	r2, r1, #2
 8004d16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d1a:	f7fb faa9 	bl	8000270 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004d24:	fba3 1302 	umull	r1, r3, r3, r2
 8004d28:	095b      	lsrs	r3, r3, #5
 8004d2a:	2164      	movs	r1, #100	; 0x64
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	3332      	adds	r3, #50	; 0x32
 8004d36:	4a34      	ldr	r2, [pc, #208]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004d38:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3c:	095b      	lsrs	r3, r3, #5
 8004d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d42:	441c      	add	r4, r3
 8004d44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d48:	2200      	movs	r2, #0
 8004d4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004d4c:	677a      	str	r2, [r7, #116]	; 0x74
 8004d4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d52:	4642      	mov	r2, r8
 8004d54:	464b      	mov	r3, r9
 8004d56:	1891      	adds	r1, r2, r2
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	415b      	adcs	r3, r3
 8004d5c:	60fb      	str	r3, [r7, #12]
 8004d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d62:	4641      	mov	r1, r8
 8004d64:	1851      	adds	r1, r2, r1
 8004d66:	6039      	str	r1, [r7, #0]
 8004d68:	4649      	mov	r1, r9
 8004d6a:	414b      	adcs	r3, r1
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	00cb      	lsls	r3, r1, #3
 8004d7e:	4651      	mov	r1, sl
 8004d80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d84:	4651      	mov	r1, sl
 8004d86:	00ca      	lsls	r2, r1, #3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4642      	mov	r2, r8
 8004d90:	189b      	adds	r3, r3, r2
 8004d92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d94:	464b      	mov	r3, r9
 8004d96:	460a      	mov	r2, r1
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	663b      	str	r3, [r7, #96]	; 0x60
 8004da8:	667a      	str	r2, [r7, #100]	; 0x64
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004db6:	4649      	mov	r1, r9
 8004db8:	008b      	lsls	r3, r1, #2
 8004dba:	4641      	mov	r1, r8
 8004dbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dc0:	4641      	mov	r1, r8
 8004dc2:	008a      	lsls	r2, r1, #2
 8004dc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004dc8:	f7fb fa52 	bl	8000270 <__aeabi_uldivmod>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2164      	movs	r1, #100	; 0x64
 8004dda:	fb01 f303 	mul.w	r3, r1, r3
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	3332      	adds	r3, #50	; 0x32
 8004de4:	4a08      	ldr	r2, [pc, #32]	; (8004e08 <UART_SetConfig+0x4e4>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	f003 020f 	and.w	r2, r3, #15
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4422      	add	r2, r4
 8004df8:	609a      	str	r2, [r3, #8]
}
 8004dfa:	bf00      	nop
 8004dfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e00:	46bd      	mov	sp, r7
 8004e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e06:	bf00      	nop
 8004e08:	51eb851f 	.word	0x51eb851f

08004e0c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	f023 0101 	bic.w	r1, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d102      	bne.n	8004e3c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004e36:	2340      	movs	r3, #64	; 0x40
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e001      	b.n	8004e40 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004e4c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004e52:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004e58:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004e5e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004e64:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004e6a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004e70:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004e76:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004e7c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004e9a:	4b10      	ldr	r3, [pc, #64]	; (8004edc <FSMC_NORSRAM_Init+0xd0>)
 8004e9c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ea4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004eac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	ea02 0103 	and.w	r1, r2, r3
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4319      	orrs	r1, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	0008fb7f 	.word	0x0008fb7f

08004ee0 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	021b      	lsls	r3, r3, #8
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	431a      	orrs	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	051b      	lsls	r3, r3, #20
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	3b02      	subs	r3, #2
 8004f26:	061b      	lsls	r3, r3, #24
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	3201      	adds	r2, #1
 8004f34:	4319      	orrs	r1, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f60:	d11d      	bne.n	8004f9e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	6811      	ldr	r1, [r2, #0]
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	6852      	ldr	r2, [r2, #4]
 8004f76:	0112      	lsls	r2, r2, #4
 8004f78:	4311      	orrs	r1, r2
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	6892      	ldr	r2, [r2, #8]
 8004f7e:	0212      	lsls	r2, r2, #8
 8004f80:	4311      	orrs	r1, r2
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	6992      	ldr	r2, [r2, #24]
 8004f86:	4311      	orrs	r1, r2
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	68d2      	ldr	r2, [r2, #12]
 8004f8c:	0412      	lsls	r2, r2, #16
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	ea43 0102 	orr.w	r1, r3, r2
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004f9c:	e005      	b.n	8004faa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	cff00000 	.word	0xcff00000

08004fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	f107 001c 	add.w	r0, r7, #28
 8004fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d122      	bne.n	800501a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d105      	bne.n	800500e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9c0 	bl	8005394 <USB_CoreReset>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]
 8005018:	e01a      	b.n	8005050 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9b4 	bl	8005394 <USB_CoreReset>
 800502c:	4603      	mov	r3, r0
 800502e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
 8005042:	e005      	b.n	8005050 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10b      	bne.n	800506e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f043 0206 	orr.w	r2, r3, #6
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f043 0220 	orr.w	r2, r3, #32
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800507a:	b004      	add	sp, #16
 800507c:	4770      	bx	lr

0800507e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f043 0201 	orr.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f023 0201 	bic.w	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050de:	78fb      	ldrb	r3, [r7, #3]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d115      	bne.n	8005110 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050f0:	2001      	movs	r0, #1
 80050f2:	f7fc fc91 	bl	8001a18 <HAL_Delay>
      ms++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f93a 	bl	8005376 <USB_GetMode>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d01e      	beq.n	8005146 <USB_SetCurrentMode+0x84>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b31      	cmp	r3, #49	; 0x31
 800510c:	d9f0      	bls.n	80050f0 <USB_SetCurrentMode+0x2e>
 800510e:	e01a      	b.n	8005146 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d115      	bne.n	8005142 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005122:	2001      	movs	r0, #1
 8005124:	f7fc fc78 	bl	8001a18 <HAL_Delay>
      ms++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f921 	bl	8005376 <USB_GetMode>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <USB_SetCurrentMode+0x84>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b31      	cmp	r3, #49	; 0x31
 800513e:	d9f0      	bls.n	8005122 <USB_SetCurrentMode+0x60>
 8005140:	e001      	b.n	8005146 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e005      	b.n	8005152 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b32      	cmp	r3, #50	; 0x32
 800514a:	d101      	bne.n	8005150 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e000      	b.n	8005152 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	3301      	adds	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4a13      	ldr	r2, [pc, #76]	; (80051c0 <USB_FlushTxFifo+0x64>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d901      	bls.n	800517c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e01b      	b.n	80051b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	daf2      	bge.n	800516a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	019b      	lsls	r3, r3, #6
 800518c:	f043 0220 	orr.w	r2, r3, #32
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3301      	adds	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a08      	ldr	r2, [pc, #32]	; (80051c0 <USB_FlushTxFifo+0x64>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d901      	bls.n	80051a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e006      	b.n	80051b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d0f0      	beq.n	8005194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	00030d40 	.word	0x00030d40

080051c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4a11      	ldr	r2, [pc, #68]	; (8005220 <USB_FlushRxFifo+0x5c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d901      	bls.n	80051e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e018      	b.n	8005214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	daf2      	bge.n	80051d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2210      	movs	r2, #16
 80051f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3301      	adds	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a08      	ldr	r2, [pc, #32]	; (8005220 <USB_FlushRxFifo+0x5c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e006      	b.n	8005214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	f003 0310 	and.w	r3, r3, #16
 800520e:	2b10      	cmp	r3, #16
 8005210:	d0f0      	beq.n	80051f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	00030d40 	.word	0x00030d40

08005224 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	4611      	mov	r1, r2
 8005230:	461a      	mov	r2, r3
 8005232:	460b      	mov	r3, r1
 8005234:	71fb      	strb	r3, [r7, #7]
 8005236:	4613      	mov	r3, r2
 8005238:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005242:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d123      	bne.n	8005292 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800524a:	88bb      	ldrh	r3, [r7, #4]
 800524c:	3303      	adds	r3, #3
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005252:	2300      	movs	r3, #0
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e018      	b.n	800528a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	031a      	lsls	r2, r3, #12
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005264:	461a      	mov	r2, r3
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	3301      	adds	r3, #1
 8005276:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	3301      	adds	r3, #1
 800527c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	3301      	adds	r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	3301      	adds	r3, #1
 8005288:	61bb      	str	r3, [r7, #24]
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	429a      	cmp	r2, r3
 8005290:	d3e2      	bcc.n	8005258 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3724      	adds	r7, #36	; 0x24
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b08b      	sub	sp, #44	; 0x2c
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	089b      	lsrs	r3, r3, #2
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052c6:	2300      	movs	r3, #0
 80052c8:	623b      	str	r3, [r7, #32]
 80052ca:	e014      	b.n	80052f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	3301      	adds	r3, #1
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	3301      	adds	r3, #1
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	3301      	adds	r3, #1
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	3301      	adds	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	3301      	adds	r3, #1
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d3e6      	bcc.n	80052cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80052fe:	8bfb      	ldrh	r3, [r7, #30]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01e      	beq.n	8005342 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530e:	461a      	mov	r2, r3
 8005310:	f107 0310 	add.w	r3, r7, #16
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	b2db      	uxtb	r3, r3
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	b2da      	uxtb	r2, r3
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	701a      	strb	r2, [r3, #0]
      i++;
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	3301      	adds	r3, #1
 800532e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005332:	3301      	adds	r3, #1
 8005334:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005336:	8bfb      	ldrh	r3, [r7, #30]
 8005338:	3b01      	subs	r3, #1
 800533a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800533c:	8bfb      	ldrh	r3, [r7, #30]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1ea      	bne.n	8005318 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005344:	4618      	mov	r0, r3
 8005346:	372c      	adds	r7, #44	; 0x2c
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4013      	ands	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005368:	68fb      	ldr	r3, [r7, #12]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0301 	and.w	r3, r3, #1
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a13      	ldr	r2, [pc, #76]	; (80053f8 <USB_CoreReset+0x64>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e01b      	b.n	80053ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	daf2      	bge.n	80053a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f043 0201 	orr.w	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3301      	adds	r3, #1
 80053ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <USB_CoreReset+0x64>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d901      	bls.n	80053dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e006      	b.n	80053ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d0f0      	beq.n	80053ca <USB_CoreReset+0x36>

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	00030d40 	.word	0x00030d40

080053fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053fc:	b084      	sub	sp, #16
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800540a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800541c:	461a      	mov	r2, r3
 800541e:	2300      	movs	r3, #0
 8005420:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005426:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	2b00      	cmp	r3, #0
 8005450:	d018      	beq.n	8005484 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d10a      	bne.n	800546e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005466:	f043 0304 	orr.w	r3, r3, #4
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	e014      	b.n	8005498 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800547c:	f023 0304 	bic.w	r3, r3, #4
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	e009      	b.n	8005498 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005492:	f023 0304 	bic.w	r3, r3, #4
 8005496:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005498:	2110      	movs	r1, #16
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fe5e 	bl	800515c <USB_FlushTxFifo>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fe8a 	bl	80051c4 <USB_FlushRxFifo>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e015      	b.n	80054ec <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	461a      	mov	r2, r3
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e0:	461a      	mov	r2, r3
 80054e2:	2300      	movs	r3, #0
 80054e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	3301      	adds	r3, #1
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d3e5      	bcc.n	80054c0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005500:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005514:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a13      	ldr	r2, [pc, #76]	; (8005568 <USB_HostInit+0x16c>)
 800551a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a13      	ldr	r2, [pc, #76]	; (800556c <USB_HostInit+0x170>)
 8005520:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005524:	e009      	b.n	800553a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2280      	movs	r2, #128	; 0x80
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a10      	ldr	r2, [pc, #64]	; (8005570 <USB_HostInit+0x174>)
 8005530:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a0f      	ldr	r2, [pc, #60]	; (8005574 <USB_HostInit+0x178>)
 8005536:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	f043 0210 	orr.w	r2, r3, #16
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	699a      	ldr	r2, [r3, #24]
 8005550:	4b09      	ldr	r3, [pc, #36]	; (8005578 <USB_HostInit+0x17c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005564:	b004      	add	sp, #16
 8005566:	4770      	bx	lr
 8005568:	01000200 	.word	0x01000200
 800556c:	00e00300 	.word	0x00e00300
 8005570:	00600080 	.word	0x00600080
 8005574:	004000e0 	.word	0x004000e0
 8005578:	a3200008 	.word	0xa3200008

0800557c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	460b      	mov	r3, r1
 8005586:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800559a:	f023 0303 	bic.w	r3, r3, #3
 800559e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055b4:	4313      	orrs	r3, r2
 80055b6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d107      	bne.n	80055ce <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055c4:	461a      	mov	r2, r3
 80055c6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80055ca:	6053      	str	r3, [r2, #4]
 80055cc:	e009      	b.n	80055e2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d106      	bne.n	80055e2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055da:	461a      	mov	r2, r3
 80055dc:	f241 7370 	movw	r3, #6000	; 0x1770
 80055e0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005610:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800561a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800561e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005620:	2064      	movs	r0, #100	; 0x64
 8005622:	f7fc f9f9 	bl	8001a18 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800562e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005632:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005634:	200a      	movs	r0, #10
 8005636:	f7fc f9ef 	bl	8001a18 <HAL_Delay>

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	460b      	mov	r3, r1
 800564e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005668:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <USB_DriveVbus+0x44>
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d106      	bne.n	8005688 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005682:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005686:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d109      	bne.n	80056a8 <USB_DriveVbus+0x64>
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056a6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	0c5b      	lsrs	r3, r3, #17
 80056d4:	f003 0303 	and.w	r3, r3, #3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	b29b      	uxth	r3, r3
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
	...

08005708 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	4608      	mov	r0, r1
 8005712:	4611      	mov	r1, r2
 8005714:	461a      	mov	r2, r3
 8005716:	4603      	mov	r3, r0
 8005718:	70fb      	strb	r3, [r7, #3]
 800571a:	460b      	mov	r3, r1
 800571c:	70bb      	strb	r3, [r7, #2]
 800571e:	4613      	mov	r3, r2
 8005720:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800572a:	78fb      	ldrb	r3, [r7, #3]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005736:	461a      	mov	r2, r3
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
 800573c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800573e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005742:	2b03      	cmp	r3, #3
 8005744:	d87e      	bhi.n	8005844 <USB_HC_Init+0x13c>
 8005746:	a201      	add	r2, pc, #4	; (adr r2, 800574c <USB_HC_Init+0x44>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	0800575d 	.word	0x0800575d
 8005750:	08005807 	.word	0x08005807
 8005754:	0800575d 	.word	0x0800575d
 8005758:	080057c9 	.word	0x080057c9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005768:	461a      	mov	r2, r3
 800576a:	f240 439d 	movw	r3, #1181	; 0x49d
 800576e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005770:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005774:	2b00      	cmp	r3, #0
 8005776:	da10      	bge.n	800579a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	78fa      	ldrb	r2, [r7, #3]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	440a      	add	r2, r1
 800578e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005796:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005798:	e057      	b.n	800584a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d051      	beq.n	800584a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	78fa      	ldrb	r2, [r7, #3]
 80057b6:	0151      	lsls	r1, r2, #5
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	440a      	add	r2, r1
 80057bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057c4:	60d3      	str	r3, [r2, #12]
      break;
 80057c6:	e040      	b.n	800584a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	461a      	mov	r2, r3
 80057d6:	f240 639d 	movw	r3, #1693	; 0x69d
 80057da:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	da34      	bge.n	800584e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005802:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005804:	e023      	b.n	800584e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	461a      	mov	r2, r3
 8005814:	f240 2325 	movw	r3, #549	; 0x225
 8005818:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800581a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da17      	bge.n	8005852 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005822:	78fb      	ldrb	r3, [r7, #3]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	440a      	add	r2, r1
 8005838:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800583c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005840:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005842:	e006      	b.n	8005852 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
      break;
 8005848:	e004      	b.n	8005854 <USB_HC_Init+0x14c>
      break;
 800584a:	bf00      	nop
 800584c:	e002      	b.n	8005854 <USB_HC_Init+0x14c>
      break;
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <USB_HC_Init+0x14c>
      break;
 8005852:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4413      	add	r3, r2
 800585c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	78fa      	ldrb	r2, [r7, #3]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	440a      	add	r2, r1
 800586a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800586e:	f043 0302 	orr.w	r3, r3, #2
 8005872:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	f003 030f 	and.w	r3, r3, #15
 8005882:	2101      	movs	r1, #1
 8005884:	fa01 f303 	lsl.w	r3, r1, r3
 8005888:	6939      	ldr	r1, [r7, #16]
 800588a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800588e:	4313      	orrs	r3, r2
 8005890:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800589e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da03      	bge.n	80058ae <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80058a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058aa:	61bb      	str	r3, [r7, #24]
 80058ac:	e001      	b.n	80058b2 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff feff 	bl	80056b6 <USB_GetHostSpeed>
 80058b8:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80058ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d106      	bne.n	80058d0 <USB_HC_Init+0x1c8>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d003      	beq.n	80058d0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e001      	b.n	80058d4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058d4:	787b      	ldrb	r3, [r7, #1]
 80058d6:	059b      	lsls	r3, r3, #22
 80058d8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058dc:	78bb      	ldrb	r3, [r7, #2]
 80058de:	02db      	lsls	r3, r3, #11
 80058e0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058ea:	049b      	lsls	r3, r3, #18
 80058ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058f0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058fe:	78fb      	ldrb	r3, [r7, #3]
 8005900:	0159      	lsls	r1, r3, #5
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	440b      	add	r3, r1
 8005906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800590a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005910:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005912:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005916:	2b03      	cmp	r3, #3
 8005918:	d003      	beq.n	8005922 <USB_HC_Init+0x21a>
 800591a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d10f      	bne.n	8005942 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005922:	78fb      	ldrb	r3, [r7, #3]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4413      	add	r3, r2
 800592a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	78fa      	ldrb	r2, [r7, #3]
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	440a      	add	r2, r1
 8005938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800593c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005940:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005942:	7ffb      	ldrb	r3, [r7, #31]
}
 8005944:	4618      	mov	r0, r3
 8005946:	3720      	adds	r7, #32
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005968:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d02d      	beq.n	80059d2 <USB_HC_StartXfer+0x86>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	791b      	ldrb	r3, [r3, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d129      	bne.n	80059d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800597e:	79fb      	ldrb	r3, [r7, #7]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d117      	bne.n	80059b4 <USB_HC_StartXfer+0x68>
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	79db      	ldrb	r3, [r3, #7]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <USB_HC_StartXfer+0x48>
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	79db      	ldrb	r3, [r3, #7]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d10f      	bne.n	80059b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	4413      	add	r3, r2
 800599c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	6a3a      	ldr	r2, [r7, #32]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <USB_HC_StartXfer+0x86>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	795b      	ldrb	r3, [r3, #5]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d107      	bne.n	80059d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	785b      	ldrb	r3, [r3, #1]
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fa0f 	bl	8005dec <USB_DoPing>
      return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e0f8      	b.n	8005bc4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d018      	beq.n	8005a0c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	8912      	ldrh	r2, [r2, #8]
 80059e2:	4413      	add	r3, r2
 80059e4:	3b01      	subs	r3, #1
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	8912      	ldrh	r2, [r2, #8]
 80059ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059f2:	8b7b      	ldrh	r3, [r7, #26]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d90b      	bls.n	8005a10 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059f8:	8b7b      	ldrh	r3, [r7, #26]
 80059fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	8912      	ldrh	r2, [r2, #8]
 8005a02:	fb03 f202 	mul.w	r2, r3, r2
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e001      	b.n	8005a10 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	78db      	ldrb	r3, [r3, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d007      	beq.n	8005a28 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	8912      	ldrh	r2, [r2, #8]
 8005a1e:	fb03 f202 	mul.w	r2, r3, r2
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	611a      	str	r2, [r3, #16]
 8005a26:	e003      	b.n	8005a30 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a3a:	04d9      	lsls	r1, r3, #19
 8005a3c:	4b63      	ldr	r3, [pc, #396]	; (8005bcc <USB_HC_StartXfer+0x280>)
 8005a3e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a40:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	7a9b      	ldrb	r3, [r3, #10]
 8005a46:	075b      	lsls	r3, r3, #29
 8005a48:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a4c:	69f9      	ldr	r1, [r7, #28]
 8005a4e:	0148      	lsls	r0, r1, #5
 8005a50:	6a39      	ldr	r1, [r7, #32]
 8005a52:	4401      	add	r1, r0
 8005a54:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a58:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a5a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	68d9      	ldr	r1, [r3, #12]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	460a      	mov	r2, r1
 8005a74:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005aac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	7e7b      	ldrb	r3, [r7, #25]
 8005abe:	075b      	lsls	r3, r3, #29
 8005ac0:	69f9      	ldr	r1, [r7, #28]
 8005ac2:	0148      	lsls	r0, r1, #5
 8005ac4:	6a39      	ldr	r1, [r7, #32]
 8005ac6:	4401      	add	r1, r0
 8005ac8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ae6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	78db      	ldrb	r3, [r3, #3]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	e003      	b.n	8005b02 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005b00:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b08:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b16:	461a      	mov	r2, r3
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e04e      	b.n	8005bc4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	78db      	ldrb	r3, [r3, #3]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d149      	bne.n	8005bc2 <USB_HC_StartXfer+0x276>
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d045      	beq.n	8005bc2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	79db      	ldrb	r3, [r3, #7]
 8005b3a:	2b03      	cmp	r3, #3
 8005b3c:	d830      	bhi.n	8005ba0 <USB_HC_StartXfer+0x254>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <USB_HC_StartXfer+0x1f8>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b55 	.word	0x08005b55
 8005b48:	08005b79 	.word	0x08005b79
 8005b4c:	08005b55 	.word	0x08005b55
 8005b50:	08005b79 	.word	0x08005b79
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	3303      	adds	r3, #3
 8005b5a:	089b      	lsrs	r3, r3, #2
 8005b5c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b5e:	8afa      	ldrh	r2, [r7, #22]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d91c      	bls.n	8005ba4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b76:	e015      	b.n	8005ba4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	3303      	adds	r3, #3
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b82:	8afa      	ldrh	r2, [r7, #22]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d90a      	bls.n	8005ba8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b9e:	e003      	b.n	8005ba8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e002      	b.n	8005baa <USB_HC_StartXfer+0x25e>
        break;
 8005ba4:	bf00      	nop
 8005ba6:	e000      	b.n	8005baa <USB_HC_StartXfer+0x25e>
        break;
 8005ba8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68d9      	ldr	r1, [r3, #12]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	785a      	ldrb	r2, [r3, #1]
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2000      	movs	r0, #0
 8005bba:	9000      	str	r0, [sp, #0]
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff fb31 	bl	8005224 <USB_WritePacket>
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3728      	adds	r7, #40	; 0x28
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	1ff80000 	.word	0x1ff80000

08005bd0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	b29b      	uxth	r3, r3
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr

08005bf2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	b089      	sub	sp, #36	; 0x24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	0c9b      	lsrs	r3, r3, #18
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	0fdb      	lsrs	r3, r3, #31
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d104      	bne.n	8005c4c <USB_HC_Halt+0x5a>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e0c8      	b.n	8005dde <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <USB_HC_Halt+0x66>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d163      	bne.n	8005d20 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c76:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f040 80ab 	bne.w	8005ddc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d133      	bne.n	8005cfa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cb0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ccc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cd0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cde:	d81d      	bhi.n	8005d1c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf6:	d0ec      	beq.n	8005cd2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cf8:	e070      	b.n	8005ddc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d18:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d1a:	e05f      	b.n	8005ddc <USB_HC_Halt+0x1ea>
            break;
 8005d1c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d1e:	e05d      	b.n	8005ddc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	69fa      	ldr	r2, [r7, #28]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d3e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d133      	bne.n	8005db8 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69ba      	ldr	r2, [r7, #24]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d6e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d8e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d9c:	d81d      	bhi.n	8005dda <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db4:	d0ec      	beq.n	8005d90 <USB_HC_Halt+0x19e>
 8005db6:	e011      	b.n	8005ddc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	e000      	b.n	8005ddc <USB_HC_Halt+0x1ea>
          break;
 8005dda:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3724      	adds	r7, #36	; 0x24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005e00:	2301      	movs	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	04da      	lsls	r2, r3, #19
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <USB_DoPing+0x74>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e1c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e34:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e3c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	1ff80000 	.word	0x1ff80000

08005e64 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff f911 	bl	80050a0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e7e:	2110      	movs	r1, #16
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f96b 	bl	800515c <USB_FlushTxFifo>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff f997 	bl	80051c4 <USB_FlushRxFifo>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	61bb      	str	r3, [r7, #24]
 8005ea4:	e01f      	b.n	8005ee6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ebc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ecc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005eda:	461a      	mov	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b0f      	cmp	r3, #15
 8005eea:	d9dc      	bls.n	8005ea6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005eec:	2300      	movs	r3, #0
 8005eee:	61bb      	str	r3, [r7, #24]
 8005ef0:	e034      	b.n	8005f5c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f08:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f26:	461a      	mov	r2, r3
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f38:	d80c      	bhi.n	8005f54 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f50:	d0ec      	beq.n	8005f2c <USB_StopHost+0xc8>
 8005f52:	e000      	b.n	8005f56 <USB_StopHost+0xf2>
        break;
 8005f54:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	d9c7      	bls.n	8005ef2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f68:	461a      	mov	r2, r3
 8005f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295
 8005f76:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff f880 	bl	800507e <USB_EnableGlobalInt>

  return ret;
 8005f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3720      	adds	r7, #32
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f88:	b590      	push	{r4, r7, lr}
 8005f8a:	b08b      	sub	sp, #44	; 0x2c
 8005f8c:	af04      	add	r7, sp, #16
 8005f8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f9a:	7919      	ldrb	r1, [r3, #4]
 8005f9c:	23ff      	movs	r3, #255	; 0xff
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 ff15 	bl	8006dd0 <USBH_FindInterface>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005faa:	7dbb      	ldrb	r3, [r7, #22]
 8005fac:	2bff      	cmp	r3, #255	; 0xff
 8005fae:	d002      	beq.n	8005fb6 <USBH_HID_InterfaceInit+0x2e>
 8005fb0:	7dbb      	ldrb	r3, [r7, #22]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d901      	bls.n	8005fba <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e108      	b.n	80061cc <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8005fba:	7dbb      	ldrb	r3, [r7, #22]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 feea 	bl	8006d98 <USBH_SelectInterface>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8005fc8:	7d7b      	ldrb	r3, [r7, #21]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d001      	beq.n	8005fd2 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e0fc      	b.n	80061cc <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005fd8:	2034      	movs	r0, #52	; 0x34
 8005fda:	f002 fd51 	bl	8008a80 <malloc>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8005ff2:	2302      	movs	r3, #2
 8005ff4:	e0ea      	b.n	80061cc <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005ff6:	2234      	movs	r2, #52	; 0x34
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	6938      	ldr	r0, [r7, #16]
 8005ffc:	f002 fd50 	bl	8008aa0 <memset>

  HID_Handle->state = HID_ERROR;
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	2207      	movs	r2, #7
 8006004:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8006006:	7dbb      	ldrb	r3, [r7, #22]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	211a      	movs	r1, #26
 800600c:	fb01 f303 	mul.w	r3, r1, r3
 8006010:	4413      	add	r3, r2
 8006012:	f203 3349 	addw	r3, r3, #841	; 0x349
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d103      	bne.n	8006024 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4a6d      	ldr	r2, [pc, #436]	; (80061d4 <USBH_HID_InterfaceInit+0x24c>)
 8006020:	631a      	str	r2, [r3, #48]	; 0x30
 8006022:	e010      	b.n	8006046 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8006024:	7dbb      	ldrb	r3, [r7, #22]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	211a      	movs	r1, #26
 800602a:	fb01 f303 	mul.w	r3, r1, r3
 800602e:	4413      	add	r3, r2
 8006030:	f203 3349 	addw	r3, r3, #841	; 0x349
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4a66      	ldr	r2, [pc, #408]	; (80061d8 <USBH_HID_InterfaceInit+0x250>)
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
 8006040:	e001      	b.n	8006046 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8006042:	2302      	movs	r3, #2
 8006044:	e0c2      	b.n	80061cc <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	2200      	movs	r2, #0
 800604a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2200      	movs	r2, #0
 8006050:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006052:	7dbb      	ldrb	r3, [r7, #22]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	211a      	movs	r1, #26
 8006058:	fb01 f303 	mul.w	r3, r1, r3
 800605c:	4413      	add	r3, r2
 800605e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006068:	7dbb      	ldrb	r3, [r7, #22]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	211a      	movs	r1, #26
 800606e:	fb01 f303 	mul.w	r3, r1, r3
 8006072:	4413      	add	r3, r2
 8006074:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006078:	881a      	ldrh	r2, [r3, #0]
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800607e:	7dbb      	ldrb	r3, [r7, #22]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	211a      	movs	r1, #26
 8006084:	fb01 f303 	mul.w	r3, r1, r3
 8006088:	4413      	add	r3, r2
 800608a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	b29a      	uxth	r2, r3
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	8b9b      	ldrh	r3, [r3, #28]
 800609a:	2b09      	cmp	r3, #9
 800609c:	d802      	bhi.n	80060a4 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	220a      	movs	r2, #10
 80060a2:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 80060a4:	7dbb      	ldrb	r3, [r7, #22]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	211a      	movs	r1, #26
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	4413      	add	r3, r2
 80060b0:	f203 3346 	addw	r3, r3, #838	; 0x346
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	bf28      	it	cs
 80060ba:	2302      	movcs	r3, #2
 80060bc:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
 80060c2:	e07d      	b.n	80061c0 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 80060c4:	7dbb      	ldrb	r3, [r7, #22]
 80060c6:	7df9      	ldrb	r1, [r7, #23]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	3101      	adds	r1, #1
 80060cc:	00c9      	lsls	r1, r1, #3
 80060ce:	201a      	movs	r0, #26
 80060d0:	fb00 f303 	mul.w	r3, r0, r3
 80060d4:	440b      	add	r3, r1
 80060d6:	4413      	add	r3, r2
 80060d8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b25b      	sxtb	r3, r3
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	da35      	bge.n	8006150 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 80060e4:	7dbb      	ldrb	r3, [r7, #22]
 80060e6:	7df9      	ldrb	r1, [r7, #23]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	3101      	adds	r1, #1
 80060ec:	00c9      	lsls	r1, r1, #3
 80060ee:	201a      	movs	r0, #26
 80060f0:	fb00 f303 	mul.w	r3, r0, r3
 80060f4:	440b      	add	r3, r1
 80060f6:	4413      	add	r3, r2
 80060f8:	f203 3346 	addw	r3, r3, #838	; 0x346
 80060fc:	781a      	ldrb	r2, [r3, #0]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	791b      	ldrb	r3, [r3, #4]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f002 f958 	bl	80083be <USBH_AllocPipe>
 800610e:	4603      	mov	r3, r0
 8006110:	461a      	mov	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	7859      	ldrb	r1, [r3, #1]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	7918      	ldrb	r0, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	8b12      	ldrh	r2, [r2, #24]
 800612e:	9202      	str	r2, [sp, #8]
 8006130:	2203      	movs	r2, #3
 8006132:	9201      	str	r2, [sp, #4]
 8006134:	9300      	str	r3, [sp, #0]
 8006136:	4623      	mov	r3, r4
 8006138:	4602      	mov	r2, r0
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f002 f910 	bl	8008360 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2200      	movs	r2, #0
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f002 fc08 	bl	800895e <USBH_LL_SetToggle>
 800614e:	e034      	b.n	80061ba <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8006150:	7dbb      	ldrb	r3, [r7, #22]
 8006152:	7df9      	ldrb	r1, [r7, #23]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	3101      	adds	r1, #1
 8006158:	00c9      	lsls	r1, r1, #3
 800615a:	201a      	movs	r0, #26
 800615c:	fb00 f303 	mul.w	r3, r0, r3
 8006160:	440b      	add	r3, r1
 8006162:	4413      	add	r3, r2
 8006164:	f203 3346 	addw	r3, r3, #838	; 0x346
 8006168:	781a      	ldrb	r2, [r3, #0]
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	78db      	ldrb	r3, [r3, #3]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f002 f922 	bl	80083be <USBH_AllocPipe>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	7819      	ldrb	r1, [r3, #0]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	78d8      	ldrb	r0, [r3, #3]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	8b12      	ldrh	r2, [r2, #24]
 800619a:	9202      	str	r2, [sp, #8]
 800619c:	2203      	movs	r2, #3
 800619e:	9201      	str	r2, [sp, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	4623      	mov	r3, r4
 80061a4:	4602      	mov	r2, r0
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f002 f8da 	bl	8008360 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2200      	movs	r2, #0
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 fbd2 	bl	800895e <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	3301      	adds	r3, #1
 80061be:	75fb      	strb	r3, [r7, #23]
 80061c0:	7dfa      	ldrb	r2, [r7, #23]
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	f4ff af7d 	bcc.w	80060c4 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd90      	pop	{r4, r7, pc}
 80061d4:	080068d9 	.word	0x080068d9
 80061d8:	08006981 	.word	0x08006981

080061dc <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00e      	beq.n	8006214 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	785b      	ldrb	r3, [r3, #1]
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f002 f8ce 	bl	800839e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f002 f8f9 	bl	8008400 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00e      	beq.n	800623a <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f002 f8bb 	bl	800839e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f002 f8e6 	bl	8008400 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4618      	mov	r0, r3
 8006250:	f002 fc1e 	bl	8008a90 <free>
    phost->pActiveClass->pData = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800625a:	2200      	movs	r2, #0
 800625c:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8006270:	2301      	movs	r3, #1
 8006272:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8006274:	2301      	movs	r3, #1
 8006276:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800627e:	69db      	ldr	r3, [r3, #28]
 8006280:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	795b      	ldrb	r3, [r3, #5]
 8006286:	2b05      	cmp	r3, #5
 8006288:	d860      	bhi.n	800634c <USBH_HID_ClassRequest+0xe4>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <USBH_HID_ClassRequest+0x28>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062a9 	.word	0x080062a9
 8006294:	0800634d 	.word	0x0800634d
 8006298:	080062c3 	.word	0x080062c3
 800629c:	080062a9 	.word	0x080062a9
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	08006317 	.word	0x08006317
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	331c      	adds	r3, #28
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f000 f9cd 	bl	8006654 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2202      	movs	r2, #2
 80062be:	715a      	strb	r2, [r3, #5]

      break;
 80062c0:	e04b      	b.n	800635a <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f930 	bl	800652e <USBH_HID_GetHIDReportDescriptor>
 80062ce:	4603      	mov	r3, r0
 80062d0:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 80062d2:	7bbb      	ldrb	r3, [r7, #14]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2204      	movs	r2, #4
 80062dc:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 80062de:	e037      	b.n	8006350 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80062e0:	7bbb      	ldrb	r3, [r7, #14]
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d134      	bne.n	8006350 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 80062e6:	2302      	movs	r3, #2
 80062e8:	73fb      	strb	r3, [r7, #15]
      break;
 80062ea:	e031      	b.n	8006350 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 80062ec:	2200      	movs	r2, #0
 80062ee:	2100      	movs	r1, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f935 	bl	8006560 <USBH_HID_SetIdle>
 80062f6:	4603      	mov	r3, r0
 80062f8:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	2205      	movs	r2, #5
 8006304:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8006306:	e025      	b.n	8006354 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8006308:	7bbb      	ldrb	r3, [r7, #14]
 800630a:	2b03      	cmp	r3, #3
 800630c:	d122      	bne.n	8006354 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2205      	movs	r2, #5
 8006312:	715a      	strb	r2, [r3, #5]
      break;
 8006314:	e01e      	b.n	8006354 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8006316:	2100      	movs	r1, #0
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f975 	bl	8006608 <USBH_HID_SetProtocol>
 800631e:	4603      	mov	r3, r0
 8006320:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8006322:	7bbb      	ldrb	r3, [r7, #14]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2201      	movs	r2, #1
 800632c:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006334:	2102      	movs	r1, #2
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
        status = USBH_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800633e:	e00b      	b.n	8006358 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d108      	bne.n	8006358 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8006346:	2302      	movs	r3, #2
 8006348:	73fb      	strb	r3, [r7, #15]
      break;
 800634a:	e005      	b.n	8006358 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 800634c:	bf00      	nop
 800634e:	e004      	b.n	800635a <USBH_HID_ClassRequest+0xf2>
      break;
 8006350:	bf00      	nop
 8006352:	e002      	b.n	800635a <USBH_HID_ClassRequest+0xf2>
      break;
 8006354:	bf00      	nop
 8006356:	e000      	b.n	800635a <USBH_HID_ClassRequest+0xf2>
      break;
 8006358:	bf00      	nop
  }

  return status;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af02      	add	r7, sp, #8
 800636a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	789b      	ldrb	r3, [r3, #2]
 800637e:	2b06      	cmp	r3, #6
 8006380:	f200 80a9 	bhi.w	80064d6 <USBH_HID_Process+0x172>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <USBH_HID_Process+0x28>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063a9 	.word	0x080063a9
 8006390:	080063b9 	.word	0x080063b9
 8006394:	080064d7 	.word	0x080064d7
 8006398:	080064d7 	.word	0x080064d7
 800639c:	08006429 	.word	0x08006429
 80063a0:	08006413 	.word	0x08006413
 80063a4:	08006457 	.word	0x08006457
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	2201      	movs	r2, #1
 80063b4:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063b6:	e093      	b.n	80064e0 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	8b1b      	ldrh	r3, [r3, #24]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	4613      	mov	r3, r2
 80063c6:	2200      	movs	r2, #0
 80063c8:	2101      	movs	r1, #1
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f8f0 	bl	80065b0 <USBH_HID_GetReport>
 80063d0:	4603      	mov	r3, r0
 80063d2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2205      	movs	r2, #5
 80063de:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80063e0:	e07e      	b.n	80064e0 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d105      	bne.n	80063f4 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2201      	movs	r2, #1
 80063ec:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	75fb      	strb	r3, [r7, #23]
      break;
 80063f2:	e075      	b.n	80064e0 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 80063f4:	7dfb      	ldrb	r3, [r7, #23]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d105      	bne.n	8006406 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2205      	movs	r2, #5
 80063fe:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e06c      	b.n	80064e0 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2207      	movs	r2, #7
 800640a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800640c:	2302      	movs	r3, #2
 800640e:	75fb      	strb	r3, [r7, #23]
      break;
 8006410:	e066      	b.n	80064e0 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d05c      	beq.n	80064da <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	2204      	movs	r2, #4
 8006424:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006426:	e058      	b.n	80064da <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006430:	b2da      	uxtb	r2, r3
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 ff73 	bl	8008322 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2206      	movs	r2, #6
 8006440:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8006454:	e044      	b.n	80064e0 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	785b      	ldrb	r3, [r3, #1]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f002 fa5d 	bl	800891c <USBH_LL_GetURBState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d120      	bne.n	80064aa <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	785b      	ldrb	r3, [r3, #1]
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f002 f9c2 	bl	80087f8 <USBH_LL_GetLastXferSize>
 8006474:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	d12e      	bne.n	80064de <USBH_HID_Process+0x17a>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d02b      	beq.n	80064de <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f103 0008 	add.w	r0, r3, #8
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	6959      	ldr	r1, [r3, #20]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	8b1b      	ldrh	r3, [r3, #24]
 8006494:	461a      	mov	r2, r3
 8006496:	f000 f9ca 	bl	800682e <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fa fec0 	bl	8001228 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80064a8:	e019      	b.n	80064de <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	785b      	ldrb	r3, [r3, #1]
 80064ae:	4619      	mov	r1, r3
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f002 fa33 	bl	800891c <USBH_LL_GetURBState>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d110      	bne.n	80064de <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	7e9b      	ldrb	r3, [r3, #26]
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fa51 	bl	800796a <USBH_ClrFeature>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d107      	bne.n	80064de <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	2204      	movs	r2, #4
 80064d2:	709a      	strb	r2, [r3, #2]
      break;
 80064d4:	e003      	b.n	80064de <USBH_HID_Process+0x17a>

    default:
      break;
 80064d6:	bf00      	nop
 80064d8:	e002      	b.n	80064e0 <USBH_HID_Process+0x17c>
      break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <USBH_HID_Process+0x17c>
      break;
 80064de:	bf00      	nop
  }

  return status;
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop

080064ec <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	789b      	ldrb	r3, [r3, #2]
 8006502:	2b06      	cmp	r3, #6
 8006504:	d10c      	bne.n	8006520 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	8b92      	ldrh	r2, [r2, #28]
 8006516:	4293      	cmp	r3, r2
 8006518:	d302      	bcc.n	8006520 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2204      	movs	r2, #4
 800651e:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b086      	sub	sp, #24
 8006532:	af02      	add	r7, sp, #8
 8006534:	6078      	str	r0, [r7, #4]
 8006536:	460b      	mov	r3, r1
 8006538:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	4613      	mov	r3, r2
 8006546:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800654a:	2101      	movs	r1, #1
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f001 f96c 	bl	800782a <USBH_GetDescriptor>
 8006552:	4603      	mov	r3, r0
 8006554:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8006556:	7bfb      	ldrb	r3, [r7, #15]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	70fb      	strb	r3, [r7, #3]
 800656c:	4613      	mov	r3, r2
 800656e:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2221      	movs	r2, #33	; 0x21
 8006574:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	220a      	movs	r2, #10
 800657a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	b29b      	uxth	r3, r3
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	b29a      	uxth	r2, r3
 8006584:	78bb      	ldrb	r3, [r7, #2]
 8006586:	b29b      	uxth	r3, r3
 8006588:	4313      	orrs	r3, r2
 800658a:	b29a      	uxth	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800659c:	2200      	movs	r2, #0
 800659e:	2100      	movs	r1, #0
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f001 fcaf 	bl	8007f04 <USBH_CtlReq>
 80065a6:	4603      	mov	r3, r0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	607b      	str	r3, [r7, #4]
 80065ba:	460b      	mov	r3, r1
 80065bc:	72fb      	strb	r3, [r7, #11]
 80065be:	4613      	mov	r3, r2
 80065c0:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	22a1      	movs	r2, #161	; 0xa1
 80065c6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2201      	movs	r2, #1
 80065cc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80065ce:	7afb      	ldrb	r3, [r7, #11]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	021b      	lsls	r3, r3, #8
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	7abb      	ldrb	r3, [r7, #10]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4313      	orrs	r3, r2
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 80065e8:	7e3b      	ldrb	r3, [r7, #24]
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 80065f0:	7e3b      	ldrb	r3, [r7, #24]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f001 fc83 	bl	8007f04 <USBH_CtlReq>
 80065fe:	4603      	mov	r3, r0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2221      	movs	r2, #33	; 0x21
 8006618:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	220b      	movs	r2, #11
 800661e:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	825a      	strh	r2, [r3, #18]
 800662c:	e002      	b.n	8006634 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006640:	2200      	movs	r2, #0
 8006642:	2100      	movs	r1, #0
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 fc5d 	bl	8007f04 <USBH_CtlReq>
 800664a:	4603      	mov	r3, r0

}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	3302      	adds	r3, #2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	b29a      	uxth	r2, r3
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	3303      	adds	r3, #3
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	b29b      	uxth	r3, r3
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	b29b      	uxth	r3, r3
 8006676:	4313      	orrs	r3, r2
 8006678:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800667a:	897b      	ldrh	r3, [r7, #10]
 800667c:	2b09      	cmp	r3, #9
 800667e:	d943      	bls.n	8006708 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 8006680:	2309      	movs	r3, #9
 8006682:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8006684:	e03c      	b.n	8006700 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006686:	f107 0308 	add.w	r3, r7, #8
 800668a:	4619      	mov	r1, r3
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f001 fc1e 	bl	8007ece <USBH_GetNextDesc>
 8006692:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b21      	cmp	r3, #33	; 0x21
 800669a:	d131      	bne.n	8006700 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	781a      	ldrb	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	785a      	ldrb	r2, [r3, #1]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3302      	adds	r3, #2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	3303      	adds	r3, #3
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	b29b      	uxth	r3, r3
 80066c0:	4313      	orrs	r3, r2
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	791a      	ldrb	r2, [r3, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	795a      	ldrb	r2, [r3, #5]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	799a      	ldrb	r2, [r3, #6]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3307      	adds	r3, #7
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3308      	adds	r3, #8
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	811a      	strh	r2, [r3, #8]
        break;
 80066fc:	bf00      	nop
      }
    }
  }
}
 80066fe:	e003      	b.n	8006708 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8006700:	893b      	ldrh	r3, [r7, #8]
 8006702:	897a      	ldrh	r2, [r7, #10]
 8006704:	429a      	cmp	r2, r3
 8006706:	d8be      	bhi.n	8006686 <USBH_HID_ParseHIDDesc+0x32>
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8006710:	b480      	push	{r7}
 8006712:	b085      	sub	sp, #20
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8006718:	23ff      	movs	r3, #255	; 0xff
 800671a:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b0b      	cmp	r3, #11
 8006724:	d117      	bne.n	8006756 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800672c:	4619      	mov	r1, r3
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	231a      	movs	r3, #26
 8006732:	fb01 f303 	mul.w	r3, r1, r3
 8006736:	4413      	add	r3, r2
 8006738:	f203 3349 	addw	r3, r3, #841	; 0x349
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d102      	bne.n	800674c <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8006746:	2302      	movs	r3, #2
 8006748:	73fb      	strb	r3, [r7, #15]
 800674a:	e004      	b.n	8006756 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800674c:	7bbb      	ldrb	r3, [r7, #14]
 800674e:	2b02      	cmp	r3, #2
 8006750:	d101      	bne.n	8006756 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88fa      	ldrh	r2, [r7, #6]
 8006788:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	601a      	str	r2, [r3, #0]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	7a9b      	ldrb	r3, [r3, #10]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d131      	bne.n	800681a <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80067bc:	2300      	movs	r3, #0
 80067be:	82fb      	strh	r3, [r7, #22]
 80067c0:	e027      	b.n	8006812 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	88da      	ldrh	r2, [r3, #6]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	889b      	ldrh	r3, [r3, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d019      	beq.n	8006802 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	88d2      	ldrh	r2, [r2, #6]
 80067d6:	441a      	add	r2, r3
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	1c59      	adds	r1, r3, #1
 80067dc:	6139      	str	r1, [r7, #16]
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	88db      	ldrh	r3, [r3, #6]
 80067e6:	3301      	adds	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	88da      	ldrh	r2, [r3, #6]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	891b      	ldrh	r3, [r3, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d108      	bne.n	800680c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	80da      	strh	r2, [r3, #6]
 8006800:	e004      	b.n	800680c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	729a      	strb	r2, [r3, #10]
        return i;
 8006808:	8afb      	ldrh	r3, [r7, #22]
 800680a:	e00a      	b.n	8006822 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800680c:	8afb      	ldrh	r3, [r7, #22]
 800680e:	3301      	adds	r3, #1
 8006810:	82fb      	strh	r3, [r7, #22]
 8006812:	8afa      	ldrh	r2, [r7, #22]
 8006814:	88fb      	ldrh	r3, [r7, #6]
 8006816:	429a      	cmp	r2, r3
 8006818:	d3d3      	bcc.n	80067c2 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006820:	88fb      	ldrh	r3, [r7, #6]
}
 8006822:	4618      	mov	r0, r3
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800682e:	b480      	push	{r7}
 8006830:	b087      	sub	sp, #28
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	4613      	mov	r3, r2
 800683a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	7a9b      	ldrb	r3, [r3, #10]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d13c      	bne.n	80068c2 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800684e:	2300      	movs	r3, #0
 8006850:	82fb      	strh	r3, [r7, #22]
 8006852:	e032      	b.n	80068ba <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	889b      	ldrh	r3, [r3, #4]
 8006858:	3301      	adds	r3, #1
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	88d2      	ldrh	r2, [r2, #6]
 800685e:	4293      	cmp	r3, r2
 8006860:	d00a      	beq.n	8006878 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	889b      	ldrh	r3, [r3, #4]
 8006866:	3301      	adds	r3, #1
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 800686c:	4293      	cmp	r3, r2
 800686e:	d108      	bne.n	8006882 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	88db      	ldrh	r3, [r3, #6]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	729a      	strb	r2, [r3, #10]
        return i;
 800687e:	8afb      	ldrh	r3, [r7, #22]
 8006880:	e023      	b.n	80068ca <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	613a      	str	r2, [r7, #16]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	8889      	ldrh	r1, [r1, #4]
 8006890:	440a      	add	r2, r1
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	7013      	strb	r3, [r2, #0]
        f->head++;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	889b      	ldrh	r3, [r3, #4]
 800689a:	3301      	adds	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	889a      	ldrh	r2, [r3, #4]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	891b      	ldrh	r3, [r3, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d102      	bne.n	80068b4 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80068b4:	8afb      	ldrh	r3, [r7, #22]
 80068b6:	3301      	adds	r3, #1
 80068b8:	82fb      	strh	r3, [r7, #22]
 80068ba:	8afa      	ldrh	r2, [r7, #22]
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d3c8      	bcc.n	8006854 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80068c8:	88fb      	ldrh	r3, [r7, #6]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80068f0:	4b20      	ldr	r3, [pc, #128]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80068f6:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 80068fe:	2200      	movs	r2, #0
 8006900:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 8006904:	2200      	movs	r2, #0
 8006906:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8006908:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 800690a:	2200      	movs	r2, #0
 800690c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 8006910:	2200      	movs	r2, #0
 8006912:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8006914:	4b17      	ldr	r3, [pc, #92]	; (8006974 <USBH_HID_KeybdInit+0x9c>)
 8006916:	2200      	movs	r2, #0
 8006918:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e00c      	b.n	800693a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006920:	4a15      	ldr	r2, [pc, #84]	; (8006978 <USBH_HID_KeybdInit+0xa0>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2100      	movs	r1, #0
 8006926:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800692a:	4a14      	ldr	r2, [pc, #80]	; (800697c <USBH_HID_KeybdInit+0xa4>)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2100      	movs	r1, #0
 8006930:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	3301      	adds	r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d9ef      	bls.n	8006920 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	8b1b      	ldrh	r3, [r3, #24]
 8006944:	2b08      	cmp	r3, #8
 8006946:	d902      	bls.n	800694e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2208      	movs	r2, #8
 800694c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	4a0a      	ldr	r2, [pc, #40]	; (800697c <USBH_HID_KeybdInit+0xa4>)
 8006952:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f103 0008 	add.w	r0, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006960:	2250      	movs	r2, #80	; 0x50
 8006962:	4619      	mov	r1, r3
 8006964:	f7ff fefe 	bl	8006764 <USBH_HID_FifoInit>

  return USBH_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000208 	.word	0x20000208
 8006978:	20000220 	.word	0x20000220
 800697c:	20000218 	.word	0x20000218

08006980 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800698e:	69db      	ldr	r3, [r3, #28]
 8006990:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8006992:	4b1d      	ldr	r3, [pc, #116]	; (8006a08 <USBH_HID_MouseInit+0x88>)
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8006998:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <USBH_HID_MouseInit+0x88>)
 800699a:	2200      	movs	r2, #0
 800699c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800699e:	4b1a      	ldr	r3, [pc, #104]	; (8006a08 <USBH_HID_MouseInit+0x88>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80069a4:	4b18      	ldr	r3, [pc, #96]	; (8006a08 <USBH_HID_MouseInit+0x88>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80069aa:	4b17      	ldr	r3, [pc, #92]	; (8006a08 <USBH_HID_MouseInit+0x88>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e00c      	b.n	80069d0 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80069b6:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <USBH_HID_MouseInit+0x8c>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2100      	movs	r1, #0
 80069bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80069c0:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <USBH_HID_MouseInit+0x90>)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2100      	movs	r1, #0
 80069c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d9ef      	bls.n	80069b6 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	8b1b      	ldrh	r3, [r3, #24]
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d902      	bls.n	80069e4 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2208      	movs	r2, #8
 80069e2:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <USBH_HID_MouseInit+0x90>)
 80069e8:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f103 0008 	add.w	r0, r3, #8
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80069f6:	2250      	movs	r2, #80	; 0x50
 80069f8:	4619      	mov	r1, r3
 80069fa:	f7ff feb3 	bl	8006764 <USBH_HID_FifoInit>

  return USBH_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000228 	.word	0x20000228
 8006a0c:	20000230 	.word	0x20000230
 8006a10:	20000238 	.word	0x20000238

08006a14 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f80d 	bl	8006a3c <USBH_HID_MouseDecode>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8006a28:	4b03      	ldr	r3, [pc, #12]	; (8006a38 <USBH_HID_GetMouseInfo+0x24>)
 8006a2a:	e000      	b.n	8006a2e <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8006a2c:	2300      	movs	r3, #0
  }
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000228 	.word	0x20000228

08006a3c <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	8b1b      	ldrh	r3, [r3, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 8006a56:	2302      	movs	r3, #2
 8006a58:	e039      	b.n	8006ace <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f103 0008 	add.w	r0, r3, #8
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8b1b      	ldrh	r3, [r3, #24]
 8006a64:	461a      	mov	r2, r3
 8006a66:	491c      	ldr	r1, [pc, #112]	; (8006ad8 <USBH_HID_MouseDecode+0x9c>)
 8006a68:	f7ff fe98 	bl	800679c <USBH_HID_FifoRead>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8b1b      	ldrh	r3, [r3, #24]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d129      	bne.n	8006acc <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 8006a78:	2100      	movs	r1, #0
 8006a7a:	4818      	ldr	r0, [pc, #96]	; (8006adc <USBH_HID_MouseDecode+0xa0>)
 8006a7c:	f000 f83a 	bl	8006af4 <HID_ReadItem>
 8006a80:	4603      	mov	r3, r0
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	4b16      	ldr	r3, [pc, #88]	; (8006ae0 <USBH_HID_MouseDecode+0xa4>)
 8006a86:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 8006a88:	2100      	movs	r1, #0
 8006a8a:	4816      	ldr	r0, [pc, #88]	; (8006ae4 <USBH_HID_MouseDecode+0xa8>)
 8006a8c:	f000 f832 	bl	8006af4 <HID_ReadItem>
 8006a90:	4603      	mov	r3, r0
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	4b12      	ldr	r3, [pc, #72]	; (8006ae0 <USBH_HID_MouseDecode+0xa4>)
 8006a96:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4813      	ldr	r0, [pc, #76]	; (8006ae8 <USBH_HID_MouseDecode+0xac>)
 8006a9c:	f000 f82a 	bl	8006af4 <HID_ReadItem>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	; (8006ae0 <USBH_HID_MouseDecode+0xa4>)
 8006aa6:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4810      	ldr	r0, [pc, #64]	; (8006aec <USBH_HID_MouseDecode+0xb0>)
 8006aac:	f000 f822 	bl	8006af4 <HID_ReadItem>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	b2da      	uxtb	r2, r3
 8006ab4:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <USBH_HID_MouseDecode+0xa4>)
 8006ab6:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8006ab8:	2100      	movs	r1, #0
 8006aba:	480d      	ldr	r0, [pc, #52]	; (8006af0 <USBH_HID_MouseDecode+0xb4>)
 8006abc:	f000 f81a 	bl	8006af4 <HID_ReadItem>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <USBH_HID_MouseDecode+0xa4>)
 8006ac6:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 8006acc:	2302      	movs	r3, #2
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000230 	.word	0x20000230
 8006adc:	0802ecc0 	.word	0x0802ecc0
 8006ae0:	20000228 	.word	0x20000228
 8006ae4:	0802ece0 	.word	0x0802ece0
 8006ae8:	0802ec60 	.word	0x0802ec60
 8006aec:	0802ec80 	.word	0x0802ec80
 8006af0:	0802eca0 	.word	0x0802eca0

08006af4 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b089      	sub	sp, #36	; 0x24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	7a1b      	ldrb	r3, [r3, #8]
 8006b12:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	7a5b      	ldrb	r3, [r3, #9]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01a      	beq.n	8006b52 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	7a5b      	ldrb	r3, [r3, #9]
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d301      	bcc.n	8006b2a <HID_ReadItem+0x36>
    {
      return (0U);
 8006b26:	2300      	movs	r3, #0
 8006b28:	e078      	b.n	8006c1c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6852      	ldr	r2, [r2, #4]
 8006b30:	fb02 f303 	mul.w	r3, r2, r3
 8006b34:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8006b36:	7cfb      	ldrb	r3, [r7, #19]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	08db      	lsrs	r3, r3, #3
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	4413      	add	r3, r2
 8006b46:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8006b52:	2300      	movs	r3, #0
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	e00a      	b.n	8006b6e <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <HID_ReadItem+0x90>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	08db      	lsrs	r3, r3, #3
 8006b80:	3301      	adds	r3, #1
 8006b82:	e002      	b.n	8006b8a <HID_ReadItem+0x96>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	08db      	lsrs	r3, r3, #3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d8e3      	bhi.n	8006b58 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 8006b90:	7cfb      	ldrb	r3, [r7, #19]
 8006b92:	69fa      	ldr	r2, [r7, #28]
 8006b94:	40da      	lsrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba2:	43db      	mvns	r3, r3
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	69fa      	ldr	r2, [r7, #28]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d304      	bcc.n	8006bbc <HID_ReadItem+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d901      	bls.n	8006bc0 <HID_ReadItem+0xcc>
  {
    return (0U);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e02d      	b.n	8006c1c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7a9b      	ldrb	r3, [r3, #10]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01e      	beq.n	8006c06 <HID_ReadItem+0x112>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d014      	beq.n	8006c06 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	425b      	negs	r3, r3
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d101      	bne.n	8006bfa <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	e010      	b.n	8006c1c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	e00a      	b.n	8006c1c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HID_ReadItem+0x11e>
    {
      return (val);
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	e004      	b.n	8006c1c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3724      	adds	r7, #36	; 0x24
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	4613      	mov	r3, r2
 8006c34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d101      	bne.n	8006c40 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e029      	b.n	8006c94 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	79fa      	ldrb	r2, [r7, #7]
 8006c44:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f000 f81f 	bl	8006c9c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f001 fcff 	bl	8008690 <USBH_LL_Init>

  return USBH_OK;
 8006c92:	2300      	movs	r3, #0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3710      	adds	r7, #16
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e009      	b.n	8006cc2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	33e0      	adds	r3, #224	; 0xe0
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2200      	movs	r2, #0
 8006cba:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2b0f      	cmp	r3, #15
 8006cc6:	d9f2      	bls.n	8006cae <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	e009      	b.n	8006ce2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce8:	d3f1      	bcc.n	8006cce <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2240      	movs	r2, #64	; 0x40
 8006d0e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2201      	movs	r2, #1
 8006d22:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d016      	beq.n	8006d86 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10e      	bne.n	8006d80 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006d68:	1c59      	adds	r1, r3, #1
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	33de      	adds	r3, #222	; 0xde
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	73fb      	strb	r3, [r7, #15]
 8006d7e:	e004      	b.n	8006d8a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006d80:	2302      	movs	r3, #2
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	e001      	b.n	8006d8a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006d86:	2302      	movs	r3, #2
 8006d88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006dae:	78fa      	ldrb	r2, [r7, #3]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d204      	bcs.n	8006dbe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	78fa      	ldrb	r2, [r7, #3]
 8006db8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006dbc:	e001      	b.n	8006dc2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	4608      	mov	r0, r1
 8006dda:	4611      	mov	r1, r2
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	70fb      	strb	r3, [r7, #3]
 8006de2:	460b      	mov	r3, r1
 8006de4:	70bb      	strb	r3, [r7, #2]
 8006de6:	4613      	mov	r3, r2
 8006de8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006df8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dfa:	e025      	b.n	8006e48 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006dfc:	7dfb      	ldrb	r3, [r7, #23]
 8006dfe:	221a      	movs	r2, #26
 8006e00:	fb02 f303 	mul.w	r3, r2, r3
 8006e04:	3308      	adds	r3, #8
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	795b      	ldrb	r3, [r3, #5]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d002      	beq.n	8006e1e <USBH_FindInterface+0x4e>
 8006e18:	78fb      	ldrb	r3, [r7, #3]
 8006e1a:	2bff      	cmp	r3, #255	; 0xff
 8006e1c:	d111      	bne.n	8006e42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006e22:	78ba      	ldrb	r2, [r7, #2]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d002      	beq.n	8006e2e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e28:	78bb      	ldrb	r3, [r7, #2]
 8006e2a:	2bff      	cmp	r3, #255	; 0xff
 8006e2c:	d109      	bne.n	8006e42 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006e32:	787a      	ldrb	r2, [r7, #1]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d002      	beq.n	8006e3e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006e38:	787b      	ldrb	r3, [r7, #1]
 8006e3a:	2bff      	cmp	r3, #255	; 0xff
 8006e3c:	d101      	bne.n	8006e42 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006e3e:	7dfb      	ldrb	r3, [r7, #23]
 8006e40:	e006      	b.n	8006e50 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	3301      	adds	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d9d6      	bls.n	8006dfc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006e4e:	23ff      	movs	r3, #255	; 0xff
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	371c      	adds	r7, #28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f001 fc4f 	bl	8008708 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 fd68 	bl	8008942 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3708      	adds	r7, #8
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b088      	sub	sp, #32
 8006e80:	af04      	add	r7, sp, #16
 8006e82:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006e84:	2302      	movs	r3, #2
 8006e86:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d102      	bne.n	8006e9e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	2b0b      	cmp	r3, #11
 8006ea6:	f200 81be 	bhi.w	8007226 <USBH_Process+0x3aa>
 8006eaa:	a201      	add	r2, pc, #4	; (adr r2, 8006eb0 <USBH_Process+0x34>)
 8006eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb0:	08006ee1 	.word	0x08006ee1
 8006eb4:	08006f13 	.word	0x08006f13
 8006eb8:	08006f7b 	.word	0x08006f7b
 8006ebc:	080071c1 	.word	0x080071c1
 8006ec0:	08007227 	.word	0x08007227
 8006ec4:	0800701f 	.word	0x0800701f
 8006ec8:	08007167 	.word	0x08007167
 8006ecc:	08007055 	.word	0x08007055
 8006ed0:	08007075 	.word	0x08007075
 8006ed4:	08007095 	.word	0x08007095
 8006ed8:	080070d9 	.word	0x080070d9
 8006edc:	080071a9 	.word	0x080071a9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 819e 	beq.w	800722a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006ef4:	20c8      	movs	r0, #200	; 0xc8
 8006ef6:	f001 fd62 	bl	80089be <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 fc61 	bl	80087c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006f10:	e18b      	b.n	800722a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d107      	bne.n	8006f2c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f2a:	e18d      	b.n	8007248 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f36:	d914      	bls.n	8006f62 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f3e:	3301      	adds	r3, #1
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d903      	bls.n	8006f5a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	220d      	movs	r2, #13
 8006f56:	701a      	strb	r2, [r3, #0]
      break;
 8006f58:	e176      	b.n	8007248 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
      break;
 8006f60:	e172      	b.n	8007248 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f68:	f103 020a 	add.w	r2, r3, #10
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006f72:	200a      	movs	r0, #10
 8006f74:	f001 fd23 	bl	80089be <USBH_Delay>
      break;
 8006f78:	e166      	b.n	8007248 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f8a:	2104      	movs	r1, #4
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006f90:	2064      	movs	r0, #100	; 0x64
 8006f92:	f001 fd14 	bl	80089be <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fbec 	bl	8008774 <USBH_LL_GetSpeed>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2205      	movs	r2, #5
 8006faa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006fac:	2100      	movs	r1, #0
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fa05 	bl	80083be <USBH_AllocPipe>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 f9fd 	bl	80083be <USBH_AllocPipe>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7919      	ldrb	r1, [r3, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006fdc:	687a      	ldr	r2, [r7, #4]
 8006fde:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	9202      	str	r2, [sp, #8]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	9201      	str	r2, [sp, #4]
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	4603      	mov	r3, r0
 8006fec:	2280      	movs	r2, #128	; 0x80
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f9b6 	bl	8008360 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	7959      	ldrb	r1, [r3, #5]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007008:	b292      	uxth	r2, r2
 800700a:	9202      	str	r2, [sp, #8]
 800700c:	2200      	movs	r2, #0
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4603      	mov	r3, r0
 8007014:	2200      	movs	r2, #0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f9a2 	bl	8008360 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800701c:	e114      	b.n	8007248 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f918 	bl	8007254 <USBH_HandleEnum>
 8007024:	4603      	mov	r3, r0
 8007026:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	f040 80fe 	bne.w	800722e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007040:	2b01      	cmp	r3, #1
 8007042:	d103      	bne.n	800704c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2208      	movs	r2, #8
 8007048:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800704a:	e0f0      	b.n	800722e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2207      	movs	r2, #7
 8007050:	701a      	strb	r2, [r3, #0]
      break;
 8007052:	e0ec      	b.n	800722e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80e9 	beq.w	8007232 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007066:	2101      	movs	r1, #1
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2208      	movs	r2, #8
 8007070:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007072:	e0de      	b.n	8007232 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800707a:	b29b      	uxth	r3, r3
 800707c:	4619      	mov	r1, r3
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fc2c 	bl	80078dc <USBH_SetCfg>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	f040 80d5 	bne.w	8007236 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2209      	movs	r2, #9
 8007090:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007092:	e0d0      	b.n	8007236 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800709a:	f003 0320 	and.w	r3, r3, #32
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80070a2:	2101      	movs	r1, #1
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fc3c 	bl	8007922 <USBH_SetFeature>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d103      	bne.n	80070be <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	220a      	movs	r2, #10
 80070ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80070bc:	e0bd      	b.n	800723a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80070be:	7bbb      	ldrb	r3, [r7, #14]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	f040 80b9 	bne.w	800723a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	220a      	movs	r2, #10
 80070cc:	701a      	strb	r2, [r3, #0]
      break;
 80070ce:	e0b4      	b.n	800723a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	220a      	movs	r2, #10
 80070d4:	701a      	strb	r2, [r3, #0]
      break;
 80070d6:	e0b0      	b.n	800723a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80ad 	beq.w	800723e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]
 80070f0:	e016      	b.n	8007120 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80070f2:	7bfa      	ldrb	r2, [r7, #15]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	32de      	adds	r2, #222	; 0xde
 80070f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fc:	791a      	ldrb	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007104:	429a      	cmp	r2, r3
 8007106:	d108      	bne.n	800711a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007108:	7bfa      	ldrb	r2, [r7, #15]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	32de      	adds	r2, #222	; 0xde
 800710e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007118:	e005      	b.n	8007126 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	3301      	adds	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0e5      	beq.n	80070f2 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d016      	beq.n	800715e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d109      	bne.n	8007156 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2206      	movs	r2, #6
 8007146:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800714e:	2103      	movs	r1, #3
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007154:	e073      	b.n	800723e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	220d      	movs	r2, #13
 800715a:	701a      	strb	r2, [r3, #0]
      break;
 800715c:	e06f      	b.n	800723e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	220d      	movs	r2, #13
 8007162:	701a      	strb	r2, [r3, #0]
      break;
 8007164:	e06b      	b.n	800723e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d017      	beq.n	80071a0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4798      	blx	r3
 800717c:	4603      	mov	r3, r0
 800717e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d103      	bne.n	8007190 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	220b      	movs	r2, #11
 800718c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800718e:	e058      	b.n	8007242 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b02      	cmp	r3, #2
 8007196:	d154      	bne.n	8007242 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	220d      	movs	r2, #13
 800719c:	701a      	strb	r2, [r3, #0]
      break;
 800719e:	e050      	b.n	8007242 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	220d      	movs	r2, #13
 80071a4:	701a      	strb	r2, [r3, #0]
      break;
 80071a6:	e04c      	b.n	8007242 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d049      	beq.n	8007246 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	4798      	blx	r3
      }
      break;
 80071be:	e042      	b.n	8007246 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7ff fd67 	bl	8006c9c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d009      	beq.n	80071ec <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d005      	beq.n	8007202 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071fc:	2105      	movs	r1, #5
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b01      	cmp	r3, #1
 800720c:	d107      	bne.n	800721e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff fe20 	bl	8006e5c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800721c:	e014      	b.n	8007248 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fa72 	bl	8008708 <USBH_LL_Start>
      break;
 8007224:	e010      	b.n	8007248 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8007226:	bf00      	nop
 8007228:	e00e      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 800722a:	bf00      	nop
 800722c:	e00c      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 800722e:	bf00      	nop
 8007230:	e00a      	b.n	8007248 <USBH_Process+0x3cc>
    break;
 8007232:	bf00      	nop
 8007234:	e008      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 8007236:	bf00      	nop
 8007238:	e006      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 800723a:	bf00      	nop
 800723c:	e004      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 800723e:	bf00      	nop
 8007240:	e002      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 8007242:	bf00      	nop
 8007244:	e000      	b.n	8007248 <USBH_Process+0x3cc>
      break;
 8007246:	bf00      	nop
  }
  return USBH_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop

08007254 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b088      	sub	sp, #32
 8007258:	af04      	add	r7, sp, #16
 800725a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007260:	2301      	movs	r3, #1
 8007262:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b07      	cmp	r3, #7
 800726a:	f200 81c1 	bhi.w	80075f0 <USBH_HandleEnum+0x39c>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <USBH_HandleEnum+0x20>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	08007295 	.word	0x08007295
 8007278:	08007353 	.word	0x08007353
 800727c:	080073bd 	.word	0x080073bd
 8007280:	0800744b 	.word	0x0800744b
 8007284:	080074b5 	.word	0x080074b5
 8007288:	08007525 	.word	0x08007525
 800728c:	0800756b 	.word	0x0800756b
 8007290:	080075b1 	.word	0x080075b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007294:	2108      	movs	r1, #8
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fa50 	bl	800773c <USBH_Get_DevDesc>
 800729c:	4603      	mov	r3, r0
 800729e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d130      	bne.n	8007308 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7919      	ldrb	r1, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80072ca:	b292      	uxth	r2, r2
 80072cc:	9202      	str	r2, [sp, #8]
 80072ce:	2200      	movs	r2, #0
 80072d0:	9201      	str	r2, [sp, #4]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	4603      	mov	r3, r0
 80072d6:	2280      	movs	r2, #128	; 0x80
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f841 	bl	8008360 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7959      	ldrb	r1, [r3, #5]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80072f2:	b292      	uxth	r2, r2
 80072f4:	9202      	str	r2, [sp, #8]
 80072f6:	2200      	movs	r2, #0
 80072f8:	9201      	str	r2, [sp, #4]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	4603      	mov	r3, r0
 80072fe:	2200      	movs	r2, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 f82d 	bl	8008360 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007306:	e175      	b.n	80075f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007308:	7bbb      	ldrb	r3, [r7, #14]
 800730a:	2b03      	cmp	r3, #3
 800730c:	f040 8172 	bne.w	80075f4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007316:	3301      	adds	r3, #1
 8007318:	b2da      	uxtb	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007326:	2b03      	cmp	r3, #3
 8007328:	d903      	bls.n	8007332 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	220d      	movs	r2, #13
 800732e:	701a      	strb	r2, [r3, #0]
      break;
 8007330:	e160      	b.n	80075f4 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	795b      	ldrb	r3, [r3, #5]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f001 f861 	bl	8008400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	791b      	ldrb	r3, [r3, #4]
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 f85b 	bl	8008400 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
      break;
 8007350:	e150      	b.n	80075f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007352:	2112      	movs	r1, #18
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f9f1 	bl	800773c <USBH_Get_DevDesc>
 800735a:	4603      	mov	r3, r0
 800735c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800735e:	7bbb      	ldrb	r3, [r7, #14]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d103      	bne.n	800736c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800736a:	e145      	b.n	80075f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	2b03      	cmp	r3, #3
 8007370:	f040 8142 	bne.w	80075f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800737a:	3301      	adds	r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800738a:	2b03      	cmp	r3, #3
 800738c:	d903      	bls.n	8007396 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	220d      	movs	r2, #13
 8007392:	701a      	strb	r2, [r3, #0]
      break;
 8007394:	e130      	b.n	80075f8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	795b      	ldrb	r3, [r3, #5]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f82f 	bl	8008400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	791b      	ldrb	r3, [r3, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f001 f829 	bl	8008400 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
      break;
 80073ba:	e11d      	b.n	80075f8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80073bc:	2101      	movs	r1, #1
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa68 	bl	8007894 <USBH_SetAddress>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d132      	bne.n	8007434 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80073ce:	2002      	movs	r0, #2
 80073d0:	f001 faf5 	bl	80089be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2203      	movs	r2, #3
 80073e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	7919      	ldrb	r1, [r3, #4]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80073f6:	b292      	uxth	r2, r2
 80073f8:	9202      	str	r2, [sp, #8]
 80073fa:	2200      	movs	r2, #0
 80073fc:	9201      	str	r2, [sp, #4]
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	4603      	mov	r3, r0
 8007402:	2280      	movs	r2, #128	; 0x80
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 ffab 	bl	8008360 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7959      	ldrb	r1, [r3, #5]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800741e:	b292      	uxth	r2, r2
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	2200      	movs	r2, #0
 8007424:	9201      	str	r2, [sp, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4603      	mov	r3, r0
 800742a:	2200      	movs	r2, #0
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 ff97 	bl	8008360 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007432:	e0e3      	b.n	80075fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b03      	cmp	r3, #3
 8007438:	f040 80e0 	bne.w	80075fc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	220d      	movs	r2, #13
 8007440:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	705a      	strb	r2, [r3, #1]
      break;
 8007448:	e0d8      	b.n	80075fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800744a:	2109      	movs	r1, #9
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f99d 	bl	800778c <USBH_Get_CfgDesc>
 8007452:	4603      	mov	r3, r0
 8007454:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d103      	bne.n	8007464 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2204      	movs	r2, #4
 8007460:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007462:	e0cd      	b.n	8007600 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2b03      	cmp	r3, #3
 8007468:	f040 80ca 	bne.w	8007600 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007472:	3301      	adds	r3, #1
 8007474:	b2da      	uxtb	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007482:	2b03      	cmp	r3, #3
 8007484:	d903      	bls.n	800748e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	220d      	movs	r2, #13
 800748a:	701a      	strb	r2, [r3, #0]
      break;
 800748c:	e0b8      	b.n	8007600 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	795b      	ldrb	r3, [r3, #5]
 8007492:	4619      	mov	r1, r3
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 ffb3 	bl	8008400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	791b      	ldrb	r3, [r3, #4]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 ffad 	bl	8008400 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	e0a5      	b.n	8007600 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f965 	bl	800778c <USBH_Get_CfgDesc>
 80074c2:	4603      	mov	r3, r0
 80074c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074c6:	7bbb      	ldrb	r3, [r7, #14]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d103      	bne.n	80074d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2205      	movs	r2, #5
 80074d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80074d2:	e097      	b.n	8007604 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80074d4:	7bbb      	ldrb	r3, [r7, #14]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	f040 8094 	bne.w	8007604 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074e2:	3301      	adds	r3, #1
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d903      	bls.n	80074fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	220d      	movs	r2, #13
 80074fa:	701a      	strb	r2, [r3, #0]
      break;
 80074fc:	e082      	b.n	8007604 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	795b      	ldrb	r3, [r3, #5]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 ff7b 	bl	8008400 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	791b      	ldrb	r3, [r3, #4]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 ff75 	bl	8008400 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
      break;
 8007522:	e06f      	b.n	8007604 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800752a:	2b00      	cmp	r3, #0
 800752c:	d019      	beq.n	8007562 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800753a:	23ff      	movs	r3, #255	; 0xff
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f949 	bl	80077d4 <USBH_Get_StringDesc>
 8007542:	4603      	mov	r3, r0
 8007544:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2206      	movs	r2, #6
 8007550:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007552:	e059      	b.n	8007608 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d156      	bne.n	8007608 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2206      	movs	r2, #6
 800755e:	705a      	strb	r2, [r3, #1]
      break;
 8007560:	e052      	b.n	8007608 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2206      	movs	r2, #6
 8007566:	705a      	strb	r2, [r3, #1]
      break;
 8007568:	e04e      	b.n	8007608 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007570:	2b00      	cmp	r3, #0
 8007572:	d019      	beq.n	80075a8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007580:	23ff      	movs	r3, #255	; 0xff
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f926 	bl	80077d4 <USBH_Get_StringDesc>
 8007588:	4603      	mov	r3, r0
 800758a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800758c:	7bbb      	ldrb	r3, [r7, #14]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2207      	movs	r2, #7
 8007596:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007598:	e038      	b.n	800760c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800759a:	7bbb      	ldrb	r3, [r7, #14]
 800759c:	2b03      	cmp	r3, #3
 800759e:	d135      	bne.n	800760c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2207      	movs	r2, #7
 80075a4:	705a      	strb	r2, [r3, #1]
      break;
 80075a6:	e031      	b.n	800760c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2207      	movs	r2, #7
 80075ac:	705a      	strb	r2, [r3, #1]
      break;
 80075ae:	e02d      	b.n	800760c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d017      	beq.n	80075ea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80075c6:	23ff      	movs	r3, #255	; 0xff
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f903 	bl	80077d4 <USBH_Get_StringDesc>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80075dc:	e018      	b.n	8007610 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d115      	bne.n	8007610 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80075e4:	2300      	movs	r3, #0
 80075e6:	73fb      	strb	r3, [r7, #15]
      break;
 80075e8:	e012      	b.n	8007610 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
      break;
 80075ee:	e00f      	b.n	8007610 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80075f0:	bf00      	nop
 80075f2:	e00e      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 80075f4:	bf00      	nop
 80075f6:	e00c      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 80075f8:	bf00      	nop
 80075fa:	e00a      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 80075fc:	bf00      	nop
 80075fe:	e008      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 8007600:	bf00      	nop
 8007602:	e006      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 8007604:	bf00      	nop
 8007606:	e004      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 8007608:	bf00      	nop
 800760a:	e002      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 800760c:	bf00      	nop
 800760e:	e000      	b.n	8007612 <USBH_HandleEnum+0x3be>
      break;
 8007610:	bf00      	nop
  }
  return Status;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f804 	bl	800765e <USBH_HandleSof>
}
 8007656:	bf00      	nop
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b0b      	cmp	r3, #11
 800766e:	d10a      	bne.n	8007686 <USBH_HandleSof+0x28>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007676:	2b00      	cmp	r3, #0
 8007678:	d005      	beq.n	8007686 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
  }
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800769e:	bf00      	nop
}
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b083      	sub	sp, #12
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80076ba:	bf00      	nop
}
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f001 f812 	bl	800873e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fe6d 	bl	8008400 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	795b      	ldrb	r3, [r3, #5]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 fe67 	bl	8008400 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af02      	add	r7, sp, #8
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800774e:	78fb      	ldrb	r3, [r7, #3]
 8007750:	b29b      	uxth	r3, r3
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f864 	bl	800782a <USBH_GetDescriptor>
 8007762:	4603      	mov	r3, r0
 8007764:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10a      	bne.n	8007782 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	b292      	uxth	r2, r2
 800777c:	4619      	mov	r1, r3
 800777e:	f000 f918 	bl	80079b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af02      	add	r7, sp, #8
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	331c      	adds	r3, #28
 800779c:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800779e:	887b      	ldrh	r3, [r7, #2]
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a8:	2100      	movs	r1, #0
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f83d 	bl	800782a <USBH_GetDescriptor>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d107      	bne.n	80077ca <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80077ba:	887b      	ldrh	r3, [r7, #2]
 80077bc:	461a      	mov	r2, r3
 80077be:	68b9      	ldr	r1, [r7, #8]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f987 	bl	8007ad4 <USBH_ParseCfgDesc>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b088      	sub	sp, #32
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	461a      	mov	r2, r3
 80077e0:	460b      	mov	r3, r1
 80077e2:	72fb      	strb	r3, [r7, #11]
 80077e4:	4613      	mov	r3, r2
 80077e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80077f0:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80077f8:	893b      	ldrh	r3, [r7, #8]
 80077fa:	9300      	str	r3, [sp, #0]
 80077fc:	460b      	mov	r3, r1
 80077fe:	2100      	movs	r1, #0
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f812 	bl	800782a <USBH_GetDescriptor>
 8007806:	4603      	mov	r3, r0
 8007808:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800780a:	7dfb      	ldrb	r3, [r7, #23]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d107      	bne.n	8007820 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007816:	893a      	ldrh	r2, [r7, #8]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fb24 	bl	8007e68 <USBH_ParseStringDesc>
  }

  return status;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b084      	sub	sp, #16
 800782e:	af00      	add	r7, sp, #0
 8007830:	60f8      	str	r0, [r7, #12]
 8007832:	607b      	str	r3, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	72fb      	strb	r3, [r7, #11]
 8007838:	4613      	mov	r3, r2
 800783a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	789b      	ldrb	r3, [r3, #2]
 8007840:	2b01      	cmp	r3, #1
 8007842:	d11c      	bne.n	800787e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007844:	7afb      	ldrb	r3, [r7, #11]
 8007846:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800784a:	b2da      	uxtb	r2, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2206      	movs	r2, #6
 8007854:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	893a      	ldrh	r2, [r7, #8]
 800785a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800785c:	893b      	ldrh	r3, [r7, #8]
 800785e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007866:	d104      	bne.n	8007872 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f240 4209 	movw	r2, #1033	; 0x409
 800786e:	829a      	strh	r2, [r3, #20]
 8007870:	e002      	b.n	8007878 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8b3a      	ldrh	r2, [r7, #24]
 800787c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800787e:	8b3b      	ldrh	r3, [r7, #24]
 8007880:	461a      	mov	r2, r3
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fb3d 	bl	8007f04 <USBH_CtlReq>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	789b      	ldrb	r3, [r3, #2]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d10f      	bne.n	80078c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2205      	movs	r2, #5
 80078b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80078c8:	2200      	movs	r2, #0
 80078ca:	2100      	movs	r1, #0
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fb19 	bl	8007f04 <USBH_CtlReq>
 80078d2:	4603      	mov	r3, r0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	460b      	mov	r3, r1
 80078e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	789b      	ldrb	r3, [r3, #2]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d10e      	bne.n	800790e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2209      	movs	r2, #9
 80078fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	887a      	ldrh	r2, [r7, #2]
 8007900:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 faf6 	bl	8007f04 <USBH_CtlReq>
 8007918:	4603      	mov	r3, r0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3708      	adds	r7, #8
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	460b      	mov	r3, r1
 800792c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	789b      	ldrb	r3, [r3, #2]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d10f      	bne.n	8007956 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2203      	movs	r2, #3
 8007940:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	b29a      	uxth	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007956:	2200      	movs	r2, #0
 8007958:	2100      	movs	r1, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 fad2 	bl	8007f04 <USBH_CtlReq>
 8007960:	4603      	mov	r3, r0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b082      	sub	sp, #8
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	789b      	ldrb	r3, [r3, #2]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d10f      	bne.n	800799e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2202      	movs	r2, #2
 8007982:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	b29a      	uxth	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800799e:	2200      	movs	r2, #0
 80079a0:	2100      	movs	r1, #0
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 faae 	bl	8007f04 <USBH_CtlReq>
 80079a8:	4603      	mov	r3, r0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	60f8      	str	r0, [r7, #12]
 80079ba:	60b9      	str	r1, [r7, #8]
 80079bc:	4613      	mov	r3, r2
 80079be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	785a      	ldrb	r2, [r3, #1]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	3302      	adds	r3, #2
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	3303      	adds	r3, #3
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	021b      	lsls	r3, r3, #8
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	4313      	orrs	r3, r2
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	791a      	ldrb	r2, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	795a      	ldrb	r2, [r3, #5]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	799a      	ldrb	r2, [r3, #6]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	79da      	ldrb	r2, [r3, #7]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	79db      	ldrb	r3, [r3, #7]
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	dc11      	bgt.n	8007a38 <USBH_ParseDevDesc+0x86>
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	db16      	blt.n	8007a46 <USBH_ParseDevDesc+0x94>
 8007a18:	3b08      	subs	r3, #8
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	bf14      	ite	ne
 8007a2c:	2301      	movne	r3, #1
 8007a2e:	2300      	moveq	r3, #0
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d102      	bne.n	8007a3c <USBH_ParseDevDesc+0x8a>
 8007a36:	e006      	b.n	8007a46 <USBH_ParseDevDesc+0x94>
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d104      	bne.n	8007a46 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	79da      	ldrb	r2, [r3, #7]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	71da      	strb	r2, [r3, #7]
      break;
 8007a44:	e003      	b.n	8007a4e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2240      	movs	r2, #64	; 0x40
 8007a4a:	71da      	strb	r2, [r3, #7]
      break;
 8007a4c:	bf00      	nop
  }

  if (length > 8U)
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d939      	bls.n	8007ac8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3308      	adds	r3, #8
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	3309      	adds	r3, #9
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	330a      	adds	r3, #10
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	330b      	adds	r3, #11
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	021b      	lsls	r3, r3, #8
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	4313      	orrs	r3, r2
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	330c      	adds	r3, #12
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	330d      	adds	r3, #13
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	7b9a      	ldrb	r2, [r3, #14]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	7bda      	ldrb	r2, [r3, #15]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	7c1a      	ldrb	r2, [r3, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	7c5a      	ldrb	r2, [r3, #17]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	745a      	strb	r2, [r3, #17]
  }
}
 8007ac8:	bf00      	nop
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08c      	sub	sp, #48	; 0x30
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ae8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	781a      	ldrb	r2, [r3, #0]
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	785a      	ldrb	r2, [r3, #1]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
 8007b12:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	3302      	adds	r3, #2
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	3303      	adds	r3, #3
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	021b      	lsls	r3, r3, #8
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b30:	bf28      	it	cs
 8007b32:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	791a      	ldrb	r2, [r3, #4]
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	795a      	ldrb	r2, [r3, #5]
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	799a      	ldrb	r2, [r3, #6]
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	79da      	ldrb	r2, [r3, #7]
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	7a1a      	ldrb	r2, [r3, #8]
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	2b09      	cmp	r3, #9
 8007b6a:	d002      	beq.n	8007b72 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	2209      	movs	r2, #9
 8007b70:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007b72:	88fb      	ldrh	r3, [r7, #6]
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	f240 809d 	bls.w	8007cb4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007b7a:	2309      	movs	r3, #9
 8007b7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b82:	e081      	b.n	8007c88 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007b84:	f107 0316 	add.w	r3, r7, #22
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8c:	f000 f99f 	bl	8007ece <USBH_GetNextDesc>
 8007b90:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b94:	785b      	ldrb	r3, [r3, #1]
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d176      	bne.n	8007c88 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b09      	cmp	r3, #9
 8007ba0:	d002      	beq.n	8007ba8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	2209      	movs	r2, #9
 8007ba6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bac:	221a      	movs	r2, #26
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	6a3a      	ldr	r2, [r7, #32]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	3302      	adds	r3, #2
 8007bba:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bbe:	69f8      	ldr	r0, [r7, #28]
 8007bc0:	f000 f87e 	bl	8007cc0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007bce:	e043      	b.n	8007c58 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007bd0:	f107 0316 	add.w	r3, r7, #22
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bd8:	f000 f979 	bl	8007ece <USBH_GetNextDesc>
 8007bdc:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d138      	bne.n	8007c58 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	795b      	ldrb	r3, [r3, #5]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10f      	bne.n	8007c0e <USBH_ParseCfgDesc+0x13a>
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	799b      	ldrb	r3, [r3, #6]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d10b      	bne.n	8007c0e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	79db      	ldrb	r3, [r3, #7]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10f      	bne.n	8007c1e <USBH_ParseCfgDesc+0x14a>
 8007bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	d00b      	beq.n	8007c1e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	2209      	movs	r2, #9
 8007c0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c0c:	e007      	b.n	8007c1e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b07      	cmp	r3, #7
 8007c14:	d004      	beq.n	8007c20 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c18:	2207      	movs	r2, #7
 8007c1a:	701a      	strb	r2, [r3, #0]
 8007c1c:	e000      	b.n	8007c20 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007c1e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c24:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c28:	3201      	adds	r2, #1
 8007c2a:	00d2      	lsls	r2, r2, #3
 8007c2c:	211a      	movs	r1, #26
 8007c2e:	fb01 f303 	mul.w	r3, r1, r3
 8007c32:	4413      	add	r3, r2
 8007c34:	3308      	adds	r3, #8
 8007c36:	6a3a      	ldr	r2, [r7, #32]
 8007c38:	4413      	add	r3, r2
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c40:	69b9      	ldr	r1, [r7, #24]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f86b 	bl	8007d1e <USBH_ParseEPDesc>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007c4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c52:	3301      	adds	r3, #1
 8007c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	791b      	ldrb	r3, [r3, #4]
 8007c5c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d204      	bcs.n	8007c6e <USBH_ParseCfgDesc+0x19a>
 8007c64:	6a3b      	ldr	r3, [r7, #32]
 8007c66:	885a      	ldrh	r2, [r3, #2]
 8007c68:	8afb      	ldrh	r3, [r7, #22]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d8b0      	bhi.n	8007bd0 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d201      	bcs.n	8007c7e <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e01c      	b.n	8007cb8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c82:	3301      	adds	r3, #1
 8007c84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d805      	bhi.n	8007c9c <USBH_ParseCfgDesc+0x1c8>
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	885a      	ldrh	r2, [r3, #2]
 8007c94:	8afb      	ldrh	r3, [r7, #22]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	f63f af74 	bhi.w	8007b84 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	bf28      	it	cs
 8007ca4:	2302      	movcs	r3, #2
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d201      	bcs.n	8007cb4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e001      	b.n	8007cb8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3730      	adds	r7, #48	; 0x30
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781a      	ldrb	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	785a      	ldrb	r2, [r3, #1]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	789a      	ldrb	r2, [r3, #2]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	78da      	ldrb	r2, [r3, #3]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	791a      	ldrb	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	795a      	ldrb	r2, [r3, #5]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	799a      	ldrb	r2, [r3, #6]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	79da      	ldrb	r2, [r3, #7]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	7a1a      	ldrb	r2, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	721a      	strb	r2, [r3, #8]
}
 8007d12:	bf00      	nop
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b087      	sub	sp, #28
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	785a      	ldrb	r2, [r3, #1]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	789a      	ldrb	r2, [r3, #2]
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	78da      	ldrb	r2, [r3, #3]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b29a      	uxth	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3305      	adds	r3, #5
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4313      	orrs	r3, r2
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	799a      	ldrb	r2, [r3, #6]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	889b      	ldrh	r3, [r3, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d102      	bne.n	8007d80 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	75fb      	strb	r3, [r7, #23]
 8007d7e:	e033      	b.n	8007de8 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	889b      	ldrh	r3, [r3, #4]
 8007d84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d88:	f023 0307 	bic.w	r3, r3, #7
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	889b      	ldrh	r3, [r3, #4]
 8007d96:	b21a      	sxth	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	b299      	uxth	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3305      	adds	r3, #5
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	021b      	lsls	r3, r3, #8
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	430b      	orrs	r3, r1
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d110      	bne.n	8007dda <USBH_ParseEPDesc+0xbc>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	b299      	uxth	r1, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	3305      	adds	r3, #5
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	430b      	orrs	r3, r1
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	b21b      	sxth	r3, r3
 8007dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dd6:	b21b      	sxth	r3, r3
 8007dd8:	e001      	b.n	8007dde <USBH_ParseEPDesc+0xc0>
 8007dda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dde:	4313      	orrs	r3, r2
 8007de0:	b21b      	sxth	r3, r3
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d116      	bne.n	8007e20 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	78db      	ldrb	r3, [r3, #3]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d005      	beq.n	8007e0a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	78db      	ldrb	r3, [r3, #3]
 8007e02:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d127      	bne.n	8007e5a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	799b      	ldrb	r3, [r3, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <USBH_ParseEPDesc+0xfc>
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	799b      	ldrb	r3, [r3, #6]
 8007e16:	2b10      	cmp	r3, #16
 8007e18:	d91f      	bls.n	8007e5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	75fb      	strb	r3, [r7, #23]
 8007e1e:	e01c      	b.n	8007e5a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	78db      	ldrb	r3, [r3, #3]
 8007e24:	f003 0303 	and.w	r3, r3, #3
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d10a      	bne.n	8007e42 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	799b      	ldrb	r3, [r3, #6]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d003      	beq.n	8007e3c <USBH_ParseEPDesc+0x11e>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	799b      	ldrb	r3, [r3, #6]
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	d90e      	bls.n	8007e5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	75fb      	strb	r3, [r7, #23]
 8007e40:	e00b      	b.n	8007e5a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	78db      	ldrb	r3, [r3, #3]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d105      	bne.n	8007e5a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	799b      	ldrb	r3, [r3, #6]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007e56:	2303      	movs	r3, #3
 8007e58:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	371c      	adds	r7, #28
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	2b03      	cmp	r3, #3
 8007e7e:	d120      	bne.n	8007ec2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	1e9a      	subs	r2, r3, #2
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	bf28      	it	cs
 8007e8c:	4613      	movcs	r3, r2
 8007e8e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3302      	adds	r3, #2
 8007e94:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007e96:	2300      	movs	r3, #0
 8007e98:	82fb      	strh	r3, [r7, #22]
 8007e9a:	e00b      	b.n	8007eb4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007e9c:	8afb      	ldrh	r3, [r7, #22]
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	781a      	ldrb	r2, [r3, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007eae:	8afb      	ldrh	r3, [r7, #22]
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	82fb      	strh	r3, [r7, #22]
 8007eb4:	8afa      	ldrh	r2, [r7, #22]
 8007eb6:	8abb      	ldrh	r3, [r7, #20]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d3ef      	bcc.n	8007e9c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	881a      	ldrh	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	4413      	add	r3, r2
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3714      	adds	r7, #20
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007f12:	2301      	movs	r3, #1
 8007f14:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	789b      	ldrb	r3, [r3, #2]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d002      	beq.n	8007f24 <USBH_CtlReq+0x20>
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d00f      	beq.n	8007f42 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007f22:	e027      	b.n	8007f74 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	88fa      	ldrh	r2, [r7, #6]
 8007f2e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2201      	movs	r2, #1
 8007f34:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f40:	e018      	b.n	8007f74 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f81c 	bl	8007f80 <USBH_HandleControl>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007f4c:	7dfb      	ldrb	r3, [r7, #23]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <USBH_CtlReq+0x54>
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d106      	bne.n	8007f66 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	761a      	strb	r2, [r3, #24]
      break;
 8007f64:	e005      	b.n	8007f72 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d102      	bne.n	8007f72 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	709a      	strb	r2, [r3, #2]
      break;
 8007f72:	bf00      	nop
  }
  return status;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	7e1b      	ldrb	r3, [r3, #24]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	2b0a      	cmp	r3, #10
 8007f98:	f200 8156 	bhi.w	8008248 <USBH_HandleControl+0x2c8>
 8007f9c:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <USBH_HandleControl+0x24>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fd1 	.word	0x08007fd1
 8007fa8:	08007feb 	.word	0x08007feb
 8007fac:	08008055 	.word	0x08008055
 8007fb0:	0800807b 	.word	0x0800807b
 8007fb4:	080080b3 	.word	0x080080b3
 8007fb8:	080080dd 	.word	0x080080dd
 8007fbc:	0800812f 	.word	0x0800812f
 8007fc0:	08008151 	.word	0x08008151
 8007fc4:	0800818d 	.word	0x0800818d
 8007fc8:	080081b3 	.word	0x080081b3
 8007fcc:	080081f1 	.word	0x080081f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f103 0110 	add.w	r1, r3, #16
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	795b      	ldrb	r3, [r3, #5]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f943 	bl	8008268 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2202      	movs	r2, #2
 8007fe6:	761a      	strb	r2, [r3, #24]
      break;
 8007fe8:	e139      	b.n	800825e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	795b      	ldrb	r3, [r3, #5]
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 fc93 	bl	800891c <USBH_LL_GetURBState>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007ffa:	7bbb      	ldrb	r3, [r7, #14]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d11e      	bne.n	800803e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	7c1b      	ldrb	r3, [r3, #16]
 8008004:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008008:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	8adb      	ldrh	r3, [r3, #22]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008012:	7b7b      	ldrb	r3, [r7, #13]
 8008014:	2b80      	cmp	r3, #128	; 0x80
 8008016:	d103      	bne.n	8008020 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2203      	movs	r2, #3
 800801c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800801e:	e115      	b.n	800824c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2205      	movs	r2, #5
 8008024:	761a      	strb	r2, [r3, #24]
      break;
 8008026:	e111      	b.n	800824c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008028:	7b7b      	ldrb	r3, [r7, #13]
 800802a:	2b80      	cmp	r3, #128	; 0x80
 800802c:	d103      	bne.n	8008036 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2209      	movs	r2, #9
 8008032:	761a      	strb	r2, [r3, #24]
      break;
 8008034:	e10a      	b.n	800824c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2207      	movs	r2, #7
 800803a:	761a      	strb	r2, [r3, #24]
      break;
 800803c:	e106      	b.n	800824c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800803e:	7bbb      	ldrb	r3, [r7, #14]
 8008040:	2b04      	cmp	r3, #4
 8008042:	d003      	beq.n	800804c <USBH_HandleControl+0xcc>
 8008044:	7bbb      	ldrb	r3, [r7, #14]
 8008046:	2b02      	cmp	r3, #2
 8008048:	f040 8100 	bne.w	800824c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	220b      	movs	r2, #11
 8008050:	761a      	strb	r2, [r3, #24]
      break;
 8008052:	e0fb      	b.n	800824c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6899      	ldr	r1, [r3, #8]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	899a      	ldrh	r2, [r3, #12]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	791b      	ldrb	r3, [r3, #4]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f93a 	bl	80082e6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2204      	movs	r2, #4
 8008076:	761a      	strb	r2, [r3, #24]
      break;
 8008078:	e0f1      	b.n	800825e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	791b      	ldrb	r3, [r3, #4]
 800807e:	4619      	mov	r1, r3
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fc4b 	bl	800891c <USBH_LL_GetURBState>
 8008086:	4603      	mov	r3, r0
 8008088:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800808a:	7bbb      	ldrb	r3, [r7, #14]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d102      	bne.n	8008096 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2209      	movs	r2, #9
 8008094:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b05      	cmp	r3, #5
 800809a:	d102      	bne.n	80080a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800809c:	2303      	movs	r3, #3
 800809e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080a0:	e0d6      	b.n	8008250 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80080a2:	7bbb      	ldrb	r3, [r7, #14]
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	f040 80d3 	bne.w	8008250 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	220b      	movs	r2, #11
 80080ae:	761a      	strb	r2, [r3, #24]
      break;
 80080b0:	e0ce      	b.n	8008250 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6899      	ldr	r1, [r3, #8]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	899a      	ldrh	r2, [r3, #12]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	795b      	ldrb	r3, [r3, #5]
 80080be:	2001      	movs	r0, #1
 80080c0:	9000      	str	r0, [sp, #0]
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f8ea 	bl	800829c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2206      	movs	r2, #6
 80080d8:	761a      	strb	r2, [r3, #24]
      break;
 80080da:	e0c0      	b.n	800825e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	795b      	ldrb	r3, [r3, #5]
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fc1a 	bl	800891c <USBH_LL_GetURBState>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d103      	bne.n	80080fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2207      	movs	r2, #7
 80080f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080f8:	e0ac      	b.n	8008254 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80080fa:	7bbb      	ldrb	r3, [r7, #14]
 80080fc:	2b05      	cmp	r3, #5
 80080fe:	d105      	bne.n	800810c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	220c      	movs	r2, #12
 8008104:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008106:	2303      	movs	r3, #3
 8008108:	73fb      	strb	r3, [r7, #15]
      break;
 800810a:	e0a3      	b.n	8008254 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d103      	bne.n	800811a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2205      	movs	r2, #5
 8008116:	761a      	strb	r2, [r3, #24]
      break;
 8008118:	e09c      	b.n	8008254 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b04      	cmp	r3, #4
 800811e:	f040 8099 	bne.w	8008254 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	220b      	movs	r2, #11
 8008126:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008128:	2302      	movs	r3, #2
 800812a:	73fb      	strb	r3, [r7, #15]
      break;
 800812c:	e092      	b.n	8008254 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	791b      	ldrb	r3, [r3, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	2100      	movs	r1, #0
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f8d5 	bl	80082e6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008142:	b29a      	uxth	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2208      	movs	r2, #8
 800814c:	761a      	strb	r2, [r3, #24]

      break;
 800814e:	e086      	b.n	800825e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	791b      	ldrb	r3, [r3, #4]
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fbe0 	bl	800891c <USBH_LL_GetURBState>
 800815c:	4603      	mov	r3, r0
 800815e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d105      	bne.n	8008172 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	220d      	movs	r2, #13
 800816a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008170:	e072      	b.n	8008258 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b04      	cmp	r3, #4
 8008176:	d103      	bne.n	8008180 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	220b      	movs	r2, #11
 800817c:	761a      	strb	r2, [r3, #24]
      break;
 800817e:	e06b      	b.n	8008258 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	2b05      	cmp	r3, #5
 8008184:	d168      	bne.n	8008258 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008186:	2303      	movs	r3, #3
 8008188:	73fb      	strb	r3, [r7, #15]
      break;
 800818a:	e065      	b.n	8008258 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	795b      	ldrb	r3, [r3, #5]
 8008190:	2201      	movs	r2, #1
 8008192:	9200      	str	r2, [sp, #0]
 8008194:	2200      	movs	r2, #0
 8008196:	2100      	movs	r1, #0
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f87f 	bl	800829c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	220a      	movs	r2, #10
 80081ae:	761a      	strb	r2, [r3, #24]
      break;
 80081b0:	e055      	b.n	800825e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	795b      	ldrb	r3, [r3, #5]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 fbaf 	bl	800891c <USBH_LL_GetURBState>
 80081be:	4603      	mov	r3, r0
 80081c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80081c2:	7bbb      	ldrb	r3, [r7, #14]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d105      	bne.n	80081d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	220d      	movs	r2, #13
 80081d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80081d2:	e043      	b.n	800825c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	d103      	bne.n	80081e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2209      	movs	r2, #9
 80081de:	761a      	strb	r2, [r3, #24]
      break;
 80081e0:	e03c      	b.n	800825c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	2b04      	cmp	r3, #4
 80081e6:	d139      	bne.n	800825c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	220b      	movs	r2, #11
 80081ec:	761a      	strb	r2, [r3, #24]
      break;
 80081ee:	e035      	b.n	800825c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7e5b      	ldrb	r3, [r3, #25]
 80081f4:	3301      	adds	r3, #1
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	765a      	strb	r2, [r3, #25]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7e5b      	ldrb	r3, [r3, #25]
 8008200:	2b02      	cmp	r3, #2
 8008202:	d806      	bhi.n	8008212 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008210:	e025      	b.n	800825e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008218:	2106      	movs	r1, #6
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	795b      	ldrb	r3, [r3, #5]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f8e8 	bl	8008400 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	791b      	ldrb	r3, [r3, #4]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f8e2 	bl	8008400 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008242:	2302      	movs	r3, #2
 8008244:	73fb      	strb	r3, [r7, #15]
      break;
 8008246:	e00a      	b.n	800825e <USBH_HandleControl+0x2de>

    default:
      break;
 8008248:	bf00      	nop
 800824a:	e008      	b.n	800825e <USBH_HandleControl+0x2de>
      break;
 800824c:	bf00      	nop
 800824e:	e006      	b.n	800825e <USBH_HandleControl+0x2de>
      break;
 8008250:	bf00      	nop
 8008252:	e004      	b.n	800825e <USBH_HandleControl+0x2de>
      break;
 8008254:	bf00      	nop
 8008256:	e002      	b.n	800825e <USBH_HandleControl+0x2de>
      break;
 8008258:	bf00      	nop
 800825a:	e000      	b.n	800825e <USBH_HandleControl+0x2de>
      break;
 800825c:	bf00      	nop
  }

  return status;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b088      	sub	sp, #32
 800826c:	af04      	add	r7, sp, #16
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008276:	79f9      	ldrb	r1, [r7, #7]
 8008278:	2300      	movs	r3, #0
 800827a:	9303      	str	r3, [sp, #12]
 800827c:	2308      	movs	r3, #8
 800827e:	9302      	str	r3, [sp, #8]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	2300      	movs	r3, #0
 800828a:	2200      	movs	r2, #0
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fb14 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af04      	add	r7, sp, #16
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	4611      	mov	r1, r2
 80082a8:	461a      	mov	r2, r3
 80082aa:	460b      	mov	r3, r1
 80082ac:	80fb      	strh	r3, [r7, #6]
 80082ae:	4613      	mov	r3, r2
 80082b0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082c0:	7979      	ldrb	r1, [r7, #5]
 80082c2:	7e3b      	ldrb	r3, [r7, #24]
 80082c4:	9303      	str	r3, [sp, #12]
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	9302      	str	r3, [sp, #8]
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	9301      	str	r3, [sp, #4]
 80082ce:	2301      	movs	r3, #1
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	2300      	movs	r3, #0
 80082d4:	2200      	movs	r2, #0
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 faef 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b088      	sub	sp, #32
 80082ea:	af04      	add	r7, sp, #16
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	4611      	mov	r1, r2
 80082f2:	461a      	mov	r2, r3
 80082f4:	460b      	mov	r3, r1
 80082f6:	80fb      	strh	r3, [r7, #6]
 80082f8:	4613      	mov	r3, r2
 80082fa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082fc:	7979      	ldrb	r1, [r7, #5]
 80082fe:	2300      	movs	r3, #0
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	9302      	str	r3, [sp, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	9301      	str	r3, [sp, #4]
 800830a:	2301      	movs	r3, #1
 800830c:	9300      	str	r3, [sp, #0]
 800830e:	2300      	movs	r3, #0
 8008310:	2201      	movs	r2, #1
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 fad1 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008318:	2300      	movs	r3, #0

}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b088      	sub	sp, #32
 8008326:	af04      	add	r7, sp, #16
 8008328:	60f8      	str	r0, [r7, #12]
 800832a:	60b9      	str	r1, [r7, #8]
 800832c:	4611      	mov	r1, r2
 800832e:	461a      	mov	r2, r3
 8008330:	460b      	mov	r3, r1
 8008332:	71fb      	strb	r3, [r7, #7]
 8008334:	4613      	mov	r3, r2
 8008336:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008338:	79fb      	ldrb	r3, [r7, #7]
 800833a:	b29b      	uxth	r3, r3
 800833c:	79b9      	ldrb	r1, [r7, #6]
 800833e:	2200      	movs	r2, #0
 8008340:	9203      	str	r2, [sp, #12]
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	2301      	movs	r3, #1
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	2303      	movs	r3, #3
 800834e:	2201      	movs	r2, #1
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fab2 	bl	80088ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af04      	add	r7, sp, #16
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	461a      	mov	r2, r3
 800836e:	4603      	mov	r3, r0
 8008370:	70fb      	strb	r3, [r7, #3]
 8008372:	460b      	mov	r3, r1
 8008374:	70bb      	strb	r3, [r7, #2]
 8008376:	4613      	mov	r3, r2
 8008378:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800837a:	7878      	ldrb	r0, [r7, #1]
 800837c:	78ba      	ldrb	r2, [r7, #2]
 800837e:	78f9      	ldrb	r1, [r7, #3]
 8008380:	8b3b      	ldrh	r3, [r7, #24]
 8008382:	9302      	str	r3, [sp, #8]
 8008384:	7d3b      	ldrb	r3, [r7, #20]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	7c3b      	ldrb	r3, [r7, #16]
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4603      	mov	r3, r0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 fa45 	bl	800881e <USBH_LL_OpenPipe>

  return USBH_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa64 	bl	800887c <USBH_LL_ClosePipe>

  return USBH_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f836 	bl	800843c <USBH_GetFreePipe>
 80083d0:	4603      	mov	r3, r0
 80083d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80083d4:	89fb      	ldrh	r3, [r7, #14]
 80083d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00a      	beq.n	80083f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80083de:	78fa      	ldrb	r2, [r7, #3]
 80083e0:	89fb      	ldrh	r3, [r7, #14]
 80083e2:	f003 030f 	and.w	r3, r3, #15
 80083e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	33e0      	adds	r3, #224	; 0xe0
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80083f4:	89fb      	ldrh	r3, [r7, #14]
 80083f6:	b2db      	uxtb	r3, r3
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b0f      	cmp	r3, #15
 8008410:	d80d      	bhi.n	800842e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	33e0      	adds	r3, #224	; 0xe0
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4413      	add	r3, r2
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	78fb      	ldrb	r3, [r7, #3]
 8008420:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	33e0      	adds	r3, #224	; 0xe0
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e00f      	b.n	800846e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	33e0      	adds	r3, #224	; 0xe0
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4413      	add	r3, r2
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d102      	bne.n	8008468 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	b29b      	uxth	r3, r3
 8008466:	e007      	b.n	8008478 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	3301      	adds	r3, #1
 800846c:	73fb      	strb	r3, [r7, #15]
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	2b0f      	cmp	r3, #15
 8008472:	d9ec      	bls.n	800844e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008474:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008488:	2201      	movs	r2, #1
 800848a:	490e      	ldr	r1, [pc, #56]	; (80084c4 <MX_USB_HOST_Init+0x40>)
 800848c:	480e      	ldr	r0, [pc, #56]	; (80084c8 <MX_USB_HOST_Init+0x44>)
 800848e:	f7fe fbcb 	bl	8006c28 <USBH_Init>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008498:	f7f9 f87a 	bl	8001590 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800849c:	490b      	ldr	r1, [pc, #44]	; (80084cc <MX_USB_HOST_Init+0x48>)
 800849e:	480a      	ldr	r0, [pc, #40]	; (80084c8 <MX_USB_HOST_Init+0x44>)
 80084a0:	f7fe fc50 	bl	8006d44 <USBH_RegisterClass>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80084aa:	f7f9 f871 	bl	8001590 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80084ae:	4806      	ldr	r0, [pc, #24]	; (80084c8 <MX_USB_HOST_Init+0x44>)
 80084b0:	f7fe fcd4 	bl	8006e5c <USBH_Start>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80084ba:	f7f9 f869 	bl	8001590 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	080084e5 	.word	0x080084e5
 80084c8:	20000240 	.word	0x20000240
 80084cc:	20000014 	.word	0x20000014

080084d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80084d4:	4802      	ldr	r0, [pc, #8]	; (80084e0 <MX_USB_HOST_Process+0x10>)
 80084d6:	f7fe fcd1 	bl	8006e7c <USBH_Process>
}
 80084da:	bf00      	nop
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20000240 	.word	0x20000240

080084e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	460b      	mov	r3, r1
 80084ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80084f0:	78fb      	ldrb	r3, [r7, #3]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d819      	bhi.n	800852c <USBH_UserProcess+0x48>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <USBH_UserProcess+0x1c>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	0800852d 	.word	0x0800852d
 8008504:	0800851d 	.word	0x0800851d
 8008508:	0800852d 	.word	0x0800852d
 800850c:	08008525 	.word	0x08008525
 8008510:	08008515 	.word	0x08008515
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008514:	4b09      	ldr	r3, [pc, #36]	; (800853c <USBH_UserProcess+0x58>)
 8008516:	2203      	movs	r2, #3
 8008518:	701a      	strb	r2, [r3, #0]
  break;
 800851a:	e008      	b.n	800852e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800851c:	4b07      	ldr	r3, [pc, #28]	; (800853c <USBH_UserProcess+0x58>)
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
  break;
 8008522:	e004      	b.n	800852e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008524:	4b05      	ldr	r3, [pc, #20]	; (800853c <USBH_UserProcess+0x58>)
 8008526:	2201      	movs	r2, #1
 8008528:	701a      	strb	r2, [r3, #0]
  break;
 800852a:	e000      	b.n	800852e <USBH_UserProcess+0x4a>

  default:
  break;
 800852c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800852e:	bf00      	nop
 8008530:	370c      	adds	r7, #12
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000618 	.word	0x20000618

08008540 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	; 0x28
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008548:	f107 0314 	add.w	r3, r7, #20
 800854c:	2200      	movs	r2, #0
 800854e:	601a      	str	r2, [r3, #0]
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	609a      	str	r2, [r3, #8]
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008560:	d13a      	bne.n	80085d8 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008562:	2300      	movs	r3, #0
 8008564:	613b      	str	r3, [r7, #16]
 8008566:	4b1e      	ldr	r3, [pc, #120]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 8008568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856a:	4a1d      	ldr	r2, [pc, #116]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 800856c:	f043 0301 	orr.w	r3, r3, #1
 8008570:	6313      	str	r3, [r2, #48]	; 0x30
 8008572:	4b1b      	ldr	r3, [pc, #108]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 8008574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800857e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008582:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008584:	2302      	movs	r3, #2
 8008586:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008588:	2300      	movs	r3, #0
 800858a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800858c:	2303      	movs	r3, #3
 800858e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008590:	230a      	movs	r3, #10
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008594:	f107 0314 	add.w	r3, r7, #20
 8008598:	4619      	mov	r1, r3
 800859a:	4812      	ldr	r0, [pc, #72]	; (80085e4 <HAL_HCD_MspInit+0xa4>)
 800859c:	f7f9 fdd4 	bl	8002148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80085a0:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 80085a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a4:	4a0e      	ldr	r2, [pc, #56]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 80085a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085aa:	6353      	str	r3, [r2, #52]	; 0x34
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 80085b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b4:	4a0a      	ldr	r2, [pc, #40]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 80085b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085ba:	6453      	str	r3, [r2, #68]	; 0x44
 80085bc:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <HAL_HCD_MspInit+0xa0>)
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80085c8:	2200      	movs	r2, #0
 80085ca:	2100      	movs	r1, #0
 80085cc:	2043      	movs	r0, #67	; 0x43
 80085ce:	f7f9 fd84 	bl	80020da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80085d2:	2043      	movs	r0, #67	; 0x43
 80085d4:	f7f9 fd9d 	bl	8002112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80085d8:	bf00      	nop
 80085da:	3728      	adds	r7, #40	; 0x28
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	40023800 	.word	0x40023800
 80085e4:	40020000 	.word	0x40020000

080085e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff f81f 	bl	800763a <USBH_LL_IncTimer>
}
 80085fc:	bf00      	nop
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f857 	bl	80076c6 <USBH_LL_Connect>
}
 8008618:	bf00      	nop
 800861a:	3708      	adds	r7, #8
 800861c:	46bd      	mov	sp, r7
 800861e:	bd80      	pop	{r7, pc}

08008620 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff f860 	bl	80076f4 <USBH_LL_Disconnect>
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
 8008648:	4613      	mov	r3, r2
 800864a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff f811 	bl	800768e <USBH_LL_PortEnabled>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008682:	4618      	mov	r0, r3
 8008684:	f7ff f811 	bl	80076aa <USBH_LL_PortDisabled>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d12a      	bne.n	80086f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <USBH_LL_Init+0x74>)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a15      	ldr	r2, [pc, #84]	; (8008704 <USBH_LL_Init+0x74>)
 80086ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80086b2:	4b14      	ldr	r3, [pc, #80]	; (8008704 <USBH_LL_Init+0x74>)
 80086b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80086b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80086ba:	4b12      	ldr	r3, [pc, #72]	; (8008704 <USBH_LL_Init+0x74>)
 80086bc:	2208      	movs	r2, #8
 80086be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80086c0:	4b10      	ldr	r3, [pc, #64]	; (8008704 <USBH_LL_Init+0x74>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <USBH_LL_Init+0x74>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80086cc:	4b0d      	ldr	r3, [pc, #52]	; (8008704 <USBH_LL_Init+0x74>)
 80086ce:	2202      	movs	r2, #2
 80086d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <USBH_LL_Init+0x74>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80086d8:	480a      	ldr	r0, [pc, #40]	; (8008704 <USBH_LL_Init+0x74>)
 80086da:	f7f9 feea 	bl	80024b2 <HAL_HCD_Init>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80086e4:	f7f8 ff54 	bl	8001590 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <USBH_LL_Init+0x74>)
 80086ea:	f7fa face 	bl	8002c8a <HAL_HCD_GetCurrentFrame>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7fe ff92 	bl	800761c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	2000061c 	.word	0x2000061c

08008708 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800871e:	4618      	mov	r0, r3
 8008720:	f7fa fa3d 	bl	8002b9e <HAL_HCD_Start>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f952 	bl	80089d4 <USBH_Get_USB_Status>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008734:	7bbb      	ldrb	r3, [r7, #14]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008754:	4618      	mov	r0, r3
 8008756:	f7fa fa45 	bl	8002be4 <HAL_HCD_Stop>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f937 	bl	80089d4 <USBH_Get_USB_Status>
 8008766:	4603      	mov	r3, r0
 8008768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876a:	7bbb      	ldrb	r3, [r7, #14]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008786:	4618      	mov	r0, r3
 8008788:	f7fa fa8d 	bl	8002ca6 <HAL_HCD_GetCurrentSpeed>
 800878c:	4603      	mov	r3, r0
 800878e:	2b02      	cmp	r3, #2
 8008790:	d00c      	beq.n	80087ac <USBH_LL_GetSpeed+0x38>
 8008792:	2b02      	cmp	r3, #2
 8008794:	d80d      	bhi.n	80087b2 <USBH_LL_GetSpeed+0x3e>
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <USBH_LL_GetSpeed+0x2c>
 800879a:	2b01      	cmp	r3, #1
 800879c:	d003      	beq.n	80087a6 <USBH_LL_GetSpeed+0x32>
 800879e:	e008      	b.n	80087b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80087a0:	2300      	movs	r3, #0
 80087a2:	73fb      	strb	r3, [r7, #15]
    break;
 80087a4:	e008      	b.n	80087b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
    break;
 80087aa:	e005      	b.n	80087b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80087ac:	2302      	movs	r3, #2
 80087ae:	73fb      	strb	r3, [r7, #15]
    break;
 80087b0:	e002      	b.n	80087b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
    break;
 80087b6:	bf00      	nop
  }
  return  speed;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fa fa20 	bl	8002c1e <HAL_HCD_ResetPort>
 80087de:	4603      	mov	r3, r0
 80087e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f8f5 	bl	80089d4 <USBH_Get_USB_Status>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800880a:	78fa      	ldrb	r2, [r7, #3]
 800880c:	4611      	mov	r1, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7fa fa27 	bl	8002c62 <HAL_HCD_HC_GetXferCount>
 8008814:	4603      	mov	r3, r0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800881e:	b590      	push	{r4, r7, lr}
 8008820:	b089      	sub	sp, #36	; 0x24
 8008822:	af04      	add	r7, sp, #16
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	4608      	mov	r0, r1
 8008828:	4611      	mov	r1, r2
 800882a:	461a      	mov	r2, r3
 800882c:	4603      	mov	r3, r0
 800882e:	70fb      	strb	r3, [r7, #3]
 8008830:	460b      	mov	r3, r1
 8008832:	70bb      	strb	r3, [r7, #2]
 8008834:	4613      	mov	r3, r2
 8008836:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008838:	2300      	movs	r3, #0
 800883a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008846:	787c      	ldrb	r4, [r7, #1]
 8008848:	78ba      	ldrb	r2, [r7, #2]
 800884a:	78f9      	ldrb	r1, [r7, #3]
 800884c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800884e:	9302      	str	r3, [sp, #8]
 8008850:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008854:	9301      	str	r3, [sp, #4]
 8008856:	f897 3020 	ldrb.w	r3, [r7, #32]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4623      	mov	r3, r4
 800885e:	f7f9 fe8a 	bl	8002576 <HAL_HCD_HC_Init>
 8008862:	4603      	mov	r3, r0
 8008864:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008866:	7bfb      	ldrb	r3, [r7, #15]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f8b3 	bl	80089d4 <USBH_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008872:	7bbb      	ldrb	r3, [r7, #14]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	bd90      	pop	{r4, r7, pc}

0800887c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f7f9 fefa 	bl	8002694 <HAL_HCD_HC_Halt>
 80088a0:	4603      	mov	r3, r0
 80088a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f000 f894 	bl	80089d4 <USBH_Get_USB_Status>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80088ba:	b590      	push	{r4, r7, lr}
 80088bc:	b089      	sub	sp, #36	; 0x24
 80088be:	af04      	add	r7, sp, #16
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	4608      	mov	r0, r1
 80088c4:	4611      	mov	r1, r2
 80088c6:	461a      	mov	r2, r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	70fb      	strb	r3, [r7, #3]
 80088cc:	460b      	mov	r3, r1
 80088ce:	70bb      	strb	r3, [r7, #2]
 80088d0:	4613      	mov	r3, r2
 80088d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088d8:	2300      	movs	r3, #0
 80088da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088e2:	787c      	ldrb	r4, [r7, #1]
 80088e4:	78ba      	ldrb	r2, [r7, #2]
 80088e6:	78f9      	ldrb	r1, [r7, #3]
 80088e8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80088ec:	9303      	str	r3, [sp, #12]
 80088ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088f0:	9302      	str	r3, [sp, #8]
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4623      	mov	r3, r4
 80088fe:	f7f9 feed 	bl	80026dc <HAL_HCD_HC_SubmitRequest>
 8008902:	4603      	mov	r3, r0
 8008904:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008906:	7bfb      	ldrb	r3, [r7, #15]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 f863 	bl	80089d4 <USBH_Get_USB_Status>
 800890e:	4603      	mov	r3, r0
 8008910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008912:	7bbb      	ldrb	r3, [r7, #14]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bd90      	pop	{r4, r7, pc}

0800891c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7fa f981 	bl	8002c3a <HAL_HCD_HC_GetURBState>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b082      	sub	sp, #8
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800894e:	20c8      	movs	r0, #200	; 0xc8
 8008950:	f7f9 f862 	bl	8001a18 <HAL_Delay>
  return USBH_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
 800896a:	4613      	mov	r3, r2
 800896c:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008974:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	68fa      	ldr	r2, [r7, #12]
 800897a:	212c      	movs	r1, #44	; 0x2c
 800897c:	fb01 f303 	mul.w	r3, r1, r3
 8008980:	4413      	add	r3, r2
 8008982:	333b      	adds	r3, #59	; 0x3b
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	212c      	movs	r1, #44	; 0x2c
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	4413      	add	r3, r2
 8008996:	3354      	adds	r3, #84	; 0x54
 8008998:	78ba      	ldrb	r2, [r7, #2]
 800899a:	701a      	strb	r2, [r3, #0]
 800899c:	e008      	b.n	80089b0 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	212c      	movs	r1, #44	; 0x2c
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	4413      	add	r3, r2
 80089aa:	3355      	adds	r3, #85	; 0x55
 80089ac:	78ba      	ldrb	r2, [r7, #2]
 80089ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr

080089be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b082      	sub	sp, #8
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f9 f826 	bl	8001a18 <HAL_Delay>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	4603      	mov	r3, r0
 80089dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089de:	2300      	movs	r3, #0
 80089e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	2b03      	cmp	r3, #3
 80089e6:	d817      	bhi.n	8008a18 <USBH_Get_USB_Status+0x44>
 80089e8:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <USBH_Get_USB_Status+0x1c>)
 80089ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ee:	bf00      	nop
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a07 	.word	0x08008a07
 80089f8:	08008a0d 	.word	0x08008a0d
 80089fc:	08008a13 	.word	0x08008a13
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
    break;
 8008a04:	e00b      	b.n	8008a1e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008a06:	2302      	movs	r3, #2
 8008a08:	73fb      	strb	r3, [r7, #15]
    break;
 8008a0a:	e008      	b.n	8008a1e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a10:	e005      	b.n	8008a1e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008a12:	2302      	movs	r3, #2
 8008a14:	73fb      	strb	r3, [r7, #15]
    break;
 8008a16:	e002      	b.n	8008a1e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008a18:	2302      	movs	r3, #2
 8008a1a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a1c:	bf00      	nop
  }
  return usb_status;
 8008a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <__errno>:
 8008a2c:	4b01      	ldr	r3, [pc, #4]	; (8008a34 <__errno+0x8>)
 8008a2e:	6818      	ldr	r0, [r3, #0]
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	20000034 	.word	0x20000034

08008a38 <__libc_init_array>:
 8008a38:	b570      	push	{r4, r5, r6, lr}
 8008a3a:	4d0d      	ldr	r5, [pc, #52]	; (8008a70 <__libc_init_array+0x38>)
 8008a3c:	4c0d      	ldr	r4, [pc, #52]	; (8008a74 <__libc_init_array+0x3c>)
 8008a3e:	1b64      	subs	r4, r4, r5
 8008a40:	10a4      	asrs	r4, r4, #2
 8008a42:	2600      	movs	r6, #0
 8008a44:	42a6      	cmp	r6, r4
 8008a46:	d109      	bne.n	8008a5c <__libc_init_array+0x24>
 8008a48:	4d0b      	ldr	r5, [pc, #44]	; (8008a78 <__libc_init_array+0x40>)
 8008a4a:	4c0c      	ldr	r4, [pc, #48]	; (8008a7c <__libc_init_array+0x44>)
 8008a4c:	f000 fc9e 	bl	800938c <_init>
 8008a50:	1b64      	subs	r4, r4, r5
 8008a52:	10a4      	asrs	r4, r4, #2
 8008a54:	2600      	movs	r6, #0
 8008a56:	42a6      	cmp	r6, r4
 8008a58:	d105      	bne.n	8008a66 <__libc_init_array+0x2e>
 8008a5a:	bd70      	pop	{r4, r5, r6, pc}
 8008a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a60:	4798      	blx	r3
 8008a62:	3601      	adds	r6, #1
 8008a64:	e7ee      	b.n	8008a44 <__libc_init_array+0xc>
 8008a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6a:	4798      	blx	r3
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	e7f2      	b.n	8008a56 <__libc_init_array+0x1e>
 8008a70:	0802ed3c 	.word	0x0802ed3c
 8008a74:	0802ed3c 	.word	0x0802ed3c
 8008a78:	0802ed3c 	.word	0x0802ed3c
 8008a7c:	0802ed40 	.word	0x0802ed40

08008a80 <malloc>:
 8008a80:	4b02      	ldr	r3, [pc, #8]	; (8008a8c <malloc+0xc>)
 8008a82:	4601      	mov	r1, r0
 8008a84:	6818      	ldr	r0, [r3, #0]
 8008a86:	f000 b87f 	b.w	8008b88 <_malloc_r>
 8008a8a:	bf00      	nop
 8008a8c:	20000034 	.word	0x20000034

08008a90 <free>:
 8008a90:	4b02      	ldr	r3, [pc, #8]	; (8008a9c <free+0xc>)
 8008a92:	4601      	mov	r1, r0
 8008a94:	6818      	ldr	r0, [r3, #0]
 8008a96:	f000 b80b 	b.w	8008ab0 <_free_r>
 8008a9a:	bf00      	nop
 8008a9c:	20000034 	.word	0x20000034

08008aa0 <memset>:
 8008aa0:	4402      	add	r2, r0
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d100      	bne.n	8008aaa <memset+0xa>
 8008aa8:	4770      	bx	lr
 8008aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8008aae:	e7f9      	b.n	8008aa4 <memset+0x4>

08008ab0 <_free_r>:
 8008ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ab2:	2900      	cmp	r1, #0
 8008ab4:	d044      	beq.n	8008b40 <_free_r+0x90>
 8008ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aba:	9001      	str	r0, [sp, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f1a1 0404 	sub.w	r4, r1, #4
 8008ac2:	bfb8      	it	lt
 8008ac4:	18e4      	addlt	r4, r4, r3
 8008ac6:	f000 f903 	bl	8008cd0 <__malloc_lock>
 8008aca:	4a1e      	ldr	r2, [pc, #120]	; (8008b44 <_free_r+0x94>)
 8008acc:	9801      	ldr	r0, [sp, #4]
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	b933      	cbnz	r3, 8008ae0 <_free_r+0x30>
 8008ad2:	6063      	str	r3, [r4, #4]
 8008ad4:	6014      	str	r4, [r2, #0]
 8008ad6:	b003      	add	sp, #12
 8008ad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008adc:	f000 b8fe 	b.w	8008cdc <__malloc_unlock>
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	d908      	bls.n	8008af6 <_free_r+0x46>
 8008ae4:	6825      	ldr	r5, [r4, #0]
 8008ae6:	1961      	adds	r1, r4, r5
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	bf01      	itttt	eq
 8008aec:	6819      	ldreq	r1, [r3, #0]
 8008aee:	685b      	ldreq	r3, [r3, #4]
 8008af0:	1949      	addeq	r1, r1, r5
 8008af2:	6021      	streq	r1, [r4, #0]
 8008af4:	e7ed      	b.n	8008ad2 <_free_r+0x22>
 8008af6:	461a      	mov	r2, r3
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	b10b      	cbz	r3, 8008b00 <_free_r+0x50>
 8008afc:	42a3      	cmp	r3, r4
 8008afe:	d9fa      	bls.n	8008af6 <_free_r+0x46>
 8008b00:	6811      	ldr	r1, [r2, #0]
 8008b02:	1855      	adds	r5, r2, r1
 8008b04:	42a5      	cmp	r5, r4
 8008b06:	d10b      	bne.n	8008b20 <_free_r+0x70>
 8008b08:	6824      	ldr	r4, [r4, #0]
 8008b0a:	4421      	add	r1, r4
 8008b0c:	1854      	adds	r4, r2, r1
 8008b0e:	42a3      	cmp	r3, r4
 8008b10:	6011      	str	r1, [r2, #0]
 8008b12:	d1e0      	bne.n	8008ad6 <_free_r+0x26>
 8008b14:	681c      	ldr	r4, [r3, #0]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	6053      	str	r3, [r2, #4]
 8008b1a:	4421      	add	r1, r4
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	e7da      	b.n	8008ad6 <_free_r+0x26>
 8008b20:	d902      	bls.n	8008b28 <_free_r+0x78>
 8008b22:	230c      	movs	r3, #12
 8008b24:	6003      	str	r3, [r0, #0]
 8008b26:	e7d6      	b.n	8008ad6 <_free_r+0x26>
 8008b28:	6825      	ldr	r5, [r4, #0]
 8008b2a:	1961      	adds	r1, r4, r5
 8008b2c:	428b      	cmp	r3, r1
 8008b2e:	bf04      	itt	eq
 8008b30:	6819      	ldreq	r1, [r3, #0]
 8008b32:	685b      	ldreq	r3, [r3, #4]
 8008b34:	6063      	str	r3, [r4, #4]
 8008b36:	bf04      	itt	eq
 8008b38:	1949      	addeq	r1, r1, r5
 8008b3a:	6021      	streq	r1, [r4, #0]
 8008b3c:	6054      	str	r4, [r2, #4]
 8008b3e:	e7ca      	b.n	8008ad6 <_free_r+0x26>
 8008b40:	b003      	add	sp, #12
 8008b42:	bd30      	pop	{r4, r5, pc}
 8008b44:	20000920 	.word	0x20000920

08008b48 <sbrk_aligned>:
 8008b48:	b570      	push	{r4, r5, r6, lr}
 8008b4a:	4e0e      	ldr	r6, [pc, #56]	; (8008b84 <sbrk_aligned+0x3c>)
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	6831      	ldr	r1, [r6, #0]
 8008b50:	4605      	mov	r5, r0
 8008b52:	b911      	cbnz	r1, 8008b5a <sbrk_aligned+0x12>
 8008b54:	f000 f88c 	bl	8008c70 <_sbrk_r>
 8008b58:	6030      	str	r0, [r6, #0]
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 f887 	bl	8008c70 <_sbrk_r>
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	d00a      	beq.n	8008b7c <sbrk_aligned+0x34>
 8008b66:	1cc4      	adds	r4, r0, #3
 8008b68:	f024 0403 	bic.w	r4, r4, #3
 8008b6c:	42a0      	cmp	r0, r4
 8008b6e:	d007      	beq.n	8008b80 <sbrk_aligned+0x38>
 8008b70:	1a21      	subs	r1, r4, r0
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f87c 	bl	8008c70 <_sbrk_r>
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d101      	bne.n	8008b80 <sbrk_aligned+0x38>
 8008b7c:	f04f 34ff 	mov.w	r4, #4294967295
 8008b80:	4620      	mov	r0, r4
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	20000924 	.word	0x20000924

08008b88 <_malloc_r>:
 8008b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b8c:	1ccd      	adds	r5, r1, #3
 8008b8e:	f025 0503 	bic.w	r5, r5, #3
 8008b92:	3508      	adds	r5, #8
 8008b94:	2d0c      	cmp	r5, #12
 8008b96:	bf38      	it	cc
 8008b98:	250c      	movcc	r5, #12
 8008b9a:	2d00      	cmp	r5, #0
 8008b9c:	4607      	mov	r7, r0
 8008b9e:	db01      	blt.n	8008ba4 <_malloc_r+0x1c>
 8008ba0:	42a9      	cmp	r1, r5
 8008ba2:	d905      	bls.n	8008bb0 <_malloc_r+0x28>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	2600      	movs	r6, #0
 8008baa:	4630      	mov	r0, r6
 8008bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb0:	4e2e      	ldr	r6, [pc, #184]	; (8008c6c <_malloc_r+0xe4>)
 8008bb2:	f000 f88d 	bl	8008cd0 <__malloc_lock>
 8008bb6:	6833      	ldr	r3, [r6, #0]
 8008bb8:	461c      	mov	r4, r3
 8008bba:	bb34      	cbnz	r4, 8008c0a <_malloc_r+0x82>
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	f7ff ffc2 	bl	8008b48 <sbrk_aligned>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	d14d      	bne.n	8008c66 <_malloc_r+0xde>
 8008bca:	6834      	ldr	r4, [r6, #0]
 8008bcc:	4626      	mov	r6, r4
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	d140      	bne.n	8008c54 <_malloc_r+0xcc>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4638      	mov	r0, r7
 8008bd8:	eb04 0803 	add.w	r8, r4, r3
 8008bdc:	f000 f848 	bl	8008c70 <_sbrk_r>
 8008be0:	4580      	cmp	r8, r0
 8008be2:	d13a      	bne.n	8008c5a <_malloc_r+0xd2>
 8008be4:	6821      	ldr	r1, [r4, #0]
 8008be6:	3503      	adds	r5, #3
 8008be8:	1a6d      	subs	r5, r5, r1
 8008bea:	f025 0503 	bic.w	r5, r5, #3
 8008bee:	3508      	adds	r5, #8
 8008bf0:	2d0c      	cmp	r5, #12
 8008bf2:	bf38      	it	cc
 8008bf4:	250c      	movcc	r5, #12
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f7ff ffa5 	bl	8008b48 <sbrk_aligned>
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d02b      	beq.n	8008c5a <_malloc_r+0xd2>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	442b      	add	r3, r5
 8008c06:	6023      	str	r3, [r4, #0]
 8008c08:	e00e      	b.n	8008c28 <_malloc_r+0xa0>
 8008c0a:	6822      	ldr	r2, [r4, #0]
 8008c0c:	1b52      	subs	r2, r2, r5
 8008c0e:	d41e      	bmi.n	8008c4e <_malloc_r+0xc6>
 8008c10:	2a0b      	cmp	r2, #11
 8008c12:	d916      	bls.n	8008c42 <_malloc_r+0xba>
 8008c14:	1961      	adds	r1, r4, r5
 8008c16:	42a3      	cmp	r3, r4
 8008c18:	6025      	str	r5, [r4, #0]
 8008c1a:	bf18      	it	ne
 8008c1c:	6059      	strne	r1, [r3, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	bf08      	it	eq
 8008c22:	6031      	streq	r1, [r6, #0]
 8008c24:	5162      	str	r2, [r4, r5]
 8008c26:	604b      	str	r3, [r1, #4]
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f104 060b 	add.w	r6, r4, #11
 8008c2e:	f000 f855 	bl	8008cdc <__malloc_unlock>
 8008c32:	f026 0607 	bic.w	r6, r6, #7
 8008c36:	1d23      	adds	r3, r4, #4
 8008c38:	1af2      	subs	r2, r6, r3
 8008c3a:	d0b6      	beq.n	8008baa <_malloc_r+0x22>
 8008c3c:	1b9b      	subs	r3, r3, r6
 8008c3e:	50a3      	str	r3, [r4, r2]
 8008c40:	e7b3      	b.n	8008baa <_malloc_r+0x22>
 8008c42:	6862      	ldr	r2, [r4, #4]
 8008c44:	42a3      	cmp	r3, r4
 8008c46:	bf0c      	ite	eq
 8008c48:	6032      	streq	r2, [r6, #0]
 8008c4a:	605a      	strne	r2, [r3, #4]
 8008c4c:	e7ec      	b.n	8008c28 <_malloc_r+0xa0>
 8008c4e:	4623      	mov	r3, r4
 8008c50:	6864      	ldr	r4, [r4, #4]
 8008c52:	e7b2      	b.n	8008bba <_malloc_r+0x32>
 8008c54:	4634      	mov	r4, r6
 8008c56:	6876      	ldr	r6, [r6, #4]
 8008c58:	e7b9      	b.n	8008bce <_malloc_r+0x46>
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	603b      	str	r3, [r7, #0]
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f000 f83c 	bl	8008cdc <__malloc_unlock>
 8008c64:	e7a1      	b.n	8008baa <_malloc_r+0x22>
 8008c66:	6025      	str	r5, [r4, #0]
 8008c68:	e7de      	b.n	8008c28 <_malloc_r+0xa0>
 8008c6a:	bf00      	nop
 8008c6c:	20000920 	.word	0x20000920

08008c70 <_sbrk_r>:
 8008c70:	b538      	push	{r3, r4, r5, lr}
 8008c72:	4d06      	ldr	r5, [pc, #24]	; (8008c8c <_sbrk_r+0x1c>)
 8008c74:	2300      	movs	r3, #0
 8008c76:	4604      	mov	r4, r0
 8008c78:	4608      	mov	r0, r1
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	f7f8 fde8 	bl	8001850 <_sbrk>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_sbrk_r+0x1a>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_sbrk_r+0x1a>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20000928 	.word	0x20000928

08008c90 <siprintf>:
 8008c90:	b40e      	push	{r1, r2, r3}
 8008c92:	b500      	push	{lr}
 8008c94:	b09c      	sub	sp, #112	; 0x70
 8008c96:	ab1d      	add	r3, sp, #116	; 0x74
 8008c98:	9002      	str	r0, [sp, #8]
 8008c9a:	9006      	str	r0, [sp, #24]
 8008c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ca0:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <siprintf+0x38>)
 8008ca2:	9107      	str	r1, [sp, #28]
 8008ca4:	9104      	str	r1, [sp, #16]
 8008ca6:	4909      	ldr	r1, [pc, #36]	; (8008ccc <siprintf+0x3c>)
 8008ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cac:	9105      	str	r1, [sp, #20]
 8008cae:	6800      	ldr	r0, [r0, #0]
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	a902      	add	r1, sp, #8
 8008cb4:	f000 f874 	bl	8008da0 <_svfiprintf_r>
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	b01c      	add	sp, #112	; 0x70
 8008cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc4:	b003      	add	sp, #12
 8008cc6:	4770      	bx	lr
 8008cc8:	20000034 	.word	0x20000034
 8008ccc:	ffff0208 	.word	0xffff0208

08008cd0 <__malloc_lock>:
 8008cd0:	4801      	ldr	r0, [pc, #4]	; (8008cd8 <__malloc_lock+0x8>)
 8008cd2:	f000 baf9 	b.w	80092c8 <__retarget_lock_acquire_recursive>
 8008cd6:	bf00      	nop
 8008cd8:	2000092c 	.word	0x2000092c

08008cdc <__malloc_unlock>:
 8008cdc:	4801      	ldr	r0, [pc, #4]	; (8008ce4 <__malloc_unlock+0x8>)
 8008cde:	f000 baf4 	b.w	80092ca <__retarget_lock_release_recursive>
 8008ce2:	bf00      	nop
 8008ce4:	2000092c 	.word	0x2000092c

08008ce8 <__ssputs_r>:
 8008ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cec:	688e      	ldr	r6, [r1, #8]
 8008cee:	429e      	cmp	r6, r3
 8008cf0:	4682      	mov	sl, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	4690      	mov	r8, r2
 8008cf6:	461f      	mov	r7, r3
 8008cf8:	d838      	bhi.n	8008d6c <__ssputs_r+0x84>
 8008cfa:	898a      	ldrh	r2, [r1, #12]
 8008cfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d00:	d032      	beq.n	8008d68 <__ssputs_r+0x80>
 8008d02:	6825      	ldr	r5, [r4, #0]
 8008d04:	6909      	ldr	r1, [r1, #16]
 8008d06:	eba5 0901 	sub.w	r9, r5, r1
 8008d0a:	6965      	ldr	r5, [r4, #20]
 8008d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d14:	3301      	adds	r3, #1
 8008d16:	444b      	add	r3, r9
 8008d18:	106d      	asrs	r5, r5, #1
 8008d1a:	429d      	cmp	r5, r3
 8008d1c:	bf38      	it	cc
 8008d1e:	461d      	movcc	r5, r3
 8008d20:	0553      	lsls	r3, r2, #21
 8008d22:	d531      	bpl.n	8008d88 <__ssputs_r+0xa0>
 8008d24:	4629      	mov	r1, r5
 8008d26:	f7ff ff2f 	bl	8008b88 <_malloc_r>
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	b950      	cbnz	r0, 8008d44 <__ssputs_r+0x5c>
 8008d2e:	230c      	movs	r3, #12
 8008d30:	f8ca 3000 	str.w	r3, [sl]
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d44:	6921      	ldr	r1, [r4, #16]
 8008d46:	464a      	mov	r2, r9
 8008d48:	f000 fac0 	bl	80092cc <memcpy>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	6126      	str	r6, [r4, #16]
 8008d5a:	6165      	str	r5, [r4, #20]
 8008d5c:	444e      	add	r6, r9
 8008d5e:	eba5 0509 	sub.w	r5, r5, r9
 8008d62:	6026      	str	r6, [r4, #0]
 8008d64:	60a5      	str	r5, [r4, #8]
 8008d66:	463e      	mov	r6, r7
 8008d68:	42be      	cmp	r6, r7
 8008d6a:	d900      	bls.n	8008d6e <__ssputs_r+0x86>
 8008d6c:	463e      	mov	r6, r7
 8008d6e:	6820      	ldr	r0, [r4, #0]
 8008d70:	4632      	mov	r2, r6
 8008d72:	4641      	mov	r1, r8
 8008d74:	f000 fab8 	bl	80092e8 <memmove>
 8008d78:	68a3      	ldr	r3, [r4, #8]
 8008d7a:	1b9b      	subs	r3, r3, r6
 8008d7c:	60a3      	str	r3, [r4, #8]
 8008d7e:	6823      	ldr	r3, [r4, #0]
 8008d80:	4433      	add	r3, r6
 8008d82:	6023      	str	r3, [r4, #0]
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7db      	b.n	8008d40 <__ssputs_r+0x58>
 8008d88:	462a      	mov	r2, r5
 8008d8a:	f000 fac7 	bl	800931c <_realloc_r>
 8008d8e:	4606      	mov	r6, r0
 8008d90:	2800      	cmp	r0, #0
 8008d92:	d1e1      	bne.n	8008d58 <__ssputs_r+0x70>
 8008d94:	6921      	ldr	r1, [r4, #16]
 8008d96:	4650      	mov	r0, sl
 8008d98:	f7ff fe8a 	bl	8008ab0 <_free_r>
 8008d9c:	e7c7      	b.n	8008d2e <__ssputs_r+0x46>
	...

08008da0 <_svfiprintf_r>:
 8008da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	4698      	mov	r8, r3
 8008da6:	898b      	ldrh	r3, [r1, #12]
 8008da8:	061b      	lsls	r3, r3, #24
 8008daa:	b09d      	sub	sp, #116	; 0x74
 8008dac:	4607      	mov	r7, r0
 8008dae:	460d      	mov	r5, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	d50e      	bpl.n	8008dd2 <_svfiprintf_r+0x32>
 8008db4:	690b      	ldr	r3, [r1, #16]
 8008db6:	b963      	cbnz	r3, 8008dd2 <_svfiprintf_r+0x32>
 8008db8:	2140      	movs	r1, #64	; 0x40
 8008dba:	f7ff fee5 	bl	8008b88 <_malloc_r>
 8008dbe:	6028      	str	r0, [r5, #0]
 8008dc0:	6128      	str	r0, [r5, #16]
 8008dc2:	b920      	cbnz	r0, 8008dce <_svfiprintf_r+0x2e>
 8008dc4:	230c      	movs	r3, #12
 8008dc6:	603b      	str	r3, [r7, #0]
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	e0d1      	b.n	8008f72 <_svfiprintf_r+0x1d2>
 8008dce:	2340      	movs	r3, #64	; 0x40
 8008dd0:	616b      	str	r3, [r5, #20]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8008dd6:	2320      	movs	r3, #32
 8008dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008de0:	2330      	movs	r3, #48	; 0x30
 8008de2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f8c <_svfiprintf_r+0x1ec>
 8008de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008dea:	f04f 0901 	mov.w	r9, #1
 8008dee:	4623      	mov	r3, r4
 8008df0:	469a      	mov	sl, r3
 8008df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008df6:	b10a      	cbz	r2, 8008dfc <_svfiprintf_r+0x5c>
 8008df8:	2a25      	cmp	r2, #37	; 0x25
 8008dfa:	d1f9      	bne.n	8008df0 <_svfiprintf_r+0x50>
 8008dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8008e00:	d00b      	beq.n	8008e1a <_svfiprintf_r+0x7a>
 8008e02:	465b      	mov	r3, fp
 8008e04:	4622      	mov	r2, r4
 8008e06:	4629      	mov	r1, r5
 8008e08:	4638      	mov	r0, r7
 8008e0a:	f7ff ff6d 	bl	8008ce8 <__ssputs_r>
 8008e0e:	3001      	adds	r0, #1
 8008e10:	f000 80aa 	beq.w	8008f68 <_svfiprintf_r+0x1c8>
 8008e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e16:	445a      	add	r2, fp
 8008e18:	9209      	str	r2, [sp, #36]	; 0x24
 8008e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f000 80a2 	beq.w	8008f68 <_svfiprintf_r+0x1c8>
 8008e24:	2300      	movs	r3, #0
 8008e26:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e2e:	f10a 0a01 	add.w	sl, sl, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	9307      	str	r3, [sp, #28]
 8008e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e3c:	4654      	mov	r4, sl
 8008e3e:	2205      	movs	r2, #5
 8008e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e44:	4851      	ldr	r0, [pc, #324]	; (8008f8c <_svfiprintf_r+0x1ec>)
 8008e46:	f7f7 f9c3 	bl	80001d0 <memchr>
 8008e4a:	9a04      	ldr	r2, [sp, #16]
 8008e4c:	b9d8      	cbnz	r0, 8008e86 <_svfiprintf_r+0xe6>
 8008e4e:	06d0      	lsls	r0, r2, #27
 8008e50:	bf44      	itt	mi
 8008e52:	2320      	movmi	r3, #32
 8008e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e58:	0711      	lsls	r1, r2, #28
 8008e5a:	bf44      	itt	mi
 8008e5c:	232b      	movmi	r3, #43	; 0x2b
 8008e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008e62:	f89a 3000 	ldrb.w	r3, [sl]
 8008e66:	2b2a      	cmp	r3, #42	; 0x2a
 8008e68:	d015      	beq.n	8008e96 <_svfiprintf_r+0xf6>
 8008e6a:	9a07      	ldr	r2, [sp, #28]
 8008e6c:	4654      	mov	r4, sl
 8008e6e:	2000      	movs	r0, #0
 8008e70:	f04f 0c0a 	mov.w	ip, #10
 8008e74:	4621      	mov	r1, r4
 8008e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e7a:	3b30      	subs	r3, #48	; 0x30
 8008e7c:	2b09      	cmp	r3, #9
 8008e7e:	d94e      	bls.n	8008f1e <_svfiprintf_r+0x17e>
 8008e80:	b1b0      	cbz	r0, 8008eb0 <_svfiprintf_r+0x110>
 8008e82:	9207      	str	r2, [sp, #28]
 8008e84:	e014      	b.n	8008eb0 <_svfiprintf_r+0x110>
 8008e86:	eba0 0308 	sub.w	r3, r0, r8
 8008e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	9304      	str	r3, [sp, #16]
 8008e92:	46a2      	mov	sl, r4
 8008e94:	e7d2      	b.n	8008e3c <_svfiprintf_r+0x9c>
 8008e96:	9b03      	ldr	r3, [sp, #12]
 8008e98:	1d19      	adds	r1, r3, #4
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	9103      	str	r1, [sp, #12]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	bfbb      	ittet	lt
 8008ea2:	425b      	neglt	r3, r3
 8008ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ea8:	9307      	strge	r3, [sp, #28]
 8008eaa:	9307      	strlt	r3, [sp, #28]
 8008eac:	bfb8      	it	lt
 8008eae:	9204      	strlt	r2, [sp, #16]
 8008eb0:	7823      	ldrb	r3, [r4, #0]
 8008eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8008eb4:	d10c      	bne.n	8008ed0 <_svfiprintf_r+0x130>
 8008eb6:	7863      	ldrb	r3, [r4, #1]
 8008eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eba:	d135      	bne.n	8008f28 <_svfiprintf_r+0x188>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	1d1a      	adds	r2, r3, #4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	9203      	str	r2, [sp, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfb8      	it	lt
 8008ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ecc:	3402      	adds	r4, #2
 8008ece:	9305      	str	r3, [sp, #20]
 8008ed0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f9c <_svfiprintf_r+0x1fc>
 8008ed4:	7821      	ldrb	r1, [r4, #0]
 8008ed6:	2203      	movs	r2, #3
 8008ed8:	4650      	mov	r0, sl
 8008eda:	f7f7 f979 	bl	80001d0 <memchr>
 8008ede:	b140      	cbz	r0, 8008ef2 <_svfiprintf_r+0x152>
 8008ee0:	2340      	movs	r3, #64	; 0x40
 8008ee2:	eba0 000a 	sub.w	r0, r0, sl
 8008ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	4303      	orrs	r3, r0
 8008eee:	3401      	adds	r4, #1
 8008ef0:	9304      	str	r3, [sp, #16]
 8008ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ef6:	4826      	ldr	r0, [pc, #152]	; (8008f90 <_svfiprintf_r+0x1f0>)
 8008ef8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008efc:	2206      	movs	r2, #6
 8008efe:	f7f7 f967 	bl	80001d0 <memchr>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	d038      	beq.n	8008f78 <_svfiprintf_r+0x1d8>
 8008f06:	4b23      	ldr	r3, [pc, #140]	; (8008f94 <_svfiprintf_r+0x1f4>)
 8008f08:	bb1b      	cbnz	r3, 8008f52 <_svfiprintf_r+0x1b2>
 8008f0a:	9b03      	ldr	r3, [sp, #12]
 8008f0c:	3307      	adds	r3, #7
 8008f0e:	f023 0307 	bic.w	r3, r3, #7
 8008f12:	3308      	adds	r3, #8
 8008f14:	9303      	str	r3, [sp, #12]
 8008f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f18:	4433      	add	r3, r6
 8008f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1c:	e767      	b.n	8008dee <_svfiprintf_r+0x4e>
 8008f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f22:	460c      	mov	r4, r1
 8008f24:	2001      	movs	r0, #1
 8008f26:	e7a5      	b.n	8008e74 <_svfiprintf_r+0xd4>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	3401      	adds	r4, #1
 8008f2c:	9305      	str	r3, [sp, #20]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	f04f 0c0a 	mov.w	ip, #10
 8008f34:	4620      	mov	r0, r4
 8008f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f3a:	3a30      	subs	r2, #48	; 0x30
 8008f3c:	2a09      	cmp	r2, #9
 8008f3e:	d903      	bls.n	8008f48 <_svfiprintf_r+0x1a8>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0c5      	beq.n	8008ed0 <_svfiprintf_r+0x130>
 8008f44:	9105      	str	r1, [sp, #20]
 8008f46:	e7c3      	b.n	8008ed0 <_svfiprintf_r+0x130>
 8008f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e7f0      	b.n	8008f34 <_svfiprintf_r+0x194>
 8008f52:	ab03      	add	r3, sp, #12
 8008f54:	9300      	str	r3, [sp, #0]
 8008f56:	462a      	mov	r2, r5
 8008f58:	4b0f      	ldr	r3, [pc, #60]	; (8008f98 <_svfiprintf_r+0x1f8>)
 8008f5a:	a904      	add	r1, sp, #16
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f3af 8000 	nop.w
 8008f62:	1c42      	adds	r2, r0, #1
 8008f64:	4606      	mov	r6, r0
 8008f66:	d1d6      	bne.n	8008f16 <_svfiprintf_r+0x176>
 8008f68:	89ab      	ldrh	r3, [r5, #12]
 8008f6a:	065b      	lsls	r3, r3, #25
 8008f6c:	f53f af2c 	bmi.w	8008dc8 <_svfiprintf_r+0x28>
 8008f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f72:	b01d      	add	sp, #116	; 0x74
 8008f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f78:	ab03      	add	r3, sp, #12
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	462a      	mov	r2, r5
 8008f7e:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <_svfiprintf_r+0x1f8>)
 8008f80:	a904      	add	r1, sp, #16
 8008f82:	4638      	mov	r0, r7
 8008f84:	f000 f87a 	bl	800907c <_printf_i>
 8008f88:	e7eb      	b.n	8008f62 <_svfiprintf_r+0x1c2>
 8008f8a:	bf00      	nop
 8008f8c:	0802ed00 	.word	0x0802ed00
 8008f90:	0802ed0a 	.word	0x0802ed0a
 8008f94:	00000000 	.word	0x00000000
 8008f98:	08008ce9 	.word	0x08008ce9
 8008f9c:	0802ed06 	.word	0x0802ed06

08008fa0 <_printf_common>:
 8008fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	4699      	mov	r9, r3
 8008fa8:	688a      	ldr	r2, [r1, #8]
 8008faa:	690b      	ldr	r3, [r1, #16]
 8008fac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	bfb8      	it	lt
 8008fb4:	4613      	movlt	r3, r2
 8008fb6:	6033      	str	r3, [r6, #0]
 8008fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fbc:	4607      	mov	r7, r0
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	b10a      	cbz	r2, 8008fc6 <_printf_common+0x26>
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	6033      	str	r3, [r6, #0]
 8008fc6:	6823      	ldr	r3, [r4, #0]
 8008fc8:	0699      	lsls	r1, r3, #26
 8008fca:	bf42      	ittt	mi
 8008fcc:	6833      	ldrmi	r3, [r6, #0]
 8008fce:	3302      	addmi	r3, #2
 8008fd0:	6033      	strmi	r3, [r6, #0]
 8008fd2:	6825      	ldr	r5, [r4, #0]
 8008fd4:	f015 0506 	ands.w	r5, r5, #6
 8008fd8:	d106      	bne.n	8008fe8 <_printf_common+0x48>
 8008fda:	f104 0a19 	add.w	sl, r4, #25
 8008fde:	68e3      	ldr	r3, [r4, #12]
 8008fe0:	6832      	ldr	r2, [r6, #0]
 8008fe2:	1a9b      	subs	r3, r3, r2
 8008fe4:	42ab      	cmp	r3, r5
 8008fe6:	dc26      	bgt.n	8009036 <_printf_common+0x96>
 8008fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008fec:	1e13      	subs	r3, r2, #0
 8008fee:	6822      	ldr	r2, [r4, #0]
 8008ff0:	bf18      	it	ne
 8008ff2:	2301      	movne	r3, #1
 8008ff4:	0692      	lsls	r2, r2, #26
 8008ff6:	d42b      	bmi.n	8009050 <_printf_common+0xb0>
 8008ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	4638      	mov	r0, r7
 8009000:	47c0      	blx	r8
 8009002:	3001      	adds	r0, #1
 8009004:	d01e      	beq.n	8009044 <_printf_common+0xa4>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	68e5      	ldr	r5, [r4, #12]
 800900a:	6832      	ldr	r2, [r6, #0]
 800900c:	f003 0306 	and.w	r3, r3, #6
 8009010:	2b04      	cmp	r3, #4
 8009012:	bf08      	it	eq
 8009014:	1aad      	subeq	r5, r5, r2
 8009016:	68a3      	ldr	r3, [r4, #8]
 8009018:	6922      	ldr	r2, [r4, #16]
 800901a:	bf0c      	ite	eq
 800901c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009020:	2500      	movne	r5, #0
 8009022:	4293      	cmp	r3, r2
 8009024:	bfc4      	itt	gt
 8009026:	1a9b      	subgt	r3, r3, r2
 8009028:	18ed      	addgt	r5, r5, r3
 800902a:	2600      	movs	r6, #0
 800902c:	341a      	adds	r4, #26
 800902e:	42b5      	cmp	r5, r6
 8009030:	d11a      	bne.n	8009068 <_printf_common+0xc8>
 8009032:	2000      	movs	r0, #0
 8009034:	e008      	b.n	8009048 <_printf_common+0xa8>
 8009036:	2301      	movs	r3, #1
 8009038:	4652      	mov	r2, sl
 800903a:	4649      	mov	r1, r9
 800903c:	4638      	mov	r0, r7
 800903e:	47c0      	blx	r8
 8009040:	3001      	adds	r0, #1
 8009042:	d103      	bne.n	800904c <_printf_common+0xac>
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800904c:	3501      	adds	r5, #1
 800904e:	e7c6      	b.n	8008fde <_printf_common+0x3e>
 8009050:	18e1      	adds	r1, r4, r3
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	2030      	movs	r0, #48	; 0x30
 8009056:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800905a:	4422      	add	r2, r4
 800905c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009060:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009064:	3302      	adds	r3, #2
 8009066:	e7c7      	b.n	8008ff8 <_printf_common+0x58>
 8009068:	2301      	movs	r3, #1
 800906a:	4622      	mov	r2, r4
 800906c:	4649      	mov	r1, r9
 800906e:	4638      	mov	r0, r7
 8009070:	47c0      	blx	r8
 8009072:	3001      	adds	r0, #1
 8009074:	d0e6      	beq.n	8009044 <_printf_common+0xa4>
 8009076:	3601      	adds	r6, #1
 8009078:	e7d9      	b.n	800902e <_printf_common+0x8e>
	...

0800907c <_printf_i>:
 800907c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	7e0f      	ldrb	r7, [r1, #24]
 8009082:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009084:	2f78      	cmp	r7, #120	; 0x78
 8009086:	4691      	mov	r9, r2
 8009088:	4680      	mov	r8, r0
 800908a:	460c      	mov	r4, r1
 800908c:	469a      	mov	sl, r3
 800908e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009092:	d807      	bhi.n	80090a4 <_printf_i+0x28>
 8009094:	2f62      	cmp	r7, #98	; 0x62
 8009096:	d80a      	bhi.n	80090ae <_printf_i+0x32>
 8009098:	2f00      	cmp	r7, #0
 800909a:	f000 80d8 	beq.w	800924e <_printf_i+0x1d2>
 800909e:	2f58      	cmp	r7, #88	; 0x58
 80090a0:	f000 80a3 	beq.w	80091ea <_printf_i+0x16e>
 80090a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090ac:	e03a      	b.n	8009124 <_printf_i+0xa8>
 80090ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090b2:	2b15      	cmp	r3, #21
 80090b4:	d8f6      	bhi.n	80090a4 <_printf_i+0x28>
 80090b6:	a101      	add	r1, pc, #4	; (adr r1, 80090bc <_printf_i+0x40>)
 80090b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090bc:	08009115 	.word	0x08009115
 80090c0:	08009129 	.word	0x08009129
 80090c4:	080090a5 	.word	0x080090a5
 80090c8:	080090a5 	.word	0x080090a5
 80090cc:	080090a5 	.word	0x080090a5
 80090d0:	080090a5 	.word	0x080090a5
 80090d4:	08009129 	.word	0x08009129
 80090d8:	080090a5 	.word	0x080090a5
 80090dc:	080090a5 	.word	0x080090a5
 80090e0:	080090a5 	.word	0x080090a5
 80090e4:	080090a5 	.word	0x080090a5
 80090e8:	08009235 	.word	0x08009235
 80090ec:	08009159 	.word	0x08009159
 80090f0:	08009217 	.word	0x08009217
 80090f4:	080090a5 	.word	0x080090a5
 80090f8:	080090a5 	.word	0x080090a5
 80090fc:	08009257 	.word	0x08009257
 8009100:	080090a5 	.word	0x080090a5
 8009104:	08009159 	.word	0x08009159
 8009108:	080090a5 	.word	0x080090a5
 800910c:	080090a5 	.word	0x080090a5
 8009110:	0800921f 	.word	0x0800921f
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	1d1a      	adds	r2, r3, #4
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	602a      	str	r2, [r5, #0]
 800911c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009120:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009124:	2301      	movs	r3, #1
 8009126:	e0a3      	b.n	8009270 <_printf_i+0x1f4>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	6829      	ldr	r1, [r5, #0]
 800912c:	0606      	lsls	r6, r0, #24
 800912e:	f101 0304 	add.w	r3, r1, #4
 8009132:	d50a      	bpl.n	800914a <_printf_i+0xce>
 8009134:	680e      	ldr	r6, [r1, #0]
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	2e00      	cmp	r6, #0
 800913a:	da03      	bge.n	8009144 <_printf_i+0xc8>
 800913c:	232d      	movs	r3, #45	; 0x2d
 800913e:	4276      	negs	r6, r6
 8009140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009144:	485e      	ldr	r0, [pc, #376]	; (80092c0 <_printf_i+0x244>)
 8009146:	230a      	movs	r3, #10
 8009148:	e019      	b.n	800917e <_printf_i+0x102>
 800914a:	680e      	ldr	r6, [r1, #0]
 800914c:	602b      	str	r3, [r5, #0]
 800914e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009152:	bf18      	it	ne
 8009154:	b236      	sxthne	r6, r6
 8009156:	e7ef      	b.n	8009138 <_printf_i+0xbc>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	6820      	ldr	r0, [r4, #0]
 800915c:	1d19      	adds	r1, r3, #4
 800915e:	6029      	str	r1, [r5, #0]
 8009160:	0601      	lsls	r1, r0, #24
 8009162:	d501      	bpl.n	8009168 <_printf_i+0xec>
 8009164:	681e      	ldr	r6, [r3, #0]
 8009166:	e002      	b.n	800916e <_printf_i+0xf2>
 8009168:	0646      	lsls	r6, r0, #25
 800916a:	d5fb      	bpl.n	8009164 <_printf_i+0xe8>
 800916c:	881e      	ldrh	r6, [r3, #0]
 800916e:	4854      	ldr	r0, [pc, #336]	; (80092c0 <_printf_i+0x244>)
 8009170:	2f6f      	cmp	r7, #111	; 0x6f
 8009172:	bf0c      	ite	eq
 8009174:	2308      	moveq	r3, #8
 8009176:	230a      	movne	r3, #10
 8009178:	2100      	movs	r1, #0
 800917a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800917e:	6865      	ldr	r5, [r4, #4]
 8009180:	60a5      	str	r5, [r4, #8]
 8009182:	2d00      	cmp	r5, #0
 8009184:	bfa2      	ittt	ge
 8009186:	6821      	ldrge	r1, [r4, #0]
 8009188:	f021 0104 	bicge.w	r1, r1, #4
 800918c:	6021      	strge	r1, [r4, #0]
 800918e:	b90e      	cbnz	r6, 8009194 <_printf_i+0x118>
 8009190:	2d00      	cmp	r5, #0
 8009192:	d04d      	beq.n	8009230 <_printf_i+0x1b4>
 8009194:	4615      	mov	r5, r2
 8009196:	fbb6 f1f3 	udiv	r1, r6, r3
 800919a:	fb03 6711 	mls	r7, r3, r1, r6
 800919e:	5dc7      	ldrb	r7, [r0, r7]
 80091a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091a4:	4637      	mov	r7, r6
 80091a6:	42bb      	cmp	r3, r7
 80091a8:	460e      	mov	r6, r1
 80091aa:	d9f4      	bls.n	8009196 <_printf_i+0x11a>
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d10b      	bne.n	80091c8 <_printf_i+0x14c>
 80091b0:	6823      	ldr	r3, [r4, #0]
 80091b2:	07de      	lsls	r6, r3, #31
 80091b4:	d508      	bpl.n	80091c8 <_printf_i+0x14c>
 80091b6:	6923      	ldr	r3, [r4, #16]
 80091b8:	6861      	ldr	r1, [r4, #4]
 80091ba:	4299      	cmp	r1, r3
 80091bc:	bfde      	ittt	le
 80091be:	2330      	movle	r3, #48	; 0x30
 80091c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091c8:	1b52      	subs	r2, r2, r5
 80091ca:	6122      	str	r2, [r4, #16]
 80091cc:	f8cd a000 	str.w	sl, [sp]
 80091d0:	464b      	mov	r3, r9
 80091d2:	aa03      	add	r2, sp, #12
 80091d4:	4621      	mov	r1, r4
 80091d6:	4640      	mov	r0, r8
 80091d8:	f7ff fee2 	bl	8008fa0 <_printf_common>
 80091dc:	3001      	adds	r0, #1
 80091de:	d14c      	bne.n	800927a <_printf_i+0x1fe>
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	b004      	add	sp, #16
 80091e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ea:	4835      	ldr	r0, [pc, #212]	; (80092c0 <_printf_i+0x244>)
 80091ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80091f0:	6829      	ldr	r1, [r5, #0]
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80091f8:	6029      	str	r1, [r5, #0]
 80091fa:	061d      	lsls	r5, r3, #24
 80091fc:	d514      	bpl.n	8009228 <_printf_i+0x1ac>
 80091fe:	07df      	lsls	r7, r3, #31
 8009200:	bf44      	itt	mi
 8009202:	f043 0320 	orrmi.w	r3, r3, #32
 8009206:	6023      	strmi	r3, [r4, #0]
 8009208:	b91e      	cbnz	r6, 8009212 <_printf_i+0x196>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	f023 0320 	bic.w	r3, r3, #32
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	2310      	movs	r3, #16
 8009214:	e7b0      	b.n	8009178 <_printf_i+0xfc>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	f043 0320 	orr.w	r3, r3, #32
 800921c:	6023      	str	r3, [r4, #0]
 800921e:	2378      	movs	r3, #120	; 0x78
 8009220:	4828      	ldr	r0, [pc, #160]	; (80092c4 <_printf_i+0x248>)
 8009222:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009226:	e7e3      	b.n	80091f0 <_printf_i+0x174>
 8009228:	0659      	lsls	r1, r3, #25
 800922a:	bf48      	it	mi
 800922c:	b2b6      	uxthmi	r6, r6
 800922e:	e7e6      	b.n	80091fe <_printf_i+0x182>
 8009230:	4615      	mov	r5, r2
 8009232:	e7bb      	b.n	80091ac <_printf_i+0x130>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	6826      	ldr	r6, [r4, #0]
 8009238:	6961      	ldr	r1, [r4, #20]
 800923a:	1d18      	adds	r0, r3, #4
 800923c:	6028      	str	r0, [r5, #0]
 800923e:	0635      	lsls	r5, r6, #24
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	d501      	bpl.n	8009248 <_printf_i+0x1cc>
 8009244:	6019      	str	r1, [r3, #0]
 8009246:	e002      	b.n	800924e <_printf_i+0x1d2>
 8009248:	0670      	lsls	r0, r6, #25
 800924a:	d5fb      	bpl.n	8009244 <_printf_i+0x1c8>
 800924c:	8019      	strh	r1, [r3, #0]
 800924e:	2300      	movs	r3, #0
 8009250:	6123      	str	r3, [r4, #16]
 8009252:	4615      	mov	r5, r2
 8009254:	e7ba      	b.n	80091cc <_printf_i+0x150>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	1d1a      	adds	r2, r3, #4
 800925a:	602a      	str	r2, [r5, #0]
 800925c:	681d      	ldr	r5, [r3, #0]
 800925e:	6862      	ldr	r2, [r4, #4]
 8009260:	2100      	movs	r1, #0
 8009262:	4628      	mov	r0, r5
 8009264:	f7f6 ffb4 	bl	80001d0 <memchr>
 8009268:	b108      	cbz	r0, 800926e <_printf_i+0x1f2>
 800926a:	1b40      	subs	r0, r0, r5
 800926c:	6060      	str	r0, [r4, #4]
 800926e:	6863      	ldr	r3, [r4, #4]
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	2300      	movs	r3, #0
 8009274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009278:	e7a8      	b.n	80091cc <_printf_i+0x150>
 800927a:	6923      	ldr	r3, [r4, #16]
 800927c:	462a      	mov	r2, r5
 800927e:	4649      	mov	r1, r9
 8009280:	4640      	mov	r0, r8
 8009282:	47d0      	blx	sl
 8009284:	3001      	adds	r0, #1
 8009286:	d0ab      	beq.n	80091e0 <_printf_i+0x164>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	079b      	lsls	r3, r3, #30
 800928c:	d413      	bmi.n	80092b6 <_printf_i+0x23a>
 800928e:	68e0      	ldr	r0, [r4, #12]
 8009290:	9b03      	ldr	r3, [sp, #12]
 8009292:	4298      	cmp	r0, r3
 8009294:	bfb8      	it	lt
 8009296:	4618      	movlt	r0, r3
 8009298:	e7a4      	b.n	80091e4 <_printf_i+0x168>
 800929a:	2301      	movs	r3, #1
 800929c:	4632      	mov	r2, r6
 800929e:	4649      	mov	r1, r9
 80092a0:	4640      	mov	r0, r8
 80092a2:	47d0      	blx	sl
 80092a4:	3001      	adds	r0, #1
 80092a6:	d09b      	beq.n	80091e0 <_printf_i+0x164>
 80092a8:	3501      	adds	r5, #1
 80092aa:	68e3      	ldr	r3, [r4, #12]
 80092ac:	9903      	ldr	r1, [sp, #12]
 80092ae:	1a5b      	subs	r3, r3, r1
 80092b0:	42ab      	cmp	r3, r5
 80092b2:	dcf2      	bgt.n	800929a <_printf_i+0x21e>
 80092b4:	e7eb      	b.n	800928e <_printf_i+0x212>
 80092b6:	2500      	movs	r5, #0
 80092b8:	f104 0619 	add.w	r6, r4, #25
 80092bc:	e7f5      	b.n	80092aa <_printf_i+0x22e>
 80092be:	bf00      	nop
 80092c0:	0802ed11 	.word	0x0802ed11
 80092c4:	0802ed22 	.word	0x0802ed22

080092c8 <__retarget_lock_acquire_recursive>:
 80092c8:	4770      	bx	lr

080092ca <__retarget_lock_release_recursive>:
 80092ca:	4770      	bx	lr

080092cc <memcpy>:
 80092cc:	440a      	add	r2, r1
 80092ce:	4291      	cmp	r1, r2
 80092d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80092d4:	d100      	bne.n	80092d8 <memcpy+0xc>
 80092d6:	4770      	bx	lr
 80092d8:	b510      	push	{r4, lr}
 80092da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e2:	4291      	cmp	r1, r2
 80092e4:	d1f9      	bne.n	80092da <memcpy+0xe>
 80092e6:	bd10      	pop	{r4, pc}

080092e8 <memmove>:
 80092e8:	4288      	cmp	r0, r1
 80092ea:	b510      	push	{r4, lr}
 80092ec:	eb01 0402 	add.w	r4, r1, r2
 80092f0:	d902      	bls.n	80092f8 <memmove+0x10>
 80092f2:	4284      	cmp	r4, r0
 80092f4:	4623      	mov	r3, r4
 80092f6:	d807      	bhi.n	8009308 <memmove+0x20>
 80092f8:	1e43      	subs	r3, r0, #1
 80092fa:	42a1      	cmp	r1, r4
 80092fc:	d008      	beq.n	8009310 <memmove+0x28>
 80092fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009306:	e7f8      	b.n	80092fa <memmove+0x12>
 8009308:	4402      	add	r2, r0
 800930a:	4601      	mov	r1, r0
 800930c:	428a      	cmp	r2, r1
 800930e:	d100      	bne.n	8009312 <memmove+0x2a>
 8009310:	bd10      	pop	{r4, pc}
 8009312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009316:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800931a:	e7f7      	b.n	800930c <memmove+0x24>

0800931c <_realloc_r>:
 800931c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009320:	4680      	mov	r8, r0
 8009322:	4614      	mov	r4, r2
 8009324:	460e      	mov	r6, r1
 8009326:	b921      	cbnz	r1, 8009332 <_realloc_r+0x16>
 8009328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800932c:	4611      	mov	r1, r2
 800932e:	f7ff bc2b 	b.w	8008b88 <_malloc_r>
 8009332:	b92a      	cbnz	r2, 8009340 <_realloc_r+0x24>
 8009334:	f7ff fbbc 	bl	8008ab0 <_free_r>
 8009338:	4625      	mov	r5, r4
 800933a:	4628      	mov	r0, r5
 800933c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009340:	f000 f81b 	bl	800937a <_malloc_usable_size_r>
 8009344:	4284      	cmp	r4, r0
 8009346:	4607      	mov	r7, r0
 8009348:	d802      	bhi.n	8009350 <_realloc_r+0x34>
 800934a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800934e:	d812      	bhi.n	8009376 <_realloc_r+0x5a>
 8009350:	4621      	mov	r1, r4
 8009352:	4640      	mov	r0, r8
 8009354:	f7ff fc18 	bl	8008b88 <_malloc_r>
 8009358:	4605      	mov	r5, r0
 800935a:	2800      	cmp	r0, #0
 800935c:	d0ed      	beq.n	800933a <_realloc_r+0x1e>
 800935e:	42bc      	cmp	r4, r7
 8009360:	4622      	mov	r2, r4
 8009362:	4631      	mov	r1, r6
 8009364:	bf28      	it	cs
 8009366:	463a      	movcs	r2, r7
 8009368:	f7ff ffb0 	bl	80092cc <memcpy>
 800936c:	4631      	mov	r1, r6
 800936e:	4640      	mov	r0, r8
 8009370:	f7ff fb9e 	bl	8008ab0 <_free_r>
 8009374:	e7e1      	b.n	800933a <_realloc_r+0x1e>
 8009376:	4635      	mov	r5, r6
 8009378:	e7df      	b.n	800933a <_realloc_r+0x1e>

0800937a <_malloc_usable_size_r>:
 800937a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937e:	1f18      	subs	r0, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	bfbc      	itt	lt
 8009384:	580b      	ldrlt	r3, [r1, r0]
 8009386:	18c0      	addlt	r0, r0, r3
 8009388:	4770      	bx	lr
	...

0800938c <_init>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	bf00      	nop
 8009390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009392:	bc08      	pop	{r3}
 8009394:	469e      	mov	lr, r3
 8009396:	4770      	bx	lr

08009398 <_fini>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	bf00      	nop
 800939c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800939e:	bc08      	pop	{r3}
 80093a0:	469e      	mov	lr, r3
 80093a2:	4770      	bx	lr
