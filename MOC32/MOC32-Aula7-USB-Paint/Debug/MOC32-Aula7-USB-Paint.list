
MOC32-Aula7-USB-Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025990  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ea84  0802ea84  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802ea84  0802ea84  0003ea84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ea8c  0802ea8c  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ea8c  0802ea8c  0003ea8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ea90  0802ea90  0003ea90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802ea94  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040090  2**0
                  CONTENTS
 10 .bss          00000898  20000090  20000090  00040090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  00040090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c83  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f4d  00000000  00000000  00059d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0005dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ff8  00000000  00000000  0005ee28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268eb  00000000  00000000  0005fe20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001818d  00000000  00000000  0008670b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd643  00000000  00000000  0009e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017bedb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004be0  00000000  00000000  0017bf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090dc 	.word	0x080090dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	080090dc 	.word	0x080090dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 800057a:	4b52      	ldr	r3, [pc, #328]	; (80006c4 <ili9341_Init+0x150>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	2b00      	cmp	r3, #0
 8000584:	d115      	bne.n	80005b2 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8000586:	4b4f      	ldr	r3, [pc, #316]	; (80006c4 <ili9341_Init+0x150>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	f043 0301 	orr.w	r3, r3, #1
 800058e:	b2da      	uxtb	r2, r3
 8000590:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <ili9341_Init+0x150>)
 8000592:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8000594:	4b4b      	ldr	r3, [pc, #300]	; (80006c4 <ili9341_Init+0x150>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	f003 0302 	and.w	r3, r3, #2
 800059c:	2b00      	cmp	r3, #0
 800059e:	d101      	bne.n	80005a4 <ili9341_Init+0x30>
      LCD_IO_Init();
 80005a0:	f000 fb6a 	bl	8000c78 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80005a4:	4b47      	ldr	r3, [pc, #284]	; (80006c4 <ili9341_Init+0x150>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	b2da      	uxtb	r2, r3
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <ili9341_Init+0x150>)
 80005b0:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 80005b2:	200a      	movs	r0, #10
 80005b4:	f000 fb54 	bl	8000c60 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 80005b8:	2001      	movs	r0, #1
 80005ba:	f000 fb87 	bl	8000ccc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f000 fb4e 	bl	8000c60 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 80005c4:	2203      	movs	r2, #3
 80005c6:	4940      	ldr	r1, [pc, #256]	; (80006c8 <ili9341_Init+0x154>)
 80005c8:	20ef      	movs	r0, #239	; 0xef
 80005ca:	f000 fbdd 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 80005ce:	2203      	movs	r2, #3
 80005d0:	493e      	ldr	r1, [pc, #248]	; (80006cc <ili9341_Init+0x158>)
 80005d2:	20cf      	movs	r0, #207	; 0xcf
 80005d4:	f000 fbd8 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 80005d8:	2204      	movs	r2, #4
 80005da:	493d      	ldr	r1, [pc, #244]	; (80006d0 <ili9341_Init+0x15c>)
 80005dc:	20ed      	movs	r0, #237	; 0xed
 80005de:	f000 fbd3 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 80005e2:	2203      	movs	r2, #3
 80005e4:	493b      	ldr	r1, [pc, #236]	; (80006d4 <ili9341_Init+0x160>)
 80005e6:	20e8      	movs	r0, #232	; 0xe8
 80005e8:	f000 fbce 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 80005ec:	2205      	movs	r2, #5
 80005ee:	493a      	ldr	r1, [pc, #232]	; (80006d8 <ili9341_Init+0x164>)
 80005f0:	20cb      	movs	r0, #203	; 0xcb
 80005f2:	f000 fbc9 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	4938      	ldr	r1, [pc, #224]	; (80006dc <ili9341_Init+0x168>)
 80005fa:	20f7      	movs	r0, #247	; 0xf7
 80005fc:	f000 fbc4 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000600:	2202      	movs	r2, #2
 8000602:	4937      	ldr	r1, [pc, #220]	; (80006e0 <ili9341_Init+0x16c>)
 8000604:	20ea      	movs	r0, #234	; 0xea
 8000606:	f000 fbbf 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 800060a:	2201      	movs	r2, #1
 800060c:	4935      	ldr	r1, [pc, #212]	; (80006e4 <ili9341_Init+0x170>)
 800060e:	20c0      	movs	r0, #192	; 0xc0
 8000610:	f000 fbba 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000614:	2201      	movs	r2, #1
 8000616:	4934      	ldr	r1, [pc, #208]	; (80006e8 <ili9341_Init+0x174>)
 8000618:	20c1      	movs	r0, #193	; 0xc1
 800061a:	f000 fbb5 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 800061e:	2202      	movs	r2, #2
 8000620:	4932      	ldr	r1, [pc, #200]	; (80006ec <ili9341_Init+0x178>)
 8000622:	20c5      	movs	r0, #197	; 0xc5
 8000624:	f000 fbb0 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000628:	2201      	movs	r2, #1
 800062a:	4931      	ldr	r1, [pc, #196]	; (80006f0 <ili9341_Init+0x17c>)
 800062c:	20c7      	movs	r0, #199	; 0xc7
 800062e:	f000 fbab 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000632:	2201      	movs	r2, #1
 8000634:	492f      	ldr	r1, [pc, #188]	; (80006f4 <ili9341_Init+0x180>)
 8000636:	2037      	movs	r0, #55	; 0x37
 8000638:	f000 fba6 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 800063c:	2201      	movs	r2, #1
 800063e:	492e      	ldr	r1, [pc, #184]	; (80006f8 <ili9341_Init+0x184>)
 8000640:	203a      	movs	r0, #58	; 0x3a
 8000642:	f000 fba1 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8000646:	2202      	movs	r2, #2
 8000648:	492c      	ldr	r1, [pc, #176]	; (80006fc <ili9341_Init+0x188>)
 800064a:	20b1      	movs	r0, #177	; 0xb1
 800064c:	f000 fb9c 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8000650:	2203      	movs	r2, #3
 8000652:	492b      	ldr	r1, [pc, #172]	; (8000700 <ili9341_Init+0x18c>)
 8000654:	20b6      	movs	r0, #182	; 0xb6
 8000656:	f000 fb97 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800065a:	2201      	movs	r2, #1
 800065c:	4925      	ldr	r1, [pc, #148]	; (80006f4 <ili9341_Init+0x180>)
 800065e:	20f2      	movs	r0, #242	; 0xf2
 8000660:	f000 fb92 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8000664:	2201      	movs	r2, #1
 8000666:	4927      	ldr	r1, [pc, #156]	; (8000704 <ili9341_Init+0x190>)
 8000668:	2026      	movs	r0, #38	; 0x26
 800066a:	f000 fb8d 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 800066e:	220f      	movs	r2, #15
 8000670:	4925      	ldr	r1, [pc, #148]	; (8000708 <ili9341_Init+0x194>)
 8000672:	20e0      	movs	r0, #224	; 0xe0
 8000674:	f000 fb88 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8000678:	220f      	movs	r2, #15
 800067a:	4924      	ldr	r1, [pc, #144]	; (800070c <ili9341_Init+0x198>)
 800067c:	20e1      	movs	r0, #225	; 0xe1
 800067e:	f000 fb83 	bl	8000d88 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000682:	2036      	movs	r0, #54	; 0x36
 8000684:	f000 fb22 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000688:	2028      	movs	r0, #40	; 0x28
 800068a:	f000 fb2f 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800068e:	2011      	movs	r0, #17
 8000690:	f000 fb1c 	bl	8000ccc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fae3 	bl	8000c60 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, COLOR_BLUE);
 800069a:	231f      	movs	r3, #31
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	23f0      	movs	r3, #240	; 0xf0
 80006a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80006a4:	2100      	movs	r1, #0
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f8e4 	bl	8000874 <ili9341_FillRect>
  LCD_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fad7 	bl	8000c60 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 80006b2:	2029      	movs	r0, #41	; 0x29
 80006b4:	f000 fb0a 	bl	8000ccc <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fad1 	bl	8000c60 <LCD_Delay>
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000ac 	.word	0x200000ac
 80006c8:	080090f4 	.word	0x080090f4
 80006cc:	080090f8 	.word	0x080090f8
 80006d0:	080090fc 	.word	0x080090fc
 80006d4:	08009104 	.word	0x08009104
 80006d8:	08009108 	.word	0x08009108
 80006dc:	08009110 	.word	0x08009110
 80006e0:	08009114 	.word	0x08009114
 80006e4:	08009118 	.word	0x08009118
 80006e8:	0800911c 	.word	0x0800911c
 80006ec:	08009120 	.word	0x08009120
 80006f0:	08009124 	.word	0x08009124
 80006f4:	08009128 	.word	0x08009128
 80006f8:	0800912c 	.word	0x0800912c
 80006fc:	08009130 	.word	0x08009130
 8000700:	08009134 	.word	0x08009134
 8000704:	08009138 	.word	0x08009138
 8000708:	0800913c 	.word	0x0800913c
 800070c:	0800914c 	.word	0x0800914c

08000710 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
 800071a:	460b      	mov	r3, r1
 800071c:	80bb      	strh	r3, [r7, #4]
 800071e:	4613      	mov	r3, r2
 8000720:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000722:	202a      	movs	r0, #42	; 0x2a
 8000724:	f000 fad2 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fadb 	bl	8000cec <LCD_IO_WriteData8>
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fad6 	bl	8000cec <LCD_IO_WriteData8>
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f000 facf 	bl	8000cec <LCD_IO_WriteData8>
 800074e:	88fb      	ldrh	r3, [r7, #6]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 faca 	bl	8000cec <LCD_IO_WriteData8>
 8000758:	202b      	movs	r0, #43	; 0x2b
 800075a:	f000 fab7 	bl	8000ccc <LCD_IO_WriteCmd8>
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	0a1b      	lsrs	r3, r3, #8
 8000762:	b29b      	uxth	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fac0 	bl	8000cec <LCD_IO_WriteData8>
 800076c:	88bb      	ldrh	r3, [r7, #4]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f000 fabb 	bl	8000cec <LCD_IO_WriteData8>
 8000776:	88bb      	ldrh	r3, [r7, #4]
 8000778:	0a1b      	lsrs	r3, r3, #8
 800077a:	b29b      	uxth	r3, r3
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 fab4 	bl	8000cec <LCD_IO_WriteData8>
 8000784:	88bb      	ldrh	r3, [r7, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f000 faaf 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 800078e:	202c      	movs	r0, #44	; 0x2c
 8000790:	f000 fa9c 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000794:	887b      	ldrh	r3, [r7, #2]
 8000796:	4618      	mov	r0, r3
 8000798:	f000 fab8 	bl	8000d0c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4604      	mov	r4, r0
 80007ac:	4608      	mov	r0, r1
 80007ae:	4611      	mov	r1, r2
 80007b0:	461a      	mov	r2, r3
 80007b2:	4623      	mov	r3, r4
 80007b4:	80fb      	strh	r3, [r7, #6]
 80007b6:	4603      	mov	r3, r0
 80007b8:	80bb      	strh	r3, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	807b      	strh	r3, [r7, #2]
 80007be:	4613      	mov	r3, r2
 80007c0:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 80007c2:	4a2a      	ldr	r2, [pc, #168]	; (800086c <ili9341_SetDisplayWindow+0xc8>)
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	8013      	strh	r3, [r2, #0]
 80007c8:	88ba      	ldrh	r2, [r7, #4]
 80007ca:	883b      	ldrh	r3, [r7, #0]
 80007cc:	4413      	add	r3, r2
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	3b01      	subs	r3, #1
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <ili9341_SetDisplayWindow+0xcc>)
 80007d6:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80007d8:	202a      	movs	r0, #42	; 0x2a
 80007da:	f000 fa77 	bl	8000ccc <LCD_IO_WriteCmd8>
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	0a1b      	lsrs	r3, r3, #8
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fa80 	bl	8000cec <LCD_IO_WriteData8>
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fa7b 	bl	8000cec <LCD_IO_WriteData8>
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	4413      	add	r3, r2
 80007fc:	3b01      	subs	r3, #1
 80007fe:	121b      	asrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fa72 	bl	8000cec <LCD_IO_WriteData8>
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	887b      	ldrh	r3, [r7, #2]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4413      	add	r3, r2
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f000 fa67 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 800081e:	202b      	movs	r0, #43	; 0x2b
 8000820:	f000 fa54 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000824:	88bb      	ldrh	r3, [r7, #4]
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b29b      	uxth	r3, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fa5d 	bl	8000cec <LCD_IO_WriteData8>
 8000832:	88bb      	ldrh	r3, [r7, #4]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fa58 	bl	8000cec <LCD_IO_WriteData8>
 800083c:	88ba      	ldrh	r2, [r7, #4]
 800083e:	883b      	ldrh	r3, [r7, #0]
 8000840:	4413      	add	r3, r2
 8000842:	3b01      	subs	r3, #1
 8000844:	121b      	asrs	r3, r3, #8
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f000 fa4f 	bl	8000cec <LCD_IO_WriteData8>
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	883b      	ldrh	r3, [r7, #0]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4413      	add	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	3b01      	subs	r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fa44 	bl	8000cec <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	200000ae 	.word	0x200000ae
 8000870:	200000b0 	.word	0x200000b0

08000874 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8000874:	b590      	push	{r4, r7, lr}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4604      	mov	r4, r0
 800087c:	4608      	mov	r0, r1
 800087e:	4611      	mov	r1, r2
 8000880:	461a      	mov	r2, r3
 8000882:	4623      	mov	r3, r4
 8000884:	80fb      	strh	r3, [r7, #6]
 8000886:	4603      	mov	r3, r0
 8000888:	80bb      	strh	r3, [r7, #4]
 800088a:	460b      	mov	r3, r1
 800088c:	807b      	strh	r3, [r7, #2]
 800088e:	4613      	mov	r3, r2
 8000890:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8000892:	202a      	movs	r0, #42	; 0x2a
 8000894:	f000 fa1a 	bl	8000ccc <LCD_IO_WriteCmd8>
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 fa23 	bl	8000cec <LCD_IO_WriteData8>
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fa1e 	bl	8000cec <LCD_IO_WriteData8>
 80008b0:	88fa      	ldrh	r2, [r7, #6]
 80008b2:	887b      	ldrh	r3, [r7, #2]
 80008b4:	4413      	add	r3, r2
 80008b6:	3b01      	subs	r3, #1
 80008b8:	121b      	asrs	r3, r3, #8
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fa15 	bl	8000cec <LCD_IO_WriteData8>
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	887b      	ldrh	r3, [r7, #2]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	4413      	add	r3, r2
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	3b01      	subs	r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fa0a 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 80008d8:	202b      	movs	r0, #43	; 0x2b
 80008da:	f000 f9f7 	bl	8000ccc <LCD_IO_WriteCmd8>
 80008de:	88bb      	ldrh	r3, [r7, #4]
 80008e0:	0a1b      	lsrs	r3, r3, #8
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fa00 	bl	8000cec <LCD_IO_WriteData8>
 80008ec:	88bb      	ldrh	r3, [r7, #4]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f9fb 	bl	8000cec <LCD_IO_WriteData8>
 80008f6:	88ba      	ldrh	r2, [r7, #4]
 80008f8:	883b      	ldrh	r3, [r7, #0]
 80008fa:	4413      	add	r3, r2
 80008fc:	3b01      	subs	r3, #1
 80008fe:	121b      	asrs	r3, r3, #8
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f9f2 	bl	8000cec <LCD_IO_WriteData8>
 8000908:	88bb      	ldrh	r3, [r7, #4]
 800090a:	b2da      	uxtb	r2, r3
 800090c:	883b      	ldrh	r3, [r7, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	3b01      	subs	r3, #1
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4618      	mov	r0, r3
 800091a:	f000 f9e7 	bl	8000cec <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 800091e:	887b      	ldrh	r3, [r7, #2]
 8000920:	883a      	ldrh	r2, [r7, #0]
 8000922:	fb02 f303 	mul.w	r3, r2, r3
 8000926:	461a      	mov	r2, r3
 8000928:	8b3b      	ldrh	r3, [r7, #24]
 800092a:	4619      	mov	r1, r3
 800092c:	202c      	movs	r0, #44	; 0x2c
 800092e:	f000 fa05 	bl	8000d3c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	bd90      	pop	{r4, r7, pc}

0800093a <ili9341_DrawFastVLine>:

void  ili9341_DrawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800093a:	b590      	push	{r4, r7, lr}
 800093c:	b085      	sub	sp, #20
 800093e:	af02      	add	r7, sp, #8
 8000940:	4604      	mov	r4, r0
 8000942:	4608      	mov	r0, r1
 8000944:	4611      	mov	r1, r2
 8000946:	461a      	mov	r2, r3
 8000948:	4623      	mov	r3, r4
 800094a:	80fb      	strh	r3, [r7, #6]
 800094c:	4603      	mov	r3, r0
 800094e:	80bb      	strh	r3, [r7, #4]
 8000950:	460b      	mov	r3, r1
 8000952:	807b      	strh	r3, [r7, #2]
 8000954:	4613      	mov	r3, r2
 8000956:	803b      	strh	r3, [r7, #0]
	ili9341_FillRect(x, y, 1, h, color);
 8000958:	88f8      	ldrh	r0, [r7, #6]
 800095a:	88b9      	ldrh	r1, [r7, #4]
 800095c:	887a      	ldrh	r2, [r7, #2]
 800095e:	883b      	ldrh	r3, [r7, #0]
 8000960:	9300      	str	r3, [sp, #0]
 8000962:	4613      	mov	r3, r2
 8000964:	2201      	movs	r2, #1
 8000966:	f7ff ff85 	bl	8000874 <ili9341_FillRect>
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bd90      	pop	{r4, r7, pc}

08000972 <ili9341_DrawFastHLine>:
void  ili9341_DrawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000972:	b590      	push	{r4, r7, lr}
 8000974:	b085      	sub	sp, #20
 8000976:	af02      	add	r7, sp, #8
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	461a      	mov	r2, r3
 8000980:	4623      	mov	r3, r4
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	4603      	mov	r3, r0
 8000986:	80bb      	strh	r3, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
 800098c:	4613      	mov	r3, r2
 800098e:	803b      	strh	r3, [r7, #0]
	ili9341_FillRect(x, y, w, 1, color);
 8000990:	88f8      	ldrh	r0, [r7, #6]
 8000992:	88b9      	ldrh	r1, [r7, #4]
 8000994:	887a      	ldrh	r2, [r7, #2]
 8000996:	883b      	ldrh	r3, [r7, #0]
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2301      	movs	r3, #1
 800099c:	f7ff ff6a 	bl	8000874 <ili9341_FillRect>
}
 80009a0:	bf00      	nop
 80009a2:	370c      	adds	r7, #12
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}

080009a8 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4604      	mov	r4, r0
 80009b0:	4608      	mov	r0, r1
 80009b2:	4611      	mov	r1, r2
 80009b4:	461a      	mov	r2, r3
 80009b6:	4623      	mov	r3, r4
 80009b8:	80fb      	strh	r3, [r7, #6]
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	460b      	mov	r3, r1
 80009c0:	807b      	strh	r3, [r7, #2]
 80009c2:	4613      	mov	r3, r2
 80009c4:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	88b9      	ldrh	r1, [r7, #4]
 80009cc:	88f8      	ldrh	r0, [r7, #6]
 80009ce:	f7ff fee9 	bl	80007a4 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 80009d2:	887b      	ldrh	r3, [r7, #2]
 80009d4:	883a      	ldrh	r2, [r7, #0]
 80009d6:	fb02 f303 	mul.w	r3, r2, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	69b9      	ldr	r1, [r7, #24]
 80009de:	202c      	movs	r0, #44	; 0x2c
 80009e0:	f000 f9f4 	bl	8000dcc <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ili9341_WriteLine>:
	setCursor(0, row);
	//while (*str) write (*str++);
	while (*str) write(*str++);
}
void ili9341_WriteLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b089      	sub	sp, #36	; 0x24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000a0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a12:	1ad3      	subs	r3, r2, r3
 8000a14:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000a18:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000a1c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a24:	1acb      	subs	r3, r1, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bfb8      	it	lt
 8000a2a:	425b      	neglt	r3, r3
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	bfcc      	ite	gt
 8000a30:	2301      	movgt	r3, #1
 8000a32:	2300      	movle	r3, #0
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8000a38:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d00b      	beq.n	8000a58 <ili9341_WriteLine+0x6c>
        _swap_int16_t(x0, y0);
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	833b      	strh	r3, [r7, #24]
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	80fb      	strh	r3, [r7, #6]
 8000a48:	8b3b      	ldrh	r3, [r7, #24]
 8000a4a:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	82fb      	strh	r3, [r7, #22]
 8000a50:	883b      	ldrh	r3, [r7, #0]
 8000a52:	807b      	strh	r3, [r7, #2]
 8000a54:	8afb      	ldrh	r3, [r7, #22]
 8000a56:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8000a58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	dd0b      	ble.n	8000a7c <ili9341_WriteLine+0x90>
        _swap_int16_t(x0, x1);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	82bb      	strh	r3, [r7, #20]
 8000a68:	887b      	ldrh	r3, [r7, #2]
 8000a6a:	80fb      	strh	r3, [r7, #6]
 8000a6c:	8abb      	ldrh	r3, [r7, #20]
 8000a6e:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8000a70:	88bb      	ldrh	r3, [r7, #4]
 8000a72:	827b      	strh	r3, [r7, #18]
 8000a74:	883b      	ldrh	r3, [r7, #0]
 8000a76:	80bb      	strh	r3, [r7, #4]
 8000a78:	8a7b      	ldrh	r3, [r7, #18]
 8000a7a:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 8000a86:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000a8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bfb8      	it	lt
 8000a94:	425b      	neglt	r3, r3
 8000a96:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8000a98:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a9c:	0fda      	lsrs	r2, r3, #31
 8000a9e:	4413      	add	r3, r2
 8000aa0:	105b      	asrs	r3, r3, #1
 8000aa2:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 8000aa4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000aa8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	da02      	bge.n	8000ab6 <ili9341_WriteLine+0xca>
        ystep = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	83bb      	strh	r3, [r7, #28]
 8000ab4:	e02d      	b.n	8000b12 <ili9341_WriteLine+0x126>
    } else {
        ystep = -1;
 8000ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aba:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 8000abc:	e029      	b.n	8000b12 <ili9341_WriteLine+0x126>
        if (steep) {
 8000abe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <ili9341_WriteLine+0xe8>
        	ili9341_WritePixel(y0, x0, color);
 8000ac6:	88bb      	ldrh	r3, [r7, #4]
 8000ac8:	88f9      	ldrh	r1, [r7, #6]
 8000aca:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000acc:	4618      	mov	r0, r3
 8000ace:	f7ff fe1f 	bl	8000710 <ili9341_WritePixel>
 8000ad2:	e005      	b.n	8000ae0 <ili9341_WriteLine+0xf4>
        } else {
        	ili9341_WritePixel(x0, y0, color);
 8000ad4:	88fb      	ldrh	r3, [r7, #6]
 8000ad6:	88b9      	ldrh	r1, [r7, #4]
 8000ad8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fe18 	bl	8000710 <ili9341_WritePixel>
        }
        err -= dy;
 8000ae0:	8bfa      	ldrh	r2, [r7, #30]
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 8000aea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da09      	bge.n	8000b06 <ili9341_WriteLine+0x11a>
            y0 += ystep;
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	8bbb      	ldrh	r3, [r7, #28]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000afc:	8bfa      	ldrh	r2, [r7, #30]
 8000afe:	8a3b      	ldrh	r3, [r7, #16]
 8000b00:	4413      	add	r3, r2
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	80fb      	strh	r3, [r7, #6]
 8000b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	ddcf      	ble.n	8000abe <ili9341_WriteLine+0xd2>
        }
    }
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3724      	adds	r7, #36	; 0x24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd90      	pop	{r4, r7, pc}

08000b28 <ili9341_DrawLine>:

void ili9341_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	80fb      	strh	r3, [r7, #6]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	807b      	strh	r3, [r7, #2]
 8000b42:	4613      	mov	r3, r2
 8000b44:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 8000b46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d11a      	bne.n	8000b88 <ili9341_DrawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8000b52:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dd05      	ble.n	8000b6a <ili9341_DrawLine+0x42>
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	81bb      	strh	r3, [r7, #12]
 8000b62:	883b      	ldrh	r3, [r7, #0]
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	89bb      	ldrh	r3, [r7, #12]
 8000b68:	803b      	strh	r3, [r7, #0]
        ili9341_DrawFastVLine(x0, y0, y1 - y0 + 1, color);
 8000b6a:	883a      	ldrh	r2, [r7, #0]
 8000b6c:	88bb      	ldrh	r3, [r7, #4]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	3301      	adds	r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	8c3b      	ldrh	r3, [r7, #32]
 8000b7a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000b82:	f7ff feda 	bl	800093a <ili9341_DrawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        ili9341_DrawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
    	ili9341_WriteLine(x0, y0, x1, y1, color);
    }
}
 8000b86:	e02d      	b.n	8000be4 <ili9341_DrawLine+0xbc>
    } else if(y0 == y1){
 8000b88:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d11a      	bne.n	8000bca <ili9341_DrawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8000b94:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dd05      	ble.n	8000bac <ili9341_DrawLine+0x84>
 8000ba0:	88fb      	ldrh	r3, [r7, #6]
 8000ba2:	81fb      	strh	r3, [r7, #14]
 8000ba4:	887b      	ldrh	r3, [r7, #2]
 8000ba6:	80fb      	strh	r3, [r7, #6]
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	807b      	strh	r3, [r7, #2]
        ili9341_DrawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000bac:	887a      	ldrh	r2, [r7, #2]
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b21a      	sxth	r2, r3
 8000bba:	8c3b      	ldrh	r3, [r7, #32]
 8000bbc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bc0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bc4:	f7ff fed5 	bl	8000972 <ili9341_DrawFastHLine>
}
 8000bc8:	e00c      	b.n	8000be4 <ili9341_DrawLine+0xbc>
    	ili9341_WriteLine(x0, y0, x1, y1, color);
 8000bca:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000bce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bd2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bd6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bda:	8c3b      	ldrh	r3, [r7, #32]
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	4623      	mov	r3, r4
 8000be0:	f7ff ff04 	bl	80009ec <ili9341_WriteLine>
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd90      	pop	{r4, r7, pc}

08000bec <ili9341_DrawTriangle>:
    ili9341_FillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
    ili9341_FillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
}

void ili9341_DrawTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000bec:	b590      	push	{r4, r7, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4623      	mov	r3, r4
 8000bfc:	80fb      	strh	r3, [r7, #6]
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80bb      	strh	r3, [r7, #4]
 8000c02:	460b      	mov	r3, r1
 8000c04:	807b      	strh	r3, [r7, #2]
 8000c06:	4613      	mov	r3, r2
 8000c08:	803b      	strh	r3, [r7, #0]
	ili9341_DrawLine(x0, y0, x1, y1, color);
 8000c0a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000c0e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000c16:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000c1a:	8c3b      	ldrh	r3, [r7, #32]
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	4623      	mov	r3, r4
 8000c20:	f7ff ff82 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x1, y1, x2, y2, color);
 8000c24:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8000c28:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000c2c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8000c30:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8000c34:	8c3b      	ldrh	r3, [r7, #32]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4623      	mov	r3, r4
 8000c3a:	f7ff ff75 	bl	8000b28 <ili9341_DrawLine>
	ili9341_DrawLine(x2, y2, x0, y0, color);
 8000c3e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8000c42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c46:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8000c4a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8000c4e:	8c3b      	ldrh	r3, [r7, #32]
 8000c50:	9300      	str	r3, [sp, #0]
 8000c52:	4623      	mov	r3, r4
 8000c54:	f7ff ff68 	bl	8000b28 <ili9341_DrawLine>
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd90      	pop	{r4, r7, pc}

08000c60 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fd7d 	bl	8001768 <HAL_Delay>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <LCD_IO_Init>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RST);
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <LCD_IO_Init+0x48>)
 8000c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c80:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <LCD_IO_Init+0x48>)
 8000c82:	f043 0308 	orr.w	r3, r3, #8
 8000c86:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <LCD_IO_Init+0x4c>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000c90:	4a0c      	ldr	r2, [pc, #48]	; (8000cc4 <LCD_IO_Init+0x4c>)
 8000c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c96:	6013      	str	r3, [r2, #0]
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
 8000c98:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <LCD_IO_Init+0x50>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ffde 	bl	8000c60 <LCD_Delay>
  LCD_RST_ON;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LCD_IO_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff ffd8 	bl	8000c60 <LCD_Delay>
  LCD_RST_OFF;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <LCD_IO_Init+0x50>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f7ff ffd2 	bl	8000c60 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	4241828c 	.word	0x4241828c

08000ccc <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
 8000cd6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	7013      	strb	r3, [r2, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
	...

08000cec <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <LCD_IO_WriteData8+0x1c>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	7013      	strb	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	600ffffe 	.word	0x600ffffe

08000d0c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8000d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d1a:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8000d1c:	89fb      	ldrh	r3, [r7, #14]
 8000d1e:	ba5b      	rev16	r3, r3
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <LCD_IO_WriteData16+0x2c>)
 8000d26:	b292      	uxth	r2, r2
 8000d28:	801a      	strh	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	600ffffe 	.word	0x600ffffe

08000d3c <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	603a      	str	r2, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	80bb      	strh	r3, [r7, #4]
  uint16_t d = RD(Data);
 8000d4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d50:	81bb      	strh	r3, [r7, #12]
 8000d52:	89bb      	ldrh	r3, [r7, #12]
 8000d54:	ba5b      	rev16	r3, r3
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	81fb      	strh	r3, [r7, #14]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000d5c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000d64:	e002      	b.n	8000d6c <LCD_IO_WriteCmd8DataFill16+0x30>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8000d68:	89fb      	ldrh	r3, [r7, #14]
 8000d6a:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	1e5a      	subs	r2, r3, #1
 8000d70:	603a      	str	r2, [r7, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f7      	bne.n	8000d66 <LCD_IO_WriteCmd8DataFill16+0x2a>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	600ffffe 	.word	0x600ffffe

08000d88 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000d96:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000d9a:	7bfb      	ldrb	r3, [r7, #15]
 8000d9c:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000d9e:	e006      	b.n	8000dae <LCD_IO_WriteCmd8MultipleData8+0x26>
  {
    *(volatile uint8_t *)LCD_ADDR_DATA =*pData;
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	7013      	strb	r3, [r2, #0]
    pData++;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	3301      	adds	r3, #1
 8000dac:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	1e5a      	subs	r2, r3, #1
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f3      	bne.n	8000da0 <LCD_IO_WriteCmd8MultipleData8+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 0);
  #endif
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	600ffffe 	.word	0x600ffffe

08000dcc <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
 8000dd8:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000dda:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 0
  while(Size--)
 8000de2:	e00d      	b.n	8000e00 <LCD_IO_WriteCmd8MultipleData16+0x34>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = RD(*pData);
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	82fb      	strh	r3, [r7, #22]
 8000dec:	8afb      	ldrh	r3, [r7, #22]
 8000dee:	ba5b      	rev16	r3, r3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <LCD_IO_WriteCmd8MultipleData16+0x4c>)
 8000df6:	b292      	uxth	r2, r2
 8000df8:	801a      	strh	r2, [r3, #0]
    pData++;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3302      	adds	r3, #2
 8000dfe:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	607a      	str	r2, [r7, #4]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1ec      	bne.n	8000de4 <LCD_IO_WriteCmd8MultipleData16+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 1);
  #endif
}
 8000e0a:	bf00      	nop
 8000e0c:	bf00      	nop
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	600ffffe 	.word	0x600ffffe

08000e1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e22:	f000 fc2f 	bl	8001684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e26:	f000 f845 	bl	8000eb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2a:	f000 f939 	bl	80010a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e2e:	f000 f8ab 	bl	8000f88 <MX_ADC1_Init>
  MX_FSMC_Init();
 8000e32:	f000 f9b1 	bl	8001198 <MX_FSMC_Init>
  MX_USB_HOST_Init();
 8000e36:	f007 f9cd 	bl	80081d4 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000e3a:	f000 f907 	bl	800104c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ili9341_Init();
 8000e3e:	f7ff fb99 	bl	8000574 <ili9341_Init>
  ili9341_DrawRGBImage(0, 0, 320, 240, paint_resize);
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <main+0x90>)
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	23f0      	movs	r3, #240	; 0xf0
 8000e48:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fdaa 	bl	80009a8 <ili9341_DrawRGBImage>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2101      	movs	r1, #1
 8000e58:	4815      	ldr	r0, [pc, #84]	; (8000eb0 <main+0x94>)
 8000e5a:	f001 f9b9 	bl	80021d0 <HAL_GPIO_WritePin>
  ili9341_DrawTriangle(160, 120, 160, 137, 172, 132, COLOR_BLACK);
 8000e5e:	2300      	movs	r3, #0
 8000e60:	9302      	str	r3, [sp, #8]
 8000e62:	2384      	movs	r3, #132	; 0x84
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	23ac      	movs	r3, #172	; 0xac
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2389      	movs	r3, #137	; 0x89
 8000e6c:	22a0      	movs	r2, #160	; 0xa0
 8000e6e:	2178      	movs	r1, #120	; 0x78
 8000e70:	20a0      	movs	r0, #160	; 0xa0
 8000e72:	f7ff febb 	bl	8000bec <ili9341_DrawTriangle>
  ili9341_DrawLine(165, 135, 167, 140, COLOR_BLACK);
 8000e76:	2300      	movs	r3, #0
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	238c      	movs	r3, #140	; 0x8c
 8000e7c:	22a7      	movs	r2, #167	; 0xa7
 8000e7e:	2187      	movs	r1, #135	; 0x87
 8000e80:	20a5      	movs	r0, #165	; 0xa5
 8000e82:	f7ff fe51 	bl	8000b28 <ili9341_DrawLine>
  ili9341_DrawLine(167, 140, 170, 138, COLOR_BLACK);
 8000e86:	2300      	movs	r3, #0
 8000e88:	9300      	str	r3, [sp, #0]
 8000e8a:	238a      	movs	r3, #138	; 0x8a
 8000e8c:	22aa      	movs	r2, #170	; 0xaa
 8000e8e:	218c      	movs	r1, #140	; 0x8c
 8000e90:	20a7      	movs	r0, #167	; 0xa7
 8000e92:	f7ff fe49 	bl	8000b28 <ili9341_DrawLine>
  ili9341_DrawLine(170, 138, 168, 133, COLOR_BLACK);
 8000e96:	2300      	movs	r3, #0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2385      	movs	r3, #133	; 0x85
 8000e9c:	22a8      	movs	r2, #168	; 0xa8
 8000e9e:	218a      	movs	r1, #138	; 0x8a
 8000ea0:	20aa      	movs	r0, #170	; 0xaa
 8000ea2:	f7ff fe41 	bl	8000b28 <ili9341_DrawLine>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ea6:	f007 f9bb 	bl	8008220 <MX_USB_HOST_Process>
 8000eaa:	e7fc      	b.n	8000ea6 <main+0x8a>
 8000eac:	08009198 	.word	0x08009198
 8000eb0:	40020800 	.word	0x40020800

08000eb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b094      	sub	sp, #80	; 0x50
 8000eb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eba:	f107 0320 	add.w	r3, r7, #32
 8000ebe:	2230      	movs	r2, #48	; 0x30
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f007 fc94 	bl	80087f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	4a27      	ldr	r2, [pc, #156]	; (8000f80 <SystemClock_Config+0xcc>)
 8000ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee8:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <SystemClock_Config+0xcc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <SystemClock_Config+0xd0>)
 8000efe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <SystemClock_Config+0xd0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f0c:	607b      	str	r3, [r7, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f10:	2301      	movs	r3, #1
 8000f12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f28:	23a8      	movs	r3, #168	; 0xa8
 8000f2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f30:	2307      	movs	r3, #7
 8000f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f34:	f107 0320 	add.w	r3, r7, #32
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 fd6d 	bl	8003a18 <HAL_RCC_OscConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f44:	f000 f9cc 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f48:	230f      	movs	r3, #15
 8000f4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2105      	movs	r1, #5
 8000f66:	4618      	mov	r0, r3
 8000f68:	f002 ffce 	bl	8003f08 <HAL_RCC_ClockConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f72:	f000 f9b5 	bl	80012e0 <Error_Handler>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3750      	adds	r7, #80	; 0x50
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8e:	463b      	mov	r3, r7
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <MX_ADC1_Init+0xbc>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fa2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000faa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fb0:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <MX_ADC1_Init+0xc0>)
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fea:	4815      	ldr	r0, [pc, #84]	; (8001040 <MX_ADC1_Init+0xb8>)
 8000fec:	f000 fbe0 	bl	80017b0 <HAL_ADC_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000ff6:	f000 f973 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ffe:	2301      	movs	r3, #1
 8001000:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001002:	2307      	movs	r3, #7
 8001004:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001006:	463b      	mov	r3, r7
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_ADC1_Init+0xb8>)
 800100c:	f000 fc14 	bl	8001838 <HAL_ADC_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001016:	f000 f963 	bl	80012e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800101a:	230b      	movs	r3, #11
 800101c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800101e:	2302      	movs	r3, #2
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_ADC1_Init+0xb8>)
 8001028:	f000 fc06 	bl	8001838 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001032:	f000 f955 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000b4 	.word	0x200000b4
 8001044:	40012000 	.word	0x40012000
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001052:	4a12      	ldr	r2, [pc, #72]	; (800109c <MX_USART2_UART_Init+0x50>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USART2_UART_Init+0x4c>)
 8001084:	f003 f9a8 	bl	80043d8 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800108e:	f000 f927 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000fc 	.word	0x200000fc
 800109c:	40004400 	.word	0x40004400

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	; 0x28
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
 80010ba:	4b34      	ldr	r3, [pc, #208]	; (800118c <MX_GPIO_Init+0xec>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a33      	ldr	r2, [pc, #204]	; (800118c <MX_GPIO_Init+0xec>)
 80010c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_GPIO_Init+0xec>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ce:	613b      	str	r3, [r7, #16]
 80010d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_GPIO_Init+0xec>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a2c      	ldr	r2, [pc, #176]	; (800118c <MX_GPIO_Init+0xec>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_GPIO_Init+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_GPIO_Init+0xec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a25      	ldr	r2, [pc, #148]	; (800118c <MX_GPIO_Init+0xec>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b23      	ldr	r3, [pc, #140]	; (800118c <MX_GPIO_Init+0xec>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_GPIO_Init+0xec>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <MX_GPIO_Init+0xec>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_GPIO_Init+0xec>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <MX_GPIO_Init+0xec>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a17      	ldr	r2, [pc, #92]	; (800118c <MX_GPIO_Init+0xec>)
 8001130:	f043 0308 	orr.w	r3, r3, #8
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <MX_GPIO_Init+0xec>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	603b      	str	r3, [r7, #0]
 8001140:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2101      	movs	r1, #1
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <MX_GPIO_Init+0xf0>)
 8001148:	f001 f842 	bl	80021d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001150:	2301      	movs	r3, #1
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <MX_GPIO_Init+0xf0>)
 8001164:	f000 fe98 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8001168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_GPIO_Init+0xf4>)
 800117e:	f000 fe8b 	bl	8001e98 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800
 8001190:	40020800 	.word	0x40020800
 8001194:	40021000 	.word	0x40021000

08001198 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
 80011ac:	615a      	str	r2, [r3, #20]
 80011ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80011b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011ba:	4a26      	ldr	r2, [pc, #152]	; (8001254 <MX_FSMC_Init+0xbc>)
 80011bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80011e8:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_FSMC_Init+0xb8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_FSMC_Init+0xb8>)
 8001204:	2200      	movs	r2, #0
 8001206:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001208:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_FSMC_Init+0xb8>)
 800120a:	2200      	movs	r2, #0
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800120e:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_FSMC_Init+0xb8>)
 8001210:	2200      	movs	r2, #0
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001214:	2306      	movs	r3, #6
 8001216:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001218:	230f      	movs	r3, #15
 800121a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 800121c:	2306      	movs	r3, #6
 800121e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001220:	230f      	movs	r3, #15
 8001222:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001224:	2310      	movs	r3, #16
 8001226:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001228:	2311      	movs	r3, #17
 800122a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2200      	movs	r2, #0
 8001234:	4619      	mov	r1, r3
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_FSMC_Init+0xb8>)
 8001238:	f003 f886 	bl	8004348 <HAL_SRAM_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001242:	f000 f84d 	bl	80012e0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000140 	.word	0x20000140
 8001254:	a0000104 	.word	0xa0000104

08001258 <USBH_HID_EventCallback>:

/* USER CODE BEGIN 4 */
void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af04      	add	r7, sp, #16
 800125e:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f005 f8fd 	bl	8006460 <USBH_HID_GetDeviceType>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d12f      	bne.n	80012cc <USBH_HID_EventCallback+0x74>
	{
		HID_MOUSE_Info_TypeDef *Mouse_Info;
		Mouse_Info = USBH_HID_GetMouseInfo(phost);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f005 fa79 	bl	8006764 <USBH_HID_GetMouseInfo>
 8001272:	60f8      	str	r0, [r7, #12]
		int X_Val = Mouse_Info->x;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	617b      	str	r3, [r7, #20]
		int Y_Val = Mouse_Info->y;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	613b      	str	r3, [r7, #16]
		if(X_Val > 127) X_Val -= 255;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	2b7f      	cmp	r3, #127	; 0x7f
 8001284:	dd02      	ble.n	800128c <USBH_HID_EventCallback+0x34>
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3bff      	subs	r3, #255	; 0xff
 800128a:	617b      	str	r3, [r7, #20]
		if(Y_Val > 127) Y_Val -= 255;
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b7f      	cmp	r3, #127	; 0x7f
 8001290:	dd02      	ble.n	8001298 <USBH_HID_EventCallback+0x40>
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	3bff      	subs	r3, #255	; 0xff
 8001296:	613b      	str	r3, [r7, #16]
		int len = sprintf(Uart_buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\r\n", X_Val, Y_Val, Mouse_Info->buttons[0], Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	461a      	mov	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	78db      	ldrb	r3, [r3, #3]
 80012a2:	4619      	mov	r1, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	9101      	str	r1, [sp, #4]
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <USBH_HID_EventCallback+0x7c>)
 80012b4:	4808      	ldr	r0, [pc, #32]	; (80012d8 <USBH_HID_EventCallback+0x80>)
 80012b6:	f007 fb93 	bl	80089e0 <siprintf>
 80012ba:	60b8      	str	r0, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *)Uart_buf, len, 1000);
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c4:	4904      	ldr	r1, [pc, #16]	; (80012d8 <USBH_HID_EventCallback+0x80>)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <USBH_HID_EventCallback+0x84>)
 80012c8:	f003 f8d3 	bl	8004472 <HAL_UART_Transmit>
	}

}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08009160 	.word	0x08009160
 80012d8:	20000190 	.word	0x20000190
 80012dc:	200000fc 	.word	0x200000fc

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <Error_Handler+0x8>
	...

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_MspInit+0x4c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <HAL_MspInit+0x4c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_MspInit+0x4c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_MspInit+0x4c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	603b      	str	r3, [r7, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a24      	ldr	r2, [pc, #144]	; (80013ec <HAL_ADC_MspInit+0xb0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d141      	bne.n	80013e2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 8001368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_ADC_MspInit+0xb4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b2:	2302      	movs	r3, #2
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b6:	2303      	movs	r3, #3
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480b      	ldr	r0, [pc, #44]	; (80013f4 <HAL_ADC_MspInit+0xb8>)
 80013c6:	f000 fd67 	bl	8001e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013ca:	2302      	movs	r3, #2
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4806      	ldr	r0, [pc, #24]	; (80013f8 <HAL_ADC_MspInit+0xbc>)
 80013de:	f000 fd5b 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40012000 	.word	0x40012000
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020800 	.word	0x40020800
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	; 0x28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <HAL_UART_MspInit+0x84>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d12b      	bne.n	8001476 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_UART_MspInit+0x88>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_UART_MspInit+0x88>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001456:	230c      	movs	r3, #12
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001466:	2307      	movs	r3, #7
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <HAL_UART_MspInit+0x8c>)
 8001472:	f000 fd11 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40004400 	.word	0x40004400
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_FSMC_MspInit+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d131      	bne.n	800150c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80014a8:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <HAL_FSMC_MspInit+0x88>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b19      	ldr	r3, [pc, #100]	; (8001518 <HAL_FSMC_MspInit+0x8c>)
 80014b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <HAL_FSMC_MspInit+0x8c>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6393      	str	r3, [r2, #56]	; 0x38
 80014be:	4b16      	ldr	r3, [pc, #88]	; (8001518 <HAL_FSMC_MspInit+0x8c>)
 80014c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80014ca:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80014ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014dc:	230c      	movs	r3, #12
 80014de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <HAL_FSMC_MspInit+0x90>)
 80014e6:	f000 fcd7 	bl	8001e98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80014ea:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 80014ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <HAL_FSMC_MspInit+0x94>)
 8001506:	f000 fcc7 	bl	8001e98 <HAL_GPIO_Init>
 800150a:	e000      	b.n	800150e <HAL_FSMC_MspInit+0x82>
    return;
 800150c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200001f4 	.word	0x200001f4
 8001518:	40023800 	.word	0x40023800
 800151c:	40021000 	.word	0x40021000
 8001520:	40020c00 	.word	0x40020c00

08001524 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800152c:	f7ff ffae 	bl	800148c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800153c:	e7fe      	b.n	800153c <NMI_Handler+0x4>

0800153e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <HardFault_Handler+0x4>

08001544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <MemManage_Handler+0x4>

0800154a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800154e:	e7fe      	b.n	800154e <BusFault_Handler+0x4>

08001550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001554:	e7fe      	b.n	8001554 <UsageFault_Handler+0x4>

08001556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001584:	f000 f8d0 	bl	8001728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <OTG_FS_IRQHandler+0x10>)
 8001592:	f001 f8a1 	bl	80026d8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000614 	.word	0x20000614

080015a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a8:	4a14      	ldr	r2, [pc, #80]	; (80015fc <_sbrk+0x5c>)
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <_sbrk+0x60>)
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b4:	4b13      	ldr	r3, [pc, #76]	; (8001604 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d102      	bne.n	80015c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <_sbrk+0x64>)
 80015be:	4a12      	ldr	r2, [pc, #72]	; (8001608 <_sbrk+0x68>)
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <_sbrk+0x64>)
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d207      	bcs.n	80015e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d0:	f007 f8d4 	bl	800877c <__errno>
 80015d4:	4603      	mov	r3, r0
 80015d6:	220c      	movs	r2, #12
 80015d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	e009      	b.n	80015f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_sbrk+0x64>)
 80015f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f2:	68fb      	ldr	r3, [r7, #12]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20020000 	.word	0x20020000
 8001600:	00000400 	.word	0x00000400
 8001604:	200001f8 	.word	0x200001f8
 8001608:	20000928 	.word	0x20000928

0800160c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <SystemInit+0x20>)
 8001612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <SystemInit+0x20>)
 8001618:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800161c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001630:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001668 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001636:	490e      	ldr	r1, [pc, #56]	; (8001670 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001638:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800164c:	4c0b      	ldr	r4, [pc, #44]	; (800167c <LoopFillZerobss+0x26>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800165a:	f7ff ffd7 	bl	800160c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165e:	f007 f893 	bl	8008788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001662:	f7ff fbdb 	bl	8000e1c <main>
  bx  lr    
 8001666:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001668:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800166c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001670:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001674:	0802ea94 	.word	0x0802ea94
  ldr r2, =_sbss
 8001678:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800167c:	20000928 	.word	0x20000928

08001680 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001680:	e7fe      	b.n	8001680 <ADC_IRQHandler>
	...

08001684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0d      	ldr	r2, [pc, #52]	; (80016c4 <HAL_Init+0x40>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <HAL_Init+0x40>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a07      	ldr	r2, [pc, #28]	; (80016c4 <HAL_Init+0x40>)
 80016a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 fbb1 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f808 	bl	80016c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b8:	f7ff fe18 	bl	80012ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023c00 	.word	0x40023c00

080016c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x58>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4619      	mov	r1, r3
 80016da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016de:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fbc9 	bl	8001e7e <HAL_SYSTICK_Config>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00e      	b.n	8001714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d80a      	bhi.n	8001712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 fb91 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001708:	4a06      	ldr	r2, [pc, #24]	; (8001724 <HAL_InitTick+0x5c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e000      	b.n	8001714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	20000000 	.word	0x20000000
 8001720:	20000008 	.word	0x20000008
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x20>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x24>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a04      	ldr	r2, [pc, #16]	; (800174c <HAL_IncTick+0x24>)
 800173a:	6013      	str	r3, [r2, #0]
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000008 	.word	0x20000008
 800174c:	200001fc 	.word	0x200001fc

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b03      	ldr	r3, [pc, #12]	; (8001764 <HAL_GetTick+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	200001fc 	.word	0x200001fc

08001768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff ffee 	bl	8001750 <HAL_GetTick>
 8001774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001780:	d005      	beq.n	800178e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <HAL_Delay+0x44>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800178e:	bf00      	nop
 8001790:	f7ff ffde 	bl	8001750 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	429a      	cmp	r2, r3
 800179e:	d8f7      	bhi.n	8001790 <HAL_Delay+0x28>
  {
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e033      	b.n	800182e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f7ff fdb4 	bl	800133c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d118      	bne.n	8001820 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f6:	f023 0302 	bic.w	r3, r3, #2
 80017fa:	f043 0202 	orr.w	r2, r3, #2
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f93a 	bl	8001a7c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	f043 0201 	orr.w	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
 800181e:	e001      	b.n	8001824 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800182c:	7bfb      	ldrb	r3, [r7, #15]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ADC_ConfigChannel+0x1c>
 8001850:	2302      	movs	r3, #2
 8001852:	e105      	b.n	8001a60 <HAL_ADC_ConfigChannel+0x228>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b09      	cmp	r3, #9
 8001862:	d925      	bls.n	80018b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68d9      	ldr	r1, [r3, #12]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	3b1e      	subs	r3, #30
 800187a:	2207      	movs	r2, #7
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43da      	mvns	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	400a      	ands	r2, r1
 8001888:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68d9      	ldr	r1, [r3, #12]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b29b      	uxth	r3, r3
 800189a:	4618      	mov	r0, r3
 800189c:	4603      	mov	r3, r0
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4403      	add	r3, r0
 80018a2:	3b1e      	subs	r3, #30
 80018a4:	409a      	lsls	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	430a      	orrs	r2, r1
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	e022      	b.n	80018f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6919      	ldr	r1, [r3, #16]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4613      	mov	r3, r2
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	4413      	add	r3, r2
 80018c4:	2207      	movs	r2, #7
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6919      	ldr	r1, [r3, #16]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4403      	add	r3, r0
 80018ec:	409a      	lsls	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b06      	cmp	r3, #6
 80018fc:	d824      	bhi.n	8001948 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	3b05      	subs	r3, #5
 8001910:	221f      	movs	r2, #31
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	400a      	ands	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	b29b      	uxth	r3, r3
 800192c:	4618      	mov	r0, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	3b05      	subs	r3, #5
 800193a:	fa00 f203 	lsl.w	r2, r0, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	635a      	str	r2, [r3, #52]	; 0x34
 8001946:	e04c      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b0c      	cmp	r3, #12
 800194e:	d824      	bhi.n	800199a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b23      	subs	r3, #35	; 0x23
 8001962:	221f      	movs	r2, #31
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43da      	mvns	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	400a      	ands	r2, r1
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4618      	mov	r0, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4413      	add	r3, r2
 800198a:	3b23      	subs	r3, #35	; 0x23
 800198c:	fa00 f203 	lsl.w	r2, r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	631a      	str	r2, [r3, #48]	; 0x30
 8001998:	e023      	b.n	80019e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	3b41      	subs	r3, #65	; 0x41
 80019ac:	221f      	movs	r2, #31
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	400a      	ands	r2, r1
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	3b41      	subs	r3, #65	; 0x41
 80019d6:	fa00 f203 	lsl.w	r2, r0, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_ADC_ConfigChannel+0x234>)
 80019e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a21      	ldr	r2, [pc, #132]	; (8001a70 <HAL_ADC_ConfigChannel+0x238>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d109      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1cc>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b12      	cmp	r3, #18
 80019f6:	d105      	bne.n	8001a04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a19      	ldr	r2, [pc, #100]	; (8001a70 <HAL_ADC_ConfigChannel+0x238>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d123      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x21e>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d003      	beq.n	8001a1e <HAL_ADC_ConfigChannel+0x1e6>
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b11      	cmp	r3, #17
 8001a1c:	d11b      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2b10      	cmp	r3, #16
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a32:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <HAL_ADC_ConfigChannel+0x23c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_ADC_ConfigChannel+0x240>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	0c9a      	lsrs	r2, r3, #18
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a48:	e002      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f9      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40012300 	.word	0x40012300
 8001a70:	40012000 	.word	0x40012000
 8001a74:	20000000 	.word	0x20000000
 8001a78:	431bde83 	.word	0x431bde83

08001a7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a84:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <ADC_Init+0x1f0>)
 8001a86:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	021a      	lsls	r2, r3, #8
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ad4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6859      	ldr	r1, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <ADC_Init+0x1f4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d022      	beq.n	8001b5a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6899      	ldr	r1, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6899      	ldr	r1, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	e00f      	b.n	8001b7a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0202 	bic.w	r2, r2, #2
 8001b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	6899      	ldr	r1, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7e1b      	ldrb	r3, [r3, #24]
 8001b94:	005a      	lsls	r2, r3, #1
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01b      	beq.n	8001be0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	035a      	lsls	r2, r3, #13
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	e007      	b.n	8001bf0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	051a      	lsls	r2, r3, #20
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c32:	025a      	lsls	r2, r3, #9
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	029a      	lsls	r2, r3, #10
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	609a      	str	r2, [r3, #8]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	0f000001 	.word	0x0f000001

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	e16b      	b.n	800218c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	f040 815a 	bne.w	8002186 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d005      	beq.n	8001eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d130      	bne.n	8001f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f20:	2201      	movs	r2, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 0201 	and.w	r2, r3, #1
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	d017      	beq.n	8001f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	2203      	movs	r2, #3
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d123      	bne.n	8001fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	08da      	lsrs	r2, r3, #3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3208      	adds	r2, #8
 8001f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	220f      	movs	r2, #15
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	08da      	lsrs	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3208      	adds	r2, #8
 8001fd6:	69b9      	ldr	r1, [r7, #24]
 8001fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0203 	and.w	r2, r3, #3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80b4 	beq.w	8002186 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <HAL_GPIO_Init+0x30c>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002026:	4a5f      	ldr	r2, [pc, #380]	; (80021a4 <HAL_GPIO_Init+0x30c>)
 8002028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800202c:	6453      	str	r3, [r2, #68]	; 0x44
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <HAL_GPIO_Init+0x30c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203a:	4a5b      	ldr	r2, [pc, #364]	; (80021a8 <HAL_GPIO_Init+0x310>)
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a52      	ldr	r2, [pc, #328]	; (80021ac <HAL_GPIO_Init+0x314>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d02b      	beq.n	80020be <HAL_GPIO_Init+0x226>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a51      	ldr	r2, [pc, #324]	; (80021b0 <HAL_GPIO_Init+0x318>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d025      	beq.n	80020ba <HAL_GPIO_Init+0x222>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a50      	ldr	r2, [pc, #320]	; (80021b4 <HAL_GPIO_Init+0x31c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01f      	beq.n	80020b6 <HAL_GPIO_Init+0x21e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a4f      	ldr	r2, [pc, #316]	; (80021b8 <HAL_GPIO_Init+0x320>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d019      	beq.n	80020b2 <HAL_GPIO_Init+0x21a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4e      	ldr	r2, [pc, #312]	; (80021bc <HAL_GPIO_Init+0x324>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <HAL_GPIO_Init+0x216>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4d      	ldr	r2, [pc, #308]	; (80021c0 <HAL_GPIO_Init+0x328>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00d      	beq.n	80020aa <HAL_GPIO_Init+0x212>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4c      	ldr	r2, [pc, #304]	; (80021c4 <HAL_GPIO_Init+0x32c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <HAL_GPIO_Init+0x20e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4b      	ldr	r2, [pc, #300]	; (80021c8 <HAL_GPIO_Init+0x330>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_GPIO_Init+0x20a>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00e      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020a2:	2308      	movs	r3, #8
 80020a4:	e00c      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e00a      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e008      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e004      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e002      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_GPIO_Init+0x228>
 80020be:	2300      	movs	r3, #0
 80020c0:	69fa      	ldr	r2, [r7, #28]
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	4093      	lsls	r3, r2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d0:	4935      	ldr	r1, [pc, #212]	; (80021a8 <HAL_GPIO_Init+0x310>)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_GPIO_Init+0x334>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <HAL_GPIO_Init+0x334>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_GPIO_Init+0x334>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a27      	ldr	r2, [pc, #156]	; (80021cc <HAL_GPIO_Init+0x334>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_GPIO_Init+0x334>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <HAL_GPIO_Init+0x334>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <HAL_GPIO_Init+0x334>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002180:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_GPIO_Init+0x334>)
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3301      	adds	r3, #1
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2b0f      	cmp	r3, #15
 8002190:	f67f ae90 	bls.w	8001eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40020400 	.word	0x40020400
 80021b4:	40020800 	.word	0x40020800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40021400 	.word	0x40021400
 80021c4:	40021800 	.word	0x40021800
 80021c8:	40021c00 	.word	0x40021c00
 80021cc:	40013c00 	.word	0x40013c00

080021d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	807b      	strh	r3, [r7, #2]
 80021dc:	4613      	mov	r3, r2
 80021de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e0:	787b      	ldrb	r3, [r7, #1]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021e6:	887a      	ldrh	r2, [r7, #2]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021ec:	e003      	b.n	80021f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ee:	887b      	ldrh	r3, [r7, #2]
 80021f0:	041a      	lsls	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002202:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002204:	b08f      	sub	sp, #60	; 0x3c
 8002206:	af0a      	add	r7, sp, #40	; 0x28
 8002208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e054      	b.n	80022be <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f006 f82e 	bl	8008290 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2203      	movs	r2, #3
 8002238:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f002 fdcc 	bl	8004df0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	687e      	ldr	r6, [r7, #4]
 8002260:	466d      	mov	r5, sp
 8002262:	f106 0410 	add.w	r4, r6, #16
 8002266:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002268:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002272:	e885 0003 	stmia.w	r5, {r0, r1}
 8002276:	1d33      	adds	r3, r6, #4
 8002278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	f002 fd46 	bl	8004d0c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fdc3 	bl	8004e12 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	687e      	ldr	r6, [r7, #4]
 8002294:	466d      	mov	r5, sp
 8002296:	f106 0410 	add.w	r4, r6, #16
 800229a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80022aa:	1d33      	adds	r3, r6, #4
 80022ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ae:	6838      	ldr	r0, [r7, #0]
 80022b0:	f002 ff4c 	bl	800514c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3714      	adds	r7, #20
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022c6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022c6:	b590      	push	{r4, r7, lr}
 80022c8:	b089      	sub	sp, #36	; 0x24
 80022ca:	af04      	add	r7, sp, #16
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	4608      	mov	r0, r1
 80022d0:	4611      	mov	r1, r2
 80022d2:	461a      	mov	r2, r3
 80022d4:	4603      	mov	r3, r0
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	460b      	mov	r3, r1
 80022da:	70bb      	strb	r3, [r7, #2]
 80022dc:	4613      	mov	r3, r2
 80022de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_HCD_HC_Init+0x28>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e076      	b.n	80023dc <HAL_HCD_HC_Init+0x116>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80022f6:	78fb      	ldrb	r3, [r7, #3]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	333d      	adds	r3, #61	; 0x3d
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	212c      	movs	r1, #44	; 0x2c
 800230e:	fb01 f303 	mul.w	r3, r1, r3
 8002312:	4413      	add	r3, r2
 8002314:	3338      	adds	r3, #56	; 0x38
 8002316:	787a      	ldrb	r2, [r7, #1]
 8002318:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800231a:	78fb      	ldrb	r3, [r7, #3]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3340      	adds	r3, #64	; 0x40
 8002328:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800232a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	212c      	movs	r1, #44	; 0x2c
 8002332:	fb01 f303 	mul.w	r3, r1, r3
 8002336:	4413      	add	r3, r2
 8002338:	3339      	adds	r3, #57	; 0x39
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800233e:	78fb      	ldrb	r3, [r7, #3]
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	212c      	movs	r1, #44	; 0x2c
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	4413      	add	r3, r2
 800234a:	333f      	adds	r3, #63	; 0x3f
 800234c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002350:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	78ba      	ldrb	r2, [r7, #2]
 8002356:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235a:	b2d0      	uxtb	r0, r2
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	333a      	adds	r3, #58	; 0x3a
 8002368:	4602      	mov	r2, r0
 800236a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800236c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da09      	bge.n	8002388 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	333b      	adds	r3, #59	; 0x3b
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e008      	b.n	800239a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002388:	78fb      	ldrb	r3, [r7, #3]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	333b      	adds	r3, #59	; 0x3b
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800239a:	78fb      	ldrb	r3, [r7, #3]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	333c      	adds	r3, #60	; 0x3c
 80023a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023ac:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	787c      	ldrb	r4, [r7, #1]
 80023b4:	78ba      	ldrb	r2, [r7, #2]
 80023b6:	78f9      	ldrb	r1, [r7, #3]
 80023b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ba:	9302      	str	r3, [sp, #8]
 80023bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4623      	mov	r3, r4
 80023ca:	f003 f845 	bl	8005458 <USB_HC_Init>
 80023ce:	4603      	mov	r3, r0
 80023d0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023da:	7bfb      	ldrb	r3, [r7, #15]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}

080023e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d101      	bne.n	8002402 <HAL_HCD_HC_Halt+0x1e>
 80023fe:	2302      	movs	r3, #2
 8002400:	e00f      	b.n	8002422 <HAL_HCD_HC_Halt+0x3e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f003 fa95 	bl	8005942 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002420:	7bfb      	ldrb	r3, [r7, #15]
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	70fb      	strb	r3, [r7, #3]
 800243e:	460b      	mov	r3, r1
 8002440:	70bb      	strb	r3, [r7, #2]
 8002442:	4613      	mov	r3, r2
 8002444:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	333b      	adds	r3, #59	; 0x3b
 8002454:	78ba      	ldrb	r2, [r7, #2]
 8002456:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	333f      	adds	r3, #63	; 0x3f
 8002466:	787a      	ldrb	r2, [r7, #1]
 8002468:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800246a:	7c3b      	ldrb	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d112      	bne.n	8002496 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002470:	78fb      	ldrb	r3, [r7, #3]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3342      	adds	r3, #66	; 0x42
 800247e:	2203      	movs	r2, #3
 8002480:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	212c      	movs	r1, #44	; 0x2c
 8002488:	fb01 f303 	mul.w	r3, r1, r3
 800248c:	4413      	add	r3, r2
 800248e:	333d      	adds	r3, #61	; 0x3d
 8002490:	7f3a      	ldrb	r2, [r7, #28]
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e008      	b.n	80024a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002496:	78fb      	ldrb	r3, [r7, #3]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	212c      	movs	r1, #44	; 0x2c
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	4413      	add	r3, r2
 80024a2:	3342      	adds	r3, #66	; 0x42
 80024a4:	2202      	movs	r2, #2
 80024a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024a8:	787b      	ldrb	r3, [r7, #1]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	f200 80c6 	bhi.w	800263c <HAL_HCD_HC_SubmitRequest+0x210>
 80024b0:	a201      	add	r2, pc, #4	; (adr r2, 80024b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b6:	bf00      	nop
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	08002629 	.word	0x08002629
 80024c0:	0800252d 	.word	0x0800252d
 80024c4:	080025ab 	.word	0x080025ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024c8:	7c3b      	ldrb	r3, [r7, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	f040 80b8 	bne.w	8002640 <HAL_HCD_HC_SubmitRequest+0x214>
 80024d0:	78bb      	ldrb	r3, [r7, #2]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 80b4 	bne.w	8002640 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80024d8:	8b3b      	ldrh	r3, [r7, #24]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d108      	bne.n	80024f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3355      	adds	r3, #85	; 0x55
 80024ec:	2201      	movs	r2, #1
 80024ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	3355      	adds	r3, #85	; 0x55
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	212c      	movs	r1, #44	; 0x2c
 800250a:	fb01 f303 	mul.w	r3, r1, r3
 800250e:	4413      	add	r3, r2
 8002510:	3342      	adds	r3, #66	; 0x42
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002516:	e093      	b.n	8002640 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	212c      	movs	r1, #44	; 0x2c
 800251e:	fb01 f303 	mul.w	r3, r1, r3
 8002522:	4413      	add	r3, r2
 8002524:	3342      	adds	r3, #66	; 0x42
 8002526:	2202      	movs	r2, #2
 8002528:	701a      	strb	r2, [r3, #0]
      break;
 800252a:	e089      	b.n	8002640 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800252c:	78bb      	ldrb	r3, [r7, #2]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d11d      	bne.n	800256e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002532:	78fb      	ldrb	r3, [r7, #3]
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3355      	adds	r3, #85	; 0x55
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3342      	adds	r3, #66	; 0x42
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002558:	e073      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3342      	adds	r3, #66	; 0x42
 8002568:	2202      	movs	r2, #2
 800256a:	701a      	strb	r2, [r3, #0]
      break;
 800256c:	e069      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	3354      	adds	r3, #84	; 0x54
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d109      	bne.n	8002596 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002582:	78fb      	ldrb	r3, [r7, #3]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3342      	adds	r3, #66	; 0x42
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
      break;
 8002594:	e055      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	212c      	movs	r1, #44	; 0x2c
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	3342      	adds	r3, #66	; 0x42
 80025a4:	2202      	movs	r2, #2
 80025a6:	701a      	strb	r2, [r3, #0]
      break;
 80025a8:	e04b      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025aa:	78bb      	ldrb	r3, [r7, #2]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d11d      	bne.n	80025ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025b0:	78fb      	ldrb	r3, [r7, #3]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	3355      	adds	r3, #85	; 0x55
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	212c      	movs	r1, #44	; 0x2c
 80025ca:	fb01 f303 	mul.w	r3, r1, r3
 80025ce:	4413      	add	r3, r2
 80025d0:	3342      	adds	r3, #66	; 0x42
 80025d2:	2200      	movs	r2, #0
 80025d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025d6:	e034      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025d8:	78fb      	ldrb	r3, [r7, #3]
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	212c      	movs	r1, #44	; 0x2c
 80025de:	fb01 f303 	mul.w	r3, r1, r3
 80025e2:	4413      	add	r3, r2
 80025e4:	3342      	adds	r3, #66	; 0x42
 80025e6:	2202      	movs	r2, #2
 80025e8:	701a      	strb	r2, [r3, #0]
      break;
 80025ea:	e02a      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	3354      	adds	r3, #84	; 0x54
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3342      	adds	r3, #66	; 0x42
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e016      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3342      	adds	r3, #66	; 0x42
 8002622:	2202      	movs	r2, #2
 8002624:	701a      	strb	r2, [r3, #0]
      break;
 8002626:	e00c      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002628:	78fb      	ldrb	r3, [r7, #3]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	212c      	movs	r1, #44	; 0x2c
 800262e:	fb01 f303 	mul.w	r3, r1, r3
 8002632:	4413      	add	r3, r2
 8002634:	3342      	adds	r3, #66	; 0x42
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
      break;
 800263a:	e002      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002640:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	212c      	movs	r1, #44	; 0x2c
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	4413      	add	r3, r2
 800264e:	3344      	adds	r3, #68	; 0x44
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	8b3a      	ldrh	r2, [r7, #24]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	202c      	movs	r0, #44	; 0x2c
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	440b      	add	r3, r1
 8002662:	334c      	adds	r3, #76	; 0x4c
 8002664:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3360      	adds	r3, #96	; 0x60
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	212c      	movs	r1, #44	; 0x2c
 800267e:	fb01 f303 	mul.w	r3, r1, r3
 8002682:	4413      	add	r3, r2
 8002684:	3350      	adds	r3, #80	; 0x50
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	212c      	movs	r1, #44	; 0x2c
 8002690:	fb01 f303 	mul.w	r3, r1, r3
 8002694:	4413      	add	r3, r2
 8002696:	3339      	adds	r3, #57	; 0x39
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	212c      	movs	r1, #44	; 0x2c
 80026a2:	fb01 f303 	mul.w	r3, r1, r3
 80026a6:	4413      	add	r3, r2
 80026a8:	3361      	adds	r3, #97	; 0x61
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	222c      	movs	r2, #44	; 0x2c
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	18d1      	adds	r1, r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	f002 ffe8 	bl	800569c <USB_HC_StartXfer>
 80026cc:	4603      	mov	r3, r0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop

080026d8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f002 fce9 	bl	80050c6 <USB_GetMode>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	f040 80f6 	bne.w	80028e8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fccd 	bl	80050a0 <USB_ReadInterrupts>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80ec 	beq.w	80028e6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fcc4 	bl	80050a0 <USB_ReadInterrupts>
 8002718:	4603      	mov	r3, r0
 800271a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002722:	d104      	bne.n	800272e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800272c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fcb4 	bl	80050a0 <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002742:	d104      	bne.n	800274e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800274c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fca4 	bl	80050a0 <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800275e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002762:	d104      	bne.n	800276e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800276c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 fc94 	bl	80050a0 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d103      	bne.n	800278a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2202      	movs	r2, #2
 8002788:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fc86 	bl	80050a0 <USB_ReadInterrupts>
 8002794:	4603      	mov	r3, r0
 8002796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800279e:	d11c      	bne.n	80027da <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027a8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027ba:	2110      	movs	r1, #16
 80027bc:	6938      	ldr	r0, [r7, #16]
 80027be:	f002 fb75 	bl	8004eac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027c2:	6938      	ldr	r0, [r7, #16]
 80027c4:	f002 fba6 	bl	8004f14 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	4618      	mov	r0, r3
 80027d0:	f002 fd7c 	bl	80052cc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f005 fdcb 	bl	8008370 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f002 fc5e 	bl	80050a0 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027ee:	d102      	bne.n	80027f6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f001 f89e 	bl	8003932 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fc50 	bl	80050a0 <USB_ReadInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b08      	cmp	r3, #8
 8002808:	d106      	bne.n	8002818 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f005 fd94 	bl	8008338 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2208      	movs	r2, #8
 8002816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f002 fc3f 	bl	80050a0 <USB_ReadInterrupts>
 8002822:	4603      	mov	r3, r0
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b10      	cmp	r3, #16
 800282a:	d101      	bne.n	8002830 <HAL_HCD_IRQHandler+0x158>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_HCD_IRQHandler+0x15a>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d012      	beq.n	800285c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0210 	bic.w	r2, r2, #16
 8002844:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 ffa1 	bl	800378e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0210 	orr.w	r2, r2, #16
 800285a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fc1d 	bl	80050a0 <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002870:	d13a      	bne.n	80028e8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f003 f852 	bl	8005920 <USB_HC_ReadInterrupt>
 800287c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e025      	b.n	80028d0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b00      	cmp	r3, #0
 8002896:	d018      	beq.n	80028ca <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ae:	d106      	bne.n	80028be <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f8ab 	bl	8002a12 <HCD_HC_IN_IRQHandler>
 80028bc:	e005      	b.n	80028ca <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fbf9 	bl	80030bc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	3301      	adds	r3, #1
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d3d4      	bcc.n	8002884 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	615a      	str	r2, [r3, #20]
 80028e4:	e000      	b.n	80028e8 <HAL_HCD_IRQHandler+0x210>
      return;
 80028e6:	bf00      	nop
    }
  }
}
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_HCD_Start+0x16>
 8002900:	2302      	movs	r3, #2
 8002902:	e013      	b.n	800292c <HAL_HCD_Start+0x3e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fd3e 	bl	8005394 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f002 fa56 	bl	8004dce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_HCD_Stop+0x16>
 8002946:	2302      	movs	r3, #2
 8002948:	e00d      	b.n	8002966 <HAL_HCD_Stop+0x32>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f003 f92c 	bl	8005bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fce0 	bl	8005340 <USB_ResetPort>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3360      	adds	r3, #96	; 0x60
 80029a4:	781b      	ldrb	r3, [r3, #0]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	3350      	adds	r3, #80	; 0x50
 80029cc:	681b      	ldr	r3, [r3, #0]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fd24 	bl	8005434 <USB_GetCurrentFrame>
 80029ec:	4603      	mov	r3, r0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f002 fcff 	bl	8005406 <USB_GetHostSpeed>
 8002a08:	4603      	mov	r3, r0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d11a      	bne.n	8002a78 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	461a      	mov	r2, r3
 8002a50:	2304      	movs	r3, #4
 8002a52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	2206      	movs	r2, #6
 8002a64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 ff66 	bl	8005942 <USB_HC_Halt>
 8002a76:	e0af      	b.n	8002bd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a8e:	d11b      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3361      	adds	r3, #97	; 0x61
 8002ab2:	2207      	movs	r2, #7
 8002ab4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	4611      	mov	r1, r2
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 ff3e 	bl	8005942 <USB_HC_Halt>
 8002ac6:	e087      	b.n	8002bd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	015a      	lsls	r2, r3, #5
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	d109      	bne.n	8002af2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	2320      	movs	r3, #32
 8002aee:	6093      	str	r3, [r2, #8]
 8002af0:	e072      	b.n	8002bd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b08      	cmp	r3, #8
 8002b06:	d11a      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	461a      	mov	r2, r3
 8002b16:	2308      	movs	r3, #8
 8002b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3361      	adds	r3, #97	; 0x61
 8002b28:	2205      	movs	r2, #5
 8002b2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f002 ff03 	bl	8005942 <USB_HC_Halt>
 8002b3c:	e04c      	b.n	8002bd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b54:	d11b      	bne.n	8002b8e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b62:	461a      	mov	r2, r3
 8002b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	3361      	adds	r3, #97	; 0x61
 8002b78:	2208      	movs	r2, #8
 8002b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fedb 	bl	8005942 <USB_HC_Halt>
 8002b8c:	e024      	b.n	8002bd8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d119      	bne.n	8002bd8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3361      	adds	r3, #97	; 0x61
 8002bc4:	2206      	movs	r2, #6
 8002bc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 feb5 	bl	8005942 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bee:	d112      	bne.n	8002c16 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fea1 	bl	8005942 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	015a      	lsls	r2, r3, #5
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4413      	add	r3, r2
 8002c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c12:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c14:	e24e      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	f040 80df 	bne.w	8002dec <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d019      	beq.n	8002c6a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	212c      	movs	r1, #44	; 0x2c
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	4413      	add	r3, r2
 8002c42:	3348      	adds	r3, #72	; 0x48
 8002c44:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0159      	lsls	r1, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c58:	1ad2      	subs	r2, r2, r3
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	202c      	movs	r0, #44	; 0x2c
 8002c60:	fb00 f303 	mul.w	r3, r0, r3
 8002c64:	440b      	add	r3, r1
 8002c66:	3350      	adds	r3, #80	; 0x50
 8002c68:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	212c      	movs	r1, #44	; 0x2c
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	4413      	add	r3, r2
 8002c76:	3361      	adds	r3, #97	; 0x61
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	212c      	movs	r1, #44	; 0x2c
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	335c      	adds	r3, #92	; 0x5c
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	333f      	adds	r3, #63	; 0x3f
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d009      	beq.n	8002cc8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	212c      	movs	r1, #44	; 0x2c
 8002cba:	fb01 f303 	mul.w	r3, r1, r3
 8002cbe:	4413      	add	r3, r2
 8002cc0:	333f      	adds	r3, #63	; 0x3f
 8002cc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d111      	bne.n	8002cec <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fe35 	bl	8005942 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	6093      	str	r3, [r2, #8]
 8002cea:	e03a      	b.n	8002d62 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	333f      	adds	r3, #63	; 0x3f
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d009      	beq.n	8002d14 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	333f      	adds	r3, #63	; 0x3f
 8002d0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d126      	bne.n	8002d62 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	0151      	lsls	r1, r2, #5
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	440a      	add	r2, r1
 8002d2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d32:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	b2d9      	uxtb	r1, r3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	202c      	movs	r0, #44	; 0x2c
 8002d50:	fb00 f303 	mul.w	r3, r0, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3360      	adds	r3, #96	; 0x60
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f005 fb15 	bl	800838c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d12b      	bne.n	8002dc2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	3348      	adds	r3, #72	; 0x48
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	202c      	movs	r0, #44	; 0x2c
 8002d80:	fb00 f202 	mul.w	r2, r0, r2
 8002d84:	440a      	add	r2, r1
 8002d86:	3240      	adds	r2, #64	; 0x40
 8002d88:	8812      	ldrh	r2, [r2, #0]
 8002d8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f000 818e 	beq.w	80030b4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3354      	adds	r3, #84	; 0x54
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	f083 0301 	eor.w	r3, r3, #1
 8002dac:	b2d8      	uxtb	r0, r3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3354      	adds	r3, #84	; 0x54
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	701a      	strb	r2, [r3, #0]
}
 8002dc0:	e178      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3354      	adds	r3, #84	; 0x54
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	f083 0301 	eor.w	r3, r3, #1
 8002dd6:	b2d8      	uxtb	r0, r3
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	3354      	adds	r3, #84	; 0x54
 8002de6:	4602      	mov	r2, r0
 8002de8:	701a      	strb	r2, [r3, #0]
}
 8002dea:	e163      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	f040 80f6 	bne.w	8002ff0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3361      	adds	r3, #97	; 0x61
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d109      	bne.n	8002e2c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	212c      	movs	r1, #44	; 0x2c
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	3360      	adds	r3, #96	; 0x60
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e0c9      	b.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	212c      	movs	r1, #44	; 0x2c
 8002e32:	fb01 f303 	mul.w	r3, r1, r3
 8002e36:	4413      	add	r3, r2
 8002e38:	3361      	adds	r3, #97	; 0x61
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d109      	bne.n	8002e54 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3360      	adds	r3, #96	; 0x60
 8002e4e:	2205      	movs	r2, #5
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e0b5      	b.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d009      	beq.n	8002e7c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3361      	adds	r3, #97	; 0x61
 8002e76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d150      	bne.n	8002f1e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	335c      	adds	r3, #92	; 0x5c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	202c      	movs	r0, #44	; 0x2c
 8002e94:	fb00 f303 	mul.w	r3, r0, r3
 8002e98:	440b      	add	r3, r1
 8002e9a:	335c      	adds	r3, #92	; 0x5c
 8002e9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	212c      	movs	r1, #44	; 0x2c
 8002ea4:	fb01 f303 	mul.w	r3, r1, r3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	335c      	adds	r3, #92	; 0x5c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d912      	bls.n	8002ed8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	212c      	movs	r1, #44	; 0x2c
 8002eca:	fb01 f303 	mul.w	r3, r1, r3
 8002ece:	4413      	add	r3, r2
 8002ed0:	3360      	adds	r3, #96	; 0x60
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ed6:	e073      	b.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	212c      	movs	r1, #44	; 0x2c
 8002ede:	fb01 f303 	mul.w	r3, r1, r3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3360      	adds	r3, #96	; 0x60
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f00:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f08:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f1c:	e050      	b.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	212c      	movs	r1, #44	; 0x2c
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	3361      	adds	r3, #97	; 0x61
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d122      	bne.n	8002f78 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3360      	adds	r3, #96	; 0x60
 8002f40:	2202      	movs	r2, #2
 8002f42:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f5a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f62:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e023      	b.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3361      	adds	r3, #97	; 0x61
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	d119      	bne.n	8002fc0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	212c      	movs	r1, #44	; 0x2c
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	335c      	adds	r3, #92	; 0x5c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	202c      	movs	r0, #44	; 0x2c
 8002fa4:	fb00 f303 	mul.w	r3, r0, r3
 8002fa8:	440b      	add	r3, r1
 8002faa:	335c      	adds	r3, #92	; 0x5c
 8002fac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	212c      	movs	r1, #44	; 0x2c
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	3360      	adds	r3, #96	; 0x60
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	2302      	movs	r3, #2
 8002fd0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	b2d9      	uxtb	r1, r3
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	202c      	movs	r0, #44	; 0x2c
 8002fdc:	fb00 f303 	mul.w	r3, r0, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f005 f9cf 	bl	800838c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fee:	e061      	b.n	80030b4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	2b10      	cmp	r3, #16
 8003004:	d156      	bne.n	80030b4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	333f      	adds	r3, #63	; 0x3f
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d111      	bne.n	800303e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	212c      	movs	r1, #44	; 0x2c
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	335c      	adds	r3, #92	; 0x5c
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	4611      	mov	r1, r2
 8003036:	4618      	mov	r0, r3
 8003038:	f002 fc83 	bl	8005942 <USB_HC_Halt>
 800303c:	e031      	b.n	80030a2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	333f      	adds	r3, #63	; 0x3f
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	212c      	movs	r1, #44	; 0x2c
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333f      	adds	r3, #63	; 0x3f
 8003060:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003062:	2b02      	cmp	r3, #2
 8003064:	d11d      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	212c      	movs	r1, #44	; 0x2c
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	335c      	adds	r3, #92	; 0x5c
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d110      	bne.n	80030a2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	212c      	movs	r1, #44	; 0x2c
 8003086:	fb01 f303 	mul.w	r3, r1, r3
 800308a:	4413      	add	r3, r2
 800308c:	3361      	adds	r3, #97	; 0x61
 800308e:	2203      	movs	r2, #3
 8003090:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f002 fc50 	bl	8005942 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	2310      	movs	r3, #16
 80030b2:	6093      	str	r3, [r2, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3718      	adds	r7, #24
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d11a      	bne.n	8003122 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f8:	461a      	mov	r2, r3
 80030fa:	2304      	movs	r3, #4
 80030fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	212c      	movs	r1, #44	; 0x2c
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	4413      	add	r3, r2
 800310a:	3361      	adds	r3, #97	; 0x61
 800310c:	2206      	movs	r2, #6
 800310e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	4611      	mov	r1, r2
 800311a:	4618      	mov	r0, r3
 800311c:	f002 fc11 	bl	8005942 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003120:	e331      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	015a      	lsls	r2, r3, #5
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4413      	add	r3, r2
 800312a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b20      	cmp	r3, #32
 8003136:	d12e      	bne.n	8003196 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	461a      	mov	r2, r3
 8003146:	2320      	movs	r3, #32
 8003148:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333d      	adds	r3, #61	; 0x3d
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 8313 	bne.w	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	212c      	movs	r1, #44	; 0x2c
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	333d      	adds	r3, #61	; 0x3d
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	212c      	movs	r1, #44	; 0x2c
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	4413      	add	r3, r2
 800317e:	3360      	adds	r3, #96	; 0x60
 8003180:	2202      	movs	r2, #2
 8003182:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f002 fbd7 	bl	8005942 <USB_HC_Halt>
}
 8003194:	e2f7      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	4413      	add	r3, r2
 800319e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ac:	d112      	bne.n	80031d4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	015a      	lsls	r2, r3, #5
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	4413      	add	r3, r2
 80031b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ba:	461a      	mov	r2, r3
 80031bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	4611      	mov	r1, r2
 80031cc:	4618      	mov	r0, r3
 80031ce:	f002 fbb8 	bl	8005942 <USB_HC_Halt>
}
 80031d2:	e2d8      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d140      	bne.n	800326c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	212c      	movs	r1, #44	; 0x2c
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	335c      	adds	r3, #92	; 0x5c
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d111      	bne.n	8003236 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	333d      	adds	r3, #61	; 0x3d
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	461a      	mov	r2, r3
 8003232:	2340      	movs	r3, #64	; 0x40
 8003234:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	461a      	mov	r2, r3
 8003244:	2301      	movs	r3, #1
 8003246:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3361      	adds	r3, #97	; 0x61
 8003256:	2201      	movs	r2, #1
 8003258:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f002 fb6c 	bl	8005942 <USB_HC_Halt>
}
 800326a:	e28c      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	015a      	lsls	r2, r3, #5
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4413      	add	r3, r2
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b40      	cmp	r3, #64	; 0x40
 8003280:	d12c      	bne.n	80032dc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	212c      	movs	r1, #44	; 0x2c
 8003288:	fb01 f303 	mul.w	r3, r1, r3
 800328c:	4413      	add	r3, r2
 800328e:	3361      	adds	r3, #97	; 0x61
 8003290:	2204      	movs	r2, #4
 8003292:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	333d      	adds	r3, #61	; 0x3d
 80032a2:	2201      	movs	r2, #1
 80032a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	212c      	movs	r1, #44	; 0x2c
 80032ac:	fb01 f303 	mul.w	r3, r1, r3
 80032b0:	4413      	add	r3, r2
 80032b2:	335c      	adds	r3, #92	; 0x5c
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f002 fb3d 	bl	8005942 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d4:	461a      	mov	r2, r3
 80032d6:	2340      	movs	r3, #64	; 0x40
 80032d8:	6093      	str	r3, [r2, #8]
}
 80032da:	e254      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d11a      	bne.n	8003328 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fe:	461a      	mov	r2, r3
 8003300:	2308      	movs	r3, #8
 8003302:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	212c      	movs	r1, #44	; 0x2c
 800330a:	fb01 f303 	mul.w	r3, r1, r3
 800330e:	4413      	add	r3, r2
 8003310:	3361      	adds	r3, #97	; 0x61
 8003312:	2205      	movs	r2, #5
 8003314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f002 fb0e 	bl	8005942 <USB_HC_Halt>
}
 8003326:	e22e      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	4413      	add	r3, r2
 8003330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0310 	and.w	r3, r3, #16
 800333a:	2b10      	cmp	r3, #16
 800333c:	d140      	bne.n	80033c0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	212c      	movs	r1, #44	; 0x2c
 8003344:	fb01 f303 	mul.w	r3, r1, r3
 8003348:	4413      	add	r3, r2
 800334a:	335c      	adds	r3, #92	; 0x5c
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	212c      	movs	r1, #44	; 0x2c
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	4413      	add	r3, r2
 800335c:	3361      	adds	r3, #97	; 0x61
 800335e:	2203      	movs	r2, #3
 8003360:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	333d      	adds	r3, #61	; 0x3d
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d112      	bne.n	800339c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	333c      	adds	r3, #60	; 0x3c
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	333d      	adds	r3, #61	; 0x3d
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 facb 	bl	8005942 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	461a      	mov	r2, r3
 80033ba:	2310      	movs	r3, #16
 80033bc:	6093      	str	r3, [r2, #8]
}
 80033be:	e1e2      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d164      	bne.n	80034a0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d111      	bne.n	8003402 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	212c      	movs	r1, #44	; 0x2c
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	4413      	add	r3, r2
 80033ea:	3361      	adds	r3, #97	; 0x61
 80033ec:	2206      	movs	r2, #6
 80033ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	4611      	mov	r1, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 faa1 	bl	8005942 <USB_HC_Halt>
 8003400:	e044      	b.n	800348c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	212c      	movs	r1, #44	; 0x2c
 8003408:	fb01 f303 	mul.w	r3, r1, r3
 800340c:	4413      	add	r3, r2
 800340e:	335c      	adds	r3, #92	; 0x5c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	202c      	movs	r0, #44	; 0x2c
 800341a:	fb00 f303 	mul.w	r3, r0, r3
 800341e:	440b      	add	r3, r1
 8003420:	335c      	adds	r3, #92	; 0x5c
 8003422:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	212c      	movs	r1, #44	; 0x2c
 800342a:	fb01 f303 	mul.w	r3, r1, r3
 800342e:	4413      	add	r3, r2
 8003430:	335c      	adds	r3, #92	; 0x5c
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d920      	bls.n	800347a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	212c      	movs	r1, #44	; 0x2c
 800343e:	fb01 f303 	mul.w	r3, r1, r3
 8003442:	4413      	add	r3, r2
 8003444:	335c      	adds	r3, #92	; 0x5c
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	212c      	movs	r1, #44	; 0x2c
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	4413      	add	r3, r2
 8003456:	3360      	adds	r3, #96	; 0x60
 8003458:	2204      	movs	r2, #4
 800345a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	b2d9      	uxtb	r1, r3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	202c      	movs	r0, #44	; 0x2c
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	4413      	add	r3, r2
 800346c:	3360      	adds	r3, #96	; 0x60
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f004 ff8a 	bl	800838c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003478:	e008      	b.n	800348c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	2202      	movs	r2, #2
 800348a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	461a      	mov	r2, r3
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	6093      	str	r3, [r2, #8]
}
 800349e:	e172      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d11b      	bne.n	80034f0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3361      	adds	r3, #97	; 0x61
 80034c6:	2208      	movs	r2, #8
 80034c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fa34 	bl	8005942 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ec:	6093      	str	r3, [r2, #8]
}
 80034ee:	e14a      	b.n	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b02      	cmp	r3, #2
 8003504:	f040 813f 	bne.w	8003786 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3361      	adds	r3, #97	; 0x61
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d17d      	bne.n	8003618 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3360      	adds	r3, #96	; 0x60
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	333f      	adds	r3, #63	; 0x3f
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b02      	cmp	r3, #2
 8003540:	d00a      	beq.n	8003558 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	333f      	adds	r3, #63	; 0x3f
 8003550:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003552:	2b03      	cmp	r3, #3
 8003554:	f040 8100 	bne.w	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d113      	bne.n	8003588 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	212c      	movs	r1, #44	; 0x2c
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	3355      	adds	r3, #85	; 0x55
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2d8      	uxtb	r0, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3355      	adds	r3, #85	; 0x55
 8003584:	4602      	mov	r2, r0
 8003586:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	2b01      	cmp	r3, #1
 800358e:	f040 80e3 	bne.w	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	334c      	adds	r3, #76	; 0x4c
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80d8 	beq.w	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	212c      	movs	r1, #44	; 0x2c
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	334c      	adds	r3, #76	; 0x4c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	202c      	movs	r0, #44	; 0x2c
 80035be:	fb00 f202 	mul.w	r2, r0, r2
 80035c2:	440a      	add	r2, r1
 80035c4:	3240      	adds	r2, #64	; 0x40
 80035c6:	8812      	ldrh	r2, [r2, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	3b01      	subs	r3, #1
 80035cc:	6879      	ldr	r1, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	202c      	movs	r0, #44	; 0x2c
 80035d2:	fb00 f202 	mul.w	r2, r0, r2
 80035d6:	440a      	add	r2, r1
 80035d8:	3240      	adds	r2, #64	; 0x40
 80035da:	8812      	ldrh	r2, [r2, #0]
 80035dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80b5 	beq.w	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3355      	adds	r3, #85	; 0x55
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2d8      	uxtb	r0, r3
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	212c      	movs	r1, #44	; 0x2c
 800360a:	fb01 f303 	mul.w	r3, r1, r3
 800360e:	4413      	add	r3, r2
 8003610:	3355      	adds	r3, #85	; 0x55
 8003612:	4602      	mov	r2, r0
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	e09f      	b.n	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	212c      	movs	r1, #44	; 0x2c
 800361e:	fb01 f303 	mul.w	r3, r1, r3
 8003622:	4413      	add	r3, r2
 8003624:	3361      	adds	r3, #97	; 0x61
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d109      	bne.n	8003640 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	212c      	movs	r1, #44	; 0x2c
 8003632:	fb01 f303 	mul.w	r3, r1, r3
 8003636:	4413      	add	r3, r2
 8003638:	3360      	adds	r3, #96	; 0x60
 800363a:	2202      	movs	r2, #2
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e08b      	b.n	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	212c      	movs	r1, #44	; 0x2c
 8003646:	fb01 f303 	mul.w	r3, r1, r3
 800364a:	4413      	add	r3, r2
 800364c:	3361      	adds	r3, #97	; 0x61
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b04      	cmp	r3, #4
 8003652:	d109      	bne.n	8003668 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	212c      	movs	r1, #44	; 0x2c
 800365a:	fb01 f303 	mul.w	r3, r1, r3
 800365e:	4413      	add	r3, r2
 8003660:	3360      	adds	r3, #96	; 0x60
 8003662:	2202      	movs	r2, #2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e077      	b.n	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	212c      	movs	r1, #44	; 0x2c
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	4413      	add	r3, r2
 8003674:	3361      	adds	r3, #97	; 0x61
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d109      	bne.n	8003690 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	212c      	movs	r1, #44	; 0x2c
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	4413      	add	r3, r2
 8003688:	3360      	adds	r3, #96	; 0x60
 800368a:	2205      	movs	r2, #5
 800368c:	701a      	strb	r2, [r3, #0]
 800368e:	e063      	b.n	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b06      	cmp	r3, #6
 80036a2:	d009      	beq.n	80036b8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	212c      	movs	r1, #44	; 0x2c
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	4413      	add	r3, r2
 80036b0:	3361      	adds	r3, #97	; 0x61
 80036b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d14f      	bne.n	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	212c      	movs	r1, #44	; 0x2c
 80036be:	fb01 f303 	mul.w	r3, r1, r3
 80036c2:	4413      	add	r3, r2
 80036c4:	335c      	adds	r3, #92	; 0x5c
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1c5a      	adds	r2, r3, #1
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	202c      	movs	r0, #44	; 0x2c
 80036d0:	fb00 f303 	mul.w	r3, r0, r3
 80036d4:	440b      	add	r3, r1
 80036d6:	335c      	adds	r3, #92	; 0x5c
 80036d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	335c      	adds	r3, #92	; 0x5c
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d912      	bls.n	8003714 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	212c      	movs	r1, #44	; 0x2c
 80036f4:	fb01 f303 	mul.w	r3, r1, r3
 80036f8:	4413      	add	r3, r2
 80036fa:	335c      	adds	r3, #92	; 0x5c
 80036fc:	2200      	movs	r2, #0
 80036fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	212c      	movs	r1, #44	; 0x2c
 8003706:	fb01 f303 	mul.w	r3, r1, r3
 800370a:	4413      	add	r3, r2
 800370c:	3360      	adds	r3, #96	; 0x60
 800370e:	2204      	movs	r2, #4
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	e021      	b.n	8003758 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	212c      	movs	r1, #44	; 0x2c
 800371a:	fb01 f303 	mul.w	r3, r1, r3
 800371e:	4413      	add	r3, r2
 8003720:	3360      	adds	r3, #96	; 0x60
 8003722:	2202      	movs	r2, #2
 8003724:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800373c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003744:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	2302      	movs	r3, #2
 8003768:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	b2d9      	uxtb	r1, r3
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	202c      	movs	r0, #44	; 0x2c
 8003774:	fb00 f303 	mul.w	r3, r0, r3
 8003778:	4413      	add	r3, r2
 800377a:	3360      	adds	r3, #96	; 0x60
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f004 fe03 	bl	800838c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003786:	bf00      	nop
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b08a      	sub	sp, #40	; 0x28
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	0c5b      	lsrs	r3, r3, #17
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	091b      	lsrs	r3, r3, #4
 80037be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d004      	beq.n	80037d4 <HCD_RXQLVL_IRQHandler+0x46>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	f000 80a9 	beq.w	8003924 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037d2:	e0aa      	b.n	800392a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a6 	beq.w	8003928 <HCD_RXQLVL_IRQHandler+0x19a>
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3344      	adds	r3, #68	; 0x44
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 809b 	beq.w	8003928 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	212c      	movs	r1, #44	; 0x2c
 80037f8:	fb01 f303 	mul.w	r3, r1, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	3350      	adds	r3, #80	; 0x50
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	441a      	add	r2, r3
 8003806:	6879      	ldr	r1, [r7, #4]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	202c      	movs	r0, #44	; 0x2c
 800380c:	fb00 f303 	mul.w	r3, r0, r3
 8003810:	440b      	add	r3, r1
 8003812:	334c      	adds	r3, #76	; 0x4c
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d87a      	bhi.n	8003910 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3344      	adds	r3, #68	; 0x44
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	b292      	uxth	r2, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f001 fbdc 	bl	8004ff0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	212c      	movs	r1, #44	; 0x2c
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	3344      	adds	r3, #68	; 0x44
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	441a      	add	r2, r3
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	202c      	movs	r0, #44	; 0x2c
 8003852:	fb00 f303 	mul.w	r3, r0, r3
 8003856:	440b      	add	r3, r1
 8003858:	3344      	adds	r3, #68	; 0x44
 800385a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	3350      	adds	r3, #80	; 0x50
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	441a      	add	r2, r3
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	202c      	movs	r0, #44	; 0x2c
 8003876:	fb00 f303 	mul.w	r3, r0, r3
 800387a:	440b      	add	r3, r1
 800387c:	3350      	adds	r3, #80	; 0x50
 800387e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	0cdb      	lsrs	r3, r3, #19
 8003890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003894:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3340      	adds	r3, #64	; 0x40
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d13c      	bne.n	8003928 <HCD_RXQLVL_IRQHandler+0x19a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d039      	beq.n	8003928 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ca:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3354      	adds	r3, #84	; 0x54
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f083 0301 	eor.w	r3, r3, #1
 80038fa:	b2d8      	uxtb	r0, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3354      	adds	r3, #84	; 0x54
 800390a:	4602      	mov	r2, r0
 800390c:	701a      	strb	r2, [r3, #0]
      break;
 800390e:	e00b      	b.n	8003928 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3360      	adds	r3, #96	; 0x60
 800391e:	2204      	movs	r2, #4
 8003920:	701a      	strb	r2, [r3, #0]
      break;
 8003922:	e001      	b.n	8003928 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003928:	bf00      	nop
  }
}
 800392a:	bf00      	nop
 800392c:	3728      	adds	r7, #40	; 0x28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800395e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d10b      	bne.n	8003982 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d102      	bne.n	800397a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f004 fced 	bl	8008354 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f043 0302 	orr.w	r3, r3, #2
 8003980:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b08      	cmp	r3, #8
 800398a:	d132      	bne.n	80039f2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f043 0308 	orr.w	r3, r3, #8
 8003992:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d126      	bne.n	80039ec <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d113      	bne.n	80039ce <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b0:	d106      	bne.n	80039c0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fc87 	bl	80052cc <USB_InitFSLSPClkSel>
 80039be:	e011      	b.n	80039e4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f001 fc80 	bl	80052cc <USB_InitFSLSPClkSel>
 80039cc:	e00a      	b.n	80039e4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d106      	bne.n	80039e4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039dc:	461a      	mov	r2, r3
 80039de:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039e2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f004 fcdf 	bl	80083a8 <HAL_HCD_PortEnabled_Callback>
 80039ea:	e002      	b.n	80039f2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f004 fce9 	bl	80083c4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b20      	cmp	r3, #32
 80039fa:	d103      	bne.n	8003a04 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f043 0320 	orr.w	r3, r3, #32
 8003a02:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	6013      	str	r3, [r2, #0]
}
 8003a10:	bf00      	nop
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e267      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d075      	beq.n	8003b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a36:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d00c      	beq.n	8003a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d112      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a4e:	4b82      	ldr	r3, [pc, #520]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a5a:	d10b      	bne.n	8003a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a5c:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d05b      	beq.n	8003b20 <HAL_RCC_OscConfig+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d157      	bne.n	8003b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e242      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d106      	bne.n	8003a8c <HAL_RCC_OscConfig+0x74>
 8003a7e:	4b76      	ldr	r3, [pc, #472]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a75      	ldr	r2, [pc, #468]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a88:	6013      	str	r3, [r2, #0]
 8003a8a:	e01d      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a94:	d10c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x98>
 8003a96:	4b70      	ldr	r3, [pc, #448]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a6f      	ldr	r2, [pc, #444]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aa0:	6013      	str	r3, [r2, #0]
 8003aa2:	4b6d      	ldr	r3, [pc, #436]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6c      	ldr	r2, [pc, #432]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	e00b      	b.n	8003ac8 <HAL_RCC_OscConfig+0xb0>
 8003ab0:	4b69      	ldr	r3, [pc, #420]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a68      	ldr	r2, [pc, #416]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a65      	ldr	r2, [pc, #404]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d013      	beq.n	8003af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fe3e 	bl	8001750 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7fd fe3a 	bl	8001750 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e207      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0xc0>
 8003af6:	e014      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af8:	f7fd fe2a 	bl	8001750 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b00:	f7fd fe26 	bl	8001750 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b64      	cmp	r3, #100	; 0x64
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e1f3      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	4b51      	ldr	r3, [pc, #324]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_OscConfig+0xe8>
 8003b1e:	e000      	b.n	8003b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d063      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b3a:	4b47      	ldr	r3, [pc, #284]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d11c      	bne.n	8003b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b46:	4b44      	ldr	r3, [pc, #272]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d116      	bne.n	8003b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b52:	4b41      	ldr	r3, [pc, #260]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d001      	beq.n	8003b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e1c7      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4937      	ldr	r1, [pc, #220]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b7e:	e03a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d020      	beq.n	8003bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b88:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <HAL_RCC_OscConfig+0x244>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8e:	f7fd fddf 	bl	8001750 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b94:	e008      	b.n	8003ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b96:	f7fd fddb 	bl	8001750 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e1a8      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0f0      	beq.n	8003b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb4:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4925      	ldr	r1, [pc, #148]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	600b      	str	r3, [r1, #0]
 8003bc8:	e015      	b.n	8003bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bca:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_RCC_OscConfig+0x244>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd fdbe 	bl	8001750 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bd8:	f7fd fdba 	bl	8001750 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e187      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d036      	beq.n	8003c70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_RCC_OscConfig+0x248>)
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fd fd9e 	bl	8001750 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c18:	f7fd fd9a 	bl	8001750 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e167      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f0      	beq.n	8003c18 <HAL_RCC_OscConfig+0x200>
 8003c36:	e01b      	b.n	8003c70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c38:	4b09      	ldr	r3, [pc, #36]	; (8003c60 <HAL_RCC_OscConfig+0x248>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c3e:	f7fd fd87 	bl	8001750 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c44:	e00e      	b.n	8003c64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c46:	f7fd fd83 	bl	8001750 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d907      	bls.n	8003c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e150      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	42470000 	.word	0x42470000
 8003c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	4b88      	ldr	r3, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ea      	bne.n	8003c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8097 	beq.w	8003dac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c82:	4b81      	ldr	r3, [pc, #516]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10f      	bne.n	8003cae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	4b7d      	ldr	r3, [pc, #500]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a7c      	ldr	r2, [pc, #496]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b7a      	ldr	r3, [pc, #488]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	4b77      	ldr	r3, [pc, #476]	; (8003e8c <HAL_RCC_OscConfig+0x474>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cba:	4b74      	ldr	r3, [pc, #464]	; (8003e8c <HAL_RCC_OscConfig+0x474>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a73      	ldr	r2, [pc, #460]	; (8003e8c <HAL_RCC_OscConfig+0x474>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fd fd43 	bl	8001750 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fd fd3f 	bl	8001750 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e10c      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce0:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <HAL_RCC_OscConfig+0x474>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x2ea>
 8003cf4:	4b64      	ldr	r3, [pc, #400]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a63      	ldr	r2, [pc, #396]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e01c      	b.n	8003d3c <HAL_RCC_OscConfig+0x324>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b05      	cmp	r3, #5
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x30c>
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a5e      	ldr	r2, [pc, #376]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d10:	f043 0304 	orr.w	r3, r3, #4
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a5b      	ldr	r2, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0x324>
 8003d24:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a57      	ldr	r2, [pc, #348]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d2a:	f023 0301 	bic.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	4b55      	ldr	r3, [pc, #340]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	4a54      	ldr	r2, [pc, #336]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d36:	f023 0304 	bic.w	r3, r3, #4
 8003d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d015      	beq.n	8003d70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fd fd04 	bl	8001750 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4a:	e00a      	b.n	8003d62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d4c:	f7fd fd00 	bl	8001750 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e0cb      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d62:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0ee      	beq.n	8003d4c <HAL_RCC_OscConfig+0x334>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d70:	f7fd fcee 	bl	8001750 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fd fcea 	bl	8001750 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e0b5      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d8e:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1ee      	bne.n	8003d78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003da0:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	4a38      	ldr	r2, [pc, #224]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 80a1 	beq.w	8003ef8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003db6:	4b34      	ldr	r3, [pc, #208]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d05c      	beq.n	8003e7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d141      	bne.n	8003e4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_RCC_OscConfig+0x478>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fcbe 	bl	8001750 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd8:	f7fd fcba 	bl	8001750 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e087      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	019b      	lsls	r3, r3, #6
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0c:	085b      	lsrs	r3, r3, #1
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	491b      	ldr	r1, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e20:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x478>)
 8003e22:	2201      	movs	r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fd fc93 	bl	8001750 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fd fc8f 	bl	8001750 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e05c      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e40:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCC_OscConfig+0x416>
 8003e4c:	e054      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_RCC_OscConfig+0x478>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fc7c 	bl	8001750 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd fc78 	bl	8001750 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e045      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_OscConfig+0x470>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x444>
 8003e7a:	e03d      	b.n	8003ef8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d107      	bne.n	8003e94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	e038      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000
 8003e90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e94:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x4ec>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d028      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d121      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d11a      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d111      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	085b      	lsrs	r3, r3, #1
 8003edc:	3b01      	subs	r3, #1
 8003ede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40023800 	.word	0x40023800

08003f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0cc      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b68      	ldr	r3, [pc, #416]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d90c      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b65      	ldr	r3, [pc, #404]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b63      	ldr	r3, [pc, #396]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0b8      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f5c:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	4a58      	ldr	r2, [pc, #352]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4a52      	ldr	r2, [pc, #328]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f80:	4b50      	ldr	r3, [pc, #320]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	494d      	ldr	r1, [pc, #308]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d044      	beq.n	8004028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d119      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e07f      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d003      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc6:	4b3f      	ldr	r3, [pc, #252]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e06f      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	4b3b      	ldr	r3, [pc, #236]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e067      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fe6:	4b37      	ldr	r3, [pc, #220]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 0203 	bic.w	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	4934      	ldr	r1, [pc, #208]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ff8:	f7fd fbaa 	bl	8001750 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ffe:	e00a      	b.n	8004016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004000:	f7fd fba6 	bl	8001750 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e04f      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004016:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 020c 	and.w	r2, r3, #12
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	429a      	cmp	r2, r3
 8004026:	d1eb      	bne.n	8004000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004028:	4b25      	ldr	r3, [pc, #148]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d20c      	bcs.n	8004050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004036:	4b22      	ldr	r3, [pc, #136]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b20      	ldr	r3, [pc, #128]	; (80040c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e032      	b.n	80040b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4916      	ldr	r1, [pc, #88]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d009      	beq.n	800408e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	490e      	ldr	r1, [pc, #56]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800408e:	f000 f821 	bl	80040d4 <HAL_RCC_GetSysClockFreq>
 8004092:	4602      	mov	r2, r0
 8004094:	4b0b      	ldr	r3, [pc, #44]	; (80040c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	490a      	ldr	r1, [pc, #40]	; (80040c8 <HAL_RCC_ClockConfig+0x1c0>)
 80040a0:	5ccb      	ldrb	r3, [r1, r3]
 80040a2:	fa22 f303 	lsr.w	r3, r2, r3
 80040a6:	4a09      	ldr	r2, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1c4>)
 80040a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040aa:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fd fb0a 	bl	80016c8 <HAL_InitTick>

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023c00 	.word	0x40023c00
 80040c4:	40023800 	.word	0x40023800
 80040c8:	0802e998 	.word	0x0802e998
 80040cc:	20000000 	.word	0x20000000
 80040d0:	20000004 	.word	0x20000004

080040d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040d8:	b094      	sub	sp, #80	; 0x50
 80040da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	647b      	str	r3, [r7, #68]	; 0x44
 80040e0:	2300      	movs	r3, #0
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e4:	2300      	movs	r3, #0
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ec:	4b79      	ldr	r3, [pc, #484]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 030c 	and.w	r3, r3, #12
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d00d      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x40>
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	f200 80e1 	bhi.w	80042c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x34>
 8004102:	2b04      	cmp	r3, #4
 8004104:	d003      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x3a>
 8004106:	e0db      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800410a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800410c:	e0db      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800410e:	4b73      	ldr	r3, [pc, #460]	; (80042dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004110:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004112:	e0d8      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004114:	4b6f      	ldr	r3, [pc, #444]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800411e:	4b6d      	ldr	r3, [pc, #436]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412a:	4b6a      	ldr	r3, [pc, #424]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	099b      	lsrs	r3, r3, #6
 8004130:	2200      	movs	r2, #0
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
 8004134:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
 800413e:	2300      	movs	r3, #0
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
 8004142:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004146:	4622      	mov	r2, r4
 8004148:	462b      	mov	r3, r5
 800414a:	f04f 0000 	mov.w	r0, #0
 800414e:	f04f 0100 	mov.w	r1, #0
 8004152:	0159      	lsls	r1, r3, #5
 8004154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004158:	0150      	lsls	r0, r2, #5
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4621      	mov	r1, r4
 8004160:	1a51      	subs	r1, r2, r1
 8004162:	6139      	str	r1, [r7, #16]
 8004164:	4629      	mov	r1, r5
 8004166:	eb63 0301 	sbc.w	r3, r3, r1
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	f04f 0300 	mov.w	r3, #0
 8004174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004178:	4659      	mov	r1, fp
 800417a:	018b      	lsls	r3, r1, #6
 800417c:	4651      	mov	r1, sl
 800417e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004182:	4651      	mov	r1, sl
 8004184:	018a      	lsls	r2, r1, #6
 8004186:	4651      	mov	r1, sl
 8004188:	ebb2 0801 	subs.w	r8, r2, r1
 800418c:	4659      	mov	r1, fp
 800418e:	eb63 0901 	sbc.w	r9, r3, r1
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	f04f 0300 	mov.w	r3, #0
 800419a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800419e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041a6:	4690      	mov	r8, r2
 80041a8:	4699      	mov	r9, r3
 80041aa:	4623      	mov	r3, r4
 80041ac:	eb18 0303 	adds.w	r3, r8, r3
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	462b      	mov	r3, r5
 80041b4:	eb49 0303 	adc.w	r3, r9, r3
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	f04f 0300 	mov.w	r3, #0
 80041c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041c6:	4629      	mov	r1, r5
 80041c8:	024b      	lsls	r3, r1, #9
 80041ca:	4621      	mov	r1, r4
 80041cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041d0:	4621      	mov	r1, r4
 80041d2:	024a      	lsls	r2, r1, #9
 80041d4:	4610      	mov	r0, r2
 80041d6:	4619      	mov	r1, r3
 80041d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041da:	2200      	movs	r2, #0
 80041dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80041de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041e4:	f7fc f844 	bl	8000270 <__aeabi_uldivmod>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4613      	mov	r3, r2
 80041ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f0:	e058      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f2:	4b38      	ldr	r3, [pc, #224]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	2200      	movs	r2, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	4611      	mov	r1, r2
 80041fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	2300      	movs	r3, #0
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800420c:	4642      	mov	r2, r8
 800420e:	464b      	mov	r3, r9
 8004210:	f04f 0000 	mov.w	r0, #0
 8004214:	f04f 0100 	mov.w	r1, #0
 8004218:	0159      	lsls	r1, r3, #5
 800421a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800421e:	0150      	lsls	r0, r2, #5
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4641      	mov	r1, r8
 8004226:	ebb2 0a01 	subs.w	sl, r2, r1
 800422a:	4649      	mov	r1, r9
 800422c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004230:	f04f 0200 	mov.w	r2, #0
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800423c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004240:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004244:	ebb2 040a 	subs.w	r4, r2, sl
 8004248:	eb63 050b 	sbc.w	r5, r3, fp
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	00eb      	lsls	r3, r5, #3
 8004256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800425a:	00e2      	lsls	r2, r4, #3
 800425c:	4614      	mov	r4, r2
 800425e:	461d      	mov	r5, r3
 8004260:	4643      	mov	r3, r8
 8004262:	18e3      	adds	r3, r4, r3
 8004264:	603b      	str	r3, [r7, #0]
 8004266:	464b      	mov	r3, r9
 8004268:	eb45 0303 	adc.w	r3, r5, r3
 800426c:	607b      	str	r3, [r7, #4]
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427a:	4629      	mov	r1, r5
 800427c:	028b      	lsls	r3, r1, #10
 800427e:	4621      	mov	r1, r4
 8004280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004284:	4621      	mov	r1, r4
 8004286:	028a      	lsls	r2, r1, #10
 8004288:	4610      	mov	r0, r2
 800428a:	4619      	mov	r1, r3
 800428c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800428e:	2200      	movs	r2, #0
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	61fa      	str	r2, [r7, #28]
 8004294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004298:	f7fb ffea 	bl	8000270 <__aeabi_uldivmod>
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4613      	mov	r3, r2
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	3301      	adds	r3, #1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80042b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042be:	e002      	b.n	80042c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80042c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3750      	adds	r7, #80	; 0x50
 80042cc:	46bd      	mov	sp, r7
 80042ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	007a1200 	.word	0x007a1200

080042e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e4:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042e6:	681b      	ldr	r3, [r3, #0]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	20000000 	.word	0x20000000

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042fc:	f7ff fff0 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	0a9b      	lsrs	r3, r3, #10
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40023800 	.word	0x40023800
 800431c:	0802e9a8 	.word	0x0802e9a8

08004320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004324:	f7ff ffdc 	bl	80042e0 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	0b5b      	lsrs	r3, r3, #13
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40023800 	.word	0x40023800
 8004344:	0802e9a8 	.word	0x0802e9a8

08004348 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e038      	b.n	80043d0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7fd f8d6 	bl	8001524 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3308      	adds	r3, #8
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f000 fbea 	bl	8004b5c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6818      	ldr	r0, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	461a      	mov	r2, r3
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	f000 fc4c 	bl	8004c30 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6858      	ldr	r0, [r3, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	f000 fc79 	bl	8004c9c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	6892      	ldr	r2, [r2, #8]
 80043b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	6892      	ldr	r2, [r2, #8]
 80043be:	f041 0101 	orr.w	r1, r1, #1
 80043c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e03f      	b.n	800446a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fc fffc 	bl	80013fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800441a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f929 	bl	8004674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695a      	ldr	r2, [r3, #20]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2220      	movs	r2, #32
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08a      	sub	sp, #40	; 0x28
 8004476:	af02      	add	r7, sp, #8
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b20      	cmp	r3, #32
 8004490:	d17c      	bne.n	800458c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <HAL_UART_Transmit+0x2c>
 8004498:	88fb      	ldrh	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e075      	b.n	800458e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Transmit+0x3e>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e06e      	b.n	800458e <HAL_UART_Transmit+0x11c>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2221      	movs	r2, #33	; 0x21
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c6:	f7fd f943 	bl	8001750 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e0:	d108      	bne.n	80044f4 <HAL_UART_Transmit+0x82>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d104      	bne.n	80044f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	e003      	b.n	80044fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044f8:	2300      	movs	r3, #0
 80044fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004504:	e02a      	b.n	800455c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	2180      	movs	r1, #128	; 0x80
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f840 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e036      	b.n	800458e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10b      	bne.n	800453e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004534:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	3302      	adds	r3, #2
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	e007      	b.n	800454e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	781a      	ldrb	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	3301      	adds	r3, #1
 800454c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1cf      	bne.n	8004506 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	2140      	movs	r1, #64	; 0x40
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f810 	bl	8004596 <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e006      	b.n	800458e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	e000      	b.n	800458e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800458c:	2302      	movs	r3, #2
  }
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b090      	sub	sp, #64	; 0x40
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	4613      	mov	r3, r2
 80045a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045a6:	e050      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d04c      	beq.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d007      	beq.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80045b6:	f7fd f8cb 	bl	8001750 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d241      	bcs.n	800464a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	330c      	adds	r3, #12
 80045e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e6:	637a      	str	r2, [r7, #52]	; 0x34
 80045e8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3314      	adds	r3, #20
 8004600:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	e853 3f00 	ldrex	r3, [r3]
 8004608:	613b      	str	r3, [r7, #16]
   return(result);
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f023 0301 	bic.w	r3, r3, #1
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	3314      	adds	r3, #20
 8004618:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461a:	623a      	str	r2, [r7, #32]
 800461c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	69f9      	ldr	r1, [r7, #28]
 8004620:	6a3a      	ldr	r2, [r7, #32]
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	61bb      	str	r3, [r7, #24]
   return(result);
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e5      	bne.n	80045fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2220      	movs	r2, #32
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e00f      	b.n	800466a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	429a      	cmp	r2, r3
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	429a      	cmp	r2, r3
 8004666:	d09f      	beq.n	80045a8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3740      	adds	r7, #64	; 0x40
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b0c0      	sub	sp, #256	; 0x100
 800467a:	af00      	add	r7, sp, #0
 800467c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	68d9      	ldr	r1, [r3, #12]
 8004692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	ea40 0301 	orr.w	r3, r0, r1
 800469c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	431a      	orrs	r2, r3
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	431a      	orrs	r2, r3
 80046b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046cc:	f021 010c 	bic.w	r1, r1, #12
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046da:	430b      	orrs	r3, r1
 80046dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	6999      	ldr	r1, [r3, #24]
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	ea40 0301 	orr.w	r3, r0, r1
 80046fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4b8f      	ldr	r3, [pc, #572]	; (8004940 <UART_SetConfig+0x2cc>)
 8004704:	429a      	cmp	r2, r3
 8004706:	d005      	beq.n	8004714 <UART_SetConfig+0xa0>
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8d      	ldr	r3, [pc, #564]	; (8004944 <UART_SetConfig+0x2d0>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d104      	bne.n	800471e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7ff fe04 	bl	8004320 <HAL_RCC_GetPCLK2Freq>
 8004718:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800471c:	e003      	b.n	8004726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800471e:	f7ff fdeb 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8004722:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	f040 810c 	bne.w	800494c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800473e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004746:	4622      	mov	r2, r4
 8004748:	462b      	mov	r3, r5
 800474a:	1891      	adds	r1, r2, r2
 800474c:	65b9      	str	r1, [r7, #88]	; 0x58
 800474e:	415b      	adcs	r3, r3
 8004750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004756:	4621      	mov	r1, r4
 8004758:	eb12 0801 	adds.w	r8, r2, r1
 800475c:	4629      	mov	r1, r5
 800475e:	eb43 0901 	adc.w	r9, r3, r1
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800476e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004776:	4690      	mov	r8, r2
 8004778:	4699      	mov	r9, r3
 800477a:	4623      	mov	r3, r4
 800477c:	eb18 0303 	adds.w	r3, r8, r3
 8004780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004784:	462b      	mov	r3, r5
 8004786:	eb49 0303 	adc.w	r3, r9, r3
 800478a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800478e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800479a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800479e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047a2:	460b      	mov	r3, r1
 80047a4:	18db      	adds	r3, r3, r3
 80047a6:	653b      	str	r3, [r7, #80]	; 0x50
 80047a8:	4613      	mov	r3, r2
 80047aa:	eb42 0303 	adc.w	r3, r2, r3
 80047ae:	657b      	str	r3, [r7, #84]	; 0x54
 80047b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047b8:	f7fb fd5a 	bl	8000270 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4b61      	ldr	r3, [pc, #388]	; (8004948 <UART_SetConfig+0x2d4>)
 80047c2:	fba3 2302 	umull	r2, r3, r3, r2
 80047c6:	095b      	lsrs	r3, r3, #5
 80047c8:	011c      	lsls	r4, r3, #4
 80047ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ce:	2200      	movs	r2, #0
 80047d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047dc:	4642      	mov	r2, r8
 80047de:	464b      	mov	r3, r9
 80047e0:	1891      	adds	r1, r2, r2
 80047e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80047e4:	415b      	adcs	r3, r3
 80047e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047ec:	4641      	mov	r1, r8
 80047ee:	eb12 0a01 	adds.w	sl, r2, r1
 80047f2:	4649      	mov	r1, r9
 80047f4:	eb43 0b01 	adc.w	fp, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800480c:	4692      	mov	sl, r2
 800480e:	469b      	mov	fp, r3
 8004810:	4643      	mov	r3, r8
 8004812:	eb1a 0303 	adds.w	r3, sl, r3
 8004816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800481a:	464b      	mov	r3, r9
 800481c:	eb4b 0303 	adc.w	r3, fp, r3
 8004820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004830:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004838:	460b      	mov	r3, r1
 800483a:	18db      	adds	r3, r3, r3
 800483c:	643b      	str	r3, [r7, #64]	; 0x40
 800483e:	4613      	mov	r3, r2
 8004840:	eb42 0303 	adc.w	r3, r2, r3
 8004844:	647b      	str	r3, [r7, #68]	; 0x44
 8004846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800484a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800484e:	f7fb fd0f 	bl	8000270 <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4611      	mov	r1, r2
 8004858:	4b3b      	ldr	r3, [pc, #236]	; (8004948 <UART_SetConfig+0x2d4>)
 800485a:	fba3 2301 	umull	r2, r3, r3, r1
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	2264      	movs	r2, #100	; 0x64
 8004862:	fb02 f303 	mul.w	r3, r2, r3
 8004866:	1acb      	subs	r3, r1, r3
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800486e:	4b36      	ldr	r3, [pc, #216]	; (8004948 <UART_SetConfig+0x2d4>)
 8004870:	fba3 2302 	umull	r2, r3, r3, r2
 8004874:	095b      	lsrs	r3, r3, #5
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800487c:	441c      	add	r4, r3
 800487e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004882:	2200      	movs	r2, #0
 8004884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004888:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800488c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	1891      	adds	r1, r2, r2
 8004896:	63b9      	str	r1, [r7, #56]	; 0x38
 8004898:	415b      	adcs	r3, r3
 800489a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800489c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048a0:	4641      	mov	r1, r8
 80048a2:	1851      	adds	r1, r2, r1
 80048a4:	6339      	str	r1, [r7, #48]	; 0x30
 80048a6:	4649      	mov	r1, r9
 80048a8:	414b      	adcs	r3, r1
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	f04f 0200 	mov.w	r2, #0
 80048b0:	f04f 0300 	mov.w	r3, #0
 80048b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048b8:	4659      	mov	r1, fp
 80048ba:	00cb      	lsls	r3, r1, #3
 80048bc:	4651      	mov	r1, sl
 80048be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048c2:	4651      	mov	r1, sl
 80048c4:	00ca      	lsls	r2, r1, #3
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	4642      	mov	r2, r8
 80048ce:	189b      	adds	r3, r3, r2
 80048d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048d4:	464b      	mov	r3, r9
 80048d6:	460a      	mov	r2, r1
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048f4:	460b      	mov	r3, r1
 80048f6:	18db      	adds	r3, r3, r3
 80048f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048fa:	4613      	mov	r3, r2
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800490a:	f7fb fcb1 	bl	8000270 <__aeabi_uldivmod>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <UART_SetConfig+0x2d4>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	095b      	lsrs	r3, r3, #5
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	3332      	adds	r3, #50	; 0x32
 8004926:	4a08      	ldr	r2, [pc, #32]	; (8004948 <UART_SetConfig+0x2d4>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	095b      	lsrs	r3, r3, #5
 800492e:	f003 0207 	and.w	r2, r3, #7
 8004932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4422      	add	r2, r4
 800493a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800493c:	e105      	b.n	8004b4a <UART_SetConfig+0x4d6>
 800493e:	bf00      	nop
 8004940:	40011000 	.word	0x40011000
 8004944:	40011400 	.word	0x40011400
 8004948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800494c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004956:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800495a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	1891      	adds	r1, r2, r2
 8004964:	6239      	str	r1, [r7, #32]
 8004966:	415b      	adcs	r3, r3
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
 800496a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800496e:	4641      	mov	r1, r8
 8004970:	1854      	adds	r4, r2, r1
 8004972:	4649      	mov	r1, r9
 8004974:	eb43 0501 	adc.w	r5, r3, r1
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	f04f 0300 	mov.w	r3, #0
 8004980:	00eb      	lsls	r3, r5, #3
 8004982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004986:	00e2      	lsls	r2, r4, #3
 8004988:	4614      	mov	r4, r2
 800498a:	461d      	mov	r5, r3
 800498c:	4643      	mov	r3, r8
 800498e:	18e3      	adds	r3, r4, r3
 8004990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004994:	464b      	mov	r3, r9
 8004996:	eb45 0303 	adc.w	r3, r5, r3
 800499a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800499e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049ba:	4629      	mov	r1, r5
 80049bc:	008b      	lsls	r3, r1, #2
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049c4:	4621      	mov	r1, r4
 80049c6:	008a      	lsls	r2, r1, #2
 80049c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049cc:	f7fb fc50 	bl	8000270 <__aeabi_uldivmod>
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4b60      	ldr	r3, [pc, #384]	; (8004b58 <UART_SetConfig+0x4e4>)
 80049d6:	fba3 2302 	umull	r2, r3, r3, r2
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	011c      	lsls	r4, r3, #4
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	61b9      	str	r1, [r7, #24]
 80049f8:	415b      	adcs	r3, r3
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6139      	str	r1, [r7, #16]
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	617b      	str	r3, [r7, #20]
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a58:	4649      	mov	r1, r9
 8004a5a:	008b      	lsls	r3, r1, #2
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a62:	4641      	mov	r1, r8
 8004a64:	008a      	lsls	r2, r1, #2
 8004a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a6a:	f7fb fc01 	bl	8000270 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	; 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	3332      	adds	r3, #50	; 0x32
 8004a86:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a92:	441c      	add	r4, r3
 8004a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a98:	2200      	movs	r2, #0
 8004a9a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a9c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a9e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004aa2:	4642      	mov	r2, r8
 8004aa4:	464b      	mov	r3, r9
 8004aa6:	1891      	adds	r1, r2, r2
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	415b      	adcs	r3, r3
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	1851      	adds	r1, r2, r1
 8004ab6:	6039      	str	r1, [r7, #0]
 8004ab8:	4649      	mov	r1, r9
 8004aba:	414b      	adcs	r3, r1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aca:	4659      	mov	r1, fp
 8004acc:	00cb      	lsls	r3, r1, #3
 8004ace:	4651      	mov	r1, sl
 8004ad0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ad4:	4651      	mov	r1, sl
 8004ad6:	00ca      	lsls	r2, r1, #3
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	4603      	mov	r3, r0
 8004ade:	4642      	mov	r2, r8
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ae4:	464b      	mov	r3, r9
 8004ae6:	460a      	mov	r2, r1
 8004ae8:	eb42 0303 	adc.w	r3, r2, r3
 8004aec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	663b      	str	r3, [r7, #96]	; 0x60
 8004af8:	667a      	str	r2, [r7, #100]	; 0x64
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b06:	4649      	mov	r1, r9
 8004b08:	008b      	lsls	r3, r1, #2
 8004b0a:	4641      	mov	r1, r8
 8004b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b10:	4641      	mov	r1, r8
 8004b12:	008a      	lsls	r2, r1, #2
 8004b14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b18:	f7fb fbaa 	bl	8000270 <__aeabi_uldivmod>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004b22:	fba3 1302 	umull	r1, r3, r3, r2
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2164      	movs	r1, #100	; 0x64
 8004b2a:	fb01 f303 	mul.w	r3, r1, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	3332      	adds	r3, #50	; 0x32
 8004b34:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <UART_SetConfig+0x4e4>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4422      	add	r2, r4
 8004b48:	609a      	str	r2, [r3, #8]
}
 8004b4a:	bf00      	nop
 8004b4c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b50:	46bd      	mov	sp, r7
 8004b52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b56:	bf00      	nop
 8004b58:	51eb851f 	.word	0x51eb851f

08004b5c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	6812      	ldr	r2, [r2, #0]
 8004b74:	f023 0101 	bic.w	r1, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d102      	bne.n	8004b8c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004b86:	2340      	movs	r3, #64	; 0x40
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	e001      	b.n	8004b90 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004b9c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004ba2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004ba8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004bae:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004bb4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004bba:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004bc0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004bc6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004bcc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <FSMC_NORSRAM_Init+0xd0>)
 8004bec:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bf4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004bfc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	ea02 0103 	and.w	r1, r2, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	4319      	orrs	r1, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	0008fb7f 	.word	0x0008fb7f

08004c30 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c46:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	431a      	orrs	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	051b      	lsls	r3, r3, #20
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	695b      	ldr	r3, [r3, #20]
 8004c74:	3b02      	subs	r3, #2
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	3201      	adds	r2, #1
 8004c84:	4319      	orrs	r1, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cb0:	d11d      	bne.n	8004cee <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004cba:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	6811      	ldr	r1, [r2, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	6852      	ldr	r2, [r2, #4]
 8004cc6:	0112      	lsls	r2, r2, #4
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	6892      	ldr	r2, [r2, #8]
 8004cce:	0212      	lsls	r2, r2, #8
 8004cd0:	4311      	orrs	r1, r2
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	6992      	ldr	r2, [r2, #24]
 8004cd6:	4311      	orrs	r1, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	68d2      	ldr	r2, [r2, #12]
 8004cdc:	0412      	lsls	r2, r2, #16
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	ea43 0102 	orr.w	r1, r3, r2
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004cec:	e005      	b.n	8004cfa <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	cff00000 	.word	0xcff00000

08004d0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	f107 001c 	add.w	r0, r7, #28
 8004d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d122      	bne.n	8004d6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f9c0 	bl	80050e4 <USB_CoreReset>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]
 8004d68:	e01a      	b.n	8004da0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9b4 	bl	80050e4 <USB_CoreReset>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
 8004d92:	e005      	b.n	8004da0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d10b      	bne.n	8004dbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f043 0206 	orr.w	r2, r3, #6
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f043 0220 	orr.w	r2, r3, #32
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3710      	adds	r7, #16
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dca:	b004      	add	sp, #16
 8004dcc:	4770      	bx	lr

08004dce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b083      	sub	sp, #12
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f043 0201 	orr.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 0201 	bic.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e2e:	78fb      	ldrb	r3, [r7, #3]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d115      	bne.n	8004e60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e40:	2001      	movs	r0, #1
 8004e42:	f7fc fc91 	bl	8001768 <HAL_Delay>
      ms++;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f93a 	bl	80050c6 <USB_GetMode>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d01e      	beq.n	8004e96 <USB_SetCurrentMode+0x84>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b31      	cmp	r3, #49	; 0x31
 8004e5c:	d9f0      	bls.n	8004e40 <USB_SetCurrentMode+0x2e>
 8004e5e:	e01a      	b.n	8004e96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d115      	bne.n	8004e92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004e72:	2001      	movs	r0, #1
 8004e74:	f7fc fc78 	bl	8001768 <HAL_Delay>
      ms++;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f921 	bl	80050c6 <USB_GetMode>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <USB_SetCurrentMode+0x84>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b31      	cmp	r3, #49	; 0x31
 8004e8e:	d9f0      	bls.n	8004e72 <USB_SetCurrentMode+0x60>
 8004e90:	e001      	b.n	8004e96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e005      	b.n	8004ea2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b32      	cmp	r3, #50	; 0x32
 8004e9a:	d101      	bne.n	8004ea0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e000      	b.n	8004ea2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <USB_FlushTxFifo+0x64>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e01b      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	daf2      	bge.n	8004eba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	019b      	lsls	r3, r3, #6
 8004edc:	f043 0220 	orr.w	r2, r3, #32
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a08      	ldr	r2, [pc, #32]	; (8004f10 <USB_FlushTxFifo+0x64>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d901      	bls.n	8004ef6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e006      	b.n	8004f04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	d0f0      	beq.n	8004ee4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	00030d40 	.word	0x00030d40

08004f14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <USB_FlushRxFifo+0x5c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e018      	b.n	8004f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	daf2      	bge.n	8004f20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2210      	movs	r2, #16
 8004f42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	3301      	adds	r3, #1
 8004f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <USB_FlushRxFifo+0x5c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d901      	bls.n	8004f56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e006      	b.n	8004f64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d0f0      	beq.n	8004f44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	00030d40 	.word	0x00030d40

08004f74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b089      	sub	sp, #36	; 0x24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	4611      	mov	r1, r2
 8004f80:	461a      	mov	r2, r3
 8004f82:	460b      	mov	r3, r1
 8004f84:	71fb      	strb	r3, [r7, #7]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004f92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d123      	bne.n	8004fe2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004f9a:	88bb      	ldrh	r3, [r7, #4]
 8004f9c:	3303      	adds	r3, #3
 8004f9e:	089b      	lsrs	r3, r3, #2
 8004fa0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	e018      	b.n	8004fda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fa8:	79fb      	ldrb	r3, [r7, #7]
 8004faa:	031a      	lsls	r2, r3, #12
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	4413      	add	r3, r2
 8004fb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d3e2      	bcc.n	8004fa8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3724      	adds	r7, #36	; 0x24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b08b      	sub	sp, #44	; 0x2c
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	b29b      	uxth	r3, r3
 800500c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800500e:	88fb      	ldrh	r3, [r7, #6]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005016:	2300      	movs	r3, #0
 8005018:	623b      	str	r3, [r7, #32]
 800501a:	e014      	b.n	8005046 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	601a      	str	r2, [r3, #0]
    pDest++;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	3301      	adds	r3, #1
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	3301      	adds	r3, #1
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	3301      	adds	r3, #1
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	3301      	adds	r3, #1
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	3301      	adds	r3, #1
 8005044:	623b      	str	r3, [r7, #32]
 8005046:	6a3a      	ldr	r2, [r7, #32]
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	429a      	cmp	r2, r3
 800504c:	d3e6      	bcc.n	800501c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800504e:	8bfb      	ldrh	r3, [r7, #30]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01e      	beq.n	8005092 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505e:	461a      	mov	r2, r3
 8005060:	f107 0310 	add.w	r3, r7, #16
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	b2da      	uxtb	r2, r3
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	701a      	strb	r2, [r3, #0]
      i++;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	3301      	adds	r3, #1
 800507e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005082:	3301      	adds	r3, #1
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005086:	8bfb      	ldrh	r3, [r7, #30]
 8005088:	3b01      	subs	r3, #1
 800508a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800508c:	8bfb      	ldrh	r3, [r7, #30]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ea      	bne.n	8005068 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005094:	4618      	mov	r0, r3
 8005096:	372c      	adds	r7, #44	; 0x2c
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050b8:	68fb      	ldr	r3, [r7, #12]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0301 	and.w	r3, r3, #1
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	3301      	adds	r3, #1
 80050f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <USB_CoreReset+0x64>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e01b      	b.n	800513a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	2b00      	cmp	r3, #0
 8005108:	daf2      	bge.n	80050f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f043 0201 	orr.w	r2, r3, #1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <USB_CoreReset+0x64>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d901      	bls.n	800512c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e006      	b.n	800513a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b01      	cmp	r3, #1
 8005136:	d0f0      	beq.n	800511a <USB_CoreReset+0x36>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	00030d40 	.word	0x00030d40

0800514c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800514c:	b084      	sub	sp, #16
 800514e:	b580      	push	{r7, lr}
 8005150:	b086      	sub	sp, #24
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800515a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800516c:	461a      	mov	r2, r3
 800516e:	2300      	movs	r3, #0
 8005170:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d018      	beq.n	80051d4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80051a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10a      	bne.n	80051be <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051b6:	f043 0304 	orr.w	r3, r3, #4
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	e014      	b.n	80051e8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	e009      	b.n	80051e8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80051e2:	f023 0304 	bic.w	r3, r3, #4
 80051e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051e8:	2110      	movs	r1, #16
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7ff fe5e 	bl	8004eac <USB_FlushTxFifo>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7ff fe8a 	bl	8004f14 <USB_FlushRxFifo>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800520a:	2300      	movs	r3, #0
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	e015      	b.n	800523c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	461a      	mov	r2, r3
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	461a      	mov	r2, r3
 8005232:	2300      	movs	r3, #0
 8005234:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	3301      	adds	r3, #1
 800523a:	613b      	str	r3, [r7, #16]
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	429a      	cmp	r2, r3
 8005242:	d3e5      	bcc.n	8005210 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a13      	ldr	r2, [pc, #76]	; (80052b8 <USB_HostInit+0x16c>)
 800526a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <USB_HostInit+0x170>)
 8005270:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005274:	e009      	b.n	800528a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a10      	ldr	r2, [pc, #64]	; (80052c0 <USB_HostInit+0x174>)
 8005280:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <USB_HostInit+0x178>)
 8005286:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f043 0210 	orr.w	r2, r3, #16
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699a      	ldr	r2, [r3, #24]
 80052a0:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <USB_HostInit+0x17c>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80052a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b4:	b004      	add	sp, #16
 80052b6:	4770      	bx	lr
 80052b8:	01000200 	.word	0x01000200
 80052bc:	00e00300 	.word	0x00e00300
 80052c0:	00600080 	.word	0x00600080
 80052c4:	004000e0 	.word	0x004000e0
 80052c8:	a3200008 	.word	0xa3200008

080052cc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	78fb      	ldrb	r3, [r7, #3]
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005304:	4313      	orrs	r3, r2
 8005306:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d107      	bne.n	800531e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005314:	461a      	mov	r2, r3
 8005316:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800531a:	6053      	str	r3, [r2, #4]
 800531c:	e009      	b.n	8005332 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	2b02      	cmp	r3, #2
 8005322:	d106      	bne.n	8005332 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	461a      	mov	r2, r3
 800532c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005330:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005360:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800536a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005370:	2064      	movs	r0, #100	; 0x64
 8005372:	f7fc f9f9 	bl	8001768 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800537e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005382:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005384:	200a      	movs	r0, #10
 8005386:	f7fc f9ef 	bl	8001768 <HAL_Delay>

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80053a4:	2300      	movs	r3, #0
 80053a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <USB_DriveVbus+0x44>
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d106      	bne.n	80053d8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053d6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053e2:	d109      	bne.n	80053f8 <USB_DriveVbus+0x64>
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	0c5b      	lsrs	r3, r3, #17
 8005424:	f003 0303 	and.w	r3, r3, #3
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	b29b      	uxth	r3, r3
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	4608      	mov	r0, r1
 8005462:	4611      	mov	r1, r2
 8005464:	461a      	mov	r2, r3
 8005466:	4603      	mov	r3, r0
 8005468:	70fb      	strb	r3, [r7, #3]
 800546a:	460b      	mov	r3, r1
 800546c:	70bb      	strb	r3, [r7, #2]
 800546e:	4613      	mov	r3, r2
 8005470:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800547a:	78fb      	ldrb	r3, [r7, #3]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	4413      	add	r3, r2
 8005482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005486:	461a      	mov	r2, r3
 8005488:	f04f 33ff 	mov.w	r3, #4294967295
 800548c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800548e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005492:	2b03      	cmp	r3, #3
 8005494:	d87e      	bhi.n	8005594 <USB_HC_Init+0x13c>
 8005496:	a201      	add	r2, pc, #4	; (adr r2, 800549c <USB_HC_Init+0x44>)
 8005498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	08005557 	.word	0x08005557
 80054a4:	080054ad 	.word	0x080054ad
 80054a8:	08005519 	.word	0x08005519
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b8:	461a      	mov	r2, r3
 80054ba:	f240 439d 	movw	r3, #1181	; 0x49d
 80054be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80054c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	da10      	bge.n	80054ea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	78fa      	ldrb	r2, [r7, #3]
 80054d8:	0151      	lsls	r1, r2, #5
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	440a      	add	r2, r1
 80054de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80054e8:	e057      	b.n	800559a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d051      	beq.n	800559a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	78fa      	ldrb	r2, [r7, #3]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005510:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005514:	60d3      	str	r3, [r2, #12]
      break;
 8005516:	e040      	b.n	800559a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	461a      	mov	r2, r3
 8005526:	f240 639d 	movw	r3, #1693	; 0x69d
 800552a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800552c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005530:	2b00      	cmp	r3, #0
 8005532:	da34      	bge.n	800559e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	440a      	add	r2, r1
 800554a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005552:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005554:	e023      	b.n	800559e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	461a      	mov	r2, r3
 8005564:	f240 2325 	movw	r3, #549	; 0x225
 8005568:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800556a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800556e:	2b00      	cmp	r3, #0
 8005570:	da17      	bge.n	80055a2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	78fa      	ldrb	r2, [r7, #3]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	440a      	add	r2, r1
 8005588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800558c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005590:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005592:	e006      	b.n	80055a2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	77fb      	strb	r3, [r7, #31]
      break;
 8005598:	e004      	b.n	80055a4 <USB_HC_Init+0x14c>
      break;
 800559a:	bf00      	nop
 800559c:	e002      	b.n	80055a4 <USB_HC_Init+0x14c>
      break;
 800559e:	bf00      	nop
 80055a0:	e000      	b.n	80055a4 <USB_HC_Init+0x14c>
      break;
 80055a2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80055a4:	78fb      	ldrb	r3, [r7, #3]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	78fa      	ldrb	r2, [r7, #3]
 80055b4:	0151      	lsls	r1, r2, #5
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	440a      	add	r2, r1
 80055ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055be:	f043 0302 	orr.w	r3, r3, #2
 80055c2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	2101      	movs	r1, #1
 80055d4:	fa01 f303 	lsl.w	r3, r1, r3
 80055d8:	6939      	ldr	r1, [r7, #16]
 80055da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055de:	4313      	orrs	r3, r2
 80055e0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80055ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da03      	bge.n	80055fe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80055f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055fa:	61bb      	str	r3, [r7, #24]
 80055fc:	e001      	b.n	8005602 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff feff 	bl	8005406 <USB_GetHostSpeed>
 8005608:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800560a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800560e:	2b02      	cmp	r3, #2
 8005610:	d106      	bne.n	8005620 <USB_HC_Init+0x1c8>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d003      	beq.n	8005620 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800561c:	617b      	str	r3, [r7, #20]
 800561e:	e001      	b.n	8005624 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005624:	787b      	ldrb	r3, [r7, #1]
 8005626:	059b      	lsls	r3, r3, #22
 8005628:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800562c:	78bb      	ldrb	r3, [r7, #2]
 800562e:	02db      	lsls	r3, r3, #11
 8005630:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005634:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005636:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800563a:	049b      	lsls	r3, r3, #18
 800563c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005640:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005642:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005644:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005648:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800564e:	78fb      	ldrb	r3, [r7, #3]
 8005650:	0159      	lsls	r1, r3, #5
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	440b      	add	r3, r1
 8005656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005660:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005662:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005666:	2b03      	cmp	r3, #3
 8005668:	d003      	beq.n	8005672 <USB_HC_Init+0x21a>
 800566a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10f      	bne.n	8005692 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	78fa      	ldrb	r2, [r7, #3]
 8005682:	0151      	lsls	r1, r2, #5
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	440a      	add	r2, r1
 8005688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800568c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005690:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005692:	7ffb      	ldrb	r3, [r7, #31]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	; 0x30
 80056a0:	af02      	add	r7, sp, #8
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	785b      	ldrb	r3, [r3, #1]
 80056b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80056b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d02d      	beq.n	8005722 <USB_HC_StartXfer+0x86>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	791b      	ldrb	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d129      	bne.n	8005722 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d117      	bne.n	8005704 <USB_HC_StartXfer+0x68>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	79db      	ldrb	r3, [r3, #7]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <USB_HC_StartXfer+0x48>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	79db      	ldrb	r3, [r3, #7]
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d10f      	bne.n	8005704 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	6a3b      	ldr	r3, [r7, #32]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	69fa      	ldr	r2, [r7, #28]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	6a3a      	ldr	r2, [r7, #32]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005702:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005704:	79fb      	ldrb	r3, [r7, #7]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <USB_HC_StartXfer+0x86>
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	795b      	ldrb	r3, [r3, #5]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	4619      	mov	r1, r3
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fa0f 	bl	8005b3c <USB_DoPing>
      return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e0f8      	b.n	8005914 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d018      	beq.n	800575c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	8912      	ldrh	r2, [r2, #8]
 8005732:	4413      	add	r3, r2
 8005734:	3b01      	subs	r3, #1
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	8912      	ldrh	r2, [r2, #8]
 800573a:	fbb3 f3f2 	udiv	r3, r3, r2
 800573e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005740:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005742:	8b7b      	ldrh	r3, [r7, #26]
 8005744:	429a      	cmp	r2, r3
 8005746:	d90b      	bls.n	8005760 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005748:	8b7b      	ldrh	r3, [r7, #26]
 800574a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800574c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	8912      	ldrh	r2, [r2, #8]
 8005752:	fb03 f202 	mul.w	r2, r3, r2
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	611a      	str	r2, [r3, #16]
 800575a:	e001      	b.n	8005760 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800575c:	2301      	movs	r3, #1
 800575e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	78db      	ldrb	r3, [r3, #3]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005768:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	8912      	ldrh	r2, [r2, #8]
 800576e:	fb03 f202 	mul.w	r2, r3, r2
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	611a      	str	r2, [r3, #16]
 8005776:	e003      	b.n	8005780 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	695a      	ldr	r2, [r3, #20]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800578a:	04d9      	lsls	r1, r3, #19
 800578c:	4b63      	ldr	r3, [pc, #396]	; (800591c <USB_HC_StartXfer+0x280>)
 800578e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005790:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	7a9b      	ldrb	r3, [r3, #10]
 8005796:	075b      	lsls	r3, r3, #29
 8005798:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800579c:	69f9      	ldr	r1, [r7, #28]
 800579e:	0148      	lsls	r0, r1, #5
 80057a0:	6a39      	ldr	r1, [r7, #32]
 80057a2:	4401      	add	r1, r0
 80057a4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80057a8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80057aa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80057ac:	79fb      	ldrb	r3, [r7, #7]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	68d9      	ldr	r1, [r3, #12]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c2:	460a      	mov	r2, r1
 80057c4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	6a3a      	ldr	r2, [r7, #32]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80057fc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	7e7b      	ldrb	r3, [r7, #25]
 800580e:	075b      	lsls	r3, r3, #29
 8005810:	69f9      	ldr	r1, [r7, #28]
 8005812:	0148      	lsls	r0, r1, #5
 8005814:	6a39      	ldr	r1, [r7, #32]
 8005816:	4401      	add	r1, r0
 8005818:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005836:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	78db      	ldrb	r3, [r3, #3]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	e003      	b.n	8005852 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005850:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005858:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	4413      	add	r3, r2
 8005862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005866:	461a      	mov	r2, r3
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800586c:	79fb      	ldrb	r3, [r7, #7]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	e04e      	b.n	8005914 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	78db      	ldrb	r3, [r3, #3]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d149      	bne.n	8005912 <USB_HC_StartXfer+0x276>
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d045      	beq.n	8005912 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	79db      	ldrb	r3, [r3, #7]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d830      	bhi.n	80058f0 <USB_HC_StartXfer+0x254>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <USB_HC_StartXfer+0x1f8>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058c9 	.word	0x080058c9
 800589c:	080058a5 	.word	0x080058a5
 80058a0:	080058c9 	.word	0x080058c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	3303      	adds	r3, #3
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80058ae:	8afa      	ldrh	r2, [r7, #22]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d91c      	bls.n	80058f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80058c6:	e015      	b.n	80058f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	3303      	adds	r3, #3
 80058ce:	089b      	lsrs	r3, r3, #2
 80058d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80058d2:	8afa      	ldrh	r2, [r7, #22]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	429a      	cmp	r2, r3
 80058e0:	d90a      	bls.n	80058f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80058ee:	e003      	b.n	80058f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80058f0:	bf00      	nop
 80058f2:	e002      	b.n	80058fa <USB_HC_StartXfer+0x25e>
        break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <USB_HC_StartXfer+0x25e>
        break;
 80058f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	68d9      	ldr	r1, [r3, #12]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	785a      	ldrb	r2, [r3, #1]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	b29b      	uxth	r3, r3
 8005908:	2000      	movs	r0, #0
 800590a:	9000      	str	r0, [sp, #0]
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff fb31 	bl	8004f74 <USB_WritePacket>
  }

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3728      	adds	r7, #40	; 0x28
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	1ff80000 	.word	0x1ff80000

08005920 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	b29b      	uxth	r3, r3
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005942:	b480      	push	{r7}
 8005944:	b089      	sub	sp, #36	; 0x24
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	460b      	mov	r3, r1
 800594c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	0c9b      	lsrs	r3, r3, #18
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	0fdb      	lsrs	r3, r3, #31
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b20      	cmp	r3, #32
 8005990:	d104      	bne.n	800599c <USB_HC_Halt+0x5a>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e0c8      	b.n	8005b2e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <USB_HC_Halt+0x66>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b02      	cmp	r3, #2
 80059a6:	d163      	bne.n	8005a70 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0320 	and.w	r3, r3, #32
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f040 80ab 	bne.w	8005b2c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d133      	bne.n	8005a4a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a00:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a20:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2e:	d81d      	bhi.n	8005a6c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	015a      	lsls	r2, r3, #5
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a46:	d0ec      	beq.n	8005a22 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a48:	e070      	b.n	8005b2c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a68:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a6a:	e05f      	b.n	8005b2c <USB_HC_Halt+0x1ea>
            break;
 8005a6c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a6e:	e05d      	b.n	8005b2c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	69fa      	ldr	r2, [r7, #28]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d133      	bne.n	8005b08 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	0151      	lsls	r1, r2, #5
 8005ab2:	69fa      	ldr	r2, [r7, #28]
 8005ab4:	440a      	add	r2, r1
 8005ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005abe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	0151      	lsls	r1, r2, #5
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	440a      	add	r2, r1
 8005ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005aec:	d81d      	bhi.n	8005b2a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b04:	d0ec      	beq.n	8005ae0 <USB_HC_Halt+0x19e>
 8005b06:	e011      	b.n	8005b2c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e000      	b.n	8005b2c <USB_HC_Halt+0x1ea>
          break;
 8005b2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3724      	adds	r7, #36	; 0x24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005b50:	2301      	movs	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	04da      	lsls	r2, r3, #19
 8005b58:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <USB_DoPing+0x74>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	371c      	adds	r7, #28
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	1ff80000 	.word	0x1ff80000

08005bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff f911 	bl	8004df0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005bce:	2110      	movs	r1, #16
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff f96b 	bl	8004eac <USB_FlushTxFifo>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff f997 	bl	8004f14 <USB_FlushRxFifo>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	e01f      	b.n	8005c36 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c1c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	015a      	lsls	r2, r3, #5
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	4413      	add	r3, r2
 8005c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	3301      	adds	r3, #1
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	2b0f      	cmp	r3, #15
 8005c3a:	d9dc      	bls.n	8005bf6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e034      	b.n	8005cac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	015a      	lsls	r2, r3, #5
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4413      	add	r3, r2
 8005c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c58:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c60:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c68:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c76:	461a      	mov	r2, r3
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c88:	d80c      	bhi.n	8005ca4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca0:	d0ec      	beq.n	8005c7c <USB_StopHost+0xc8>
 8005ca2:	e000      	b.n	8005ca6 <USB_StopHost+0xf2>
        break;
 8005ca4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d9c7      	bls.n	8005c42 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f04f 33ff 	mov.w	r3, #4294967295
 8005cbe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff f880 	bl	8004dce <USB_EnableGlobalInt>

  return ret;
 8005cce:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005cd8:	b590      	push	{r4, r7, lr}
 8005cda:	b08b      	sub	sp, #44	; 0x2c
 8005cdc:	af04      	add	r7, sp, #16
 8005cde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cea:	7919      	ldrb	r1, [r3, #4]
 8005cec:	23ff      	movs	r3, #255	; 0xff
 8005cee:	2201      	movs	r2, #1
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 ff15 	bl	8006b20 <USBH_FindInterface>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005cfa:	7dbb      	ldrb	r3, [r7, #22]
 8005cfc:	2bff      	cmp	r3, #255	; 0xff
 8005cfe:	d002      	beq.n	8005d06 <USBH_HID_InterfaceInit+0x2e>
 8005d00:	7dbb      	ldrb	r3, [r7, #22]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d901      	bls.n	8005d0a <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d06:	2302      	movs	r3, #2
 8005d08:	e108      	b.n	8005f1c <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d0a:	7dbb      	ldrb	r3, [r7, #22]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 feea 	bl	8006ae8 <USBH_SelectInterface>
 8005d14:	4603      	mov	r3, r0
 8005d16:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8005d18:	7d7b      	ldrb	r3, [r7, #21]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d001      	beq.n	8005d22 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e0fc      	b.n	8005f1c <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005d28:	2034      	movs	r0, #52	; 0x34
 8005d2a:	f002 fd51 	bl	80087d0 <malloc>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8005d42:	2302      	movs	r3, #2
 8005d44:	e0ea      	b.n	8005f1c <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8005d46:	2234      	movs	r2, #52	; 0x34
 8005d48:	2100      	movs	r1, #0
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f002 fd50 	bl	80087f0 <memset>

  HID_Handle->state = HID_ERROR;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	2207      	movs	r2, #7
 8005d54:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8005d56:	7dbb      	ldrb	r3, [r7, #22]
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	211a      	movs	r1, #26
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	4413      	add	r3, r2
 8005d62:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d103      	bne.n	8005d74 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	4a6d      	ldr	r2, [pc, #436]	; (8005f24 <USBH_HID_InterfaceInit+0x24c>)
 8005d70:	631a      	str	r2, [r3, #48]	; 0x30
 8005d72:	e010      	b.n	8005d96 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8005d74:	7dbb      	ldrb	r3, [r7, #22]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	211a      	movs	r1, #26
 8005d7a:	fb01 f303 	mul.w	r3, r1, r3
 8005d7e:	4413      	add	r3, r2
 8005d80:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d103      	bne.n	8005d92 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4a66      	ldr	r2, [pc, #408]	; (8005f28 <USBH_HID_InterfaceInit+0x250>)
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8005d90:	e001      	b.n	8005d96 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8005d92:	2302      	movs	r3, #2
 8005d94:	e0c2      	b.n	8005f1c <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005da2:	7dbb      	ldrb	r3, [r7, #22]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	211a      	movs	r1, #26
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	4413      	add	r3, r2
 8005dae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005db8:	7dbb      	ldrb	r3, [r7, #22]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	211a      	movs	r1, #26
 8005dbe:	fb01 f303 	mul.w	r3, r1, r3
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005dc8:	881a      	ldrh	r2, [r3, #0]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005dce:	7dbb      	ldrb	r3, [r7, #22]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	211a      	movs	r1, #26
 8005dd4:	fb01 f303 	mul.w	r3, r1, r3
 8005dd8:	4413      	add	r3, r2
 8005dda:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	b29a      	uxth	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	8b9b      	ldrh	r3, [r3, #28]
 8005dea:	2b09      	cmp	r3, #9
 8005dec:	d802      	bhi.n	8005df4 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	220a      	movs	r2, #10
 8005df2:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8005df4:	7dbb      	ldrb	r3, [r7, #22]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	211a      	movs	r1, #26
 8005dfa:	fb01 f303 	mul.w	r3, r1, r3
 8005dfe:	4413      	add	r3, r2
 8005e00:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	bf28      	it	cs
 8005e0a:	2302      	movcs	r3, #2
 8005e0c:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75fb      	strb	r3, [r7, #23]
 8005e12:	e07d      	b.n	8005f10 <USBH_HID_InterfaceInit+0x238>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8005e14:	7dbb      	ldrb	r3, [r7, #22]
 8005e16:	7df9      	ldrb	r1, [r7, #23]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	3101      	adds	r1, #1
 8005e1c:	00c9      	lsls	r1, r1, #3
 8005e1e:	201a      	movs	r0, #26
 8005e20:	fb00 f303 	mul.w	r3, r0, r3
 8005e24:	440b      	add	r3, r1
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b25b      	sxtb	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	da35      	bge.n	8005ea0 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005e34:	7dbb      	ldrb	r3, [r7, #22]
 8005e36:	7df9      	ldrb	r1, [r7, #23]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	3101      	adds	r1, #1
 8005e3c:	00c9      	lsls	r1, r1, #3
 8005e3e:	201a      	movs	r0, #26
 8005e40:	fb00 f303 	mul.w	r3, r0, r3
 8005e44:	440b      	add	r3, r1
 8005e46:	4413      	add	r3, r2
 8005e48:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	791b      	ldrb	r3, [r3, #4]
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f002 f958 	bl	800810e <USBH_AllocPipe>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	7859      	ldrb	r1, [r3, #1]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	7918      	ldrb	r0, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	8b12      	ldrh	r2, [r2, #24]
 8005e7e:	9202      	str	r2, [sp, #8]
 8005e80:	2203      	movs	r2, #3
 8005e82:	9201      	str	r2, [sp, #4]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	4623      	mov	r3, r4
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f002 f910 	bl	80080b0 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2200      	movs	r2, #0
 8005e96:	4619      	mov	r1, r3
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f002 fc08 	bl	80086ae <USBH_LL_SetToggle>
 8005e9e:	e034      	b.n	8005f0a <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8005ea0:	7dbb      	ldrb	r3, [r7, #22]
 8005ea2:	7df9      	ldrb	r1, [r7, #23]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	3101      	adds	r1, #1
 8005ea8:	00c9      	lsls	r1, r1, #3
 8005eaa:	201a      	movs	r0, #26
 8005eac:	fb00 f303 	mul.w	r3, r0, r3
 8005eb0:	440b      	add	r3, r1
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8005eb8:	781a      	ldrb	r2, [r3, #0]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	78db      	ldrb	r3, [r3, #3]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 f922 	bl	800810e <USBH_AllocPipe>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	7819      	ldrb	r1, [r3, #0]
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	78d8      	ldrb	r0, [r3, #3]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	8b12      	ldrh	r2, [r2, #24]
 8005eea:	9202      	str	r2, [sp, #8]
 8005eec:	2203      	movs	r2, #3
 8005eee:	9201      	str	r2, [sp, #4]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f002 f8da 	bl	80080b0 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	2200      	movs	r2, #0
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f002 fbd2 	bl	80086ae <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8005f0a:	7dfb      	ldrb	r3, [r7, #23]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	75fb      	strb	r3, [r7, #23]
 8005f10:	7dfa      	ldrb	r2, [r7, #23]
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	f4ff af7d 	bcc.w	8005e14 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd90      	pop	{r4, r7, pc}
 8005f24:	08006629 	.word	0x08006629
 8005f28:	080066d1 	.word	0x080066d1

08005f2c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	785b      	ldrb	r3, [r3, #1]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00e      	beq.n	8005f64 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f002 f8ce 	bl	80080ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	4619      	mov	r1, r3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f002 f8f9 	bl	8008150 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00e      	beq.n	8005f8a <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f002 f8bb 	bl	80080ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f002 f8e6 	bl	8008150 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00b      	beq.n	8005fae <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f002 fc1e 	bl	80087e0 <free>
    phost->pActiveClass->pData = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005faa:	2200      	movs	r2, #0
 8005fac:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	795b      	ldrb	r3, [r3, #5]
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	d860      	bhi.n	800609c <USBH_HID_ClassRequest+0xe4>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <USBH_HID_ClassRequest+0x28>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08005ff9 	.word	0x08005ff9
 8005fe4:	0800609d 	.word	0x0800609d
 8005fe8:	08006013 	.word	0x08006013
 8005fec:	08005ff9 	.word	0x08005ff9
 8005ff0:	0800603d 	.word	0x0800603d
 8005ff4:	08006067 	.word	0x08006067
  {
    case HID_REQ_INIT:
    case HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	331c      	adds	r3, #28
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f000 f9cd 	bl	80063a4 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2202      	movs	r2, #2
 800600e:	715a      	strb	r2, [r3, #5]

      break;
 8006010:	e04b      	b.n	80060aa <USBH_HID_ClassRequest+0xf2>
    case HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 f930 	bl	800627e <USBH_HID_GetHIDReportDescriptor>
 800601e:	4603      	mov	r3, r0
 8006020:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d103      	bne.n	8006030 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2204      	movs	r2, #4
 800602c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800602e:	e037      	b.n	80060a0 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b03      	cmp	r3, #3
 8006034:	d134      	bne.n	80060a0 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8006036:	2302      	movs	r3, #2
 8006038:	73fb      	strb	r3, [r7, #15]
      break;
 800603a:	e031      	b.n	80060a0 <USBH_HID_ClassRequest+0xe8>

    case HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800603c:	2200      	movs	r2, #0
 800603e:	2100      	movs	r1, #0
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f935 	bl	80062b0 <USBH_HID_SetIdle>
 8006046:	4603      	mov	r3, r0
 8006048:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2205      	movs	r2, #5
 8006054:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8006056:	e025      	b.n	80060a4 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8006058:	7bbb      	ldrb	r3, [r7, #14]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d122      	bne.n	80060a4 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2205      	movs	r2, #5
 8006062:	715a      	strb	r2, [r3, #5]
      break;
 8006064:	e01e      	b.n	80060a4 <USBH_HID_ClassRequest+0xec>

    case HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8006066:	2100      	movs	r1, #0
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f975 	bl	8006358 <USBH_HID_SetProtocol>
 800606e:	4603      	mov	r3, r0
 8006070:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d10b      	bne.n	8006090 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = HID_REQ_IDLE;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2201      	movs	r2, #1
 800607c:	715a      	strb	r2, [r3, #5]

        /* all requests performed*/
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006084:	2102      	movs	r1, #2
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	4798      	blx	r3
        status = USBH_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800608e:	e00b      	b.n	80060a8 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8006090:	7bbb      	ldrb	r3, [r7, #14]
 8006092:	2b03      	cmp	r3, #3
 8006094:	d108      	bne.n	80060a8 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8006096:	2302      	movs	r3, #2
 8006098:	73fb      	strb	r3, [r7, #15]
      break;
 800609a:	e005      	b.n	80060a8 <USBH_HID_ClassRequest+0xf0>

    case HID_REQ_IDLE:
    default:
      break;
 800609c:	bf00      	nop
 800609e:	e004      	b.n	80060aa <USBH_HID_ClassRequest+0xf2>
      break;
 80060a0:	bf00      	nop
 80060a2:	e002      	b.n	80060aa <USBH_HID_ClassRequest+0xf2>
      break;
 80060a4:	bf00      	nop
 80060a6:	e000      	b.n	80060aa <USBH_HID_ClassRequest+0xf2>
      break;
 80060a8:	bf00      	nop
  }

  return status;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b088      	sub	sp, #32
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	789b      	ldrb	r3, [r3, #2]
 80060ce:	2b06      	cmp	r3, #6
 80060d0:	f200 80a9 	bhi.w	8006226 <USBH_HID_Process+0x172>
 80060d4:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <USBH_HID_Process+0x28>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	080060f9 	.word	0x080060f9
 80060e0:	08006109 	.word	0x08006109
 80060e4:	08006227 	.word	0x08006227
 80060e8:	08006227 	.word	0x08006227
 80060ec:	08006179 	.word	0x08006179
 80060f0:	08006163 	.word	0x08006163
 80060f4:	080061a7 	.word	0x080061a7
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2201      	movs	r2, #1
 8006104:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006106:	e093      	b.n	8006230 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	695a      	ldr	r2, [r3, #20]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	8b1b      	ldrh	r3, [r3, #24]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	4613      	mov	r3, r2
 8006116:	2200      	movs	r2, #0
 8006118:	2101      	movs	r1, #1
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8f0 	bl	8006300 <USBH_HID_GetReport>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d103      	bne.n	8006132 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2205      	movs	r2, #5
 800612e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006130:	e07e      	b.n	8006230 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d105      	bne.n	8006144 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2201      	movs	r2, #1
 800613c:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	e075      	b.n	8006230 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8006144:	7dfb      	ldrb	r3, [r7, #23]
 8006146:	2b03      	cmp	r3, #3
 8006148:	d105      	bne.n	8006156 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2205      	movs	r2, #5
 800614e:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8006150:	2300      	movs	r3, #0
 8006152:	75fb      	strb	r3, [r7, #23]
      break;
 8006154:	e06c      	b.n	8006230 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	2207      	movs	r2, #7
 800615a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800615c:	2302      	movs	r3, #2
 800615e:	75fb      	strb	r3, [r7, #23]
      break;
 8006160:	e066      	b.n	8006230 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d05c      	beq.n	800622a <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2204      	movs	r2, #4
 8006174:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006176:	e058      	b.n	800622a <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8006180:	b2da      	uxtb	r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f001 ff73 	bl	8008072 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2206      	movs	r2, #6
 8006190:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 80061a4:	e044      	b.n	8006230 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	4619      	mov	r1, r3
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f002 fa5d 	bl	800866c <USBH_LL_GetURBState>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d120      	bne.n	80061fa <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	785b      	ldrb	r3, [r3, #1]
 80061bc:	4619      	mov	r1, r3
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f002 f9c2 	bl	8008548 <USBH_LL_GetLastXferSize>
 80061c4:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d12e      	bne.n	800622e <USBH_HID_Process+0x17a>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d02b      	beq.n	800622e <USBH_HID_Process+0x17a>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f103 0008 	add.w	r0, r3, #8
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6959      	ldr	r1, [r3, #20]
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	8b1b      	ldrh	r3, [r3, #24]
 80061e4:	461a      	mov	r2, r3
 80061e6:	f000 f9ca 	bl	800657e <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7fb f830 	bl	8001258 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 80061f8:	e019      	b.n	800622e <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	785b      	ldrb	r3, [r3, #1]
 80061fe:	4619      	mov	r1, r3
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f002 fa33 	bl	800866c <USBH_LL_GetURBState>
 8006206:	4603      	mov	r3, r0
 8006208:	2b05      	cmp	r3, #5
 800620a:	d110      	bne.n	800622e <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	7e9b      	ldrb	r3, [r3, #26]
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fa51 	bl	80076ba <USBH_ClrFeature>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d107      	bne.n	800622e <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	2204      	movs	r2, #4
 8006222:	709a      	strb	r2, [r3, #2]
      break;
 8006224:	e003      	b.n	800622e <USBH_HID_Process+0x17a>

    default:
      break;
 8006226:	bf00      	nop
 8006228:	e002      	b.n	8006230 <USBH_HID_Process+0x17c>
      break;
 800622a:	bf00      	nop
 800622c:	e000      	b.n	8006230 <USBH_HID_Process+0x17c>
      break;
 800622e:	bf00      	nop
  }

  return status;
 8006230:	7dfb      	ldrb	r3, [r7, #23]
}
 8006232:	4618      	mov	r0, r3
 8006234:	3718      	adds	r7, #24
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop

0800623c <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	789b      	ldrb	r3, [r3, #2]
 8006252:	2b06      	cmp	r3, #6
 8006254:	d10c      	bne.n	8006270 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	8b92      	ldrh	r2, [r2, #28]
 8006266:	4293      	cmp	r3, r2
 8006268:	d302      	bcc.n	8006270 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2204      	movs	r2, #4
 800626e:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b086      	sub	sp, #24
 8006282:	af02      	add	r7, sp, #8
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	4613      	mov	r3, r2
 8006296:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800629a:	2101      	movs	r1, #1
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f001 f96c 	bl	800757a <USBH_GetDescriptor>
 80062a2:	4603      	mov	r3, r0
 80062a4:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
 80062bc:	4613      	mov	r3, r2
 80062be:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2221      	movs	r2, #33	; 0x21
 80062c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	220a      	movs	r2, #10
 80062ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80062cc:	78fb      	ldrb	r3, [r7, #3]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	78bb      	ldrb	r3, [r7, #2]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4313      	orrs	r3, r2
 80062da:	b29a      	uxth	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80062ec:	2200      	movs	r2, #0
 80062ee:	2100      	movs	r1, #0
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fcaf 	bl	8007c54 <USBH_CtlReq>
 80062f6:	4603      	mov	r3, r0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	607b      	str	r3, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	72fb      	strb	r3, [r7, #11]
 800630e:	4613      	mov	r3, r2
 8006310:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	22a1      	movs	r2, #161	; 0xa1
 8006316:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800631e:	7afb      	ldrb	r3, [r7, #11]
 8006320:	b29b      	uxth	r3, r3
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	b29a      	uxth	r2, r3
 8006326:	7abb      	ldrb	r3, [r7, #10]
 8006328:	b29b      	uxth	r3, r3
 800632a:	4313      	orrs	r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8006338:	7e3b      	ldrb	r3, [r7, #24]
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8006340:	7e3b      	ldrb	r3, [r7, #24]
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f001 fc83 	bl	8007c54 <USBH_CtlReq>
 800634e:	4603      	mov	r3, r0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2221      	movs	r2, #33	; 0x21
 8006368:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	220b      	movs	r2, #11
 800636e:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8006370:	78fb      	ldrb	r3, [r7, #3]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	825a      	strh	r2, [r3, #18]
 800637c:	e002      	b.n	8006384 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 fc5d 	bl	8007c54 <USBH_CtlReq>
 800639a:	4603      	mov	r3, r0

}
 800639c:	4618      	mov	r0, r3
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	3302      	adds	r3, #2
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	3303      	adds	r3, #3
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	021b      	lsls	r3, r3, #8
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80063ca:	897b      	ldrh	r3, [r7, #10]
 80063cc:	2b09      	cmp	r3, #9
 80063ce:	d943      	bls.n	8006458 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 80063d0:	2309      	movs	r3, #9
 80063d2:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80063d4:	e03c      	b.n	8006450 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063d6:	f107 0308 	add.w	r3, r7, #8
 80063da:	4619      	mov	r1, r3
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f001 fc1e 	bl	8007c1e <USBH_GetNextDesc>
 80063e2:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	785b      	ldrb	r3, [r3, #1]
 80063e8:	2b21      	cmp	r3, #33	; 0x21
 80063ea:	d131      	bne.n	8006450 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	781a      	ldrb	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	785a      	ldrb	r2, [r3, #1]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3302      	adds	r3, #2
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3303      	adds	r3, #3
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	b29b      	uxth	r3, r3
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	b29b      	uxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	791a      	ldrb	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	795a      	ldrb	r2, [r3, #5]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	799a      	ldrb	r2, [r3, #6]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	3307      	adds	r3, #7
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	b29a      	uxth	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3308      	adds	r3, #8
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	b29b      	uxth	r3, r3
 8006444:	4313      	orrs	r3, r2
 8006446:	b29a      	uxth	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	811a      	strh	r2, [r3, #8]
        break;
 800644c:	bf00      	nop
      }
    }
  }
}
 800644e:	e003      	b.n	8006458 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8006450:	893b      	ldrh	r3, [r7, #8]
 8006452:	897a      	ldrh	r2, [r7, #10]
 8006454:	429a      	cmp	r2, r3
 8006456:	d8be      	bhi.n	80063d6 <USBH_HID_ParseHIDDesc+0x32>
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8006468:	23ff      	movs	r3, #255	; 0xff
 800646a:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b0b      	cmp	r3, #11
 8006474:	d117      	bne.n	80064a6 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 800647c:	4619      	mov	r1, r3
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	231a      	movs	r3, #26
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	f203 3349 	addw	r3, r3, #841	; 0x349
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d102      	bne.n	800649c <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8006496:	2302      	movs	r3, #2
 8006498:	73fb      	strb	r3, [r7, #15]
 800649a:	e004      	b.n	80064a6 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d101      	bne.n	80064a6 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 80064a2:	2301      	movs	r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	601a      	str	r2, [r3, #0]
}
 80064e0:	bf00      	nop
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	7a9b      	ldrb	r3, [r3, #10]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d131      	bne.n	800656a <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2201      	movs	r2, #1
 800650a:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800650c:	2300      	movs	r3, #0
 800650e:	82fb      	strh	r3, [r7, #22]
 8006510:	e027      	b.n	8006562 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	88da      	ldrh	r2, [r3, #6]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	889b      	ldrh	r3, [r3, #4]
 800651a:	429a      	cmp	r2, r3
 800651c:	d019      	beq.n	8006552 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	88d2      	ldrh	r2, [r2, #6]
 8006526:	441a      	add	r2, r3
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1c59      	adds	r1, r3, #1
 800652c:	6139      	str	r1, [r7, #16]
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	3301      	adds	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88da      	ldrh	r2, [r3, #6]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	891b      	ldrh	r3, [r3, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	d108      	bne.n	800655c <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	80da      	strh	r2, [r3, #6]
 8006550:	e004      	b.n	800655c <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	729a      	strb	r2, [r3, #10]
        return i;
 8006558:	8afb      	ldrh	r3, [r7, #22]
 800655a:	e00a      	b.n	8006572 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 800655c:	8afb      	ldrh	r3, [r7, #22]
 800655e:	3301      	adds	r3, #1
 8006560:	82fb      	strh	r3, [r7, #22]
 8006562:	8afa      	ldrh	r2, [r7, #22]
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	429a      	cmp	r2, r3
 8006568:	d3d3      	bcc.n	8006512 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006570:	88fb      	ldrh	r3, [r7, #6]
}
 8006572:	4618      	mov	r0, r3
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800657e:	b480      	push	{r7}
 8006580:	b087      	sub	sp, #28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
 8006586:	60b9      	str	r1, [r7, #8]
 8006588:	4613      	mov	r3, r2
 800658a:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	7a9b      	ldrb	r3, [r3, #10]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d13c      	bne.n	8006612 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	82fb      	strh	r3, [r7, #22]
 80065a2:	e032      	b.n	800660a <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	889b      	ldrh	r3, [r3, #4]
 80065a8:	3301      	adds	r3, #1
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	88d2      	ldrh	r2, [r2, #6]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00a      	beq.n	80065c8 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	889b      	ldrh	r3, [r3, #4]
 80065b6:	3301      	adds	r3, #1
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 80065bc:	4293      	cmp	r3, r2
 80065be:	d108      	bne.n	80065d2 <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	88db      	ldrh	r3, [r3, #6]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d104      	bne.n	80065d2 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	729a      	strb	r2, [r3, #10]
        return i;
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	e023      	b.n	800661a <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	613a      	str	r2, [r7, #16]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	68f9      	ldr	r1, [r7, #12]
 80065de:	8889      	ldrh	r1, [r1, #4]
 80065e0:	440a      	add	r2, r1
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	7013      	strb	r3, [r2, #0]
        f->head++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	889b      	ldrh	r3, [r3, #4]
 80065ea:	3301      	adds	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	889a      	ldrh	r2, [r3, #4]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	891b      	ldrh	r3, [r3, #8]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d102      	bne.n	8006604 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8006604:	8afb      	ldrh	r3, [r7, #22]
 8006606:	3301      	adds	r3, #1
 8006608:	82fb      	strh	r3, [r7, #22]
 800660a:	8afa      	ldrh	r2, [r7, #22]
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	429a      	cmp	r2, r3
 8006610:	d3c8      	bcc.n	80065a4 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8006618:	88fb      	ldrh	r3, [r7, #6]
}
 800661a:	4618      	mov	r0, r3
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
	...

08006628 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800663a:	4b22      	ldr	r3, [pc, #136]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 800663c:	2200      	movs	r2, #0
 800663e:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 8006640:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 8006642:	2200      	movs	r2, #0
 8006644:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8006646:	4b1f      	ldr	r3, [pc, #124]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 8006648:	2200      	movs	r2, #0
 800664a:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 800664e:	2200      	movs	r2, #0
 8006650:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 8006654:	2200      	movs	r2, #0
 8006656:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8006658:	4b1a      	ldr	r3, [pc, #104]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 800665a:	2200      	movs	r2, #0
 800665c:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800665e:	4b19      	ldr	r3, [pc, #100]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 8006660:	2200      	movs	r2, #0
 8006662:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8006664:	4b17      	ldr	r3, [pc, #92]	; (80066c4 <USBH_HID_KeybdInit+0x9c>)
 8006666:	2200      	movs	r2, #0
 8006668:	721a      	strb	r2, [r3, #8]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e00c      	b.n	800668a <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 8006670:	4a15      	ldr	r2, [pc, #84]	; (80066c8 <USBH_HID_KeybdInit+0xa0>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2100      	movs	r1, #0
 8006676:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800667a:	4a14      	ldr	r2, [pc, #80]	; (80066cc <USBH_HID_KeybdInit+0xa4>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2100      	movs	r1, #0
 8006680:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d9ef      	bls.n	8006670 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	8b1b      	ldrh	r3, [r3, #24]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d902      	bls.n	800669e <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2208      	movs	r2, #8
 800669c:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	4a0a      	ldr	r2, [pc, #40]	; (80066cc <USBH_HID_KeybdInit+0xa4>)
 80066a2:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f103 0008 	add.w	r0, r3, #8
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066b0:	2250      	movs	r2, #80	; 0x50
 80066b2:	4619      	mov	r1, r3
 80066b4:	f7ff fefe 	bl	80064b4 <USBH_HID_FifoInit>

  return USBH_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000200 	.word	0x20000200
 80066c8:	20000218 	.word	0x20000218
 80066cc:	20000210 	.word	0x20000210

080066d0 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80066e2:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <USBH_HID_MouseInit+0x88>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80066e8:	4b1b      	ldr	r3, [pc, #108]	; (8006758 <USBH_HID_MouseInit+0x88>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80066ee:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <USBH_HID_MouseInit+0x88>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <USBH_HID_MouseInit+0x88>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80066fa:	4b17      	ldr	r3, [pc, #92]	; (8006758 <USBH_HID_MouseInit+0x88>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8006700:	2300      	movs	r3, #0
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	e00c      	b.n	8006720 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8006706:	4a15      	ldr	r2, [pc, #84]	; (800675c <USBH_HID_MouseInit+0x8c>)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2100      	movs	r1, #0
 800670c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <USBH_HID_MouseInit+0x90>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2100      	movs	r1, #0
 8006716:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	3301      	adds	r3, #1
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d9ef      	bls.n	8006706 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	8b1b      	ldrh	r3, [r3, #24]
 800672a:	2b08      	cmp	r3, #8
 800672c:	d902      	bls.n	8006734 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2208      	movs	r2, #8
 8006732:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4a0a      	ldr	r2, [pc, #40]	; (8006760 <USBH_HID_MouseInit+0x90>)
 8006738:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f103 0008 	add.w	r0, r3, #8
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006746:	2250      	movs	r2, #80	; 0x50
 8006748:	4619      	mov	r1, r3
 800674a:	f7ff feb3 	bl	80064b4 <USBH_HID_FifoInit>

  return USBH_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	20000220 	.word	0x20000220
 800675c:	20000228 	.word	0x20000228
 8006760:	20000230 	.word	0x20000230

08006764 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 f80d 	bl	800678c <USBH_HID_MouseDecode>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8006778:	4b03      	ldr	r3, [pc, #12]	; (8006788 <USBH_HID_GetMouseInfo+0x24>)
 800677a:	e000      	b.n	800677e <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 800677c:	2300      	movs	r3, #0
  }
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000220 	.word	0x20000220

0800678c <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8b1b      	ldrh	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 80067a6:	2302      	movs	r3, #2
 80067a8:	e039      	b.n	800681e <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f103 0008 	add.w	r0, r3, #8
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	8b1b      	ldrh	r3, [r3, #24]
 80067b4:	461a      	mov	r2, r3
 80067b6:	491c      	ldr	r1, [pc, #112]	; (8006828 <USBH_HID_MouseDecode+0x9c>)
 80067b8:	f7ff fe98 	bl	80064ec <USBH_HID_FifoRead>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	8b1b      	ldrh	r3, [r3, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d129      	bne.n	800681c <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 80067c8:	2100      	movs	r1, #0
 80067ca:	4818      	ldr	r0, [pc, #96]	; (800682c <USBH_HID_MouseDecode+0xa0>)
 80067cc:	f000 f83a 	bl	8006844 <HID_ReadItem>
 80067d0:	4603      	mov	r3, r0
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	4b16      	ldr	r3, [pc, #88]	; (8006830 <USBH_HID_MouseDecode+0xa4>)
 80067d6:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 80067d8:	2100      	movs	r1, #0
 80067da:	4816      	ldr	r0, [pc, #88]	; (8006834 <USBH_HID_MouseDecode+0xa8>)
 80067dc:	f000 f832 	bl	8006844 <HID_ReadItem>
 80067e0:	4603      	mov	r3, r0
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	4b12      	ldr	r3, [pc, #72]	; (8006830 <USBH_HID_MouseDecode+0xa4>)
 80067e6:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 80067e8:	2100      	movs	r1, #0
 80067ea:	4813      	ldr	r0, [pc, #76]	; (8006838 <USBH_HID_MouseDecode+0xac>)
 80067ec:	f000 f82a 	bl	8006844 <HID_ReadItem>
 80067f0:	4603      	mov	r3, r0
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <USBH_HID_MouseDecode+0xa4>)
 80067f6:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 80067f8:	2100      	movs	r1, #0
 80067fa:	4810      	ldr	r0, [pc, #64]	; (800683c <USBH_HID_MouseDecode+0xb0>)
 80067fc:	f000 f822 	bl	8006844 <HID_ReadItem>
 8006800:	4603      	mov	r3, r0
 8006802:	b2da      	uxtb	r2, r3
 8006804:	4b0a      	ldr	r3, [pc, #40]	; (8006830 <USBH_HID_MouseDecode+0xa4>)
 8006806:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8006808:	2100      	movs	r1, #0
 800680a:	480d      	ldr	r0, [pc, #52]	; (8006840 <USBH_HID_MouseDecode+0xb4>)
 800680c:	f000 f81a 	bl	8006844 <HID_ReadItem>
 8006810:	4603      	mov	r3, r0
 8006812:	b2da      	uxtb	r2, r3
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <USBH_HID_MouseDecode+0xa4>)
 8006816:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	e000      	b.n	800681e <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 800681c:	2302      	movs	r3, #2
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000228 	.word	0x20000228
 800682c:	0802ea10 	.word	0x0802ea10
 8006830:	20000220 	.word	0x20000220
 8006834:	0802ea30 	.word	0x0802ea30
 8006838:	0802e9b0 	.word	0x0802e9b0
 800683c:	0802e9d0 	.word	0x0802e9d0
 8006840:	0802e9f0 	.word	0x0802e9f0

08006844 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
  * @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8006844:	b480      	push	{r7}
 8006846:	b089      	sub	sp, #36	; 0x24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	460b      	mov	r3, r1
 800684e:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7a1b      	ldrb	r3, [r3, #8]
 8006862:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	7a5b      	ldrb	r3, [r3, #9]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7a5b      	ldrb	r3, [r3, #9]
 8006870:	78fa      	ldrb	r2, [r7, #3]
 8006872:	429a      	cmp	r2, r3
 8006874:	d301      	bcc.n	800687a <HID_ReadItem+0x36>
    {
      return (0U);
 8006876:	2300      	movs	r3, #0
 8006878:	e078      	b.n	800696c <HID_ReadItem+0x128>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6852      	ldr	r2, [r2, #4]
 8006880:	fb02 f303 	mul.w	r3, r2, r3
 8006884:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 8006886:	7cfb      	ldrb	r3, [r7, #19]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	08db      	lsrs	r3, r3, #3
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	4413      	add	r3, r2
 8006896:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	b2db      	uxtb	r3, r3
 800689c:	f003 0307 	and.w	r3, r3, #7
 80068a0:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e00a      	b.n	80068be <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	461a      	mov	r2, r3
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < (((ri->size & 0x7U) != 0U) ? ((ri->size / 8U) + 1U) : (ri->size / 8U)); x++)
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	3301      	adds	r3, #1
 80068bc:	61bb      	str	r3, [r7, #24]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d004      	beq.n	80068d4 <HID_ReadItem+0x90>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	08db      	lsrs	r3, r3, #3
 80068d0:	3301      	adds	r3, #1
 80068d2:	e002      	b.n	80068da <HID_ReadItem+0x96>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	08db      	lsrs	r3, r3, #3
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	4293      	cmp	r3, r2
 80068de:	d8e3      	bhi.n	80068a8 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & (((uint32_t)1U << ri->size) - 1U);
 80068e0:	7cfb      	ldrb	r3, [r7, #19]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	40da      	lsrs	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f04f 31ff 	mov.w	r1, #4294967295
 80068ee:	fa01 f303 	lsl.w	r3, r1, r3
 80068f2:	43db      	mvns	r3, r3
 80068f4:	4013      	ands	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]

  if ((val < ri->logical_min) || (val > ri->logical_max))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d304      	bcc.n	800690c <HID_ReadItem+0xc8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	429a      	cmp	r2, r3
 800690a:	d901      	bls.n	8006910 <HID_ReadItem+0xcc>
  {
    return (0U);
 800690c:	2300      	movs	r3, #0
 800690e:	e02d      	b.n	800696c <HID_ReadItem+0x128>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign != 0U) && ((val & ((uint32_t)1U << (ri->size - 1U))) != 0U))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	7a9b      	ldrb	r3, [r3, #10]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01e      	beq.n	8006956 <HID_ReadItem+0x112>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	3b01      	subs	r3, #1
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b00      	cmp	r3, #0
 800692a:	d014      	beq.n	8006956 <HID_ReadItem+0x112>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	fa02 f303 	lsl.w	r3, r2, r3
 8006936:	425b      	negs	r3, r3
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	4313      	orrs	r3, r2
 800693c:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69db      	ldr	r3, [r3, #28]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HID_ReadItem+0x106>
    {
      return ((uint32_t)vs);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	e010      	b.n	800696c <HID_ReadItem+0x128>
    }
    return ((uint32_t)(vs * ri->resolution));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69db      	ldr	r3, [r3, #28]
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	e00a      	b.n	800696c <HID_ReadItem+0x128>
  }
  else
  {
    if (ri->resolution == 1U)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HID_ReadItem+0x11e>
    {
      return (val);
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	e004      	b.n	800696c <HID_ReadItem+0x128>
    }
    return (val * ri->resolution);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	69fa      	ldr	r2, [r7, #28]
 8006968:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	3724      	adds	r7, #36	; 0x24
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	4613      	mov	r3, r2
 8006984:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d101      	bne.n	8006990 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800698c:	2302      	movs	r3, #2
 800698e:	e029      	b.n	80069e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	79fa      	ldrb	r2, [r7, #7]
 8006994:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f81f 	bl	80069ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f001 fcff 	bl	80083e0 <USBH_LL_Init>

  return USBH_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e009      	b.n	8006a12 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	33e0      	adds	r3, #224	; 0xe0
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	2200      	movs	r2, #0
 8006a0a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b0f      	cmp	r3, #15
 8006a16:	d9f2      	bls.n	80069fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
 8006a1c:	e009      	b.n	8006a32 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a38:	d3f1      	bcc.n	8006a1e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2240      	movs	r2, #64	; 0x40
 8006a5e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d016      	beq.n	8006ad6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10e      	bne.n	8006ad0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006ab8:	1c59      	adds	r1, r3, #1
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	33de      	adds	r3, #222	; 0xde
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
 8006ace:	e004      	b.n	8006ada <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	73fb      	strb	r3, [r7, #15]
 8006ad4:	e001      	b.n	8006ada <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8006afe:	78fa      	ldrb	r2, [r7, #3]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d204      	bcs.n	8006b0e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	78fa      	ldrb	r2, [r7, #3]
 8006b08:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006b0c:	e001      	b.n	8006b12 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	70fb      	strb	r3, [r7, #3]
 8006b32:	460b      	mov	r3, r1
 8006b34:	70bb      	strb	r3, [r7, #2]
 8006b36:	4613      	mov	r3, r2
 8006b38:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006b48:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b4a:	e025      	b.n	8006b98 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	221a      	movs	r2, #26
 8006b50:	fb02 f303 	mul.w	r3, r2, r3
 8006b54:	3308      	adds	r3, #8
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3302      	adds	r3, #2
 8006b5c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	795b      	ldrb	r3, [r3, #5]
 8006b62:	78fa      	ldrb	r2, [r7, #3]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d002      	beq.n	8006b6e <USBH_FindInterface+0x4e>
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	2bff      	cmp	r3, #255	; 0xff
 8006b6c:	d111      	bne.n	8006b92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b72:	78ba      	ldrb	r2, [r7, #2]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d002      	beq.n	8006b7e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b78:	78bb      	ldrb	r3, [r7, #2]
 8006b7a:	2bff      	cmp	r3, #255	; 0xff
 8006b7c:	d109      	bne.n	8006b92 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b82:	787a      	ldrb	r2, [r7, #1]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d002      	beq.n	8006b8e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b88:	787b      	ldrb	r3, [r7, #1]
 8006b8a:	2bff      	cmp	r3, #255	; 0xff
 8006b8c:	d101      	bne.n	8006b92 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	e006      	b.n	8006ba0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	3301      	adds	r3, #1
 8006b96:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b98:	7dfb      	ldrb	r3, [r7, #23]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d9d6      	bls.n	8006b4c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b9e:	23ff      	movs	r3, #255	; 0xff
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fc4f 	bl	8008458 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006bba:	2101      	movs	r1, #1
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 fd68 	bl	8008692 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af04      	add	r7, sp, #16
 8006bd2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d102      	bne.n	8006bee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2203      	movs	r2, #3
 8006bec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b0b      	cmp	r3, #11
 8006bf6:	f200 81be 	bhi.w	8006f76 <USBH_Process+0x3aa>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <USBH_Process+0x34>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c31 	.word	0x08006c31
 8006c04:	08006c63 	.word	0x08006c63
 8006c08:	08006ccb 	.word	0x08006ccb
 8006c0c:	08006f11 	.word	0x08006f11
 8006c10:	08006f77 	.word	0x08006f77
 8006c14:	08006d6f 	.word	0x08006d6f
 8006c18:	08006eb7 	.word	0x08006eb7
 8006c1c:	08006da5 	.word	0x08006da5
 8006c20:	08006dc5 	.word	0x08006dc5
 8006c24:	08006de5 	.word	0x08006de5
 8006c28:	08006e29 	.word	0x08006e29
 8006c2c:	08006ef9 	.word	0x08006ef9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 819e 	beq.w	8006f7a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c44:	20c8      	movs	r0, #200	; 0xc8
 8006c46:	f001 fd62 	bl	800870e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f001 fc61 	bl	8008512 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c60:	e18b      	b.n	8006f7a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d107      	bne.n	8006c7c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c7a:	e18d      	b.n	8006f98 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c86:	d914      	bls.n	8006cb2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c8e:	3301      	adds	r3, #1
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d903      	bls.n	8006caa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	220d      	movs	r2, #13
 8006ca6:	701a      	strb	r2, [r3, #0]
      break;
 8006ca8:	e176      	b.n	8006f98 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	701a      	strb	r2, [r3, #0]
      break;
 8006cb0:	e172      	b.n	8006f98 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006cb8:	f103 020a 	add.w	r2, r3, #10
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006cc2:	200a      	movs	r0, #10
 8006cc4:	f001 fd23 	bl	800870e <USBH_Delay>
      break;
 8006cc8:	e166      	b.n	8006f98 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d005      	beq.n	8006ce0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cda:	2104      	movs	r1, #4
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ce0:	2064      	movs	r0, #100	; 0x64
 8006ce2:	f001 fd14 	bl	800870e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fbec 	bl	80084c4 <USBH_LL_GetSpeed>
 8006cec:	4603      	mov	r3, r0
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fa05 	bl	800810e <USBH_AllocPipe>
 8006d04:	4603      	mov	r3, r0
 8006d06:	461a      	mov	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d0c:	2180      	movs	r1, #128	; 0x80
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 f9fd 	bl	800810e <USBH_AllocPipe>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7919      	ldrb	r1, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d30:	b292      	uxth	r2, r2
 8006d32:	9202      	str	r2, [sp, #8]
 8006d34:	2200      	movs	r2, #0
 8006d36:	9201      	str	r2, [sp, #4]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2280      	movs	r2, #128	; 0x80
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 f9b6 	bl	80080b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7959      	ldrb	r1, [r3, #5]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d58:	b292      	uxth	r2, r2
 8006d5a:	9202      	str	r2, [sp, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	9201      	str	r2, [sp, #4]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4603      	mov	r3, r0
 8006d64:	2200      	movs	r2, #0
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 f9a2 	bl	80080b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d6c:	e114      	b.n	8006f98 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f918 	bl	8006fa4 <USBH_HandleEnum>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 80fe 	bne.w	8006f7e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d103      	bne.n	8006d9c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2208      	movs	r2, #8
 8006d98:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d9a:	e0f0      	b.n	8006f7e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2207      	movs	r2, #7
 8006da0:	701a      	strb	r2, [r3, #0]
      break;
 8006da2:	e0ec      	b.n	8006f7e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80e9 	beq.w	8006f82 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006db6:	2101      	movs	r1, #1
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2208      	movs	r2, #8
 8006dc0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006dc2:	e0de      	b.n	8006f82 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fc2c 	bl	800762c <USBH_SetCfg>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f040 80d5 	bne.w	8006f86 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2209      	movs	r2, #9
 8006de0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006de2:	e0d0      	b.n	8006f86 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006dea:	f003 0320 	and.w	r3, r3, #32
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d016      	beq.n	8006e20 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006df2:	2101      	movs	r1, #1
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fc3c 	bl	8007672 <USBH_SetFeature>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d103      	bne.n	8006e0e <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	220a      	movs	r2, #10
 8006e0a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e0c:	e0bd      	b.n	8006f8a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	f040 80b9 	bne.w	8006f8a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	220a      	movs	r2, #10
 8006e1c:	701a      	strb	r2, [r3, #0]
      break;
 8006e1e:	e0b4      	b.n	8006f8a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	220a      	movs	r2, #10
 8006e24:	701a      	strb	r2, [r3, #0]
      break;
 8006e26:	e0b0      	b.n	8006f8a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80ad 	beq.w	8006f8e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	e016      	b.n	8006e70 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e42:	7bfa      	ldrb	r2, [r7, #15]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	32de      	adds	r2, #222	; 0xde
 8006e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4c:	791a      	ldrb	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d108      	bne.n	8006e6a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e58:	7bfa      	ldrb	r2, [r7, #15]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32de      	adds	r2, #222	; 0xde
 8006e5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006e68:	e005      	b.n	8006e76 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0e5      	beq.n	8006e42 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2206      	movs	r2, #6
 8006e96:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e9e:	2103      	movs	r1, #3
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ea4:	e073      	b.n	8006f8e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	220d      	movs	r2, #13
 8006eaa:	701a      	strb	r2, [r3, #0]
      break;
 8006eac:	e06f      	b.n	8006f8e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	220d      	movs	r2, #13
 8006eb2:	701a      	strb	r2, [r3, #0]
      break;
 8006eb4:	e06b      	b.n	8006f8e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d017      	beq.n	8006ef0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
 8006ecc:	4603      	mov	r3, r0
 8006ece:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	220b      	movs	r2, #11
 8006edc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ede:	e058      	b.n	8006f92 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d154      	bne.n	8006f92 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	220d      	movs	r2, #13
 8006eec:	701a      	strb	r2, [r3, #0]
      break;
 8006eee:	e050      	b.n	8006f92 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220d      	movs	r2, #13
 8006ef4:	701a      	strb	r2, [r3, #0]
      break;
 8006ef6:	e04c      	b.n	8006f92 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d049      	beq.n	8006f96 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
      }
      break;
 8006f0e:	e042      	b.n	8006f96 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff fd67 	bl	80069ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f4c:	2105      	movs	r1, #5
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d107      	bne.n	8006f6e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fe20 	bl	8006bac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f6c:	e014      	b.n	8006f98 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fa72 	bl	8008458 <USBH_LL_Start>
      break;
 8006f74:	e010      	b.n	8006f98 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f76:	bf00      	nop
 8006f78:	e00e      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f7a:	bf00      	nop
 8006f7c:	e00c      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f7e:	bf00      	nop
 8006f80:	e00a      	b.n	8006f98 <USBH_Process+0x3cc>
    break;
 8006f82:	bf00      	nop
 8006f84:	e008      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f86:	bf00      	nop
 8006f88:	e006      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f8a:	bf00      	nop
 8006f8c:	e004      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f8e:	bf00      	nop
 8006f90:	e002      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f92:	bf00      	nop
 8006f94:	e000      	b.n	8006f98 <USBH_Process+0x3cc>
      break;
 8006f96:	bf00      	nop
  }
  return USBH_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop

08006fa4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b07      	cmp	r3, #7
 8006fba:	f200 81c1 	bhi.w	8007340 <USBH_HandleEnum+0x39c>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <USBH_HandleEnum+0x20>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe5 	.word	0x08006fe5
 8006fc8:	080070a3 	.word	0x080070a3
 8006fcc:	0800710d 	.word	0x0800710d
 8006fd0:	0800719b 	.word	0x0800719b
 8006fd4:	08007205 	.word	0x08007205
 8006fd8:	08007275 	.word	0x08007275
 8006fdc:	080072bb 	.word	0x080072bb
 8006fe0:	08007301 	.word	0x08007301
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006fe4:	2108      	movs	r1, #8
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa50 	bl	800748c <USBH_Get_DevDesc>
 8006fec:	4603      	mov	r3, r0
 8006fee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ff0:	7bbb      	ldrb	r3, [r7, #14]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d130      	bne.n	8007058 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	7919      	ldrb	r1, [r3, #4]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800701a:	b292      	uxth	r2, r2
 800701c:	9202      	str	r2, [sp, #8]
 800701e:	2200      	movs	r2, #0
 8007020:	9201      	str	r2, [sp, #4]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	4603      	mov	r3, r0
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f001 f841 	bl	80080b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	7959      	ldrb	r1, [r3, #5]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007042:	b292      	uxth	r2, r2
 8007044:	9202      	str	r2, [sp, #8]
 8007046:	2200      	movs	r2, #0
 8007048:	9201      	str	r2, [sp, #4]
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	4603      	mov	r3, r0
 800704e:	2200      	movs	r2, #0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 f82d 	bl	80080b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007056:	e175      	b.n	8007344 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	2b03      	cmp	r3, #3
 800705c:	f040 8172 	bne.w	8007344 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007066:	3301      	adds	r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007076:	2b03      	cmp	r3, #3
 8007078:	d903      	bls.n	8007082 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	220d      	movs	r2, #13
 800707e:	701a      	strb	r2, [r3, #0]
      break;
 8007080:	e160      	b.n	8007344 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f861 	bl	8008150 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	791b      	ldrb	r3, [r3, #4]
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f85b 	bl	8008150 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
      break;
 80070a0:	e150      	b.n	8007344 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070a2:	2112      	movs	r1, #18
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 f9f1 	bl	800748c <USBH_Get_DevDesc>
 80070aa:	4603      	mov	r3, r0
 80070ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070ba:	e145      	b.n	8007348 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070bc:	7bbb      	ldrb	r3, [r7, #14]
 80070be:	2b03      	cmp	r3, #3
 80070c0:	f040 8142 	bne.w	8007348 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070ca:	3301      	adds	r3, #1
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d903      	bls.n	80070e6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	220d      	movs	r2, #13
 80070e2:	701a      	strb	r2, [r3, #0]
      break;
 80070e4:	e130      	b.n	8007348 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	795b      	ldrb	r3, [r3, #5]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f001 f82f 	bl	8008150 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	791b      	ldrb	r3, [r3, #4]
 80070f6:	4619      	mov	r1, r3
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f829 	bl	8008150 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
      break;
 800710a:	e11d      	b.n	8007348 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800710c:	2101      	movs	r1, #1
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fa68 	bl	80075e4 <USBH_SetAddress>
 8007114:	4603      	mov	r3, r0
 8007116:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d132      	bne.n	8007184 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800711e:	2002      	movs	r0, #2
 8007120:	f001 faf5 	bl	800870e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2203      	movs	r2, #3
 8007130:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	7919      	ldrb	r1, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007146:	b292      	uxth	r2, r2
 8007148:	9202      	str	r2, [sp, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	9201      	str	r2, [sp, #4]
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	2280      	movs	r2, #128	; 0x80
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 ffab 	bl	80080b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	7959      	ldrb	r1, [r3, #5]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800716e:	b292      	uxth	r2, r2
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	4603      	mov	r3, r0
 800717a:	2200      	movs	r2, #0
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 ff97 	bl	80080b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007182:	e0e3      	b.n	800734c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b03      	cmp	r3, #3
 8007188:	f040 80e0 	bne.w	800734c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	220d      	movs	r2, #13
 8007190:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2200      	movs	r2, #0
 8007196:	705a      	strb	r2, [r3, #1]
      break;
 8007198:	e0d8      	b.n	800734c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800719a:	2109      	movs	r1, #9
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f99d 	bl	80074dc <USBH_Get_CfgDesc>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d103      	bne.n	80071b4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2204      	movs	r2, #4
 80071b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071b2:	e0cd      	b.n	8007350 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	f040 80ca 	bne.w	8007350 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071c2:	3301      	adds	r3, #1
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	d903      	bls.n	80071de <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	220d      	movs	r2, #13
 80071da:	701a      	strb	r2, [r3, #0]
      break;
 80071dc:	e0b8      	b.n	8007350 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	795b      	ldrb	r3, [r3, #5]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 ffb3 	bl	8008150 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	791b      	ldrb	r3, [r3, #4]
 80071ee:	4619      	mov	r1, r3
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 ffad 	bl	8008150 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
      break;
 8007202:	e0a5      	b.n	8007350 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f965 	bl	80074dc <USBH_Get_CfgDesc>
 8007212:	4603      	mov	r3, r0
 8007214:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007216:	7bbb      	ldrb	r3, [r7, #14]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2205      	movs	r2, #5
 8007220:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007222:	e097      	b.n	8007354 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 8094 	bne.w	8007354 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007232:	3301      	adds	r3, #1
 8007234:	b2da      	uxtb	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007242:	2b03      	cmp	r3, #3
 8007244:	d903      	bls.n	800724e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	220d      	movs	r2, #13
 800724a:	701a      	strb	r2, [r3, #0]
      break;
 800724c:	e082      	b.n	8007354 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	795b      	ldrb	r3, [r3, #5]
 8007252:	4619      	mov	r1, r3
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 ff7b 	bl	8008150 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 ff75 	bl	8008150 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	701a      	strb	r2, [r3, #0]
      break;
 8007272:	e06f      	b.n	8007354 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800727a:	2b00      	cmp	r3, #0
 800727c:	d019      	beq.n	80072b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800728a:	23ff      	movs	r3, #255	; 0xff
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f949 	bl	8007524 <USBH_Get_StringDesc>
 8007292:	4603      	mov	r3, r0
 8007294:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d103      	bne.n	80072a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2206      	movs	r2, #6
 80072a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072a2:	e059      	b.n	8007358 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072a4:	7bbb      	ldrb	r3, [r7, #14]
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d156      	bne.n	8007358 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2206      	movs	r2, #6
 80072ae:	705a      	strb	r2, [r3, #1]
      break;
 80072b0:	e052      	b.n	8007358 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2206      	movs	r2, #6
 80072b6:	705a      	strb	r2, [r3, #1]
      break;
 80072b8:	e04e      	b.n	8007358 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80072d0:	23ff      	movs	r3, #255	; 0xff
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 f926 	bl	8007524 <USBH_Get_StringDesc>
 80072d8:	4603      	mov	r3, r0
 80072da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d103      	bne.n	80072ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2207      	movs	r2, #7
 80072e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072e8:	e038      	b.n	800735c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d135      	bne.n	800735c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2207      	movs	r2, #7
 80072f4:	705a      	strb	r2, [r3, #1]
      break;
 80072f6:	e031      	b.n	800735c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2207      	movs	r2, #7
 80072fc:	705a      	strb	r2, [r3, #1]
      break;
 80072fe:	e02d      	b.n	800735c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007306:	2b00      	cmp	r3, #0
 8007308:	d017      	beq.n	800733a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007316:	23ff      	movs	r3, #255	; 0xff
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f903 	bl	8007524 <USBH_Get_StringDesc>
 800731e:	4603      	mov	r3, r0
 8007320:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800732c:	e018      	b.n	8007360 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b03      	cmp	r3, #3
 8007332:	d115      	bne.n	8007360 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
      break;
 8007338:	e012      	b.n	8007360 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
      break;
 800733e:	e00f      	b.n	8007360 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007340:	bf00      	nop
 8007342:	e00e      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007344:	bf00      	nop
 8007346:	e00c      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007348:	bf00      	nop
 800734a:	e00a      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 800734c:	bf00      	nop
 800734e:	e008      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007350:	bf00      	nop
 8007352:	e006      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007354:	bf00      	nop
 8007356:	e004      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007358:	bf00      	nop
 800735a:	e002      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 800735c:	bf00      	nop
 800735e:	e000      	b.n	8007362 <USBH_HandleEnum+0x3be>
      break;
 8007360:	bf00      	nop
  }
  return Status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007398:	1c5a      	adds	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f804 	bl	80073ae <USBH_HandleSof>
}
 80073a6:	bf00      	nop
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b0b      	cmp	r3, #11
 80073be:	d10a      	bne.n	80073d6 <USBH_HandleSof+0x28>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d005      	beq.n	80073d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
  }
}
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80073ee:	bf00      	nop
}
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800740a:	bf00      	nop
}
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f001 f812 	bl	800848e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	791b      	ldrb	r3, [r3, #4]
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fe6d 	bl	8008150 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	795b      	ldrb	r3, [r3, #5]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fe67 	bl	8008150 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af02      	add	r7, sp, #8
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074aa:	2100      	movs	r1, #0
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f864 	bl	800757a <USBH_GetDescriptor>
 80074b2:	4603      	mov	r3, r0
 80074b4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10a      	bne.n	80074d2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f203 3026 	addw	r0, r3, #806	; 0x326
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	b292      	uxth	r2, r2
 80074cc:	4619      	mov	r1, r3
 80074ce:	f000 f918 	bl	8007702 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	331c      	adds	r3, #28
 80074ec:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074ee:	887b      	ldrh	r3, [r7, #2]
 80074f0:	9300      	str	r3, [sp, #0]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f8:	2100      	movs	r1, #0
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f83d 	bl	800757a <USBH_GetDescriptor>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d107      	bne.n	800751a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800750a:	887b      	ldrh	r3, [r7, #2]
 800750c:	461a      	mov	r2, r3
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f987 	bl	8007824 <USBH_ParseCfgDesc>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b088      	sub	sp, #32
 8007528:	af02      	add	r7, sp, #8
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	461a      	mov	r2, r3
 8007530:	460b      	mov	r3, r1
 8007532:	72fb      	strb	r3, [r7, #11]
 8007534:	4613      	mov	r3, r2
 8007536:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007538:	7afb      	ldrb	r3, [r7, #11]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007540:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007548:	893b      	ldrh	r3, [r7, #8]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	460b      	mov	r3, r1
 800754e:	2100      	movs	r1, #0
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f812 	bl	800757a <USBH_GetDescriptor>
 8007556:	4603      	mov	r3, r0
 8007558:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d107      	bne.n	8007570 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007566:	893a      	ldrh	r2, [r7, #8]
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fb24 	bl	8007bb8 <USBH_ParseStringDesc>
  }

  return status;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	72fb      	strb	r3, [r7, #11]
 8007588:	4613      	mov	r3, r2
 800758a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	789b      	ldrb	r3, [r3, #2]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d11c      	bne.n	80075ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800759a:	b2da      	uxtb	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2206      	movs	r2, #6
 80075a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	893a      	ldrh	r2, [r7, #8]
 80075aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075ac:	893b      	ldrh	r3, [r7, #8]
 80075ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075b6:	d104      	bne.n	80075c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f240 4209 	movw	r2, #1033	; 0x409
 80075be:	829a      	strh	r2, [r3, #20]
 80075c0:	e002      	b.n	80075c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8b3a      	ldrh	r2, [r7, #24]
 80075cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075ce:	8b3b      	ldrh	r3, [r7, #24]
 80075d0:	461a      	mov	r2, r3
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fb3d 	bl	8007c54 <USBH_CtlReq>
 80075da:	4603      	mov	r3, r0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	789b      	ldrb	r3, [r3, #2]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d10f      	bne.n	8007618 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2205      	movs	r2, #5
 8007602:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	b29a      	uxth	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007618:	2200      	movs	r2, #0
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fb19 	bl	8007c54 <USBH_CtlReq>
 8007622:	4603      	mov	r3, r0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3708      	adds	r7, #8
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	789b      	ldrb	r3, [r3, #2]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d10e      	bne.n	800765e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2209      	movs	r2, #9
 800764a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	887a      	ldrh	r2, [r7, #2]
 8007650:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800765e:	2200      	movs	r2, #0
 8007660:	2100      	movs	r1, #0
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 faf6 	bl	8007c54 <USBH_CtlReq>
 8007668:	4603      	mov	r3, r0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	789b      	ldrb	r3, [r3, #2]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d10f      	bne.n	80076a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2203      	movs	r2, #3
 8007690:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	b29a      	uxth	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076a6:	2200      	movs	r2, #0
 80076a8:	2100      	movs	r1, #0
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fad2 	bl	8007c54 <USBH_CtlReq>
 80076b0:	4603      	mov	r3, r0
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b082      	sub	sp, #8
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	789b      	ldrb	r3, [r3, #2]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d10f      	bne.n	80076ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 faae 	bl	8007c54 <USBH_CtlReq>
 80076f8:	4603      	mov	r3, r0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	4613      	mov	r3, r2
 800770e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	785a      	ldrb	r2, [r3, #1]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	3302      	adds	r3, #2
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	b29a      	uxth	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3303      	adds	r3, #3
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	b29b      	uxth	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	791a      	ldrb	r2, [r3, #4]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	795a      	ldrb	r2, [r3, #5]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	799a      	ldrb	r2, [r3, #6]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	79da      	ldrb	r2, [r3, #7]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	79db      	ldrb	r3, [r3, #7]
 8007760:	2b20      	cmp	r3, #32
 8007762:	dc11      	bgt.n	8007788 <USBH_ParseDevDesc+0x86>
 8007764:	2b08      	cmp	r3, #8
 8007766:	db16      	blt.n	8007796 <USBH_ParseDevDesc+0x94>
 8007768:	3b08      	subs	r3, #8
 800776a:	2201      	movs	r2, #1
 800776c:	fa02 f303 	lsl.w	r3, r2, r3
 8007770:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007778:	2b00      	cmp	r3, #0
 800777a:	bf14      	ite	ne
 800777c:	2301      	movne	r3, #1
 800777e:	2300      	moveq	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <USBH_ParseDevDesc+0x8a>
 8007786:	e006      	b.n	8007796 <USBH_ParseDevDesc+0x94>
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	d104      	bne.n	8007796 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	79da      	ldrb	r2, [r3, #7]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	71da      	strb	r2, [r3, #7]
      break;
 8007794:	e003      	b.n	800779e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2240      	movs	r2, #64	; 0x40
 800779a:	71da      	strb	r2, [r3, #7]
      break;
 800779c:	bf00      	nop
  }

  if (length > 8U)
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d939      	bls.n	8007818 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	3308      	adds	r3, #8
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3309      	adds	r3, #9
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	4313      	orrs	r3, r2
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	330a      	adds	r3, #10
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	330b      	adds	r3, #11
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	021b      	lsls	r3, r3, #8
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	4313      	orrs	r3, r2
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	330c      	adds	r3, #12
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	330d      	adds	r3, #13
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	7b9a      	ldrb	r2, [r3, #14]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7bda      	ldrb	r2, [r3, #15]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	7c1a      	ldrb	r2, [r3, #16]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7c5a      	ldrb	r2, [r3, #17]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	745a      	strb	r2, [r3, #17]
  }
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08c      	sub	sp, #48	; 0x30
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007838:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	781a      	ldrb	r2, [r3, #0]
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	785a      	ldrb	r2, [r3, #1]
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3302      	adds	r3, #2
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	b29a      	uxth	r2, r3
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	3303      	adds	r3, #3
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	b29b      	uxth	r3, r3
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	b29b      	uxth	r3, r3
 8007878:	4313      	orrs	r3, r2
 800787a:	b29b      	uxth	r3, r3
 800787c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007880:	bf28      	it	cs
 8007882:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007886:	b29a      	uxth	r2, r3
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	791a      	ldrb	r2, [r3, #4]
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	795a      	ldrb	r2, [r3, #5]
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	799a      	ldrb	r2, [r3, #6]
 80078a0:	6a3b      	ldr	r3, [r7, #32]
 80078a2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	79da      	ldrb	r2, [r3, #7]
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	7a1a      	ldrb	r2, [r3, #8]
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b09      	cmp	r3, #9
 80078ba:	d002      	beq.n	80078c2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	2209      	movs	r2, #9
 80078c0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	2b09      	cmp	r3, #9
 80078c6:	f240 809d 	bls.w	8007a04 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80078ca:	2309      	movs	r3, #9
 80078cc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078d2:	e081      	b.n	80079d8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078d4:	f107 0316 	add.w	r3, r7, #22
 80078d8:	4619      	mov	r1, r3
 80078da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078dc:	f000 f99f 	bl	8007c1e <USBH_GetNextDesc>
 80078e0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b04      	cmp	r3, #4
 80078e8:	d176      	bne.n	80079d8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b09      	cmp	r3, #9
 80078f0:	d002      	beq.n	80078f8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	2209      	movs	r2, #9
 80078f6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078fc:	221a      	movs	r2, #26
 80078fe:	fb02 f303 	mul.w	r3, r2, r3
 8007902:	3308      	adds	r3, #8
 8007904:	6a3a      	ldr	r2, [r7, #32]
 8007906:	4413      	add	r3, r2
 8007908:	3302      	adds	r3, #2
 800790a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800790c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790e:	69f8      	ldr	r0, [r7, #28]
 8007910:	f000 f87e 	bl	8007a10 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007914:	2300      	movs	r3, #0
 8007916:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800791e:	e043      	b.n	80079a8 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007920:	f107 0316 	add.w	r3, r7, #22
 8007924:	4619      	mov	r1, r3
 8007926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007928:	f000 f979 	bl	8007c1e <USBH_GetNextDesc>
 800792c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	785b      	ldrb	r3, [r3, #1]
 8007932:	2b05      	cmp	r3, #5
 8007934:	d138      	bne.n	80079a8 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d10f      	bne.n	800795e <USBH_ParseCfgDesc+0x13a>
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	799b      	ldrb	r3, [r3, #6]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d10b      	bne.n	800795e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	79db      	ldrb	r3, [r3, #7]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10f      	bne.n	800796e <USBH_ParseCfgDesc+0x14a>
 800794e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b09      	cmp	r3, #9
 8007954:	d00b      	beq.n	800796e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007958:	2209      	movs	r2, #9
 800795a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800795c:	e007      	b.n	800796e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800795e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b07      	cmp	r3, #7
 8007964:	d004      	beq.n	8007970 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	2207      	movs	r2, #7
 800796a:	701a      	strb	r2, [r3, #0]
 800796c:	e000      	b.n	8007970 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800796e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007974:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007978:	3201      	adds	r2, #1
 800797a:	00d2      	lsls	r2, r2, #3
 800797c:	211a      	movs	r1, #26
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	4413      	add	r3, r2
 8007984:	3308      	adds	r3, #8
 8007986:	6a3a      	ldr	r2, [r7, #32]
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800798e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007990:	69b9      	ldr	r1, [r7, #24]
 8007992:	68f8      	ldr	r0, [r7, #12]
 8007994:	f000 f86b 	bl	8007a6e <USBH_ParseEPDesc>
 8007998:	4603      	mov	r3, r0
 800799a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800799e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079a2:	3301      	adds	r3, #1
 80079a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	791b      	ldrb	r3, [r3, #4]
 80079ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d204      	bcs.n	80079be <USBH_ParseCfgDesc+0x19a>
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	885a      	ldrh	r2, [r3, #2]
 80079b8:	8afb      	ldrh	r3, [r7, #22]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d8b0      	bhi.n	8007920 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	791b      	ldrb	r3, [r3, #4]
 80079c2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d201      	bcs.n	80079ce <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e01c      	b.n	8007a08 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80079ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d2:	3301      	adds	r3, #1
 80079d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d805      	bhi.n	80079ec <USBH_ParseCfgDesc+0x1c8>
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	885a      	ldrh	r2, [r3, #2]
 80079e4:	8afb      	ldrh	r3, [r7, #22]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	f63f af74 	bhi.w	80078d4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	791b      	ldrb	r3, [r3, #4]
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	bf28      	it	cs
 80079f4:	2302      	movcs	r3, #2
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d201      	bcs.n	8007a04 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e001      	b.n	8007a08 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007a04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3730      	adds	r7, #48	; 0x30
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781a      	ldrb	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	785a      	ldrb	r2, [r3, #1]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	789a      	ldrb	r2, [r3, #2]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	78da      	ldrb	r2, [r3, #3]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	791a      	ldrb	r2, [r3, #4]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	795a      	ldrb	r2, [r3, #5]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	799a      	ldrb	r2, [r3, #6]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	79da      	ldrb	r2, [r3, #7]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	7a1a      	ldrb	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	721a      	strb	r2, [r3, #8]
}
 8007a62:	bf00      	nop
 8007a64:	370c      	adds	r7, #12
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr

08007a6e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007a6e:	b480      	push	{r7}
 8007a70:	b087      	sub	sp, #28
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	785a      	ldrb	r2, [r3, #1]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	789a      	ldrb	r2, [r3, #2]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	78da      	ldrb	r2, [r3, #3]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3305      	adds	r3, #5
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	799a      	ldrb	r2, [r3, #6]
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	889b      	ldrh	r3, [r3, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d102      	bne.n	8007ad0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007aca:	2303      	movs	r3, #3
 8007acc:	75fb      	strb	r3, [r7, #23]
 8007ace:	e033      	b.n	8007b38 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	889b      	ldrh	r3, [r3, #4]
 8007ad4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ad8:	f023 0307 	bic.w	r3, r3, #7
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	889b      	ldrh	r3, [r3, #4]
 8007ae6:	b21a      	sxth	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	b299      	uxth	r1, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	3305      	adds	r3, #5
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	021b      	lsls	r3, r3, #8
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	430b      	orrs	r3, r1
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d110      	bne.n	8007b2a <USBH_ParseEPDesc+0xbc>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	b299      	uxth	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	3305      	adds	r3, #5
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	021b      	lsls	r3, r3, #8
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	e001      	b.n	8007b2e <USBH_ParseEPDesc+0xc0>
 8007b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	b21b      	sxth	r3, r3
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d116      	bne.n	8007b70 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d005      	beq.n	8007b5a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d127      	bne.n	8007baa <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	799b      	ldrb	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <USBH_ParseEPDesc+0xfc>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	799b      	ldrb	r3, [r3, #6]
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d91f      	bls.n	8007baa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
 8007b6e:	e01c      	b.n	8007baa <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	78db      	ldrb	r3, [r3, #3]
 8007b74:	f003 0303 	and.w	r3, r3, #3
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d10a      	bne.n	8007b92 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	799b      	ldrb	r3, [r3, #6]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <USBH_ParseEPDesc+0x11e>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	799b      	ldrb	r3, [r3, #6]
 8007b88:	2b10      	cmp	r3, #16
 8007b8a:	d90e      	bls.n	8007baa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	75fb      	strb	r3, [r7, #23]
 8007b90:	e00b      	b.n	8007baa <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	78db      	ldrb	r3, [r3, #3]
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d105      	bne.n	8007baa <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	799b      	ldrb	r3, [r3, #6]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8007baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b087      	sub	sp, #28
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d120      	bne.n	8007c12 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	1e9a      	subs	r2, r3, #2
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	bf28      	it	cs
 8007bdc:	4613      	movcs	r3, r2
 8007bde:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	3302      	adds	r3, #2
 8007be4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007be6:	2300      	movs	r3, #0
 8007be8:	82fb      	strh	r3, [r7, #22]
 8007bea:	e00b      	b.n	8007c04 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007bec:	8afb      	ldrh	r3, [r7, #22]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	781a      	ldrb	r2, [r3, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007bfe:	8afb      	ldrh	r3, [r7, #22]
 8007c00:	3302      	adds	r3, #2
 8007c02:	82fb      	strh	r3, [r7, #22]
 8007c04:	8afa      	ldrh	r2, [r7, #22]
 8007c06:	8abb      	ldrh	r3, [r7, #20]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d3ef      	bcc.n	8007bec <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	701a      	strb	r2, [r3, #0]
  }
}
 8007c12:	bf00      	nop
 8007c14:	371c      	adds	r7, #28
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	881a      	ldrh	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	4413      	add	r3, r2
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c46:	68fb      	ldr	r3, [r7, #12]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b086      	sub	sp, #24
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007c62:	2301      	movs	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	789b      	ldrb	r3, [r3, #2]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d002      	beq.n	8007c74 <USBH_CtlReq+0x20>
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d00f      	beq.n	8007c92 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007c72:	e027      	b.n	8007cc4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68ba      	ldr	r2, [r7, #8]
 8007c78:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	88fa      	ldrh	r2, [r7, #6]
 8007c7e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2201      	movs	r2, #1
 8007c84:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c90:	e018      	b.n	8007cc4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f81c 	bl	8007cd0 <USBH_HandleControl>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <USBH_CtlReq+0x54>
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d106      	bne.n	8007cb6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	761a      	strb	r2, [r3, #24]
      break;
 8007cb4:	e005      	b.n	8007cc2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007cb6:	7dfb      	ldrb	r3, [r7, #23]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d102      	bne.n	8007cc2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	709a      	strb	r2, [r3, #2]
      break;
 8007cc2:	bf00      	nop
  }
  return status;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
	...

08007cd0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af02      	add	r7, sp, #8
 8007cd6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	7e1b      	ldrb	r3, [r3, #24]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	2b0a      	cmp	r3, #10
 8007ce8:	f200 8156 	bhi.w	8007f98 <USBH_HandleControl+0x2c8>
 8007cec:	a201      	add	r2, pc, #4	; (adr r2, 8007cf4 <USBH_HandleControl+0x24>)
 8007cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf2:	bf00      	nop
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	08007d3b 	.word	0x08007d3b
 8007cfc:	08007da5 	.word	0x08007da5
 8007d00:	08007dcb 	.word	0x08007dcb
 8007d04:	08007e03 	.word	0x08007e03
 8007d08:	08007e2d 	.word	0x08007e2d
 8007d0c:	08007e7f 	.word	0x08007e7f
 8007d10:	08007ea1 	.word	0x08007ea1
 8007d14:	08007edd 	.word	0x08007edd
 8007d18:	08007f03 	.word	0x08007f03
 8007d1c:	08007f41 	.word	0x08007f41
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f103 0110 	add.w	r1, r3, #16
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	795b      	ldrb	r3, [r3, #5]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 f943 	bl	8007fb8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	761a      	strb	r2, [r3, #24]
      break;
 8007d38:	e139      	b.n	8007fae <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	795b      	ldrb	r3, [r3, #5]
 8007d3e:	4619      	mov	r1, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fc93 	bl	800866c <USBH_LL_GetURBState>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d11e      	bne.n	8007d8e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7c1b      	ldrb	r3, [r3, #16]
 8007d54:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d58:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	8adb      	ldrh	r3, [r3, #22]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007d62:	7b7b      	ldrb	r3, [r7, #13]
 8007d64:	2b80      	cmp	r3, #128	; 0x80
 8007d66:	d103      	bne.n	8007d70 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2203      	movs	r2, #3
 8007d6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d6e:	e115      	b.n	8007f9c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2205      	movs	r2, #5
 8007d74:	761a      	strb	r2, [r3, #24]
      break;
 8007d76:	e111      	b.n	8007f9c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007d78:	7b7b      	ldrb	r3, [r7, #13]
 8007d7a:	2b80      	cmp	r3, #128	; 0x80
 8007d7c:	d103      	bne.n	8007d86 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2209      	movs	r2, #9
 8007d82:	761a      	strb	r2, [r3, #24]
      break;
 8007d84:	e10a      	b.n	8007f9c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2207      	movs	r2, #7
 8007d8a:	761a      	strb	r2, [r3, #24]
      break;
 8007d8c:	e106      	b.n	8007f9c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d003      	beq.n	8007d9c <USBH_HandleControl+0xcc>
 8007d94:	7bbb      	ldrb	r3, [r7, #14]
 8007d96:	2b02      	cmp	r3, #2
 8007d98:	f040 8100 	bne.w	8007f9c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	220b      	movs	r2, #11
 8007da0:	761a      	strb	r2, [r3, #24]
      break;
 8007da2:	e0fb      	b.n	8007f9c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6899      	ldr	r1, [r3, #8]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	899a      	ldrh	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	791b      	ldrb	r3, [r3, #4]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 f93a 	bl	8008036 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	761a      	strb	r2, [r3, #24]
      break;
 8007dc8:	e0f1      	b.n	8007fae <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	791b      	ldrb	r3, [r3, #4]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc4b 	bl	800866c <USBH_LL_GetURBState>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dda:	7bbb      	ldrb	r3, [r7, #14]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d102      	bne.n	8007de6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2209      	movs	r2, #9
 8007de4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007de6:	7bbb      	ldrb	r3, [r7, #14]
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	d102      	bne.n	8007df2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007dec:	2303      	movs	r3, #3
 8007dee:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007df0:	e0d6      	b.n	8007fa0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007df2:	7bbb      	ldrb	r3, [r7, #14]
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	f040 80d3 	bne.w	8007fa0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	220b      	movs	r2, #11
 8007dfe:	761a      	strb	r2, [r3, #24]
      break;
 8007e00:	e0ce      	b.n	8007fa0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6899      	ldr	r1, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	899a      	ldrh	r2, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	795b      	ldrb	r3, [r3, #5]
 8007e0e:	2001      	movs	r0, #1
 8007e10:	9000      	str	r0, [sp, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f8ea 	bl	8007fec <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2206      	movs	r2, #6
 8007e28:	761a      	strb	r2, [r3, #24]
      break;
 8007e2a:	e0c0      	b.n	8007fae <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	795b      	ldrb	r3, [r3, #5]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc1a 	bl	800866c <USBH_LL_GetURBState>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007e3c:	7bbb      	ldrb	r3, [r7, #14]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d103      	bne.n	8007e4a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2207      	movs	r2, #7
 8007e46:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e48:	e0ac      	b.n	8007fa4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007e4a:	7bbb      	ldrb	r3, [r7, #14]
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d105      	bne.n	8007e5c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	220c      	movs	r2, #12
 8007e54:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007e56:	2303      	movs	r3, #3
 8007e58:	73fb      	strb	r3, [r7, #15]
      break;
 8007e5a:	e0a3      	b.n	8007fa4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007e5c:	7bbb      	ldrb	r3, [r7, #14]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d103      	bne.n	8007e6a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2205      	movs	r2, #5
 8007e66:	761a      	strb	r2, [r3, #24]
      break;
 8007e68:	e09c      	b.n	8007fa4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b04      	cmp	r3, #4
 8007e6e:	f040 8099 	bne.w	8007fa4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	220b      	movs	r2, #11
 8007e76:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e7c:	e092      	b.n	8007fa4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f8d5 	bl	8008036 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2208      	movs	r2, #8
 8007e9c:	761a      	strb	r2, [r3, #24]

      break;
 8007e9e:	e086      	b.n	8007fae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	791b      	ldrb	r3, [r3, #4]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fbe0 	bl	800866c <USBH_LL_GetURBState>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d105      	bne.n	8007ec2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	220d      	movs	r2, #13
 8007eba:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ec0:	e072      	b.n	8007fa8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d103      	bne.n	8007ed0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	220b      	movs	r2, #11
 8007ecc:	761a      	strb	r2, [r3, #24]
      break;
 8007ece:	e06b      	b.n	8007fa8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	2b05      	cmp	r3, #5
 8007ed4:	d168      	bne.n	8007fa8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eda:	e065      	b.n	8007fa8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	795b      	ldrb	r3, [r3, #5]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	9200      	str	r2, [sp, #0]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 f87f 	bl	8007fec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	220a      	movs	r2, #10
 8007efe:	761a      	strb	r2, [r3, #24]
      break;
 8007f00:	e055      	b.n	8007fae <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	795b      	ldrb	r3, [r3, #5]
 8007f06:	4619      	mov	r1, r3
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fbaf 	bl	800866c <USBH_LL_GetURBState>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007f12:	7bbb      	ldrb	r3, [r7, #14]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d105      	bne.n	8007f24 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	220d      	movs	r2, #13
 8007f20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f22:	e043      	b.n	8007fac <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d103      	bne.n	8007f32 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2209      	movs	r2, #9
 8007f2e:	761a      	strb	r2, [r3, #24]
      break;
 8007f30:	e03c      	b.n	8007fac <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d139      	bne.n	8007fac <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	220b      	movs	r2, #11
 8007f3c:	761a      	strb	r2, [r3, #24]
      break;
 8007f3e:	e035      	b.n	8007fac <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7e5b      	ldrb	r3, [r3, #25]
 8007f44:	3301      	adds	r3, #1
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	765a      	strb	r2, [r3, #25]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	7e5b      	ldrb	r3, [r3, #25]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d806      	bhi.n	8007f62 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007f60:	e025      	b.n	8007fae <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f68:	2106      	movs	r1, #6
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	795b      	ldrb	r3, [r3, #5]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f8e8 	bl	8008150 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	791b      	ldrb	r3, [r3, #4]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 f8e2 	bl	8008150 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007f92:	2302      	movs	r3, #2
 8007f94:	73fb      	strb	r3, [r7, #15]
      break;
 8007f96:	e00a      	b.n	8007fae <USBH_HandleControl+0x2de>

    default:
      break;
 8007f98:	bf00      	nop
 8007f9a:	e008      	b.n	8007fae <USBH_HandleControl+0x2de>
      break;
 8007f9c:	bf00      	nop
 8007f9e:	e006      	b.n	8007fae <USBH_HandleControl+0x2de>
      break;
 8007fa0:	bf00      	nop
 8007fa2:	e004      	b.n	8007fae <USBH_HandleControl+0x2de>
      break;
 8007fa4:	bf00      	nop
 8007fa6:	e002      	b.n	8007fae <USBH_HandleControl+0x2de>
      break;
 8007fa8:	bf00      	nop
 8007faa:	e000      	b.n	8007fae <USBH_HandleControl+0x2de>
      break;
 8007fac:	bf00      	nop
  }

  return status;
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af04      	add	r7, sp, #16
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007fc6:	79f9      	ldrb	r1, [r7, #7]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	9303      	str	r3, [sp, #12]
 8007fcc:	2308      	movs	r3, #8
 8007fce:	9302      	str	r3, [sp, #8]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	9301      	str	r3, [sp, #4]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2300      	movs	r3, #0
 8007fda:	2200      	movs	r2, #0
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 fb14 	bl	800860a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af04      	add	r7, sp, #16
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	80fb      	strh	r3, [r7, #6]
 8007ffe:	4613      	mov	r3, r2
 8008000:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008008:	2b00      	cmp	r3, #0
 800800a:	d001      	beq.n	8008010 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008010:	7979      	ldrb	r1, [r7, #5]
 8008012:	7e3b      	ldrb	r3, [r7, #24]
 8008014:	9303      	str	r3, [sp, #12]
 8008016:	88fb      	ldrh	r3, [r7, #6]
 8008018:	9302      	str	r3, [sp, #8]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	2301      	movs	r3, #1
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f000 faef 	bl	800860a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3710      	adds	r7, #16
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b088      	sub	sp, #32
 800803a:	af04      	add	r7, sp, #16
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	4611      	mov	r1, r2
 8008042:	461a      	mov	r2, r3
 8008044:	460b      	mov	r3, r1
 8008046:	80fb      	strh	r3, [r7, #6]
 8008048:	4613      	mov	r3, r2
 800804a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800804c:	7979      	ldrb	r1, [r7, #5]
 800804e:	2300      	movs	r3, #0
 8008050:	9303      	str	r3, [sp, #12]
 8008052:	88fb      	ldrh	r3, [r7, #6]
 8008054:	9302      	str	r3, [sp, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	2301      	movs	r3, #1
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	2300      	movs	r3, #0
 8008060:	2201      	movs	r2, #1
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	f000 fad1 	bl	800860a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008068:	2300      	movs	r3, #0

}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b088      	sub	sp, #32
 8008076:	af04      	add	r7, sp, #16
 8008078:	60f8      	str	r0, [r7, #12]
 800807a:	60b9      	str	r1, [r7, #8]
 800807c:	4611      	mov	r1, r2
 800807e:	461a      	mov	r2, r3
 8008080:	460b      	mov	r3, r1
 8008082:	71fb      	strb	r3, [r7, #7]
 8008084:	4613      	mov	r3, r2
 8008086:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	b29b      	uxth	r3, r3
 800808c:	79b9      	ldrb	r1, [r7, #6]
 800808e:	2200      	movs	r2, #0
 8008090:	9203      	str	r2, [sp, #12]
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	2301      	movs	r3, #1
 800809a:	9300      	str	r3, [sp, #0]
 800809c:	2303      	movs	r3, #3
 800809e:	2201      	movs	r2, #1
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 fab2 	bl	800860a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af04      	add	r7, sp, #16
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	461a      	mov	r2, r3
 80080be:	4603      	mov	r3, r0
 80080c0:	70fb      	strb	r3, [r7, #3]
 80080c2:	460b      	mov	r3, r1
 80080c4:	70bb      	strb	r3, [r7, #2]
 80080c6:	4613      	mov	r3, r2
 80080c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80080ca:	7878      	ldrb	r0, [r7, #1]
 80080cc:	78ba      	ldrb	r2, [r7, #2]
 80080ce:	78f9      	ldrb	r1, [r7, #3]
 80080d0:	8b3b      	ldrh	r3, [r7, #24]
 80080d2:	9302      	str	r3, [sp, #8]
 80080d4:	7d3b      	ldrb	r3, [r7, #20]
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	7c3b      	ldrb	r3, [r7, #16]
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	4603      	mov	r3, r0
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fa45 	bl	800856e <USBH_LL_OpenPipe>

  return USBH_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b082      	sub	sp, #8
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	460b      	mov	r3, r1
 80080f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80080fa:	78fb      	ldrb	r3, [r7, #3]
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa64 	bl	80085cc <USBH_LL_ClosePipe>

  return USBH_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f836 	bl	800818c <USBH_GetFreePipe>
 8008120:	4603      	mov	r3, r0
 8008122:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008124:	89fb      	ldrh	r3, [r7, #14]
 8008126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800812a:	4293      	cmp	r3, r2
 800812c:	d00a      	beq.n	8008144 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800812e:	78fa      	ldrb	r2, [r7, #3]
 8008130:	89fb      	ldrh	r3, [r7, #14]
 8008132:	f003 030f 	and.w	r3, r3, #15
 8008136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800813a:	6879      	ldr	r1, [r7, #4]
 800813c:	33e0      	adds	r3, #224	; 0xe0
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008144:	89fb      	ldrh	r3, [r7, #14]
 8008146:	b2db      	uxtb	r3, r3
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	2b0f      	cmp	r3, #15
 8008160:	d80d      	bhi.n	800817e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008162:	78fb      	ldrb	r3, [r7, #3]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	33e0      	adds	r3, #224	; 0xe0
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008174:	6879      	ldr	r1, [r7, #4]
 8008176:	33e0      	adds	r3, #224	; 0xe0
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	440b      	add	r3, r1
 800817c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008194:	2300      	movs	r3, #0
 8008196:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
 800819c:	e00f      	b.n	80081be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800819e:	7bfb      	ldrb	r3, [r7, #15]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	33e0      	adds	r3, #224	; 0xe0
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	e007      	b.n	80081c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	3301      	adds	r3, #1
 80081bc:	73fb      	strb	r3, [r7, #15]
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b0f      	cmp	r3, #15
 80081c2:	d9ec      	bls.n	800819e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80081c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80081d8:	2201      	movs	r2, #1
 80081da:	490e      	ldr	r1, [pc, #56]	; (8008214 <MX_USB_HOST_Init+0x40>)
 80081dc:	480e      	ldr	r0, [pc, #56]	; (8008218 <MX_USB_HOST_Init+0x44>)
 80081de:	f7fe fbcb 	bl	8006978 <USBH_Init>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80081e8:	f7f9 f87a 	bl	80012e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 80081ec:	490b      	ldr	r1, [pc, #44]	; (800821c <MX_USB_HOST_Init+0x48>)
 80081ee:	480a      	ldr	r0, [pc, #40]	; (8008218 <MX_USB_HOST_Init+0x44>)
 80081f0:	f7fe fc50 	bl	8006a94 <USBH_RegisterClass>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80081fa:	f7f9 f871 	bl	80012e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80081fe:	4806      	ldr	r0, [pc, #24]	; (8008218 <MX_USB_HOST_Init+0x44>)
 8008200:	f7fe fcd4 	bl	8006bac <USBH_Start>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800820a:	f7f9 f869 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800820e:	bf00      	nop
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	08008235 	.word	0x08008235
 8008218:	20000238 	.word	0x20000238
 800821c:	2000000c 	.word	0x2000000c

08008220 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008224:	4802      	ldr	r0, [pc, #8]	; (8008230 <MX_USB_HOST_Process+0x10>)
 8008226:	f7fe fcd1 	bl	8006bcc <USBH_Process>
}
 800822a:	bf00      	nop
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	20000238 	.word	0x20000238

08008234 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008240:	78fb      	ldrb	r3, [r7, #3]
 8008242:	3b01      	subs	r3, #1
 8008244:	2b04      	cmp	r3, #4
 8008246:	d819      	bhi.n	800827c <USBH_UserProcess+0x48>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <USBH_UserProcess+0x1c>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	0800827d 	.word	0x0800827d
 8008254:	0800826d 	.word	0x0800826d
 8008258:	0800827d 	.word	0x0800827d
 800825c:	08008275 	.word	0x08008275
 8008260:	08008265 	.word	0x08008265
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <USBH_UserProcess+0x58>)
 8008266:	2203      	movs	r2, #3
 8008268:	701a      	strb	r2, [r3, #0]
  break;
 800826a:	e008      	b.n	800827e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800826c:	4b07      	ldr	r3, [pc, #28]	; (800828c <USBH_UserProcess+0x58>)
 800826e:	2202      	movs	r2, #2
 8008270:	701a      	strb	r2, [r3, #0]
  break;
 8008272:	e004      	b.n	800827e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008274:	4b05      	ldr	r3, [pc, #20]	; (800828c <USBH_UserProcess+0x58>)
 8008276:	2201      	movs	r2, #1
 8008278:	701a      	strb	r2, [r3, #0]
  break;
 800827a:	e000      	b.n	800827e <USBH_UserProcess+0x4a>

  default:
  break;
 800827c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800827e:	bf00      	nop
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000610 	.word	0x20000610

08008290 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08a      	sub	sp, #40	; 0x28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008298:	f107 0314 	add.w	r3, r7, #20
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	605a      	str	r2, [r3, #4]
 80082a2:	609a      	str	r2, [r3, #8]
 80082a4:	60da      	str	r2, [r3, #12]
 80082a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082b0:	d13a      	bne.n	8008328 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082b2:	2300      	movs	r3, #0
 80082b4:	613b      	str	r3, [r7, #16]
 80082b6:	4b1e      	ldr	r3, [pc, #120]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 80082b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ba:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 80082bc:	f043 0301 	orr.w	r3, r3, #1
 80082c0:	6313      	str	r3, [r2, #48]	; 0x30
 80082c2:	4b1b      	ldr	r3, [pc, #108]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	f003 0301 	and.w	r3, r3, #1
 80082ca:	613b      	str	r3, [r7, #16]
 80082cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80082ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80082d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082d4:	2302      	movs	r3, #2
 80082d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082dc:	2303      	movs	r3, #3
 80082de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80082e0:	230a      	movs	r3, #10
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082e4:	f107 0314 	add.w	r3, r7, #20
 80082e8:	4619      	mov	r1, r3
 80082ea:	4812      	ldr	r0, [pc, #72]	; (8008334 <HAL_HCD_MspInit+0xa4>)
 80082ec:	f7f9 fdd4 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80082f0:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 80082f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f4:	4a0e      	ldr	r2, [pc, #56]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 80082f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082fa:	6353      	str	r3, [r2, #52]	; 0x34
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
 8008300:	4b0b      	ldr	r3, [pc, #44]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 8008302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008304:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 8008306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800830a:	6453      	str	r3, [r2, #68]	; 0x44
 800830c:	4b08      	ldr	r3, [pc, #32]	; (8008330 <HAL_HCD_MspInit+0xa0>)
 800830e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008314:	60fb      	str	r3, [r7, #12]
 8008316:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008318:	2200      	movs	r2, #0
 800831a:	2100      	movs	r1, #0
 800831c:	2043      	movs	r0, #67	; 0x43
 800831e:	f7f9 fd84 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008322:	2043      	movs	r0, #67	; 0x43
 8008324:	f7f9 fd9d 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008328:	bf00      	nop
 800832a:	3728      	adds	r7, #40	; 0x28
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40023800 	.word	0x40023800
 8008334:	40020000 	.word	0x40020000

08008338 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff f81f 	bl	800738a <USBH_LL_IncTimer>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff f857 	bl	8007416 <USBH_LL_Connect>
}
 8008368:	bf00      	nop
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b082      	sub	sp, #8
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff f860 	bl	8007444 <USBH_LL_Disconnect>
}
 8008384:	bf00      	nop
 8008386:	3708      	adds	r7, #8
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
 8008398:	4613      	mov	r3, r2
 800839a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff f811 	bl	80073de <USBH_LL_PortEnabled>
}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff f811 	bl	80073fa <USBH_LL_PortDisabled>
}
 80083d8:	bf00      	nop
 80083da:	3708      	adds	r7, #8
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d12a      	bne.n	8008448 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80083f2:	4a18      	ldr	r2, [pc, #96]	; (8008454 <USBH_LL_Init+0x74>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a15      	ldr	r2, [pc, #84]	; (8008454 <USBH_LL_Init+0x74>)
 80083fe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008402:	4b14      	ldr	r3, [pc, #80]	; (8008454 <USBH_LL_Init+0x74>)
 8008404:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008408:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800840a:	4b12      	ldr	r3, [pc, #72]	; (8008454 <USBH_LL_Init+0x74>)
 800840c:	2208      	movs	r2, #8
 800840e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008410:	4b10      	ldr	r3, [pc, #64]	; (8008454 <USBH_LL_Init+0x74>)
 8008412:	2201      	movs	r2, #1
 8008414:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008416:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <USBH_LL_Init+0x74>)
 8008418:	2200      	movs	r2, #0
 800841a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <USBH_LL_Init+0x74>)
 800841e:	2202      	movs	r2, #2
 8008420:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008422:	4b0c      	ldr	r3, [pc, #48]	; (8008454 <USBH_LL_Init+0x74>)
 8008424:	2200      	movs	r2, #0
 8008426:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008428:	480a      	ldr	r0, [pc, #40]	; (8008454 <USBH_LL_Init+0x74>)
 800842a:	f7f9 feea 	bl	8002202 <HAL_HCD_Init>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008434:	f7f8 ff54 	bl	80012e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008438:	4806      	ldr	r0, [pc, #24]	; (8008454 <USBH_LL_Init+0x74>)
 800843a:	f7fa face 	bl	80029da <HAL_HCD_GetCurrentFrame>
 800843e:	4603      	mov	r3, r0
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7fe ff92 	bl	800736c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20000614 	.word	0x20000614

08008458 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800846e:	4618      	mov	r0, r3
 8008470:	f7fa fa3d 	bl	80028ee <HAL_HCD_Start>
 8008474:	4603      	mov	r3, r0
 8008476:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008478:	7bfb      	ldrb	r3, [r7, #15]
 800847a:	4618      	mov	r0, r3
 800847c:	f000 f952 	bl	8008724 <USBH_Get_USB_Status>
 8008480:	4603      	mov	r3, r0
 8008482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008484:	7bbb      	ldrb	r3, [r7, #14]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}

0800848e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800848e:	b580      	push	{r7, lr}
 8008490:	b084      	sub	sp, #16
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7fa fa45 	bl	8002934 <HAL_HCD_Stop>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f937 	bl	8008724 <USBH_Get_USB_Status>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa fa8d 	bl	80029f6 <HAL_HCD_GetCurrentSpeed>
 80084dc:	4603      	mov	r3, r0
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d00c      	beq.n	80084fc <USBH_LL_GetSpeed+0x38>
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d80d      	bhi.n	8008502 <USBH_LL_GetSpeed+0x3e>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <USBH_LL_GetSpeed+0x2c>
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d003      	beq.n	80084f6 <USBH_LL_GetSpeed+0x32>
 80084ee:	e008      	b.n	8008502 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
    break;
 80084f4:	e008      	b.n	8008508 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80084f6:	2301      	movs	r3, #1
 80084f8:	73fb      	strb	r3, [r7, #15]
    break;
 80084fa:	e005      	b.n	8008508 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80084fc:	2302      	movs	r3, #2
 80084fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008500:	e002      	b.n	8008508 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008502:	2301      	movs	r3, #1
 8008504:	73fb      	strb	r3, [r7, #15]
    break;
 8008506:	bf00      	nop
  }
  return  speed;
 8008508:	7bfb      	ldrb	r3, [r7, #15]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3710      	adds	r7, #16
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008528:	4618      	mov	r0, r3
 800852a:	f7fa fa20 	bl	800296e <HAL_HCD_ResetPort>
 800852e:	4603      	mov	r3, r0
 8008530:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 f8f5 	bl	8008724 <USBH_Get_USB_Status>
 800853a:	4603      	mov	r3, r0
 800853c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800853e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3710      	adds	r7, #16
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800855a:	78fa      	ldrb	r2, [r7, #3]
 800855c:	4611      	mov	r1, r2
 800855e:	4618      	mov	r0, r3
 8008560:	f7fa fa27 	bl	80029b2 <HAL_HCD_HC_GetXferCount>
 8008564:	4603      	mov	r3, r0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3708      	adds	r7, #8
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800856e:	b590      	push	{r4, r7, lr}
 8008570:	b089      	sub	sp, #36	; 0x24
 8008572:	af04      	add	r7, sp, #16
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	4608      	mov	r0, r1
 8008578:	4611      	mov	r1, r2
 800857a:	461a      	mov	r2, r3
 800857c:	4603      	mov	r3, r0
 800857e:	70fb      	strb	r3, [r7, #3]
 8008580:	460b      	mov	r3, r1
 8008582:	70bb      	strb	r3, [r7, #2]
 8008584:	4613      	mov	r3, r2
 8008586:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008596:	787c      	ldrb	r4, [r7, #1]
 8008598:	78ba      	ldrb	r2, [r7, #2]
 800859a:	78f9      	ldrb	r1, [r7, #3]
 800859c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	4623      	mov	r3, r4
 80085ae:	f7f9 fe8a 	bl	80022c6 <HAL_HCD_HC_Init>
 80085b2:	4603      	mov	r3, r0
 80085b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f8b3 	bl	8008724 <USBH_Get_USB_Status>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd90      	pop	{r4, r7, pc}

080085cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085e6:	78fa      	ldrb	r2, [r7, #3]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f9 fefa 	bl	80023e4 <HAL_HCD_HC_Halt>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f000 f894 	bl	8008724 <USBH_Get_USB_Status>
 80085fc:	4603      	mov	r3, r0
 80085fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008600:	7bbb      	ldrb	r3, [r7, #14]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800860a:	b590      	push	{r4, r7, lr}
 800860c:	b089      	sub	sp, #36	; 0x24
 800860e:	af04      	add	r7, sp, #16
 8008610:	6078      	str	r0, [r7, #4]
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	461a      	mov	r2, r3
 8008618:	4603      	mov	r3, r0
 800861a:	70fb      	strb	r3, [r7, #3]
 800861c:	460b      	mov	r3, r1
 800861e:	70bb      	strb	r3, [r7, #2]
 8008620:	4613      	mov	r3, r2
 8008622:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008632:	787c      	ldrb	r4, [r7, #1]
 8008634:	78ba      	ldrb	r2, [r7, #2]
 8008636:	78f9      	ldrb	r1, [r7, #3]
 8008638:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800863c:	9303      	str	r3, [sp, #12]
 800863e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	4623      	mov	r3, r4
 800864e:	f7f9 feed 	bl	800242c <HAL_HCD_HC_SubmitRequest>
 8008652:	4603      	mov	r3, r0
 8008654:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	4618      	mov	r0, r3
 800865a:	f000 f863 	bl	8008724 <USBH_Get_USB_Status>
 800865e:	4603      	mov	r3, r0
 8008660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008662:	7bbb      	ldrb	r3, [r7, #14]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	bd90      	pop	{r4, r7, pc}

0800866c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f7fa f981 	bl	800298a <HAL_HCD_HC_GetURBState>
 8008688:	4603      	mov	r3, r0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b082      	sub	sp, #8
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	460b      	mov	r3, r1
 800869c:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800869e:	20c8      	movs	r0, #200	; 0xc8
 80086a0:	f7f9 f862 	bl	8001768 <HAL_Delay>
  return USBH_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3708      	adds	r7, #8
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
 80086ba:	4613      	mov	r3, r2
 80086bc:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086c4:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80086c6:	78fb      	ldrb	r3, [r7, #3]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	212c      	movs	r1, #44	; 0x2c
 80086cc:	fb01 f303 	mul.w	r3, r1, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	333b      	adds	r3, #59	; 0x3b
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d009      	beq.n	80086ee <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	212c      	movs	r1, #44	; 0x2c
 80086e0:	fb01 f303 	mul.w	r3, r1, r3
 80086e4:	4413      	add	r3, r2
 80086e6:	3354      	adds	r3, #84	; 0x54
 80086e8:	78ba      	ldrb	r2, [r7, #2]
 80086ea:	701a      	strb	r2, [r3, #0]
 80086ec:	e008      	b.n	8008700 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	212c      	movs	r1, #44	; 0x2c
 80086f4:	fb01 f303 	mul.w	r3, r1, r3
 80086f8:	4413      	add	r3, r2
 80086fa:	3355      	adds	r3, #85	; 0x55
 80086fc:	78ba      	ldrb	r2, [r7, #2]
 80086fe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f7f9 f826 	bl	8001768 <HAL_Delay>
}
 800871c:	bf00      	nop
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b03      	cmp	r3, #3
 8008736:	d817      	bhi.n	8008768 <USBH_Get_USB_Status+0x44>
 8008738:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <USBH_Get_USB_Status+0x1c>)
 800873a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873e:	bf00      	nop
 8008740:	08008751 	.word	0x08008751
 8008744:	08008757 	.word	0x08008757
 8008748:	0800875d 	.word	0x0800875d
 800874c:	08008763 	.word	0x08008763
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e00b      	b.n	800876e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008756:	2302      	movs	r3, #2
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e008      	b.n	800876e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e005      	b.n	800876e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008762:	2302      	movs	r3, #2
 8008764:	73fb      	strb	r3, [r7, #15]
    break;
 8008766:	e002      	b.n	800876e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008768:	2302      	movs	r3, #2
 800876a:	73fb      	strb	r3, [r7, #15]
    break;
 800876c:	bf00      	nop
  }
  return usb_status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <__errno>:
 800877c:	4b01      	ldr	r3, [pc, #4]	; (8008784 <__errno+0x8>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	2000002c 	.word	0x2000002c

08008788 <__libc_init_array>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4d0d      	ldr	r5, [pc, #52]	; (80087c0 <__libc_init_array+0x38>)
 800878c:	4c0d      	ldr	r4, [pc, #52]	; (80087c4 <__libc_init_array+0x3c>)
 800878e:	1b64      	subs	r4, r4, r5
 8008790:	10a4      	asrs	r4, r4, #2
 8008792:	2600      	movs	r6, #0
 8008794:	42a6      	cmp	r6, r4
 8008796:	d109      	bne.n	80087ac <__libc_init_array+0x24>
 8008798:	4d0b      	ldr	r5, [pc, #44]	; (80087c8 <__libc_init_array+0x40>)
 800879a:	4c0c      	ldr	r4, [pc, #48]	; (80087cc <__libc_init_array+0x44>)
 800879c:	f000 fc9e 	bl	80090dc <_init>
 80087a0:	1b64      	subs	r4, r4, r5
 80087a2:	10a4      	asrs	r4, r4, #2
 80087a4:	2600      	movs	r6, #0
 80087a6:	42a6      	cmp	r6, r4
 80087a8:	d105      	bne.n	80087b6 <__libc_init_array+0x2e>
 80087aa:	bd70      	pop	{r4, r5, r6, pc}
 80087ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b0:	4798      	blx	r3
 80087b2:	3601      	adds	r6, #1
 80087b4:	e7ee      	b.n	8008794 <__libc_init_array+0xc>
 80087b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ba:	4798      	blx	r3
 80087bc:	3601      	adds	r6, #1
 80087be:	e7f2      	b.n	80087a6 <__libc_init_array+0x1e>
 80087c0:	0802ea8c 	.word	0x0802ea8c
 80087c4:	0802ea8c 	.word	0x0802ea8c
 80087c8:	0802ea8c 	.word	0x0802ea8c
 80087cc:	0802ea90 	.word	0x0802ea90

080087d0 <malloc>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <malloc+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f000 b87f 	b.w	80088d8 <_malloc_r>
 80087da:	bf00      	nop
 80087dc:	2000002c 	.word	0x2000002c

080087e0 <free>:
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <free+0xc>)
 80087e2:	4601      	mov	r1, r0
 80087e4:	6818      	ldr	r0, [r3, #0]
 80087e6:	f000 b80b 	b.w	8008800 <_free_r>
 80087ea:	bf00      	nop
 80087ec:	2000002c 	.word	0x2000002c

080087f0 <memset>:
 80087f0:	4402      	add	r2, r0
 80087f2:	4603      	mov	r3, r0
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d100      	bne.n	80087fa <memset+0xa>
 80087f8:	4770      	bx	lr
 80087fa:	f803 1b01 	strb.w	r1, [r3], #1
 80087fe:	e7f9      	b.n	80087f4 <memset+0x4>

08008800 <_free_r>:
 8008800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008802:	2900      	cmp	r1, #0
 8008804:	d044      	beq.n	8008890 <_free_r+0x90>
 8008806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800880a:	9001      	str	r0, [sp, #4]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f1a1 0404 	sub.w	r4, r1, #4
 8008812:	bfb8      	it	lt
 8008814:	18e4      	addlt	r4, r4, r3
 8008816:	f000 f903 	bl	8008a20 <__malloc_lock>
 800881a:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <_free_r+0x94>)
 800881c:	9801      	ldr	r0, [sp, #4]
 800881e:	6813      	ldr	r3, [r2, #0]
 8008820:	b933      	cbnz	r3, 8008830 <_free_r+0x30>
 8008822:	6063      	str	r3, [r4, #4]
 8008824:	6014      	str	r4, [r2, #0]
 8008826:	b003      	add	sp, #12
 8008828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800882c:	f000 b8fe 	b.w	8008a2c <__malloc_unlock>
 8008830:	42a3      	cmp	r3, r4
 8008832:	d908      	bls.n	8008846 <_free_r+0x46>
 8008834:	6825      	ldr	r5, [r4, #0]
 8008836:	1961      	adds	r1, r4, r5
 8008838:	428b      	cmp	r3, r1
 800883a:	bf01      	itttt	eq
 800883c:	6819      	ldreq	r1, [r3, #0]
 800883e:	685b      	ldreq	r3, [r3, #4]
 8008840:	1949      	addeq	r1, r1, r5
 8008842:	6021      	streq	r1, [r4, #0]
 8008844:	e7ed      	b.n	8008822 <_free_r+0x22>
 8008846:	461a      	mov	r2, r3
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	b10b      	cbz	r3, 8008850 <_free_r+0x50>
 800884c:	42a3      	cmp	r3, r4
 800884e:	d9fa      	bls.n	8008846 <_free_r+0x46>
 8008850:	6811      	ldr	r1, [r2, #0]
 8008852:	1855      	adds	r5, r2, r1
 8008854:	42a5      	cmp	r5, r4
 8008856:	d10b      	bne.n	8008870 <_free_r+0x70>
 8008858:	6824      	ldr	r4, [r4, #0]
 800885a:	4421      	add	r1, r4
 800885c:	1854      	adds	r4, r2, r1
 800885e:	42a3      	cmp	r3, r4
 8008860:	6011      	str	r1, [r2, #0]
 8008862:	d1e0      	bne.n	8008826 <_free_r+0x26>
 8008864:	681c      	ldr	r4, [r3, #0]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	6053      	str	r3, [r2, #4]
 800886a:	4421      	add	r1, r4
 800886c:	6011      	str	r1, [r2, #0]
 800886e:	e7da      	b.n	8008826 <_free_r+0x26>
 8008870:	d902      	bls.n	8008878 <_free_r+0x78>
 8008872:	230c      	movs	r3, #12
 8008874:	6003      	str	r3, [r0, #0]
 8008876:	e7d6      	b.n	8008826 <_free_r+0x26>
 8008878:	6825      	ldr	r5, [r4, #0]
 800887a:	1961      	adds	r1, r4, r5
 800887c:	428b      	cmp	r3, r1
 800887e:	bf04      	itt	eq
 8008880:	6819      	ldreq	r1, [r3, #0]
 8008882:	685b      	ldreq	r3, [r3, #4]
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	bf04      	itt	eq
 8008888:	1949      	addeq	r1, r1, r5
 800888a:	6021      	streq	r1, [r4, #0]
 800888c:	6054      	str	r4, [r2, #4]
 800888e:	e7ca      	b.n	8008826 <_free_r+0x26>
 8008890:	b003      	add	sp, #12
 8008892:	bd30      	pop	{r4, r5, pc}
 8008894:	20000918 	.word	0x20000918

08008898 <sbrk_aligned>:
 8008898:	b570      	push	{r4, r5, r6, lr}
 800889a:	4e0e      	ldr	r6, [pc, #56]	; (80088d4 <sbrk_aligned+0x3c>)
 800889c:	460c      	mov	r4, r1
 800889e:	6831      	ldr	r1, [r6, #0]
 80088a0:	4605      	mov	r5, r0
 80088a2:	b911      	cbnz	r1, 80088aa <sbrk_aligned+0x12>
 80088a4:	f000 f88c 	bl	80089c0 <_sbrk_r>
 80088a8:	6030      	str	r0, [r6, #0]
 80088aa:	4621      	mov	r1, r4
 80088ac:	4628      	mov	r0, r5
 80088ae:	f000 f887 	bl	80089c0 <_sbrk_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d00a      	beq.n	80088cc <sbrk_aligned+0x34>
 80088b6:	1cc4      	adds	r4, r0, #3
 80088b8:	f024 0403 	bic.w	r4, r4, #3
 80088bc:	42a0      	cmp	r0, r4
 80088be:	d007      	beq.n	80088d0 <sbrk_aligned+0x38>
 80088c0:	1a21      	subs	r1, r4, r0
 80088c2:	4628      	mov	r0, r5
 80088c4:	f000 f87c 	bl	80089c0 <_sbrk_r>
 80088c8:	3001      	adds	r0, #1
 80088ca:	d101      	bne.n	80088d0 <sbrk_aligned+0x38>
 80088cc:	f04f 34ff 	mov.w	r4, #4294967295
 80088d0:	4620      	mov	r0, r4
 80088d2:	bd70      	pop	{r4, r5, r6, pc}
 80088d4:	2000091c 	.word	0x2000091c

080088d8 <_malloc_r>:
 80088d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088dc:	1ccd      	adds	r5, r1, #3
 80088de:	f025 0503 	bic.w	r5, r5, #3
 80088e2:	3508      	adds	r5, #8
 80088e4:	2d0c      	cmp	r5, #12
 80088e6:	bf38      	it	cc
 80088e8:	250c      	movcc	r5, #12
 80088ea:	2d00      	cmp	r5, #0
 80088ec:	4607      	mov	r7, r0
 80088ee:	db01      	blt.n	80088f4 <_malloc_r+0x1c>
 80088f0:	42a9      	cmp	r1, r5
 80088f2:	d905      	bls.n	8008900 <_malloc_r+0x28>
 80088f4:	230c      	movs	r3, #12
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	2600      	movs	r6, #0
 80088fa:	4630      	mov	r0, r6
 80088fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008900:	4e2e      	ldr	r6, [pc, #184]	; (80089bc <_malloc_r+0xe4>)
 8008902:	f000 f88d 	bl	8008a20 <__malloc_lock>
 8008906:	6833      	ldr	r3, [r6, #0]
 8008908:	461c      	mov	r4, r3
 800890a:	bb34      	cbnz	r4, 800895a <_malloc_r+0x82>
 800890c:	4629      	mov	r1, r5
 800890e:	4638      	mov	r0, r7
 8008910:	f7ff ffc2 	bl	8008898 <sbrk_aligned>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	4604      	mov	r4, r0
 8008918:	d14d      	bne.n	80089b6 <_malloc_r+0xde>
 800891a:	6834      	ldr	r4, [r6, #0]
 800891c:	4626      	mov	r6, r4
 800891e:	2e00      	cmp	r6, #0
 8008920:	d140      	bne.n	80089a4 <_malloc_r+0xcc>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	4631      	mov	r1, r6
 8008926:	4638      	mov	r0, r7
 8008928:	eb04 0803 	add.w	r8, r4, r3
 800892c:	f000 f848 	bl	80089c0 <_sbrk_r>
 8008930:	4580      	cmp	r8, r0
 8008932:	d13a      	bne.n	80089aa <_malloc_r+0xd2>
 8008934:	6821      	ldr	r1, [r4, #0]
 8008936:	3503      	adds	r5, #3
 8008938:	1a6d      	subs	r5, r5, r1
 800893a:	f025 0503 	bic.w	r5, r5, #3
 800893e:	3508      	adds	r5, #8
 8008940:	2d0c      	cmp	r5, #12
 8008942:	bf38      	it	cc
 8008944:	250c      	movcc	r5, #12
 8008946:	4629      	mov	r1, r5
 8008948:	4638      	mov	r0, r7
 800894a:	f7ff ffa5 	bl	8008898 <sbrk_aligned>
 800894e:	3001      	adds	r0, #1
 8008950:	d02b      	beq.n	80089aa <_malloc_r+0xd2>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	442b      	add	r3, r5
 8008956:	6023      	str	r3, [r4, #0]
 8008958:	e00e      	b.n	8008978 <_malloc_r+0xa0>
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	1b52      	subs	r2, r2, r5
 800895e:	d41e      	bmi.n	800899e <_malloc_r+0xc6>
 8008960:	2a0b      	cmp	r2, #11
 8008962:	d916      	bls.n	8008992 <_malloc_r+0xba>
 8008964:	1961      	adds	r1, r4, r5
 8008966:	42a3      	cmp	r3, r4
 8008968:	6025      	str	r5, [r4, #0]
 800896a:	bf18      	it	ne
 800896c:	6059      	strne	r1, [r3, #4]
 800896e:	6863      	ldr	r3, [r4, #4]
 8008970:	bf08      	it	eq
 8008972:	6031      	streq	r1, [r6, #0]
 8008974:	5162      	str	r2, [r4, r5]
 8008976:	604b      	str	r3, [r1, #4]
 8008978:	4638      	mov	r0, r7
 800897a:	f104 060b 	add.w	r6, r4, #11
 800897e:	f000 f855 	bl	8008a2c <__malloc_unlock>
 8008982:	f026 0607 	bic.w	r6, r6, #7
 8008986:	1d23      	adds	r3, r4, #4
 8008988:	1af2      	subs	r2, r6, r3
 800898a:	d0b6      	beq.n	80088fa <_malloc_r+0x22>
 800898c:	1b9b      	subs	r3, r3, r6
 800898e:	50a3      	str	r3, [r4, r2]
 8008990:	e7b3      	b.n	80088fa <_malloc_r+0x22>
 8008992:	6862      	ldr	r2, [r4, #4]
 8008994:	42a3      	cmp	r3, r4
 8008996:	bf0c      	ite	eq
 8008998:	6032      	streq	r2, [r6, #0]
 800899a:	605a      	strne	r2, [r3, #4]
 800899c:	e7ec      	b.n	8008978 <_malloc_r+0xa0>
 800899e:	4623      	mov	r3, r4
 80089a0:	6864      	ldr	r4, [r4, #4]
 80089a2:	e7b2      	b.n	800890a <_malloc_r+0x32>
 80089a4:	4634      	mov	r4, r6
 80089a6:	6876      	ldr	r6, [r6, #4]
 80089a8:	e7b9      	b.n	800891e <_malloc_r+0x46>
 80089aa:	230c      	movs	r3, #12
 80089ac:	603b      	str	r3, [r7, #0]
 80089ae:	4638      	mov	r0, r7
 80089b0:	f000 f83c 	bl	8008a2c <__malloc_unlock>
 80089b4:	e7a1      	b.n	80088fa <_malloc_r+0x22>
 80089b6:	6025      	str	r5, [r4, #0]
 80089b8:	e7de      	b.n	8008978 <_malloc_r+0xa0>
 80089ba:	bf00      	nop
 80089bc:	20000918 	.word	0x20000918

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_sbrk_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f8 fde8 	bl	80015a0 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	20000920 	.word	0x20000920

080089e0 <siprintf>:
 80089e0:	b40e      	push	{r1, r2, r3}
 80089e2:	b500      	push	{lr}
 80089e4:	b09c      	sub	sp, #112	; 0x70
 80089e6:	ab1d      	add	r3, sp, #116	; 0x74
 80089e8:	9002      	str	r0, [sp, #8]
 80089ea:	9006      	str	r0, [sp, #24]
 80089ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f0:	4809      	ldr	r0, [pc, #36]	; (8008a18 <siprintf+0x38>)
 80089f2:	9107      	str	r1, [sp, #28]
 80089f4:	9104      	str	r1, [sp, #16]
 80089f6:	4909      	ldr	r1, [pc, #36]	; (8008a1c <siprintf+0x3c>)
 80089f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fc:	9105      	str	r1, [sp, #20]
 80089fe:	6800      	ldr	r0, [r0, #0]
 8008a00:	9301      	str	r3, [sp, #4]
 8008a02:	a902      	add	r1, sp, #8
 8008a04:	f000 f874 	bl	8008af0 <_svfiprintf_r>
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	b01c      	add	sp, #112	; 0x70
 8008a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a14:	b003      	add	sp, #12
 8008a16:	4770      	bx	lr
 8008a18:	2000002c 	.word	0x2000002c
 8008a1c:	ffff0208 	.word	0xffff0208

08008a20 <__malloc_lock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	; (8008a28 <__malloc_lock+0x8>)
 8008a22:	f000 baf9 	b.w	8009018 <__retarget_lock_acquire_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000924 	.word	0x20000924

08008a2c <__malloc_unlock>:
 8008a2c:	4801      	ldr	r0, [pc, #4]	; (8008a34 <__malloc_unlock+0x8>)
 8008a2e:	f000 baf4 	b.w	800901a <__retarget_lock_release_recursive>
 8008a32:	bf00      	nop
 8008a34:	20000924 	.word	0x20000924

08008a38 <__ssputs_r>:
 8008a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	688e      	ldr	r6, [r1, #8]
 8008a3e:	429e      	cmp	r6, r3
 8008a40:	4682      	mov	sl, r0
 8008a42:	460c      	mov	r4, r1
 8008a44:	4690      	mov	r8, r2
 8008a46:	461f      	mov	r7, r3
 8008a48:	d838      	bhi.n	8008abc <__ssputs_r+0x84>
 8008a4a:	898a      	ldrh	r2, [r1, #12]
 8008a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a50:	d032      	beq.n	8008ab8 <__ssputs_r+0x80>
 8008a52:	6825      	ldr	r5, [r4, #0]
 8008a54:	6909      	ldr	r1, [r1, #16]
 8008a56:	eba5 0901 	sub.w	r9, r5, r1
 8008a5a:	6965      	ldr	r5, [r4, #20]
 8008a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008a64:	3301      	adds	r3, #1
 8008a66:	444b      	add	r3, r9
 8008a68:	106d      	asrs	r5, r5, #1
 8008a6a:	429d      	cmp	r5, r3
 8008a6c:	bf38      	it	cc
 8008a6e:	461d      	movcc	r5, r3
 8008a70:	0553      	lsls	r3, r2, #21
 8008a72:	d531      	bpl.n	8008ad8 <__ssputs_r+0xa0>
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7ff ff2f 	bl	80088d8 <_malloc_r>
 8008a7a:	4606      	mov	r6, r0
 8008a7c:	b950      	cbnz	r0, 8008a94 <__ssputs_r+0x5c>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	f8ca 3000 	str.w	r3, [sl]
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a94:	6921      	ldr	r1, [r4, #16]
 8008a96:	464a      	mov	r2, r9
 8008a98:	f000 fac0 	bl	800901c <memcpy>
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa6:	81a3      	strh	r3, [r4, #12]
 8008aa8:	6126      	str	r6, [r4, #16]
 8008aaa:	6165      	str	r5, [r4, #20]
 8008aac:	444e      	add	r6, r9
 8008aae:	eba5 0509 	sub.w	r5, r5, r9
 8008ab2:	6026      	str	r6, [r4, #0]
 8008ab4:	60a5      	str	r5, [r4, #8]
 8008ab6:	463e      	mov	r6, r7
 8008ab8:	42be      	cmp	r6, r7
 8008aba:	d900      	bls.n	8008abe <__ssputs_r+0x86>
 8008abc:	463e      	mov	r6, r7
 8008abe:	6820      	ldr	r0, [r4, #0]
 8008ac0:	4632      	mov	r2, r6
 8008ac2:	4641      	mov	r1, r8
 8008ac4:	f000 fab8 	bl	8009038 <memmove>
 8008ac8:	68a3      	ldr	r3, [r4, #8]
 8008aca:	1b9b      	subs	r3, r3, r6
 8008acc:	60a3      	str	r3, [r4, #8]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	4433      	add	r3, r6
 8008ad2:	6023      	str	r3, [r4, #0]
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e7db      	b.n	8008a90 <__ssputs_r+0x58>
 8008ad8:	462a      	mov	r2, r5
 8008ada:	f000 fac7 	bl	800906c <_realloc_r>
 8008ade:	4606      	mov	r6, r0
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d1e1      	bne.n	8008aa8 <__ssputs_r+0x70>
 8008ae4:	6921      	ldr	r1, [r4, #16]
 8008ae6:	4650      	mov	r0, sl
 8008ae8:	f7ff fe8a 	bl	8008800 <_free_r>
 8008aec:	e7c7      	b.n	8008a7e <__ssputs_r+0x46>
	...

08008af0 <_svfiprintf_r>:
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	4698      	mov	r8, r3
 8008af6:	898b      	ldrh	r3, [r1, #12]
 8008af8:	061b      	lsls	r3, r3, #24
 8008afa:	b09d      	sub	sp, #116	; 0x74
 8008afc:	4607      	mov	r7, r0
 8008afe:	460d      	mov	r5, r1
 8008b00:	4614      	mov	r4, r2
 8008b02:	d50e      	bpl.n	8008b22 <_svfiprintf_r+0x32>
 8008b04:	690b      	ldr	r3, [r1, #16]
 8008b06:	b963      	cbnz	r3, 8008b22 <_svfiprintf_r+0x32>
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	f7ff fee5 	bl	80088d8 <_malloc_r>
 8008b0e:	6028      	str	r0, [r5, #0]
 8008b10:	6128      	str	r0, [r5, #16]
 8008b12:	b920      	cbnz	r0, 8008b1e <_svfiprintf_r+0x2e>
 8008b14:	230c      	movs	r3, #12
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	f04f 30ff 	mov.w	r0, #4294967295
 8008b1c:	e0d1      	b.n	8008cc2 <_svfiprintf_r+0x1d2>
 8008b1e:	2340      	movs	r3, #64	; 0x40
 8008b20:	616b      	str	r3, [r5, #20]
 8008b22:	2300      	movs	r3, #0
 8008b24:	9309      	str	r3, [sp, #36]	; 0x24
 8008b26:	2320      	movs	r3, #32
 8008b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b30:	2330      	movs	r3, #48	; 0x30
 8008b32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008cdc <_svfiprintf_r+0x1ec>
 8008b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b3a:	f04f 0901 	mov.w	r9, #1
 8008b3e:	4623      	mov	r3, r4
 8008b40:	469a      	mov	sl, r3
 8008b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b46:	b10a      	cbz	r2, 8008b4c <_svfiprintf_r+0x5c>
 8008b48:	2a25      	cmp	r2, #37	; 0x25
 8008b4a:	d1f9      	bne.n	8008b40 <_svfiprintf_r+0x50>
 8008b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008b50:	d00b      	beq.n	8008b6a <_svfiprintf_r+0x7a>
 8008b52:	465b      	mov	r3, fp
 8008b54:	4622      	mov	r2, r4
 8008b56:	4629      	mov	r1, r5
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff ff6d 	bl	8008a38 <__ssputs_r>
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f000 80aa 	beq.w	8008cb8 <_svfiprintf_r+0x1c8>
 8008b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b66:	445a      	add	r2, fp
 8008b68:	9209      	str	r2, [sp, #36]	; 0x24
 8008b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 80a2 	beq.w	8008cb8 <_svfiprintf_r+0x1c8>
 8008b74:	2300      	movs	r3, #0
 8008b76:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b7e:	f10a 0a01 	add.w	sl, sl, #1
 8008b82:	9304      	str	r3, [sp, #16]
 8008b84:	9307      	str	r3, [sp, #28]
 8008b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b8c:	4654      	mov	r4, sl
 8008b8e:	2205      	movs	r2, #5
 8008b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b94:	4851      	ldr	r0, [pc, #324]	; (8008cdc <_svfiprintf_r+0x1ec>)
 8008b96:	f7f7 fb1b 	bl	80001d0 <memchr>
 8008b9a:	9a04      	ldr	r2, [sp, #16]
 8008b9c:	b9d8      	cbnz	r0, 8008bd6 <_svfiprintf_r+0xe6>
 8008b9e:	06d0      	lsls	r0, r2, #27
 8008ba0:	bf44      	itt	mi
 8008ba2:	2320      	movmi	r3, #32
 8008ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba8:	0711      	lsls	r1, r2, #28
 8008baa:	bf44      	itt	mi
 8008bac:	232b      	movmi	r3, #43	; 0x2b
 8008bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb8:	d015      	beq.n	8008be6 <_svfiprintf_r+0xf6>
 8008bba:	9a07      	ldr	r2, [sp, #28]
 8008bbc:	4654      	mov	r4, sl
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	f04f 0c0a 	mov.w	ip, #10
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bca:	3b30      	subs	r3, #48	; 0x30
 8008bcc:	2b09      	cmp	r3, #9
 8008bce:	d94e      	bls.n	8008c6e <_svfiprintf_r+0x17e>
 8008bd0:	b1b0      	cbz	r0, 8008c00 <_svfiprintf_r+0x110>
 8008bd2:	9207      	str	r2, [sp, #28]
 8008bd4:	e014      	b.n	8008c00 <_svfiprintf_r+0x110>
 8008bd6:	eba0 0308 	sub.w	r3, r0, r8
 8008bda:	fa09 f303 	lsl.w	r3, r9, r3
 8008bde:	4313      	orrs	r3, r2
 8008be0:	9304      	str	r3, [sp, #16]
 8008be2:	46a2      	mov	sl, r4
 8008be4:	e7d2      	b.n	8008b8c <_svfiprintf_r+0x9c>
 8008be6:	9b03      	ldr	r3, [sp, #12]
 8008be8:	1d19      	adds	r1, r3, #4
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	9103      	str	r1, [sp, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bfbb      	ittet	lt
 8008bf2:	425b      	neglt	r3, r3
 8008bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8008bf8:	9307      	strge	r3, [sp, #28]
 8008bfa:	9307      	strlt	r3, [sp, #28]
 8008bfc:	bfb8      	it	lt
 8008bfe:	9204      	strlt	r2, [sp, #16]
 8008c00:	7823      	ldrb	r3, [r4, #0]
 8008c02:	2b2e      	cmp	r3, #46	; 0x2e
 8008c04:	d10c      	bne.n	8008c20 <_svfiprintf_r+0x130>
 8008c06:	7863      	ldrb	r3, [r4, #1]
 8008c08:	2b2a      	cmp	r3, #42	; 0x2a
 8008c0a:	d135      	bne.n	8008c78 <_svfiprintf_r+0x188>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	1d1a      	adds	r2, r3, #4
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9203      	str	r2, [sp, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfb8      	it	lt
 8008c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c1c:	3402      	adds	r4, #2
 8008c1e:	9305      	str	r3, [sp, #20]
 8008c20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008cec <_svfiprintf_r+0x1fc>
 8008c24:	7821      	ldrb	r1, [r4, #0]
 8008c26:	2203      	movs	r2, #3
 8008c28:	4650      	mov	r0, sl
 8008c2a:	f7f7 fad1 	bl	80001d0 <memchr>
 8008c2e:	b140      	cbz	r0, 8008c42 <_svfiprintf_r+0x152>
 8008c30:	2340      	movs	r3, #64	; 0x40
 8008c32:	eba0 000a 	sub.w	r0, r0, sl
 8008c36:	fa03 f000 	lsl.w	r0, r3, r0
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	4303      	orrs	r3, r0
 8008c3e:	3401      	adds	r4, #1
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c46:	4826      	ldr	r0, [pc, #152]	; (8008ce0 <_svfiprintf_r+0x1f0>)
 8008c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c4c:	2206      	movs	r2, #6
 8008c4e:	f7f7 fabf 	bl	80001d0 <memchr>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d038      	beq.n	8008cc8 <_svfiprintf_r+0x1d8>
 8008c56:	4b23      	ldr	r3, [pc, #140]	; (8008ce4 <_svfiprintf_r+0x1f4>)
 8008c58:	bb1b      	cbnz	r3, 8008ca2 <_svfiprintf_r+0x1b2>
 8008c5a:	9b03      	ldr	r3, [sp, #12]
 8008c5c:	3307      	adds	r3, #7
 8008c5e:	f023 0307 	bic.w	r3, r3, #7
 8008c62:	3308      	adds	r3, #8
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	4433      	add	r3, r6
 8008c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6c:	e767      	b.n	8008b3e <_svfiprintf_r+0x4e>
 8008c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c72:	460c      	mov	r4, r1
 8008c74:	2001      	movs	r0, #1
 8008c76:	e7a5      	b.n	8008bc4 <_svfiprintf_r+0xd4>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	3401      	adds	r4, #1
 8008c7c:	9305      	str	r3, [sp, #20]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	f04f 0c0a 	mov.w	ip, #10
 8008c84:	4620      	mov	r0, r4
 8008c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c8a:	3a30      	subs	r2, #48	; 0x30
 8008c8c:	2a09      	cmp	r2, #9
 8008c8e:	d903      	bls.n	8008c98 <_svfiprintf_r+0x1a8>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d0c5      	beq.n	8008c20 <_svfiprintf_r+0x130>
 8008c94:	9105      	str	r1, [sp, #20]
 8008c96:	e7c3      	b.n	8008c20 <_svfiprintf_r+0x130>
 8008c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e7f0      	b.n	8008c84 <_svfiprintf_r+0x194>
 8008ca2:	ab03      	add	r3, sp, #12
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	462a      	mov	r2, r5
 8008ca8:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <_svfiprintf_r+0x1f8>)
 8008caa:	a904      	add	r1, sp, #16
 8008cac:	4638      	mov	r0, r7
 8008cae:	f3af 8000 	nop.w
 8008cb2:	1c42      	adds	r2, r0, #1
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	d1d6      	bne.n	8008c66 <_svfiprintf_r+0x176>
 8008cb8:	89ab      	ldrh	r3, [r5, #12]
 8008cba:	065b      	lsls	r3, r3, #25
 8008cbc:	f53f af2c 	bmi.w	8008b18 <_svfiprintf_r+0x28>
 8008cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cc2:	b01d      	add	sp, #116	; 0x74
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	ab03      	add	r3, sp, #12
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	462a      	mov	r2, r5
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <_svfiprintf_r+0x1f8>)
 8008cd0:	a904      	add	r1, sp, #16
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	f000 f87a 	bl	8008dcc <_printf_i>
 8008cd8:	e7eb      	b.n	8008cb2 <_svfiprintf_r+0x1c2>
 8008cda:	bf00      	nop
 8008cdc:	0802ea50 	.word	0x0802ea50
 8008ce0:	0802ea5a 	.word	0x0802ea5a
 8008ce4:	00000000 	.word	0x00000000
 8008ce8:	08008a39 	.word	0x08008a39
 8008cec:	0802ea56 	.word	0x0802ea56

08008cf0 <_printf_common>:
 8008cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf4:	4616      	mov	r6, r2
 8008cf6:	4699      	mov	r9, r3
 8008cf8:	688a      	ldr	r2, [r1, #8]
 8008cfa:	690b      	ldr	r3, [r1, #16]
 8008cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d00:	4293      	cmp	r3, r2
 8008d02:	bfb8      	it	lt
 8008d04:	4613      	movlt	r3, r2
 8008d06:	6033      	str	r3, [r6, #0]
 8008d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	460c      	mov	r4, r1
 8008d10:	b10a      	cbz	r2, 8008d16 <_printf_common+0x26>
 8008d12:	3301      	adds	r3, #1
 8008d14:	6033      	str	r3, [r6, #0]
 8008d16:	6823      	ldr	r3, [r4, #0]
 8008d18:	0699      	lsls	r1, r3, #26
 8008d1a:	bf42      	ittt	mi
 8008d1c:	6833      	ldrmi	r3, [r6, #0]
 8008d1e:	3302      	addmi	r3, #2
 8008d20:	6033      	strmi	r3, [r6, #0]
 8008d22:	6825      	ldr	r5, [r4, #0]
 8008d24:	f015 0506 	ands.w	r5, r5, #6
 8008d28:	d106      	bne.n	8008d38 <_printf_common+0x48>
 8008d2a:	f104 0a19 	add.w	sl, r4, #25
 8008d2e:	68e3      	ldr	r3, [r4, #12]
 8008d30:	6832      	ldr	r2, [r6, #0]
 8008d32:	1a9b      	subs	r3, r3, r2
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dc26      	bgt.n	8008d86 <_printf_common+0x96>
 8008d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008d3c:	1e13      	subs	r3, r2, #0
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	bf18      	it	ne
 8008d42:	2301      	movne	r3, #1
 8008d44:	0692      	lsls	r2, r2, #26
 8008d46:	d42b      	bmi.n	8008da0 <_printf_common+0xb0>
 8008d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d4c:	4649      	mov	r1, r9
 8008d4e:	4638      	mov	r0, r7
 8008d50:	47c0      	blx	r8
 8008d52:	3001      	adds	r0, #1
 8008d54:	d01e      	beq.n	8008d94 <_printf_common+0xa4>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	68e5      	ldr	r5, [r4, #12]
 8008d5a:	6832      	ldr	r2, [r6, #0]
 8008d5c:	f003 0306 	and.w	r3, r3, #6
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	bf08      	it	eq
 8008d64:	1aad      	subeq	r5, r5, r2
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	bf0c      	ite	eq
 8008d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d70:	2500      	movne	r5, #0
 8008d72:	4293      	cmp	r3, r2
 8008d74:	bfc4      	itt	gt
 8008d76:	1a9b      	subgt	r3, r3, r2
 8008d78:	18ed      	addgt	r5, r5, r3
 8008d7a:	2600      	movs	r6, #0
 8008d7c:	341a      	adds	r4, #26
 8008d7e:	42b5      	cmp	r5, r6
 8008d80:	d11a      	bne.n	8008db8 <_printf_common+0xc8>
 8008d82:	2000      	movs	r0, #0
 8008d84:	e008      	b.n	8008d98 <_printf_common+0xa8>
 8008d86:	2301      	movs	r3, #1
 8008d88:	4652      	mov	r2, sl
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	47c0      	blx	r8
 8008d90:	3001      	adds	r0, #1
 8008d92:	d103      	bne.n	8008d9c <_printf_common+0xac>
 8008d94:	f04f 30ff 	mov.w	r0, #4294967295
 8008d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	e7c6      	b.n	8008d2e <_printf_common+0x3e>
 8008da0:	18e1      	adds	r1, r4, r3
 8008da2:	1c5a      	adds	r2, r3, #1
 8008da4:	2030      	movs	r0, #48	; 0x30
 8008da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008daa:	4422      	add	r2, r4
 8008dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008db4:	3302      	adds	r3, #2
 8008db6:	e7c7      	b.n	8008d48 <_printf_common+0x58>
 8008db8:	2301      	movs	r3, #1
 8008dba:	4622      	mov	r2, r4
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	4638      	mov	r0, r7
 8008dc0:	47c0      	blx	r8
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	d0e6      	beq.n	8008d94 <_printf_common+0xa4>
 8008dc6:	3601      	adds	r6, #1
 8008dc8:	e7d9      	b.n	8008d7e <_printf_common+0x8e>
	...

08008dcc <_printf_i>:
 8008dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd0:	7e0f      	ldrb	r7, [r1, #24]
 8008dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008dd4:	2f78      	cmp	r7, #120	; 0x78
 8008dd6:	4691      	mov	r9, r2
 8008dd8:	4680      	mov	r8, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	469a      	mov	sl, r3
 8008dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008de2:	d807      	bhi.n	8008df4 <_printf_i+0x28>
 8008de4:	2f62      	cmp	r7, #98	; 0x62
 8008de6:	d80a      	bhi.n	8008dfe <_printf_i+0x32>
 8008de8:	2f00      	cmp	r7, #0
 8008dea:	f000 80d8 	beq.w	8008f9e <_printf_i+0x1d2>
 8008dee:	2f58      	cmp	r7, #88	; 0x58
 8008df0:	f000 80a3 	beq.w	8008f3a <_printf_i+0x16e>
 8008df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008dfc:	e03a      	b.n	8008e74 <_printf_i+0xa8>
 8008dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008e02:	2b15      	cmp	r3, #21
 8008e04:	d8f6      	bhi.n	8008df4 <_printf_i+0x28>
 8008e06:	a101      	add	r1, pc, #4	; (adr r1, 8008e0c <_printf_i+0x40>)
 8008e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008df5 	.word	0x08008df5
 8008e18:	08008df5 	.word	0x08008df5
 8008e1c:	08008df5 	.word	0x08008df5
 8008e20:	08008df5 	.word	0x08008df5
 8008e24:	08008e79 	.word	0x08008e79
 8008e28:	08008df5 	.word	0x08008df5
 8008e2c:	08008df5 	.word	0x08008df5
 8008e30:	08008df5 	.word	0x08008df5
 8008e34:	08008df5 	.word	0x08008df5
 8008e38:	08008f85 	.word	0x08008f85
 8008e3c:	08008ea9 	.word	0x08008ea9
 8008e40:	08008f67 	.word	0x08008f67
 8008e44:	08008df5 	.word	0x08008df5
 8008e48:	08008df5 	.word	0x08008df5
 8008e4c:	08008fa7 	.word	0x08008fa7
 8008e50:	08008df5 	.word	0x08008df5
 8008e54:	08008ea9 	.word	0x08008ea9
 8008e58:	08008df5 	.word	0x08008df5
 8008e5c:	08008df5 	.word	0x08008df5
 8008e60:	08008f6f 	.word	0x08008f6f
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	1d1a      	adds	r2, r3, #4
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	602a      	str	r2, [r5, #0]
 8008e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e74:	2301      	movs	r3, #1
 8008e76:	e0a3      	b.n	8008fc0 <_printf_i+0x1f4>
 8008e78:	6820      	ldr	r0, [r4, #0]
 8008e7a:	6829      	ldr	r1, [r5, #0]
 8008e7c:	0606      	lsls	r6, r0, #24
 8008e7e:	f101 0304 	add.w	r3, r1, #4
 8008e82:	d50a      	bpl.n	8008e9a <_printf_i+0xce>
 8008e84:	680e      	ldr	r6, [r1, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	2e00      	cmp	r6, #0
 8008e8a:	da03      	bge.n	8008e94 <_printf_i+0xc8>
 8008e8c:	232d      	movs	r3, #45	; 0x2d
 8008e8e:	4276      	negs	r6, r6
 8008e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e94:	485e      	ldr	r0, [pc, #376]	; (8009010 <_printf_i+0x244>)
 8008e96:	230a      	movs	r3, #10
 8008e98:	e019      	b.n	8008ece <_printf_i+0x102>
 8008e9a:	680e      	ldr	r6, [r1, #0]
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008ea2:	bf18      	it	ne
 8008ea4:	b236      	sxthne	r6, r6
 8008ea6:	e7ef      	b.n	8008e88 <_printf_i+0xbc>
 8008ea8:	682b      	ldr	r3, [r5, #0]
 8008eaa:	6820      	ldr	r0, [r4, #0]
 8008eac:	1d19      	adds	r1, r3, #4
 8008eae:	6029      	str	r1, [r5, #0]
 8008eb0:	0601      	lsls	r1, r0, #24
 8008eb2:	d501      	bpl.n	8008eb8 <_printf_i+0xec>
 8008eb4:	681e      	ldr	r6, [r3, #0]
 8008eb6:	e002      	b.n	8008ebe <_printf_i+0xf2>
 8008eb8:	0646      	lsls	r6, r0, #25
 8008eba:	d5fb      	bpl.n	8008eb4 <_printf_i+0xe8>
 8008ebc:	881e      	ldrh	r6, [r3, #0]
 8008ebe:	4854      	ldr	r0, [pc, #336]	; (8009010 <_printf_i+0x244>)
 8008ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2308      	moveq	r3, #8
 8008ec6:	230a      	movne	r3, #10
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ece:	6865      	ldr	r5, [r4, #4]
 8008ed0:	60a5      	str	r5, [r4, #8]
 8008ed2:	2d00      	cmp	r5, #0
 8008ed4:	bfa2      	ittt	ge
 8008ed6:	6821      	ldrge	r1, [r4, #0]
 8008ed8:	f021 0104 	bicge.w	r1, r1, #4
 8008edc:	6021      	strge	r1, [r4, #0]
 8008ede:	b90e      	cbnz	r6, 8008ee4 <_printf_i+0x118>
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	d04d      	beq.n	8008f80 <_printf_i+0x1b4>
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008eea:	fb03 6711 	mls	r7, r3, r1, r6
 8008eee:	5dc7      	ldrb	r7, [r0, r7]
 8008ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ef4:	4637      	mov	r7, r6
 8008ef6:	42bb      	cmp	r3, r7
 8008ef8:	460e      	mov	r6, r1
 8008efa:	d9f4      	bls.n	8008ee6 <_printf_i+0x11a>
 8008efc:	2b08      	cmp	r3, #8
 8008efe:	d10b      	bne.n	8008f18 <_printf_i+0x14c>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	07de      	lsls	r6, r3, #31
 8008f04:	d508      	bpl.n	8008f18 <_printf_i+0x14c>
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	bfde      	ittt	le
 8008f0e:	2330      	movle	r3, #48	; 0x30
 8008f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f18:	1b52      	subs	r2, r2, r5
 8008f1a:	6122      	str	r2, [r4, #16]
 8008f1c:	f8cd a000 	str.w	sl, [sp]
 8008f20:	464b      	mov	r3, r9
 8008f22:	aa03      	add	r2, sp, #12
 8008f24:	4621      	mov	r1, r4
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7ff fee2 	bl	8008cf0 <_printf_common>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d14c      	bne.n	8008fca <_printf_i+0x1fe>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	b004      	add	sp, #16
 8008f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f3a:	4835      	ldr	r0, [pc, #212]	; (8009010 <_printf_i+0x244>)
 8008f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008f40:	6829      	ldr	r1, [r5, #0]
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f48:	6029      	str	r1, [r5, #0]
 8008f4a:	061d      	lsls	r5, r3, #24
 8008f4c:	d514      	bpl.n	8008f78 <_printf_i+0x1ac>
 8008f4e:	07df      	lsls	r7, r3, #31
 8008f50:	bf44      	itt	mi
 8008f52:	f043 0320 	orrmi.w	r3, r3, #32
 8008f56:	6023      	strmi	r3, [r4, #0]
 8008f58:	b91e      	cbnz	r6, 8008f62 <_printf_i+0x196>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f023 0320 	bic.w	r3, r3, #32
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	2310      	movs	r3, #16
 8008f64:	e7b0      	b.n	8008ec8 <_printf_i+0xfc>
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	f043 0320 	orr.w	r3, r3, #32
 8008f6c:	6023      	str	r3, [r4, #0]
 8008f6e:	2378      	movs	r3, #120	; 0x78
 8008f70:	4828      	ldr	r0, [pc, #160]	; (8009014 <_printf_i+0x248>)
 8008f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f76:	e7e3      	b.n	8008f40 <_printf_i+0x174>
 8008f78:	0659      	lsls	r1, r3, #25
 8008f7a:	bf48      	it	mi
 8008f7c:	b2b6      	uxthmi	r6, r6
 8008f7e:	e7e6      	b.n	8008f4e <_printf_i+0x182>
 8008f80:	4615      	mov	r5, r2
 8008f82:	e7bb      	b.n	8008efc <_printf_i+0x130>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	6826      	ldr	r6, [r4, #0]
 8008f88:	6961      	ldr	r1, [r4, #20]
 8008f8a:	1d18      	adds	r0, r3, #4
 8008f8c:	6028      	str	r0, [r5, #0]
 8008f8e:	0635      	lsls	r5, r6, #24
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	d501      	bpl.n	8008f98 <_printf_i+0x1cc>
 8008f94:	6019      	str	r1, [r3, #0]
 8008f96:	e002      	b.n	8008f9e <_printf_i+0x1d2>
 8008f98:	0670      	lsls	r0, r6, #25
 8008f9a:	d5fb      	bpl.n	8008f94 <_printf_i+0x1c8>
 8008f9c:	8019      	strh	r1, [r3, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	6123      	str	r3, [r4, #16]
 8008fa2:	4615      	mov	r5, r2
 8008fa4:	e7ba      	b.n	8008f1c <_printf_i+0x150>
 8008fa6:	682b      	ldr	r3, [r5, #0]
 8008fa8:	1d1a      	adds	r2, r3, #4
 8008faa:	602a      	str	r2, [r5, #0]
 8008fac:	681d      	ldr	r5, [r3, #0]
 8008fae:	6862      	ldr	r2, [r4, #4]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f7f7 f90c 	bl	80001d0 <memchr>
 8008fb8:	b108      	cbz	r0, 8008fbe <_printf_i+0x1f2>
 8008fba:	1b40      	subs	r0, r0, r5
 8008fbc:	6060      	str	r0, [r4, #4]
 8008fbe:	6863      	ldr	r3, [r4, #4]
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fc8:	e7a8      	b.n	8008f1c <_printf_i+0x150>
 8008fca:	6923      	ldr	r3, [r4, #16]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4649      	mov	r1, r9
 8008fd0:	4640      	mov	r0, r8
 8008fd2:	47d0      	blx	sl
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d0ab      	beq.n	8008f30 <_printf_i+0x164>
 8008fd8:	6823      	ldr	r3, [r4, #0]
 8008fda:	079b      	lsls	r3, r3, #30
 8008fdc:	d413      	bmi.n	8009006 <_printf_i+0x23a>
 8008fde:	68e0      	ldr	r0, [r4, #12]
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	4298      	cmp	r0, r3
 8008fe4:	bfb8      	it	lt
 8008fe6:	4618      	movlt	r0, r3
 8008fe8:	e7a4      	b.n	8008f34 <_printf_i+0x168>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4632      	mov	r2, r6
 8008fee:	4649      	mov	r1, r9
 8008ff0:	4640      	mov	r0, r8
 8008ff2:	47d0      	blx	sl
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d09b      	beq.n	8008f30 <_printf_i+0x164>
 8008ff8:	3501      	adds	r5, #1
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	9903      	ldr	r1, [sp, #12]
 8008ffe:	1a5b      	subs	r3, r3, r1
 8009000:	42ab      	cmp	r3, r5
 8009002:	dcf2      	bgt.n	8008fea <_printf_i+0x21e>
 8009004:	e7eb      	b.n	8008fde <_printf_i+0x212>
 8009006:	2500      	movs	r5, #0
 8009008:	f104 0619 	add.w	r6, r4, #25
 800900c:	e7f5      	b.n	8008ffa <_printf_i+0x22e>
 800900e:	bf00      	nop
 8009010:	0802ea61 	.word	0x0802ea61
 8009014:	0802ea72 	.word	0x0802ea72

08009018 <__retarget_lock_acquire_recursive>:
 8009018:	4770      	bx	lr

0800901a <__retarget_lock_release_recursive>:
 800901a:	4770      	bx	lr

0800901c <memcpy>:
 800901c:	440a      	add	r2, r1
 800901e:	4291      	cmp	r1, r2
 8009020:	f100 33ff 	add.w	r3, r0, #4294967295
 8009024:	d100      	bne.n	8009028 <memcpy+0xc>
 8009026:	4770      	bx	lr
 8009028:	b510      	push	{r4, lr}
 800902a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800902e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009032:	4291      	cmp	r1, r2
 8009034:	d1f9      	bne.n	800902a <memcpy+0xe>
 8009036:	bd10      	pop	{r4, pc}

08009038 <memmove>:
 8009038:	4288      	cmp	r0, r1
 800903a:	b510      	push	{r4, lr}
 800903c:	eb01 0402 	add.w	r4, r1, r2
 8009040:	d902      	bls.n	8009048 <memmove+0x10>
 8009042:	4284      	cmp	r4, r0
 8009044:	4623      	mov	r3, r4
 8009046:	d807      	bhi.n	8009058 <memmove+0x20>
 8009048:	1e43      	subs	r3, r0, #1
 800904a:	42a1      	cmp	r1, r4
 800904c:	d008      	beq.n	8009060 <memmove+0x28>
 800904e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009056:	e7f8      	b.n	800904a <memmove+0x12>
 8009058:	4402      	add	r2, r0
 800905a:	4601      	mov	r1, r0
 800905c:	428a      	cmp	r2, r1
 800905e:	d100      	bne.n	8009062 <memmove+0x2a>
 8009060:	bd10      	pop	{r4, pc}
 8009062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800906a:	e7f7      	b.n	800905c <memmove+0x24>

0800906c <_realloc_r>:
 800906c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009070:	4680      	mov	r8, r0
 8009072:	4614      	mov	r4, r2
 8009074:	460e      	mov	r6, r1
 8009076:	b921      	cbnz	r1, 8009082 <_realloc_r+0x16>
 8009078:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907c:	4611      	mov	r1, r2
 800907e:	f7ff bc2b 	b.w	80088d8 <_malloc_r>
 8009082:	b92a      	cbnz	r2, 8009090 <_realloc_r+0x24>
 8009084:	f7ff fbbc 	bl	8008800 <_free_r>
 8009088:	4625      	mov	r5, r4
 800908a:	4628      	mov	r0, r5
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	f000 f81b 	bl	80090ca <_malloc_usable_size_r>
 8009094:	4284      	cmp	r4, r0
 8009096:	4607      	mov	r7, r0
 8009098:	d802      	bhi.n	80090a0 <_realloc_r+0x34>
 800909a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800909e:	d812      	bhi.n	80090c6 <_realloc_r+0x5a>
 80090a0:	4621      	mov	r1, r4
 80090a2:	4640      	mov	r0, r8
 80090a4:	f7ff fc18 	bl	80088d8 <_malloc_r>
 80090a8:	4605      	mov	r5, r0
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d0ed      	beq.n	800908a <_realloc_r+0x1e>
 80090ae:	42bc      	cmp	r4, r7
 80090b0:	4622      	mov	r2, r4
 80090b2:	4631      	mov	r1, r6
 80090b4:	bf28      	it	cs
 80090b6:	463a      	movcs	r2, r7
 80090b8:	f7ff ffb0 	bl	800901c <memcpy>
 80090bc:	4631      	mov	r1, r6
 80090be:	4640      	mov	r0, r8
 80090c0:	f7ff fb9e 	bl	8008800 <_free_r>
 80090c4:	e7e1      	b.n	800908a <_realloc_r+0x1e>
 80090c6:	4635      	mov	r5, r6
 80090c8:	e7df      	b.n	800908a <_realloc_r+0x1e>

080090ca <_malloc_usable_size_r>:
 80090ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ce:	1f18      	subs	r0, r3, #4
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	bfbc      	itt	lt
 80090d4:	580b      	ldrlt	r3, [r1, r0]
 80090d6:	18c0      	addlt	r0, r0, r3
 80090d8:	4770      	bx	lr
	...

080090dc <_init>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr

080090e8 <_fini>:
 80090e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ea:	bf00      	nop
 80090ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ee:	bc08      	pop	{r3}
 80090f0:	469e      	mov	lr, r3
 80090f2:	4770      	bx	lr
