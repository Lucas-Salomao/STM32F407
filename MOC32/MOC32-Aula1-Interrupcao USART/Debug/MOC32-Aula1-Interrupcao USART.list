
MOC32-Aula1-Interrupcao USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008fcc  08008fcc  00018fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fe8  08008fe8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008fe8  08008fe8  00018fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ff0  08008ff0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ff0  08008ff0  00018ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ff4  08008ff4  00018ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000854  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019ffa  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cc5  00000000  00000000  0003a0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0003dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001268  00000000  00000000  0003f148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023e41  00000000  00000000  000403b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ae5f  00000000  00000000  000641f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd5b  00000000  00000000  0007f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cdab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054e0  00000000  00000000  0014cdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008fb4 	.word	0x08008fb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008fb4 	.word	0x08008fb4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fc9e 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f818 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f93e 	bl	8000758 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004dc:	f000 f87e 	bl	80005dc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e0:	f000 f8aa 	bl	8000638 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e4:	f000 f8d8 	bl	8000698 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e8:	f008 f91c 	bl	8008724 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f90a 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 5);
 80004f0:	2205      	movs	r2, #5
 80004f2:	4903      	ldr	r1, [pc, #12]	; (8000500 <main+0x34>)
 80004f4:	4803      	ldr	r0, [pc, #12]	; (8000504 <main+0x38>)
 80004f6:	f004 f9a9 	bl	800484c <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004fa:	f008 f939 	bl	8008770 <MX_USB_HOST_Process>
 80004fe:	e7fc      	b.n	80004fa <main+0x2e>
 8000500:	200001e4 	.word	0x200001e4
 8000504:	200001a0 	.word	0x200001a0

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f008 fc46 	bl	8008da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f003 fa1c 	bl	80039cc <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f9fb 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 fc7d 	bl	8003ebc <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9e4 	bl	8000994 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	; 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 fbf3 	bl	8002e04 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f9b6 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000ac 	.word	0x200000ac
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <MX_I2S3_Init+0x54>)
 800063e:	4a14      	ldr	r2, [pc, #80]	; (8000690 <MX_I2S3_Init+0x58>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2S3_Init+0x54>)
 8000644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000648:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <MX_I2S3_Init+0x54>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000650:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_I2S3_Init+0x54>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <MX_I2S3_Init+0x54>)
 8000658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_I2S3_Init+0x54>)
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <MX_I2S3_Init+0x5c>)
 8000662:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_I2S3_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_I2S3_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_I2S3_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_I2S3_Init+0x54>)
 8000678:	f002 fd08 	bl	800308c <HAL_I2S_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000682:	f000 f987 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000100 	.word	0x20000100
 8000690:	40003c00 	.word	0x40003c00
 8000694:	00017700 	.word	0x00017700

08000698 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_SPI1_Init+0x64>)
 800069e:	4a18      	ldr	r2, [pc, #96]	; (8000700 <MX_SPI1_Init+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI1_Init+0x64>)
 80006a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI1_Init+0x64>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x64>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI1_Init+0x64>)
 80006c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ca:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI1_Init+0x64>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI1_Init+0x64>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_SPI1_Init+0x64>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI1_Init+0x64>)
 80006e4:	220a      	movs	r2, #10
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_SPI1_Init+0x64>)
 80006ea:	f003 ff47 	bl	800457c <HAL_SPI_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f4:	f000 f94e 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000148 	.word	0x20000148
 8000700:	40013000 	.word	0x40013000

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f003 ffa7 	bl	800468e <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f925 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200001a0 	.word	0x200001a0
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b72      	ldr	r3, [pc, #456]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a71      	ldr	r2, [pc, #452]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0310 	and.w	r3, r3, #16
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a6a      	ldr	r2, [pc, #424]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <MX_GPIO_Init+0x1e4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b64      	ldr	r3, [pc, #400]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a63      	ldr	r2, [pc, #396]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b61      	ldr	r3, [pc, #388]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b5d      	ldr	r3, [pc, #372]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a5c      	ldr	r2, [pc, #368]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5a      	ldr	r3, [pc, #360]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b56      	ldr	r3, [pc, #344]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a55      	ldr	r2, [pc, #340]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b53      	ldr	r3, [pc, #332]	; (800093c <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b4f      	ldr	r3, [pc, #316]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a4e      	ldr	r2, [pc, #312]	; (800093c <MX_GPIO_Init+0x1e4>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b4c      	ldr	r3, [pc, #304]	; (800093c <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	4849      	ldr	r0, [pc, #292]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800081c:	f000 fece 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000820:	2201      	movs	r2, #1
 8000822:	2101      	movs	r1, #1
 8000824:	4847      	ldr	r0, [pc, #284]	; (8000944 <MX_GPIO_Init+0x1ec>)
 8000826:	f000 fec9 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800082a:	2200      	movs	r2, #0
 800082c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000830:	4845      	ldr	r0, [pc, #276]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000832:	f000 fec3 	bl	80015bc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000836:	2308      	movs	r3, #8
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	483c      	ldr	r0, [pc, #240]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800084e:	f000 fd19 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000852:	2301      	movs	r3, #1
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4836      	ldr	r0, [pc, #216]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800086a:	f000 fd0b 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087e:	2305      	movs	r3, #5
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	482e      	ldr	r0, [pc, #184]	; (8000944 <MX_GPIO_Init+0x1ec>)
 800088a:	f000 fcfb 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000892:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	482a      	ldr	r0, [pc, #168]	; (800094c <MX_GPIO_Init+0x1f4>)
 80008a4:	f000 fcee 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008a8:	2304      	movs	r3, #4
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008bc:	f000 fce2 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d2:	2305      	movs	r3, #5
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	481c      	ldr	r0, [pc, #112]	; (8000950 <MX_GPIO_Init+0x1f8>)
 80008de:	f000 fcd1 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008e2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4813      	ldr	r0, [pc, #76]	; (8000948 <MX_GPIO_Init+0x1f0>)
 80008fc:	f000 fcc2 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000900:	2320      	movs	r3, #32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480d      	ldr	r0, [pc, #52]	; (8000948 <MX_GPIO_Init+0x1f0>)
 8000914:	f000 fcb6 	bl	8001284 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x1e8>)
 800092e:	f000 fca9 	bl	8001284 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	40020000 	.word	0x40020000
 8000950:	40020400 	.word	0x40020400

08000954 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  // Verifica se a UART é a UART2
  if (huart->Instance == USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <HAL_UART_RxCpltCallback+0x34>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d10b      	bne.n	800097e <HAL_UART_RxCpltCallback+0x2a>
  {
    // Transmite o dado recebido de volta através da UART2
    HAL_UART_Transmit(&huart2, &rx_data, 5, HAL_MAX_DELAY);
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	2205      	movs	r2, #5
 800096c:	4907      	ldr	r1, [pc, #28]	; (800098c <HAL_UART_RxCpltCallback+0x38>)
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <HAL_UART_RxCpltCallback+0x3c>)
 8000970:	f003 feda 	bl	8004728 <HAL_UART_Transmit>
    // Prepara a próxima recepção
    HAL_UART_Receive_IT(&huart2, &rx_data, 5);
 8000974:	2205      	movs	r2, #5
 8000976:	4905      	ldr	r1, [pc, #20]	; (800098c <HAL_UART_RxCpltCallback+0x38>)
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <HAL_UART_RxCpltCallback+0x3c>)
 800097a:	f003 ff67 	bl	800484c <HAL_UART_Receive_IT>
  }
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40004400 	.word	0x40004400
 800098c:	200001e4 	.word	0x200001e4
 8000990:	200001a0 	.word	0x200001a0

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009de:	2007      	movs	r0, #7
 80009e0:	f000 fb7c 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800

080009f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a19      	ldr	r2, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0x84>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d12c      	bne.n	8000a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a17      	ldr	r2, [pc, #92]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a1c:	f043 0302 	orr.w	r3, r3, #2
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0302 	and.w	r3, r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a40:	2304      	movs	r3, #4
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <HAL_I2C_MspInit+0x8c>)
 8000a4c:	f000 fc1a 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_I2C_MspInit+0x88>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	; 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020400 	.word	0x40020400

08000a80 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08e      	sub	sp, #56	; 0x38
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a31      	ldr	r2, [pc, #196]	; (8000b70 <HAL_I2S_MspInit+0xf0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d15a      	bne.n	8000b66 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 fc1b 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000acc:	f7ff ff62 	bl	8000994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
 8000afc:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6313      	str	r3, [r2, #48]	; 0x30
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_I2S_MspInit+0xf4>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b24:	2310      	movs	r3, #16
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b30:	2300      	movs	r3, #0
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b34:	2306      	movs	r3, #6
 8000b36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	480e      	ldr	r0, [pc, #56]	; (8000b78 <HAL_I2S_MspInit+0xf8>)
 8000b40:	f000 fba0 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b56:	2306      	movs	r3, #6
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4806      	ldr	r0, [pc, #24]	; (8000b7c <HAL_I2S_MspInit+0xfc>)
 8000b62:	f000 fb8f 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3738      	adds	r7, #56	; 0x38
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40003c00 	.word	0x40003c00
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020800 	.word	0x40020800

08000b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_SPI_MspInit+0x8c>)
 8000bf6:	f000 fb45 	bl	8001284 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_UART_MspInit+0x94>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d133      	bne.n	8000c9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a1b      	ldr	r2, [pc, #108]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b15      	ldr	r3, [pc, #84]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a14      	ldr	r2, [pc, #80]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_UART_MspInit+0x98>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_UART_MspInit+0x9c>)
 8000c86:	f000 fafd 	bl	8001284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f000 fa2f 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c94:	2026      	movs	r0, #38	; 0x26
 8000c96:	f000 fa48 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c9a:	bf00      	nop
 8000c9c:	3728      	adds	r7, #40	; 0x28
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40004400 	.word	0x40004400
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <BusFault_Handler+0x4>

08000cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <UsageFault_Handler+0x4>

08000cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr

08000cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfc:	f000 f8da 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d08:	4802      	ldr	r0, [pc, #8]	; (8000d14 <USART2_IRQHandler+0x10>)
 8000d0a:	f003 fdcf 	bl	80048ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001a0 	.word	0x200001a0

08000d18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <OTG_FS_IRQHandler+0x10>)
 8000d1e:	f000 fed1 	bl	8001ac4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	200005d0 	.word	0x200005d0

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f007 ffea 	bl	8008d34 <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00000400 	.word	0x00000400
 8000d90:	200001ec 	.word	0x200001ec
 8000d94:	200008e8 	.word	0x200008e8

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dc2:	490e      	ldr	r1, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd8:	4c0b      	ldr	r4, [pc, #44]	; (8000e08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de6:	f7ff ffd7 	bl	8000d98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dea:	f007 ffa9 	bl	8008d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fb6d 	bl	80004cc <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e00:	08008ff8 	.word	0x08008ff8
  ldr r2, =_sbss
 8000e04:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e08:	200008e4 	.word	0x200008e4

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94f 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fdac 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f967 	bl	8001146 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f92f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000004 	.word	0x20000004

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	200001f0 	.word	0x200001f0

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200001f0 	.word	0x200001f0

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000008 	.word	0x20000008

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	; (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	; (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b084      	sub	sp, #16
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff feb6 	bl	8000edc <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d008      	beq.n	8001190 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e052      	b.n	8001236 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0216 	bic.w	r2, r2, #22
 800119e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	695a      	ldr	r2, [r3, #20]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d103      	bne.n	80011c0 <HAL_DMA_Abort+0x62>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d007      	beq.n	80011d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f022 0208 	bic.w	r2, r2, #8
 80011ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e0:	e013      	b.n	800120a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011e2:	f7ff fe7b 	bl	8000edc <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d90c      	bls.n	800120a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2203      	movs	r2, #3
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e015      	b.n	8001236 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e4      	bne.n	80011e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121c:	223f      	movs	r2, #63	; 0x3f
 800121e:	409a      	lsls	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d004      	beq.n	800125c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e00c      	b.n	8001276 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2205      	movs	r2, #5
 8001260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0201 	bic.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
 800129e:	e16b      	b.n	8001578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a0:	2201      	movs	r2, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	f040 815a 	bne.w	8001572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d005      	beq.n	80012d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d130      	bne.n	8001338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800130c:	2201      	movs	r2, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 0201 	and.w	r2, r3, #1
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b03      	cmp	r3, #3
 8001342:	d017      	beq.n	8001374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	2203      	movs	r2, #3
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d123      	bne.n	80013c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	08da      	lsrs	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3208      	adds	r2, #8
 8001388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	220f      	movs	r2, #15
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	08da      	lsrs	r2, r3, #3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3208      	adds	r2, #8
 80013c2:	69b9      	ldr	r1, [r7, #24]
 80013c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 0203 	and.w	r2, r3, #3
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80b4 	beq.w	8001572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b60      	ldr	r3, [pc, #384]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001412:	4a5f      	ldr	r2, [pc, #380]	; (8001590 <HAL_GPIO_Init+0x30c>)
 8001414:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001418:	6453      	str	r3, [r2, #68]	; 0x44
 800141a:	4b5d      	ldr	r3, [pc, #372]	; (8001590 <HAL_GPIO_Init+0x30c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001426:	4a5b      	ldr	r2, [pc, #364]	; (8001594 <HAL_GPIO_Init+0x310>)
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x314>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d02b      	beq.n	80014aa <HAL_GPIO_Init+0x226>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_GPIO_Init+0x318>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d025      	beq.n	80014a6 <HAL_GPIO_Init+0x222>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_GPIO_Init+0x31c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d01f      	beq.n	80014a2 <HAL_GPIO_Init+0x21e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <HAL_GPIO_Init+0x320>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d019      	beq.n	800149e <HAL_GPIO_Init+0x21a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_GPIO_Init+0x324>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d013      	beq.n	800149a <HAL_GPIO_Init+0x216>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <HAL_GPIO_Init+0x328>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00d      	beq.n	8001496 <HAL_GPIO_Init+0x212>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <HAL_GPIO_Init+0x32c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d007      	beq.n	8001492 <HAL_GPIO_Init+0x20e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4b      	ldr	r2, [pc, #300]	; (80015b4 <HAL_GPIO_Init+0x330>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d101      	bne.n	800148e <HAL_GPIO_Init+0x20a>
 800148a:	2307      	movs	r3, #7
 800148c:	e00e      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800148e:	2308      	movs	r3, #8
 8001490:	e00c      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001492:	2306      	movs	r3, #6
 8001494:	e00a      	b.n	80014ac <HAL_GPIO_Init+0x228>
 8001496:	2305      	movs	r3, #5
 8001498:	e008      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149a:	2304      	movs	r3, #4
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x228>
 800149e:	2303      	movs	r3, #3
 80014a0:	e004      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a2:	2302      	movs	r3, #2
 80014a4:	e002      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e000      	b.n	80014ac <HAL_GPIO_Init+0x228>
 80014aa:	2300      	movs	r3, #0
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	f002 0203 	and.w	r2, r2, #3
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	4093      	lsls	r3, r2
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014bc:	4935      	ldr	r1, [pc, #212]	; (8001594 <HAL_GPIO_Init+0x310>)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3302      	adds	r3, #2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ee:	4a32      	ldr	r2, [pc, #200]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f4:	4b30      	ldr	r3, [pc, #192]	; (80015b8 <HAL_GPIO_Init+0x334>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001518:	4a27      	ldr	r2, [pc, #156]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800151e:	4b26      	ldr	r3, [pc, #152]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <HAL_GPIO_Init+0x334>)
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_GPIO_Init+0x334>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3301      	adds	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f ae90 	bls.w	80012a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40013800 	.word	0x40013800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020c00 	.word	0x40020c00
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40021400 	.word	0x40021400
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40021c00 	.word	0x40021c00
 80015b8:	40013c00 	.word	0x40013c00

080015bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	807b      	strh	r3, [r7, #2]
 80015c8:	4613      	mov	r3, r2
 80015ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015cc:	787b      	ldrb	r3, [r7, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015d8:	e003      	b.n	80015e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	041a      	lsls	r2, r3, #16
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	619a      	str	r2, [r3, #24]
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f0:	b08f      	sub	sp, #60	; 0x3c
 80015f2:	af0a      	add	r7, sp, #40	; 0x28
 80015f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e054      	b.n	80016aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f007 f8e0 	bl	80087e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d102      	bne.n	800163a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f004 f90e 	bl	8005860 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	687e      	ldr	r6, [r7, #4]
 800164c:	466d      	mov	r5, sp
 800164e:	f106 0410 	add.w	r4, r6, #16
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001662:	1d33      	adds	r3, r6, #4
 8001664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f004 f888 	bl	800577c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2101      	movs	r1, #1
 8001672:	4618      	mov	r0, r3
 8001674:	f004 f905 	bl	8005882 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	687e      	ldr	r6, [r7, #4]
 8001680:	466d      	mov	r5, sp
 8001682:	f106 0410 	add.w	r4, r6, #16
 8001686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800168c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001692:	e885 0003 	stmia.w	r5, {r0, r1}
 8001696:	1d33      	adds	r3, r6, #4
 8001698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800169a:	6838      	ldr	r0, [r7, #0]
 800169c:	f004 fa8e 	bl	8005bbc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016b2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b089      	sub	sp, #36	; 0x24
 80016b6:	af04      	add	r7, sp, #16
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	4608      	mov	r0, r1
 80016bc:	4611      	mov	r1, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	4603      	mov	r3, r0
 80016c2:	70fb      	strb	r3, [r7, #3]
 80016c4:	460b      	mov	r3, r1
 80016c6:	70bb      	strb	r3, [r7, #2]
 80016c8:	4613      	mov	r3, r2
 80016ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_HCD_HC_Init+0x28>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e076      	b.n	80017c8 <HAL_HCD_HC_Init+0x116>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016e2:	78fb      	ldrb	r3, [r7, #3]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	212c      	movs	r1, #44	; 0x2c
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	333d      	adds	r3, #61	; 0x3d
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	212c      	movs	r1, #44	; 0x2c
 80016fa:	fb01 f303 	mul.w	r3, r1, r3
 80016fe:	4413      	add	r3, r2
 8001700:	3338      	adds	r3, #56	; 0x38
 8001702:	787a      	ldrb	r2, [r7, #1]
 8001704:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	212c      	movs	r1, #44	; 0x2c
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	3340      	adds	r3, #64	; 0x40
 8001714:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001716:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3339      	adds	r3, #57	; 0x39
 8001726:	78fa      	ldrb	r2, [r7, #3]
 8001728:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	212c      	movs	r1, #44	; 0x2c
 8001730:	fb01 f303 	mul.w	r3, r1, r3
 8001734:	4413      	add	r3, r2
 8001736:	333f      	adds	r3, #63	; 0x3f
 8001738:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800173c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800173e:	78fb      	ldrb	r3, [r7, #3]
 8001740:	78ba      	ldrb	r2, [r7, #2]
 8001742:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001746:	b2d0      	uxtb	r0, r2
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	333a      	adds	r3, #58	; 0x3a
 8001754:	4602      	mov	r2, r0
 8001756:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001758:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800175c:	2b00      	cmp	r3, #0
 800175e:	da09      	bge.n	8001774 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	212c      	movs	r1, #44	; 0x2c
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	4413      	add	r3, r2
 800176c:	333b      	adds	r3, #59	; 0x3b
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e008      	b.n	8001786 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	212c      	movs	r1, #44	; 0x2c
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	4413      	add	r3, r2
 8001780:	333b      	adds	r3, #59	; 0x3b
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	212c      	movs	r1, #44	; 0x2c
 800178c:	fb01 f303 	mul.w	r3, r1, r3
 8001790:	4413      	add	r3, r2
 8001792:	333c      	adds	r3, #60	; 0x3c
 8001794:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001798:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	787c      	ldrb	r4, [r7, #1]
 80017a0:	78ba      	ldrb	r2, [r7, #2]
 80017a2:	78f9      	ldrb	r1, [r7, #3]
 80017a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	4623      	mov	r3, r4
 80017b6:	f004 fb87 	bl	8005ec8 <USB_HC_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_HCD_HC_Halt+0x1e>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e00f      	b.n	800180e <HAL_HCD_HC_Halt+0x3e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fdd7 	bl	80063b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	4608      	mov	r0, r1
 8001822:	4611      	mov	r1, r2
 8001824:	461a      	mov	r2, r3
 8001826:	4603      	mov	r3, r0
 8001828:	70fb      	strb	r3, [r7, #3]
 800182a:	460b      	mov	r3, r1
 800182c:	70bb      	strb	r3, [r7, #2]
 800182e:	4613      	mov	r3, r2
 8001830:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	212c      	movs	r1, #44	; 0x2c
 8001838:	fb01 f303 	mul.w	r3, r1, r3
 800183c:	4413      	add	r3, r2
 800183e:	333b      	adds	r3, #59	; 0x3b
 8001840:	78ba      	ldrb	r2, [r7, #2]
 8001842:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	212c      	movs	r1, #44	; 0x2c
 800184a:	fb01 f303 	mul.w	r3, r1, r3
 800184e:	4413      	add	r3, r2
 8001850:	333f      	adds	r3, #63	; 0x3f
 8001852:	787a      	ldrb	r2, [r7, #1]
 8001854:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001856:	7c3b      	ldrb	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d112      	bne.n	8001882 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	212c      	movs	r1, #44	; 0x2c
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	3342      	adds	r3, #66	; 0x42
 800186a:	2203      	movs	r2, #3
 800186c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	333d      	adds	r3, #61	; 0x3d
 800187c:	7f3a      	ldrb	r2, [r7, #28]
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	e008      	b.n	8001894 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	212c      	movs	r1, #44	; 0x2c
 8001888:	fb01 f303 	mul.w	r3, r1, r3
 800188c:	4413      	add	r3, r2
 800188e:	3342      	adds	r3, #66	; 0x42
 8001890:	2202      	movs	r2, #2
 8001892:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	2b03      	cmp	r3, #3
 8001898:	f200 80c6 	bhi.w	8001a28 <HAL_HCD_HC_SubmitRequest+0x210>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	08001a15 	.word	0x08001a15
 80018ac:	08001919 	.word	0x08001919
 80018b0:	08001997 	.word	0x08001997
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018b4:	7c3b      	ldrb	r3, [r7, #16]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	f040 80b8 	bne.w	8001a2c <HAL_HCD_HC_SubmitRequest+0x214>
 80018bc:	78bb      	ldrb	r3, [r7, #2]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f040 80b4 	bne.w	8001a2c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018c4:	8b3b      	ldrh	r3, [r7, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	212c      	movs	r1, #44	; 0x2c
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3355      	adds	r3, #85	; 0x55
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	212c      	movs	r1, #44	; 0x2c
 80018e2:	fb01 f303 	mul.w	r3, r1, r3
 80018e6:	4413      	add	r3, r2
 80018e8:	3355      	adds	r3, #85	; 0x55
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001902:	e093      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3342      	adds	r3, #66	; 0x42
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
      break;
 8001916:	e089      	b.n	8001a2c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001918:	78bb      	ldrb	r3, [r7, #2]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d11d      	bne.n	800195a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	212c      	movs	r1, #44	; 0x2c
 8001924:	fb01 f303 	mul.w	r3, r1, r3
 8001928:	4413      	add	r3, r2
 800192a:	3355      	adds	r3, #85	; 0x55
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	212c      	movs	r1, #44	; 0x2c
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	3342      	adds	r3, #66	; 0x42
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001944:	e073      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	212c      	movs	r1, #44	; 0x2c
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	3342      	adds	r3, #66	; 0x42
 8001954:	2202      	movs	r2, #2
 8001956:	701a      	strb	r2, [r3, #0]
      break;
 8001958:	e069      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	3354      	adds	r3, #84	; 0x54
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	212c      	movs	r1, #44	; 0x2c
 8001974:	fb01 f303 	mul.w	r3, r1, r3
 8001978:	4413      	add	r3, r2
 800197a:	3342      	adds	r3, #66	; 0x42
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
      break;
 8001980:	e055      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	3342      	adds	r3, #66	; 0x42
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e04b      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001996:	78bb      	ldrb	r3, [r7, #2]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d11d      	bne.n	80019d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	212c      	movs	r1, #44	; 0x2c
 80019a2:	fb01 f303 	mul.w	r3, r1, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	3355      	adds	r3, #85	; 0x55
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	212c      	movs	r1, #44	; 0x2c
 80019b6:	fb01 f303 	mul.w	r3, r1, r3
 80019ba:	4413      	add	r3, r2
 80019bc:	3342      	adds	r3, #66	; 0x42
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019c2:	e034      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c4:	78fb      	ldrb	r3, [r7, #3]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	212c      	movs	r1, #44	; 0x2c
 80019ca:	fb01 f303 	mul.w	r3, r1, r3
 80019ce:	4413      	add	r3, r2
 80019d0:	3342      	adds	r3, #66	; 0x42
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
      break;
 80019d6:	e02a      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	212c      	movs	r1, #44	; 0x2c
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4413      	add	r3, r2
 80019e4:	3354      	adds	r3, #84	; 0x54
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ec:	78fb      	ldrb	r3, [r7, #3]
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	212c      	movs	r1, #44	; 0x2c
 80019f2:	fb01 f303 	mul.w	r3, r1, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	3342      	adds	r3, #66	; 0x42
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
      break;
 80019fe:	e016      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a00:	78fb      	ldrb	r3, [r7, #3]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	212c      	movs	r1, #44	; 0x2c
 8001a06:	fb01 f303 	mul.w	r3, r1, r3
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3342      	adds	r3, #66	; 0x42
 8001a0e:	2202      	movs	r2, #2
 8001a10:	701a      	strb	r2, [r3, #0]
      break;
 8001a12:	e00c      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	212c      	movs	r1, #44	; 0x2c
 8001a1a:	fb01 f303 	mul.w	r3, r1, r3
 8001a1e:	4413      	add	r3, r2
 8001a20:	3342      	adds	r3, #66	; 0x42
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a28:	bf00      	nop
 8001a2a:	e000      	b.n	8001a2e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a2c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3344      	adds	r3, #68	; 0x44
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	8b3a      	ldrh	r2, [r7, #24]
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	202c      	movs	r0, #44	; 0x2c
 8001a48:	fb00 f303 	mul.w	r3, r0, r3
 8001a4c:	440b      	add	r3, r1
 8001a4e:	334c      	adds	r3, #76	; 0x4c
 8001a50:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	212c      	movs	r1, #44	; 0x2c
 8001a58:	fb01 f303 	mul.w	r3, r1, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	3360      	adds	r3, #96	; 0x60
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	212c      	movs	r1, #44	; 0x2c
 8001a6a:	fb01 f303 	mul.w	r3, r1, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	3350      	adds	r3, #80	; 0x50
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	212c      	movs	r1, #44	; 0x2c
 8001a7c:	fb01 f303 	mul.w	r3, r1, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	3339      	adds	r3, #57	; 0x39
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	212c      	movs	r1, #44	; 0x2c
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	3361      	adds	r3, #97	; 0x61
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	78fb      	ldrb	r3, [r7, #3]
 8001aa0:	222c      	movs	r2, #44	; 0x2c
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	3338      	adds	r3, #56	; 0x38
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	18d1      	adds	r1, r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f004 fb2a 	bl	800610c <USB_HC_StartXfer>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop

08001ac4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 f82b 	bl	8005b36 <USB_GetMode>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f040 80f6 	bne.w	8001cd4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f004 f80f 	bl	8005b10 <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	f000 80ec 	beq.w	8001cd2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 f806 	bl	8005b10 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b0e:	d104      	bne.n	8001b1a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b18:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f003 fff6 	bl	8005b10 <USB_ReadInterrupts>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b2e:	d104      	bne.n	8001b3a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f003 ffe6 	bl	8005b10 <USB_ReadInterrupts>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b4e:	d104      	bne.n	8001b5a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 ffd6 	bl	8005b10 <USB_ReadInterrupts>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d103      	bne.n	8001b76 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 ffc8 	bl	8005b10 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b8a:	d11c      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b94:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ba6:	2110      	movs	r1, #16
 8001ba8:	6938      	ldr	r0, [r7, #16]
 8001baa:	f003 feb7 	bl	800591c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bae:	6938      	ldr	r0, [r7, #16]
 8001bb0:	f003 fee8 	bl	8005984 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f004 f8be 	bl	8005d3c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f006 fe8b 	bl	80088dc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 ffa0 	bl	8005b10 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bda:	d102      	bne.n	8001be2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f001 f89e 	bl	8002d1e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f003 ff92 	bl	8005b10 <USB_ReadInterrupts>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b08      	cmp	r3, #8
 8001bf4:	d106      	bne.n	8001c04 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f006 fe54 	bl	80088a4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2208      	movs	r2, #8
 8001c02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f003 ff81 	bl	8005b10 <USB_ReadInterrupts>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	d101      	bne.n	8001c1c <HAL_HCD_IRQHandler+0x158>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <HAL_HCD_IRQHandler+0x15a>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d012      	beq.n	8001c48 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0210 	bic.w	r2, r2, #16
 8001c30:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 ffa1 	bl	8002b7a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0210 	orr.w	r2, r2, #16
 8001c46:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 ff5f 	bl	8005b10 <USB_ReadInterrupts>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c5c:	d13a      	bne.n	8001cd4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fb94 	bl	8006390 <USB_HC_ReadInterrupt>
 8001c68:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e025      	b.n	8001cbc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d018      	beq.n	8001cb6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d106      	bne.n	8001caa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8ab 	bl	8001dfe <HCD_HC_IN_IRQHandler>
 8001ca8:	e005      	b.n	8001cb6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fbf9 	bl	80024a8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3d4      	bcc.n	8001c70 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cce:	615a      	str	r2, [r3, #20]
 8001cd0:	e000      	b.n	8001cd4 <HAL_HCD_IRQHandler+0x210>
      return;
 8001cd2:	bf00      	nop
    }
  }
}
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <HAL_HCD_Start+0x16>
 8001cec:	2302      	movs	r3, #2
 8001cee:	e013      	b.n	8001d18 <HAL_HCD_Start+0x3e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f004 f880 	bl	8005e04 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f003 fd98 	bl	800583e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_HCD_Stop+0x16>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00d      	b.n	8001d52 <HAL_HCD_Stop+0x32>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 fc6e 	bl	8006624 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f004 f822 	bl	8005db0 <USB_ResetPort>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	460b      	mov	r3, r1
 8001d80:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3360      	adds	r3, #96	; 0x60
 8001d90:	781b      	ldrb	r3, [r3, #0]
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3350      	adds	r3, #80	; 0x50
 8001db8:	681b      	ldr	r3, [r3, #0]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f004 f866 	bl	8005ea4 <USB_GetCurrentFrame>
 8001dd8:	4603      	mov	r3, r0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f841 	bl	8005e76 <USB_GetHostSpeed>
 8001df4:	4603      	mov	r3, r0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d11a      	bne.n	8001e64 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3361      	adds	r3, #97	; 0x61
 8001e4e:	2206      	movs	r2, #6
 8001e50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 faa8 	bl	80063b2 <USB_HC_Halt>
 8001e62:	e0af      	b.n	8001fc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e7a:	d11b      	bne.n	8001eb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3361      	adds	r3, #97	; 0x61
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f004 fa80 	bl	80063b2 <USB_HC_Halt>
 8001eb2:	e087      	b.n	8001fc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d109      	bne.n	8001ede <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2320      	movs	r3, #32
 8001eda:	6093      	str	r3, [r2, #8]
 8001edc:	e072      	b.n	8001fc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d11a      	bne.n	8001f2a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2308      	movs	r3, #8
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	212c      	movs	r1, #44	; 0x2c
 8001f0c:	fb01 f303 	mul.w	r3, r1, r3
 8001f10:	4413      	add	r3, r2
 8001f12:	3361      	adds	r3, #97	; 0x61
 8001f14:	2205      	movs	r2, #5
 8001f16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fa45 	bl	80063b2 <USB_HC_Halt>
 8001f28:	e04c      	b.n	8001fc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	015a      	lsls	r2, r3, #5
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4413      	add	r3, r2
 8001f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f40:	d11b      	bne.n	8001f7a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	015a      	lsls	r2, r3, #5
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4413      	add	r3, r2
 8001f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4e:	461a      	mov	r2, r3
 8001f50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f54:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	212c      	movs	r1, #44	; 0x2c
 8001f5c:	fb01 f303 	mul.w	r3, r1, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	3361      	adds	r3, #97	; 0x61
 8001f64:	2208      	movs	r2, #8
 8001f66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f004 fa1d 	bl	80063b2 <USB_HC_Halt>
 8001f78:	e024      	b.n	8001fc4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	015a      	lsls	r2, r3, #5
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b80      	cmp	r3, #128	; 0x80
 8001f8e:	d119      	bne.n	8001fc4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3361      	adds	r3, #97	; 0x61
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 f9f7 	bl	80063b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	015a      	lsls	r2, r3, #5
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4413      	add	r3, r2
 8001fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fda:	d112      	bne.n	8002002 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 f9e3 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	015a      	lsls	r2, r3, #5
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ffe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002000:	e24e      	b.n	80024a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b01      	cmp	r3, #1
 8002016:	f040 80df 	bne.w	80021d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d019      	beq.n	8002056 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	212c      	movs	r1, #44	; 0x2c
 8002028:	fb01 f303 	mul.w	r3, r1, r3
 800202c:	4413      	add	r3, r2
 800202e:	3348      	adds	r3, #72	; 0x48
 8002030:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	0159      	lsls	r1, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	440b      	add	r3, r1
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002044:	1ad2      	subs	r2, r2, r3
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	202c      	movs	r0, #44	; 0x2c
 800204c:	fb00 f303 	mul.w	r3, r0, r3
 8002050:	440b      	add	r3, r1
 8002052:	3350      	adds	r3, #80	; 0x50
 8002054:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	3361      	adds	r3, #97	; 0x61
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	212c      	movs	r1, #44	; 0x2c
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	4413      	add	r3, r2
 8002074:	335c      	adds	r3, #92	; 0x5c
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	015a      	lsls	r2, r3, #5
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4413      	add	r3, r2
 8002082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002086:	461a      	mov	r2, r3
 8002088:	2301      	movs	r3, #1
 800208a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	333f      	adds	r3, #63	; 0x3f
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	212c      	movs	r1, #44	; 0x2c
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	333f      	adds	r3, #63	; 0x3f
 80020ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d111      	bne.n	80020d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 f977 	bl	80063b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d0:	461a      	mov	r2, r3
 80020d2:	2310      	movs	r3, #16
 80020d4:	6093      	str	r3, [r2, #8]
 80020d6:	e03a      	b.n	800214e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	333f      	adds	r3, #63	; 0x3f
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d009      	beq.n	8002100 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	333f      	adds	r3, #63	; 0x3f
 80020fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d126      	bne.n	800214e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	015a      	lsls	r2, r3, #5
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4413      	add	r3, r2
 8002108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	0151      	lsls	r1, r2, #5
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	440a      	add	r2, r1
 8002116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800211e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	212c      	movs	r1, #44	; 0x2c
 8002126:	fb01 f303 	mul.w	r3, r1, r3
 800212a:	4413      	add	r3, r2
 800212c:	3360      	adds	r3, #96	; 0x60
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	b2d9      	uxtb	r1, r3
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	202c      	movs	r0, #44	; 0x2c
 800213c:	fb00 f303 	mul.w	r3, r0, r3
 8002140:	4413      	add	r3, r2
 8002142:	3360      	adds	r3, #96	; 0x60
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f006 fbd5 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d12b      	bne.n	80021ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	212c      	movs	r1, #44	; 0x2c
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3348      	adds	r3, #72	; 0x48
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	202c      	movs	r0, #44	; 0x2c
 800216c:	fb00 f202 	mul.w	r2, r0, r2
 8002170:	440a      	add	r2, r1
 8002172:	3240      	adds	r2, #64	; 0x40
 8002174:	8812      	ldrh	r2, [r2, #0]
 8002176:	fbb3 f3f2 	udiv	r3, r3, r2
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 818e 	beq.w	80024a0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	212c      	movs	r1, #44	; 0x2c
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	3354      	adds	r3, #84	; 0x54
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f083 0301 	eor.w	r3, r3, #1
 8002198:	b2d8      	uxtb	r0, r3
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	212c      	movs	r1, #44	; 0x2c
 80021a0:	fb01 f303 	mul.w	r3, r1, r3
 80021a4:	4413      	add	r3, r2
 80021a6:	3354      	adds	r3, #84	; 0x54
 80021a8:	4602      	mov	r2, r0
 80021aa:	701a      	strb	r2, [r3, #0]
}
 80021ac:	e178      	b.n	80024a0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	3354      	adds	r3, #84	; 0x54
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2d8      	uxtb	r0, r3
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	212c      	movs	r1, #44	; 0x2c
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	3354      	adds	r3, #84	; 0x54
 80021d2:	4602      	mov	r2, r0
 80021d4:	701a      	strb	r2, [r3, #0]
}
 80021d6:	e163      	b.n	80024a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	015a      	lsls	r2, r3, #5
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	f040 80f6 	bne.w	80023dc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3361      	adds	r3, #97	; 0x61
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d109      	bne.n	8002218 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3360      	adds	r3, #96	; 0x60
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
 8002216:	e0c9      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3361      	adds	r3, #97	; 0x61
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b05      	cmp	r3, #5
 800222a:	d109      	bne.n	8002240 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3360      	adds	r3, #96	; 0x60
 800223a:	2205      	movs	r2, #5
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	e0b5      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d009      	beq.n	8002268 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	3361      	adds	r3, #97	; 0x61
 8002262:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002264:	2b08      	cmp	r3, #8
 8002266:	d150      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	335c      	adds	r3, #92	; 0x5c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	fb00 f303 	mul.w	r3, r0, r3
 8002284:	440b      	add	r3, r1
 8002286:	335c      	adds	r3, #92	; 0x5c
 8002288:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	335c      	adds	r3, #92	; 0x5c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d912      	bls.n	80022c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	335c      	adds	r3, #92	; 0x5c
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	2204      	movs	r2, #4
 80022c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022c2:	e073      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	212c      	movs	r1, #44	; 0x2c
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	4413      	add	r3, r2
 80022d0:	3360      	adds	r3, #96	; 0x60
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002308:	e050      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3361      	adds	r3, #97	; 0x61
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d122      	bne.n	8002364 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3360      	adds	r3, #96	; 0x60
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002346:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800234e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800235c:	461a      	mov	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e023      	b.n	80023ac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	3361      	adds	r3, #97	; 0x61
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d119      	bne.n	80023ac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	335c      	adds	r3, #92	; 0x5c
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	202c      	movs	r0, #44	; 0x2c
 8002390:	fb00 f303 	mul.w	r3, r0, r3
 8002394:	440b      	add	r3, r1
 8002396:	335c      	adds	r3, #92	; 0x5c
 8002398:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	212c      	movs	r1, #44	; 0x2c
 80023a0:	fb01 f303 	mul.w	r3, r1, r3
 80023a4:	4413      	add	r3, r2
 80023a6:	3360      	adds	r3, #96	; 0x60
 80023a8:	2204      	movs	r2, #4
 80023aa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2302      	movs	r3, #2
 80023bc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	b2d9      	uxtb	r1, r3
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	202c      	movs	r0, #44	; 0x2c
 80023c8:	fb00 f303 	mul.w	r3, r0, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	3360      	adds	r3, #96	; 0x60
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f006 fa8f 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023da:	e061      	b.n	80024a0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	015a      	lsls	r2, r3, #5
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d156      	bne.n	80024a0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b03      	cmp	r3, #3
 8002404:	d111      	bne.n	800242a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f003 ffc5 	bl	80063b2 <USB_HC_Halt>
 8002428:	e031      	b.n	800248e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	333f      	adds	r3, #63	; 0x3f
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	333f      	adds	r3, #63	; 0x3f
 800244c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800244e:	2b02      	cmp	r3, #2
 8002450:	d11d      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	212c      	movs	r1, #44	; 0x2c
 8002458:	fb01 f303 	mul.w	r3, r1, r3
 800245c:	4413      	add	r3, r2
 800245e:	335c      	adds	r3, #92	; 0x5c
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d110      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	3361      	adds	r3, #97	; 0x61
 800247a:	2203      	movs	r2, #3
 800247c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f003 ff92 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	015a      	lsls	r2, r3, #5
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249a:	461a      	mov	r2, r3
 800249c:	2310      	movs	r3, #16
 800249e:	6093      	str	r3, [r2, #8]
}
 80024a0:	bf00      	nop
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	015a      	lsls	r2, r3, #5
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4413      	add	r3, r2
 80024ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d11a      	bne.n	800250e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e4:	461a      	mov	r2, r3
 80024e6:	2304      	movs	r3, #4
 80024e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	3361      	adds	r3, #97	; 0x61
 80024f8:	2206      	movs	r2, #6
 80024fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f003 ff53 	bl	80063b2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800250c:	e331      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b20      	cmp	r3, #32
 8002522:	d12e      	bne.n	8002582 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	2320      	movs	r3, #32
 8002534:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	333d      	adds	r3, #61	; 0x3d
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 8313 	bne.w	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	333d      	adds	r3, #61	; 0x3d
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3360      	adds	r3, #96	; 0x60
 800256c:	2202      	movs	r2, #2
 800256e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f003 ff19 	bl	80063b2 <USB_HC_Halt>
}
 8002580:	e2f7      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002598:	d112      	bne.n	80025c0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fefa 	bl	80063b2 <USB_HC_Halt>
}
 80025be:	e2d8      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	015a      	lsls	r2, r3, #5
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	4413      	add	r3, r2
 80025c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d140      	bne.n	8002658 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	212c      	movs	r1, #44	; 0x2c
 80025dc:	fb01 f303 	mul.w	r3, r1, r3
 80025e0:	4413      	add	r3, r2
 80025e2:	335c      	adds	r3, #92	; 0x5c
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d111      	bne.n	8002622 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	333d      	adds	r3, #61	; 0x3d
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	015a      	lsls	r2, r3, #5
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	4413      	add	r3, r2
 8002618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261c:	461a      	mov	r2, r3
 800261e:	2340      	movs	r3, #64	; 0x40
 8002620:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	2301      	movs	r3, #1
 8002632:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3361      	adds	r3, #97	; 0x61
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f003 feae 	bl	80063b2 <USB_HC_Halt>
}
 8002656:	e28c      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d12c      	bne.n	80026c8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3361      	adds	r3, #97	; 0x61
 800267c:	2204      	movs	r2, #4
 800267e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	333d      	adds	r3, #61	; 0x3d
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	335c      	adds	r3, #92	; 0x5c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f003 fe7f 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	461a      	mov	r2, r3
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	6093      	str	r3, [r2, #8]
}
 80026c6:	e254      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d11a      	bne.n	8002714 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	461a      	mov	r2, r3
 80026ec:	2308      	movs	r3, #8
 80026ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	212c      	movs	r1, #44	; 0x2c
 80026f6:	fb01 f303 	mul.w	r3, r1, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	3361      	adds	r3, #97	; 0x61
 80026fe:	2205      	movs	r2, #5
 8002700:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f003 fe50 	bl	80063b2 <USB_HC_Halt>
}
 8002712:	e22e      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0310 	and.w	r3, r3, #16
 8002726:	2b10      	cmp	r3, #16
 8002728:	d140      	bne.n	80027ac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	3361      	adds	r3, #97	; 0x61
 800274a:	2203      	movs	r2, #3
 800274c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	333d      	adds	r3, #61	; 0x3d
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d112      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	333c      	adds	r3, #60	; 0x3c
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d108      	bne.n	8002788 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	333d      	adds	r3, #61	; 0x3d
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fe0d 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a4:	461a      	mov	r2, r3
 80027a6:	2310      	movs	r3, #16
 80027a8:	6093      	str	r3, [r2, #8]
}
 80027aa:	e1e2      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d164      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d111      	bne.n	80027ee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3361      	adds	r3, #97	; 0x61
 80027d8:	2206      	movs	r2, #6
 80027da:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fde3 	bl	80063b2 <USB_HC_Halt>
 80027ec:	e044      	b.n	8002878 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	212c      	movs	r1, #44	; 0x2c
 80027f4:	fb01 f303 	mul.w	r3, r1, r3
 80027f8:	4413      	add	r3, r2
 80027fa:	335c      	adds	r3, #92	; 0x5c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	202c      	movs	r0, #44	; 0x2c
 8002806:	fb00 f303 	mul.w	r3, r0, r3
 800280a:	440b      	add	r3, r1
 800280c:	335c      	adds	r3, #92	; 0x5c
 800280e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	212c      	movs	r1, #44	; 0x2c
 8002816:	fb01 f303 	mul.w	r3, r1, r3
 800281a:	4413      	add	r3, r2
 800281c:	335c      	adds	r3, #92	; 0x5c
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d920      	bls.n	8002866 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	212c      	movs	r1, #44	; 0x2c
 800282a:	fb01 f303 	mul.w	r3, r1, r3
 800282e:	4413      	add	r3, r2
 8002830:	335c      	adds	r3, #92	; 0x5c
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	212c      	movs	r1, #44	; 0x2c
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	4413      	add	r3, r2
 8002842:	3360      	adds	r3, #96	; 0x60
 8002844:	2204      	movs	r2, #4
 8002846:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	b2d9      	uxtb	r1, r3
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	202c      	movs	r0, #44	; 0x2c
 8002852:	fb00 f303 	mul.w	r3, r0, r3
 8002856:	4413      	add	r3, r2
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f006 f84a 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002864:	e008      	b.n	8002878 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	212c      	movs	r1, #44	; 0x2c
 800286c:	fb01 f303 	mul.w	r3, r1, r3
 8002870:	4413      	add	r3, r2
 8002872:	3360      	adds	r3, #96	; 0x60
 8002874:	2202      	movs	r2, #2
 8002876:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	6093      	str	r3, [r2, #8]
}
 800288a:	e172      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d11b      	bne.n	80028dc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	212c      	movs	r1, #44	; 0x2c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	3361      	adds	r3, #97	; 0x61
 80028b2:	2208      	movs	r2, #8
 80028b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 fd76 	bl	80063b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	461a      	mov	r2, r3
 80028d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d8:	6093      	str	r3, [r2, #8]
}
 80028da:	e14a      	b.n	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	f040 813f 	bne.w	8002b72 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	212c      	movs	r1, #44	; 0x2c
 80028fa:	fb01 f303 	mul.w	r3, r1, r3
 80028fe:	4413      	add	r3, r2
 8002900:	3361      	adds	r3, #97	; 0x61
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d17d      	bne.n	8002a04 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3360      	adds	r3, #96	; 0x60
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	333f      	adds	r3, #63	; 0x3f
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d00a      	beq.n	8002944 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	333f      	adds	r3, #63	; 0x3f
 800293c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800293e:	2b03      	cmp	r3, #3
 8002940:	f040 8100 	bne.w	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d113      	bne.n	8002974 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3355      	adds	r3, #85	; 0x55
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	f083 0301 	eor.w	r3, r3, #1
 8002960:	b2d8      	uxtb	r0, r3
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	212c      	movs	r1, #44	; 0x2c
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	4413      	add	r3, r2
 800296e:	3355      	adds	r3, #85	; 0x55
 8002970:	4602      	mov	r2, r0
 8002972:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	2b01      	cmp	r3, #1
 800297a:	f040 80e3 	bne.w	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	212c      	movs	r1, #44	; 0x2c
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	334c      	adds	r3, #76	; 0x4c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80d8 	beq.w	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	334c      	adds	r3, #76	; 0x4c
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	202c      	movs	r0, #44	; 0x2c
 80029aa:	fb00 f202 	mul.w	r2, r0, r2
 80029ae:	440a      	add	r2, r1
 80029b0:	3240      	adds	r2, #64	; 0x40
 80029b2:	8812      	ldrh	r2, [r2, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	3b01      	subs	r3, #1
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	202c      	movs	r0, #44	; 0x2c
 80029be:	fb00 f202 	mul.w	r2, r0, r2
 80029c2:	440a      	add	r2, r1
 80029c4:	3240      	adds	r2, #64	; 0x40
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80b5 	beq.w	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	212c      	movs	r1, #44	; 0x2c
 80029e0:	fb01 f303 	mul.w	r3, r1, r3
 80029e4:	4413      	add	r3, r2
 80029e6:	3355      	adds	r3, #85	; 0x55
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2d8      	uxtb	r0, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3355      	adds	r3, #85	; 0x55
 80029fe:	4602      	mov	r2, r0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e09f      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d109      	bne.n	8002a2c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3360      	adds	r3, #96	; 0x60
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e08b      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3361      	adds	r3, #97	; 0x61
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d109      	bne.n	8002a54 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3360      	adds	r3, #96	; 0x60
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	e077      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3361      	adds	r3, #97	; 0x61
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d109      	bne.n	8002a7c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3360      	adds	r3, #96	; 0x60
 8002a76:	2205      	movs	r2, #5
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e063      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3361      	adds	r3, #97	; 0x61
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b06      	cmp	r3, #6
 8002a8e:	d009      	beq.n	8002aa4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3361      	adds	r3, #97	; 0x61
 8002a9e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d14f      	bne.n	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	212c      	movs	r1, #44	; 0x2c
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	335c      	adds	r3, #92	; 0x5c
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	202c      	movs	r0, #44	; 0x2c
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	335c      	adds	r3, #92	; 0x5c
 8002ac4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	212c      	movs	r1, #44	; 0x2c
 8002acc:	fb01 f303 	mul.w	r3, r1, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	335c      	adds	r3, #92	; 0x5c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d912      	bls.n	8002b00 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	2204      	movs	r2, #4
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e021      	b.n	8002b44 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	212c      	movs	r1, #44	; 0x2c
 8002b06:	fb01 f303 	mul.w	r3, r1, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	3360      	adds	r3, #96	; 0x60
 8002b0e:	2202      	movs	r2, #2
 8002b10:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b28:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b30:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3e:	461a      	mov	r2, r3
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2302      	movs	r3, #2
 8002b54:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	b2d9      	uxtb	r1, r3
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	202c      	movs	r0, #44	; 0x2c
 8002b60:	fb00 f303 	mul.w	r3, r0, r3
 8002b64:	4413      	add	r3, r2
 8002b66:	3360      	adds	r3, #96	; 0x60
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f005 fec3 	bl	80088f8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b72:	bf00      	nop
 8002b74:	3720      	adds	r7, #32
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08a      	sub	sp, #40	; 0x28
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	0c5b      	lsrs	r3, r3, #17
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d004      	beq.n	8002bc0 <HCD_RXQLVL_IRQHandler+0x46>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	f000 80a9 	beq.w	8002d10 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bbe:	e0aa      	b.n	8002d16 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 80a6 	beq.w	8002d14 <HCD_RXQLVL_IRQHandler+0x19a>
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3344      	adds	r3, #68	; 0x44
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 809b 	beq.w	8002d14 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3350      	adds	r3, #80	; 0x50
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	441a      	add	r2, r3
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	202c      	movs	r0, #44	; 0x2c
 8002bf8:	fb00 f303 	mul.w	r3, r0, r3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334c      	adds	r3, #76	; 0x4c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d87a      	bhi.n	8002cfc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3344      	adds	r3, #68	; 0x44
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f002 ff1e 	bl	8005a60 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3344      	adds	r3, #68	; 0x44
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	441a      	add	r2, r3
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	202c      	movs	r0, #44	; 0x2c
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	440b      	add	r3, r1
 8002c44:	3344      	adds	r3, #68	; 0x44
 8002c46:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	212c      	movs	r1, #44	; 0x2c
 8002c4e:	fb01 f303 	mul.w	r3, r1, r3
 8002c52:	4413      	add	r3, r2
 8002c54:	3350      	adds	r3, #80	; 0x50
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	202c      	movs	r0, #44	; 0x2c
 8002c62:	fb00 f303 	mul.w	r3, r0, r3
 8002c66:	440b      	add	r3, r1
 8002c68:	3350      	adds	r3, #80	; 0x50
 8002c6a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	0cdb      	lsrs	r3, r3, #19
 8002c7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c80:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	212c      	movs	r1, #44	; 0x2c
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3340      	adds	r3, #64	; 0x40
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d13c      	bne.n	8002d14 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d039      	beq.n	8002d14 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cb6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cbe:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	212c      	movs	r1, #44	; 0x2c
 8002cd8:	fb01 f303 	mul.w	r3, r1, r3
 8002cdc:	4413      	add	r3, r2
 8002cde:	3354      	adds	r3, #84	; 0x54
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	f083 0301 	eor.w	r3, r3, #1
 8002ce6:	b2d8      	uxtb	r0, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3354      	adds	r3, #84	; 0x54
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	701a      	strb	r2, [r3, #0]
      break;
 8002cfa:	e00b      	b.n	8002d14 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
      break;
 8002d0e:	e001      	b.n	8002d14 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d14:	bf00      	nop
  }
}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d4a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d10b      	bne.n	8002d6e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d102      	bne.n	8002d66 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 fdad 	bl	80088c0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f043 0302 	orr.w	r3, r3, #2
 8002d6c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d132      	bne.n	8002dde <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d126      	bne.n	8002dd8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d113      	bne.n	8002dba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d9c:	d106      	bne.n	8002dac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 ffc9 	bl	8005d3c <USB_InitFSLSPClkSel>
 8002daa:	e011      	b.n	8002dd0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f002 ffc2 	bl	8005d3c <USB_InitFSLSPClkSel>
 8002db8:	e00a      	b.n	8002dd0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d106      	bne.n	8002dd0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f005 fd9f 	bl	8008914 <HAL_HCD_PortEnabled_Callback>
 8002dd6:	e002      	b.n	8002dde <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f005 fda9 	bl	8008930 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d103      	bne.n	8002df0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f043 0320 	orr.w	r3, r3, #32
 8002dee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002df6:	461a      	mov	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e12b      	b.n	800306e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fde0 	bl	80009f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2224      	movs	r2, #36	; 0x24
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e68:	f001 fa20 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8002e6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4a81      	ldr	r2, [pc, #516]	; (8003078 <HAL_I2C_Init+0x274>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d807      	bhi.n	8002e88 <HAL_I2C_Init+0x84>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a80      	ldr	r2, [pc, #512]	; (800307c <HAL_I2C_Init+0x278>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	e006      	b.n	8002e96 <HAL_I2C_Init+0x92>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4a7d      	ldr	r2, [pc, #500]	; (8003080 <HAL_I2C_Init+0x27c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	bf94      	ite	ls
 8002e90:	2301      	movls	r3, #1
 8002e92:	2300      	movhi	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e0e7      	b.n	800306e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4a78      	ldr	r2, [pc, #480]	; (8003084 <HAL_I2C_Init+0x280>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	4a6a      	ldr	r2, [pc, #424]	; (8003078 <HAL_I2C_Init+0x274>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d802      	bhi.n	8002ed8 <HAL_I2C_Init+0xd4>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	e009      	b.n	8002eec <HAL_I2C_Init+0xe8>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ede:	fb02 f303 	mul.w	r3, r2, r3
 8002ee2:	4a69      	ldr	r2, [pc, #420]	; (8003088 <HAL_I2C_Init+0x284>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	3301      	adds	r3, #1
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002efe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	495c      	ldr	r1, [pc, #368]	; (8003078 <HAL_I2C_Init+0x274>)
 8002f08:	428b      	cmp	r3, r1
 8002f0a:	d819      	bhi.n	8002f40 <HAL_I2C_Init+0x13c>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	1e59      	subs	r1, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f1a:	1c59      	adds	r1, r3, #1
 8002f1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f20:	400b      	ands	r3, r1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_I2C_Init+0x138>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1e59      	subs	r1, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3a:	e051      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	e04f      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d111      	bne.n	8002f6c <HAL_I2C_Init+0x168>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	e012      	b.n	8002f92 <HAL_I2C_Init+0x18e>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	0099      	lsls	r1, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_I2C_Init+0x196>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e022      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10e      	bne.n	8002fc0 <HAL_I2C_Init+0x1bc>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1e58      	subs	r0, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6859      	ldr	r1, [r3, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	440b      	add	r3, r1
 8002fb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fbe:	e00f      	b.n	8002fe0 <HAL_I2C_Init+0x1dc>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	6809      	ldr	r1, [r1, #0]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69da      	ldr	r2, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800300e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	6911      	ldr	r1, [r2, #16]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	68d2      	ldr	r2, [r2, #12]
 800301a:	4311      	orrs	r1, r2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6812      	ldr	r2, [r2, #0]
 8003020:	430b      	orrs	r3, r1
 8003022:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	000186a0 	.word	0x000186a0
 800307c:	001e847f 	.word	0x001e847f
 8003080:	003d08ff 	.word	0x003d08ff
 8003084:	431bde83 	.word	0x431bde83
 8003088:	10624dd3 	.word	0x10624dd3

0800308c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b088      	sub	sp, #32
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e128      	b.n	80032f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a90      	ldr	r2, [pc, #576]	; (80032f8 <HAL_I2S_Init+0x26c>)
 80030b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f7fd fce1 	bl	8000a80 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030d4:	f023 030f 	bic.w	r3, r3, #15
 80030d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2202      	movs	r2, #2
 80030e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d060      	beq.n	80031ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030f2:	2310      	movs	r3, #16
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	e001      	b.n	80030fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80030f8:	2320      	movs	r3, #32
 80030fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	2b20      	cmp	r3, #32
 8003102:	d802      	bhi.n	800310a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800310a:	2001      	movs	r0, #1
 800310c:	f001 f9d8 	bl	80044c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003110:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800311a:	d125      	bne.n	8003168 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d010      	beq.n	8003146 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	fbb2 f2f3 	udiv	r2, r2, r3
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	461a      	mov	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003140:	3305      	adds	r3, #5
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e01f      	b.n	8003186 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	461a      	mov	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003162:	3305      	adds	r3, #5
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	e00e      	b.n	8003186 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	461a      	mov	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	3305      	adds	r3, #5
 8003184:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4a5c      	ldr	r2, [pc, #368]	; (80032fc <HAL_I2S_Init+0x270>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	08db      	lsrs	r3, r3, #3
 8003190:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e003      	b.n	80031b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d902      	bls.n	80031c0 <HAL_I2S_Init+0x134>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	2bff      	cmp	r3, #255	; 0xff
 80031be:	d907      	bls.n	80031d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c4:	f043 0210 	orr.w	r2, r3, #16
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e08f      	b.n	80032f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	ea42 0103 	orr.w	r1, r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031ee:	f023 030f 	bic.w	r3, r3, #15
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	6851      	ldr	r1, [r2, #4]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6892      	ldr	r2, [r2, #8]
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68d2      	ldr	r2, [r2, #12]
 8003200:	4311      	orrs	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6992      	ldr	r2, [r2, #24]
 8003206:	430a      	orrs	r2, r1
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003212:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d161      	bne.n	80032e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a38      	ldr	r2, [pc, #224]	; (8003300 <HAL_I2S_Init+0x274>)
 8003220:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a37      	ldr	r2, [pc, #220]	; (8003304 <HAL_I2S_Init+0x278>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_I2S_Init+0x1a4>
 800322c:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_I2S_Init+0x27c>)
 800322e:	e001      	b.n	8003234 <HAL_I2S_Init+0x1a8>
 8003230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	4932      	ldr	r1, [pc, #200]	; (8003304 <HAL_I2S_Init+0x278>)
 800323c:	428a      	cmp	r2, r1
 800323e:	d101      	bne.n	8003244 <HAL_I2S_Init+0x1b8>
 8003240:	4a31      	ldr	r2, [pc, #196]	; (8003308 <HAL_I2S_Init+0x27c>)
 8003242:	e001      	b.n	8003248 <HAL_I2S_Init+0x1bc>
 8003244:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003248:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800324c:	f023 030f 	bic.w	r3, r3, #15
 8003250:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_I2S_Init+0x278>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d101      	bne.n	8003260 <HAL_I2S_Init+0x1d4>
 800325c:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_I2S_Init+0x27c>)
 800325e:	e001      	b.n	8003264 <HAL_I2S_Init+0x1d8>
 8003260:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003264:	2202      	movs	r2, #2
 8003266:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a25      	ldr	r2, [pc, #148]	; (8003304 <HAL_I2S_Init+0x278>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_I2S_Init+0x1ea>
 8003272:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_I2S_Init+0x27c>)
 8003274:	e001      	b.n	800327a <HAL_I2S_Init+0x1ee>
 8003276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003286:	d003      	beq.n	8003290 <HAL_I2S_Init+0x204>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d103      	bne.n	8003298 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	e001      	b.n	800329c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032a6:	4313      	orrs	r3, r2
 80032a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ba:	4313      	orrs	r3, r2
 80032bc:	b29a      	uxth	r2, r3
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	; (8003304 <HAL_I2S_Init+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_I2S_Init+0x24c>
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_I2S_Init+0x27c>)
 80032d6:	e001      	b.n	80032dc <HAL_I2S_Init+0x250>
 80032d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032dc:	897a      	ldrh	r2, [r7, #10]
 80032de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	08003403 	.word	0x08003403
 80032fc:	cccccccd 	.word	0xcccccccd
 8003300:	08003519 	.word	0x08003519
 8003304:	40003800 	.word	0x40003800
 8003308:	40003400 	.word	0x40003400

0800330c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003378:	b29b      	uxth	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10e      	bne.n	800339c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800338c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ffb8 	bl	800330c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800339c:	bf00      	nop
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	b292      	uxth	r2, r2
 80033b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	1c9a      	adds	r2, r3, #2
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10e      	bne.n	80033fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff93 	bl	8003320 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b04      	cmp	r3, #4
 800341c:	d13a      	bne.n	8003494 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b01      	cmp	r3, #1
 8003426:	d109      	bne.n	800343c <I2S_IRQHandler+0x3a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d102      	bne.n	800343c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ffb4 	bl	80033a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b40      	cmp	r3, #64	; 0x40
 8003444:	d126      	bne.n	8003494 <I2S_IRQHandler+0x92>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d11f      	bne.n	8003494 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003462:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f043 0202 	orr.w	r2, r3, #2
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7ff ff50 	bl	8003334 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d136      	bne.n	800350e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d109      	bne.n	80034be <I2S_IRQHandler+0xbc>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	d102      	bne.n	80034be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff45 	bl	8003348 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d122      	bne.n	800350e <I2S_IRQHandler+0x10c>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d11b      	bne.n	800350e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0204 	orr.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff ff13 	bl	8003334 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800350e:	bf00      	nop
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a92      	ldr	r2, [pc, #584]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003532:	4b92      	ldr	r3, [pc, #584]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003534:	e001      	b.n	800353a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003536:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a8b      	ldr	r2, [pc, #556]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003550:	4b8a      	ldr	r3, [pc, #552]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003552:	e001      	b.n	8003558 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003564:	d004      	beq.n	8003570 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f040 8099 	bne.w	80036a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b02      	cmp	r3, #2
 8003578:	d107      	bne.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 f925 	bl	80037d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9c8 	bl	8003934 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d13a      	bne.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d035      	beq.n	8003624 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a6e      	ldr	r2, [pc, #440]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d101      	bne.n	80035c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035c2:	4b6e      	ldr	r3, [pc, #440]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035c4:	e001      	b.n	80035ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4969      	ldr	r1, [pc, #420]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035d2:	428b      	cmp	r3, r1
 80035d4:	d101      	bne.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035d6:	4b69      	ldr	r3, [pc, #420]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035d8:	e001      	b.n	80035de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe88 	bl	8003334 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	f003 0308 	and.w	r3, r3, #8
 800362a:	2b08      	cmp	r3, #8
 800362c:	f040 80c3 	bne.w	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80bd 	beq.w	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800364a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a49      	ldr	r2, [pc, #292]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d101      	bne.n	800365a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003658:	e001      	b.n	800365e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800365a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4944      	ldr	r1, [pc, #272]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003666:	428b      	cmp	r3, r1
 8003668:	d101      	bne.n	800366e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800366a:	4b44      	ldr	r3, [pc, #272]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800366c:	e001      	b.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800366e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003672:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003676:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f7ff fe4a 	bl	8003334 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a0:	e089      	b.n	80037b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d107      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f8be 	bl	8003838 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f8fd 	bl	80038d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036dc:	2b40      	cmp	r3, #64	; 0x40
 80036de:	d12f      	bne.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d02a      	beq.n	8003740 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003706:	e001      	b.n	800370c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003708:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4919      	ldr	r1, [pc, #100]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003714:	428b      	cmp	r3, r1
 8003716:	d101      	bne.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800371a:	e001      	b.n	8003720 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800371c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003720:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003724:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003732:	f043 0202 	orr.w	r2, r3, #2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fdfa 	bl	8003334 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b08      	cmp	r3, #8
 8003748:	d136      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d031      	beq.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a07      	ldr	r2, [pc, #28]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003760:	e001      	b.n	8003766 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003762:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4902      	ldr	r1, [pc, #8]	; (8003778 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800376e:	428b      	cmp	r3, r1
 8003770:	d106      	bne.n	8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003772:	4b02      	ldr	r3, [pc, #8]	; (800377c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003774:	e006      	b.n	8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003776:	bf00      	nop
 8003778:	40003800 	.word	0x40003800
 800377c:	40003400 	.word	0x40003400
 8003780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003784:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003788:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003798:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	f043 0204 	orr.w	r2, r3, #4
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff fdc0 	bl	8003334 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037b4:	e000      	b.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037b6:	bf00      	nop
}
 80037b8:	bf00      	nop
 80037ba:	3720      	adds	r7, #32
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	1c99      	adds	r1, r3, #2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6251      	str	r1, [r2, #36]	; 0x24
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d113      	bne.n	800382e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003814:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800381a:	b29b      	uxth	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff ffc9 	bl	80037c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	1c99      	adds	r1, r3, #2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6251      	str	r1, [r2, #36]	; 0x24
 800384a:	8819      	ldrh	r1, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d101      	bne.n	800385a <I2SEx_TxISR_I2SExt+0x22>
 8003856:	4b1d      	ldr	r3, [pc, #116]	; (80038cc <I2SEx_TxISR_I2SExt+0x94>)
 8003858:	e001      	b.n	800385e <I2SEx_TxISR_I2SExt+0x26>
 800385a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385e:	460a      	mov	r2, r1
 8003860:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d121      	bne.n	80038be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d101      	bne.n	8003888 <I2SEx_TxISR_I2SExt+0x50>
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <I2SEx_TxISR_I2SExt+0x94>)
 8003886:	e001      	b.n	800388c <I2SEx_TxISR_I2SExt+0x54>
 8003888:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	490d      	ldr	r1, [pc, #52]	; (80038c8 <I2SEx_TxISR_I2SExt+0x90>)
 8003894:	428b      	cmp	r3, r1
 8003896:	d101      	bne.n	800389c <I2SEx_TxISR_I2SExt+0x64>
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <I2SEx_TxISR_I2SExt+0x94>)
 800389a:	e001      	b.n	80038a0 <I2SEx_TxISR_I2SExt+0x68>
 800389c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ff81 	bl	80037c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40003800 	.word	0x40003800
 80038cc:	40003400 	.word	0x40003400

080038d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68d8      	ldr	r0, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	1c99      	adds	r1, r3, #2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038e8:	b282      	uxth	r2, r0
 80038ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fe:	b29b      	uxth	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d113      	bne.n	800392c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003912:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003918:	b29b      	uxth	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff4a 	bl	80037c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a20      	ldr	r2, [pc, #128]	; (80039c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <I2SEx_RxISR_I2SExt+0x16>
 8003946:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003948:	e001      	b.n	800394e <I2SEx_RxISR_I2SExt+0x1a>
 800394a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394e:	68d8      	ldr	r0, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	1c99      	adds	r1, r3, #2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	62d1      	str	r1, [r2, #44]	; 0x2c
 800395a:	b282      	uxth	r2, r0
 800395c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d121      	bne.n	80039ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <I2SEx_RxISR_I2SExt+0x90>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <I2SEx_RxISR_I2SExt+0x50>
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003982:	e001      	b.n	8003988 <I2SEx_RxISR_I2SExt+0x54>
 8003984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	490d      	ldr	r1, [pc, #52]	; (80039c4 <I2SEx_RxISR_I2SExt+0x90>)
 8003990:	428b      	cmp	r3, r1
 8003992:	d101      	bne.n	8003998 <I2SEx_RxISR_I2SExt+0x64>
 8003994:	4b0c      	ldr	r3, [pc, #48]	; (80039c8 <I2SEx_RxISR_I2SExt+0x94>)
 8003996:	e001      	b.n	800399c <I2SEx_RxISR_I2SExt+0x68>
 8003998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800399c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff03 	bl	80037c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40003800 	.word	0x40003800
 80039c8:	40003400 	.word	0x40003400

080039cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e267      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d075      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d00c      	beq.n	8003a10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f6:	4b85      	ldr	r3, [pc, #532]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d112      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a02:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	4b7e      	ldr	r3, [pc, #504]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d05b      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x108>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d157      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e242      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a30:	d106      	bne.n	8003a40 <HAL_RCC_OscConfig+0x74>
 8003a32:	4b76      	ldr	r3, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a75      	ldr	r2, [pc, #468]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	e01d      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x98>
 8003a4a:	4b70      	ldr	r3, [pc, #448]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a6f      	ldr	r2, [pc, #444]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b6d      	ldr	r3, [pc, #436]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a6c      	ldr	r2, [pc, #432]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0xb0>
 8003a64:	4b69      	ldr	r3, [pc, #420]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a68      	ldr	r2, [pc, #416]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a65      	ldr	r2, [pc, #404]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d013      	beq.n	8003aac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fd fa2a 	bl	8000edc <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a8c:	f7fd fa26 	bl	8000edc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b64      	cmp	r3, #100	; 0x64
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e207      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	4b5b      	ldr	r3, [pc, #364]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0xc0>
 8003aaa:	e014      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aac:	f7fd fa16 	bl	8000edc <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab4:	f7fd fa12 	bl	8000edc <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b64      	cmp	r3, #100	; 0x64
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e1f3      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0xe8>
 8003ad2:	e000      	b.n	8003ad6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f003 030c 	and.w	r3, r3, #12
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00b      	beq.n	8003b06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aee:	4b47      	ldr	r3, [pc, #284]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d11c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b44      	ldr	r3, [pc, #272]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b06:	4b41      	ldr	r3, [pc, #260]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e1c7      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4937      	ldr	r1, [pc, #220]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b32:	e03a      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b3c:	4b34      	ldr	r3, [pc, #208]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b42:	f7fd f9cb 	bl	8000edc <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fd f9c7 	bl	8000edc <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e1a8      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	4b2b      	ldr	r3, [pc, #172]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4925      	ldr	r1, [pc, #148]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	600b      	str	r3, [r1, #0]
 8003b7c:	e015      	b.n	8003baa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCC_OscConfig+0x244>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd f9aa 	bl	8000edc <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b8c:	f7fd f9a6 	bl	8000edc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e187      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d036      	beq.n	8003c24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d016      	beq.n	8003bec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bbe:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc4:	f7fd f98a 	bl	8000edc <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bcc:	f7fd f986 	bl	8000edc <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e167      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_OscConfig+0x240>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x200>
 8003bea:	e01b      	b.n	8003c24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bec:	4b09      	ldr	r3, [pc, #36]	; (8003c14 <HAL_RCC_OscConfig+0x248>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf2:	f7fd f973 	bl	8000edc <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf8:	e00e      	b.n	8003c18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fd f96f 	bl	8000edc <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d907      	bls.n	8003c18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e150      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470000 	.word	0x42470000
 8003c14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c18:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1ea      	bne.n	8003bfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 8097 	beq.w	8003d60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c36:	4b81      	ldr	r3, [pc, #516]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	4b7d      	ldr	r3, [pc, #500]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a7c      	ldr	r2, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
 8003c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c62:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d118      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6e:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a73      	ldr	r2, [pc, #460]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c7a:	f7fd f92f 	bl	8000edc <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c82:	f7fd f92b 	bl	8000edc <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e10c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	4b6a      	ldr	r3, [pc, #424]	; (8003e40 <HAL_RCC_OscConfig+0x474>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x2ea>
 8003ca8:	4b64      	ldr	r3, [pc, #400]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cac:	4a63      	ldr	r2, [pc, #396]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb4:	e01c      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b05      	cmp	r3, #5
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x30c>
 8003cbe:	4b5f      	ldr	r3, [pc, #380]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cc4:	f043 0304 	orr.w	r3, r3, #4
 8003cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cca:	4b5c      	ldr	r3, [pc, #368]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd6:	e00b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x324>
 8003cd8:	4b58      	ldr	r3, [pc, #352]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a57      	ldr	r2, [pc, #348]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 0301 	bic.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	4b55      	ldr	r3, [pc, #340]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce8:	4a54      	ldr	r2, [pc, #336]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003cea:	f023 0304 	bic.w	r3, r3, #4
 8003cee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd f8f0 	bl	8000edc <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd f8ec 	bl	8000edc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e0cb      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d16:	4b49      	ldr	r3, [pc, #292]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0ee      	beq.n	8003d00 <HAL_RCC_OscConfig+0x334>
 8003d22:	e014      	b.n	8003d4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d24:	f7fd f8da 	bl	8000edc <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2c:	f7fd f8d6 	bl	8000edc <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e0b5      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d42:	4b3e      	ldr	r3, [pc, #248]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a1 	beq.w	8003eac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d6a:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d05c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d141      	bne.n	8003e02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d84:	f7fd f8aa 	bl	8000edc <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8c:	f7fd f8a6 	bl	8000edc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e087      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	041b      	lsls	r3, r3, #16
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	491b      	ldr	r1, [pc, #108]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dda:	f7fd f87f 	bl	8000edc <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de2:	f7fd f87b 	bl	8000edc <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e05c      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x416>
 8003e00:	e054      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e02:	4b10      	ldr	r3, [pc, #64]	; (8003e44 <HAL_RCC_OscConfig+0x478>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e08:	f7fd f868 	bl	8000edc <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e10:	f7fd f864 	bl	8000edc <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e045      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_RCC_OscConfig+0x470>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x444>
 8003e2e:	e03d      	b.n	8003eac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e038      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e48:	4b1b      	ldr	r3, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x4ec>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d028      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d121      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d11a      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e78:	4013      	ands	r3, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	3b01      	subs	r3, #1
 8003e92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0cc      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d90c      	bls.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ede:	4b65      	ldr	r3, [pc, #404]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	b2d2      	uxtb	r2, r2
 8003ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee6:	4b63      	ldr	r3, [pc, #396]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0307 	and.w	r3, r3, #7
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d001      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0b8      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d020      	beq.n	8003f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f10:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	4a58      	ldr	r2, [pc, #352]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f28:	4b53      	ldr	r3, [pc, #332]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a52      	ldr	r2, [pc, #328]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f34:	4b50      	ldr	r3, [pc, #320]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	494d      	ldr	r1, [pc, #308]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d044      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d107      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b47      	ldr	r3, [pc, #284]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d119      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e07f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7a:	4b3f      	ldr	r3, [pc, #252]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d109      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e06f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f8a:	4b3b      	ldr	r3, [pc, #236]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e067      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f023 0203 	bic.w	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4934      	ldr	r1, [pc, #208]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fac:	f7fc ff96 	bl	8000edc <HAL_GetTick>
 8003fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	e00a      	b.n	8003fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb4:	f7fc ff92 	bl	8000edc <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e04f      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 020c 	and.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d1eb      	bne.n	8003fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b25      	ldr	r3, [pc, #148]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d20c      	bcs.n	8004004 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff2:	4b20      	ldr	r3, [pc, #128]	; (8004074 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e032      	b.n	800406a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d008      	beq.n	8004022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4916      	ldr	r1, [pc, #88]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	490e      	ldr	r1, [pc, #56]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004042:	f000 f821 	bl	8004088 <HAL_RCC_GetSysClockFreq>
 8004046:	4602      	mov	r2, r0
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	f003 030f 	and.w	r3, r3, #15
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <HAL_RCC_ClockConfig+0x1c0>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	fa22 f303 	lsr.w	r3, r2, r3
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_RCC_ClockConfig+0x1c4>)
 800405c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405e:	4b09      	ldr	r3, [pc, #36]	; (8004084 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fc fef6 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40023c00 	.word	0x40023c00
 8004078:	40023800 	.word	0x40023800
 800407c:	08008fd0 	.word	0x08008fd0
 8004080:	20000000 	.word	0x20000000
 8004084:	20000004 	.word	0x20000004

08004088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b094      	sub	sp, #80	; 0x50
 800408e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	647b      	str	r3, [r7, #68]	; 0x44
 8004094:	2300      	movs	r3, #0
 8004096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004098:	2300      	movs	r3, #0
 800409a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a0:	4b79      	ldr	r3, [pc, #484]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 030c 	and.w	r3, r3, #12
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d00d      	beq.n	80040c8 <HAL_RCC_GetSysClockFreq+0x40>
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	f200 80e1 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_RCC_GetSysClockFreq+0x34>
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d003      	beq.n	80040c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ba:	e0db      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040bc:	4b73      	ldr	r3, [pc, #460]	; (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040c0:	e0db      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040c2:	4b73      	ldr	r3, [pc, #460]	; (8004290 <HAL_RCC_GetSysClockFreq+0x208>)
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c6:	e0d8      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c8:	4b6f      	ldr	r3, [pc, #444]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040d2:	4b6d      	ldr	r3, [pc, #436]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d063      	beq.n	80041a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	099b      	lsrs	r3, r3, #6
 80040e4:	2200      	movs	r2, #0
 80040e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f0:	633b      	str	r3, [r7, #48]	; 0x30
 80040f2:	2300      	movs	r3, #0
 80040f4:	637b      	str	r3, [r7, #52]	; 0x34
 80040f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80040fa:	4622      	mov	r2, r4
 80040fc:	462b      	mov	r3, r5
 80040fe:	f04f 0000 	mov.w	r0, #0
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	0159      	lsls	r1, r3, #5
 8004108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800410c:	0150      	lsls	r0, r2, #5
 800410e:	4602      	mov	r2, r0
 8004110:	460b      	mov	r3, r1
 8004112:	4621      	mov	r1, r4
 8004114:	1a51      	subs	r1, r2, r1
 8004116:	6139      	str	r1, [r7, #16]
 8004118:	4629      	mov	r1, r5
 800411a:	eb63 0301 	sbc.w	r3, r3, r1
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	f04f 0300 	mov.w	r3, #0
 8004128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800412c:	4659      	mov	r1, fp
 800412e:	018b      	lsls	r3, r1, #6
 8004130:	4651      	mov	r1, sl
 8004132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004136:	4651      	mov	r1, sl
 8004138:	018a      	lsls	r2, r1, #6
 800413a:	4651      	mov	r1, sl
 800413c:	ebb2 0801 	subs.w	r8, r2, r1
 8004140:	4659      	mov	r1, fp
 8004142:	eb63 0901 	sbc.w	r9, r3, r1
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800415a:	4690      	mov	r8, r2
 800415c:	4699      	mov	r9, r3
 800415e:	4623      	mov	r3, r4
 8004160:	eb18 0303 	adds.w	r3, r8, r3
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	462b      	mov	r3, r5
 8004168:	eb49 0303 	adc.w	r3, r9, r3
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800417a:	4629      	mov	r1, r5
 800417c:	024b      	lsls	r3, r1, #9
 800417e:	4621      	mov	r1, r4
 8004180:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004184:	4621      	mov	r1, r4
 8004186:	024a      	lsls	r2, r1, #9
 8004188:	4610      	mov	r0, r2
 800418a:	4619      	mov	r1, r3
 800418c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800418e:	2200      	movs	r2, #0
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004198:	f7fc f816 	bl	80001c8 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4613      	mov	r3, r2
 80041a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a4:	e058      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041a6:	4b38      	ldr	r3, [pc, #224]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	099b      	lsrs	r3, r3, #6
 80041ac:	2200      	movs	r2, #0
 80041ae:	4618      	mov	r0, r3
 80041b0:	4611      	mov	r1, r2
 80041b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	2300      	movs	r3, #0
 80041ba:	627b      	str	r3, [r7, #36]	; 0x24
 80041bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c0:	4642      	mov	r2, r8
 80041c2:	464b      	mov	r3, r9
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f04f 0100 	mov.w	r1, #0
 80041cc:	0159      	lsls	r1, r3, #5
 80041ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d2:	0150      	lsls	r0, r2, #5
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4641      	mov	r1, r8
 80041da:	ebb2 0a01 	subs.w	sl, r2, r1
 80041de:	4649      	mov	r1, r9
 80041e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80041f8:	ebb2 040a 	subs.w	r4, r2, sl
 80041fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	00eb      	lsls	r3, r5, #3
 800420a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420e:	00e2      	lsls	r2, r4, #3
 8004210:	4614      	mov	r4, r2
 8004212:	461d      	mov	r5, r3
 8004214:	4643      	mov	r3, r8
 8004216:	18e3      	adds	r3, r4, r3
 8004218:	603b      	str	r3, [r7, #0]
 800421a:	464b      	mov	r3, r9
 800421c:	eb45 0303 	adc.w	r3, r5, r3
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	f04f 0200 	mov.w	r2, #0
 8004226:	f04f 0300 	mov.w	r3, #0
 800422a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800422e:	4629      	mov	r1, r5
 8004230:	028b      	lsls	r3, r1, #10
 8004232:	4621      	mov	r1, r4
 8004234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004238:	4621      	mov	r1, r4
 800423a:	028a      	lsls	r2, r1, #10
 800423c:	4610      	mov	r0, r2
 800423e:	4619      	mov	r1, r3
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	2200      	movs	r2, #0
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	61fa      	str	r2, [r7, #28]
 8004248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800424c:	f7fb ffbc 	bl	80001c8 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_GetSysClockFreq+0x200>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800426a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetSysClockFreq+0x204>)
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800427c:	4618      	mov	r0, r3
 800427e:	3750      	adds	r7, #80	; 0x50
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400
 8004290:	007a1200 	.word	0x007a1200

08004294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000000 	.word	0x20000000

080042ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b0:	f7ff fff0 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	08008fe0 	.word	0x08008fe0

080042d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042d8:	f7ff ffdc 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0b5b      	lsrs	r3, r3, #13
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	08008fe0 	.word	0x08008fe0

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004320:	2b00      	cmp	r3, #0
 8004322:	d035      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004324:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800432a:	f7fc fdd7 	bl	8000edc <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004332:	f7fc fdd3 	bl	8000edc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0b0      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004344:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	019a      	lsls	r2, r3, #6
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	071b      	lsls	r3, r3, #28
 800435c:	4955      	ldr	r1, [pc, #340]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004364:	4b52      	ldr	r3, [pc, #328]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004366:	2201      	movs	r2, #1
 8004368:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800436a:	f7fc fdb7 	bl	8000edc <HAL_GetTick>
 800436e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004370:	e008      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004372:	f7fc fdb3 	bl	8000edc <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e090      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004384:	4b4b      	ldr	r3, [pc, #300]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0f0      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8083 	beq.w	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	4a43      	ldr	r2, [pc, #268]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ac:	6413      	str	r3, [r2, #64]	; 0x40
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043ba:	4b3f      	ldr	r3, [pc, #252]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a3e      	ldr	r2, [pc, #248]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043c6:	f7fc fd89 	bl	8000edc <HAL_GetTick>
 80043ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fc fd85 	bl	8000edc <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e062      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043e0:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ec:	4b31      	ldr	r3, [pc, #196]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d02f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	429a      	cmp	r2, r3
 8004408:	d028      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800440a:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004412:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004414:	4b29      	ldr	r3, [pc, #164]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441a:	4b28      	ldr	r3, [pc, #160]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004420:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004426:	4b23      	ldr	r3, [pc, #140]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d114      	bne.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004432:	f7fc fd53 	bl	8000edc <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004438:	e00a      	b.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443a:	f7fc fd4f 	bl	8000edc <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	f241 3288 	movw	r2, #5000	; 0x1388
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e02a      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	4b18      	ldr	r3, [pc, #96]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ee      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004468:	d10d      	bne.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800446a:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800447a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447e:	490d      	ldr	r1, [pc, #52]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]
 8004484:	e005      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	4a0a      	ldr	r2, [pc, #40]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004490:	6093      	str	r3, [r2, #8]
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004494:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800449e:	4905      	ldr	r1, [pc, #20]	; (80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	42470068 	.word	0x42470068
 80044b4:	40023800 	.word	0x40023800
 80044b8:	40007000 	.word	0x40007000
 80044bc:	42470e40 	.word	0x42470e40

080044c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b087      	sub	sp, #28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d13e      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d12f      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044f6:	617b      	str	r3, [r7, #20]
          break;
 80044f8:	e02f      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004506:	d108      	bne.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004510:	4a18      	ldr	r2, [pc, #96]	; (8004574 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004512:	fbb2 f3f3 	udiv	r3, r2, r3
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	e007      	b.n	800452a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800451a:	4b14      	ldr	r3, [pc, #80]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800452a:	4b10      	ldr	r3, [pc, #64]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800452c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	fb02 f303 	mul.w	r3, r2, r3
 800453c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004544:	0f1b      	lsrs	r3, r3, #28
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
          break;
 8004552:	e002      	b.n	800455a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	617b      	str	r3, [r7, #20]
          break;
 8004558:	bf00      	nop
        }
      }
      break;
 800455a:	bf00      	nop
    }
  }
  return frequency;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800
 8004570:	00bb8000 	.word	0x00bb8000
 8004574:	007a1200 	.word	0x007a1200
 8004578:	00f42400 	.word	0x00f42400

0800457c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e07b      	b.n	8004686 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800459e:	d009      	beq.n	80045b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	61da      	str	r2, [r3, #28]
 80045a6:	e005      	b.n	80045b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fad6 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004606:	431a      	orrs	r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004638:	ea42 0103 	orr.w	r1, r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004640:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0104 	and.w	r1, r3, #4
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0210 	and.w	r2, r3, #16
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004674:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e03f      	b.n	8004720 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fc faab 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	; 0x24
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fdde 	bl	8005294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af02      	add	r7, sp, #8
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b20      	cmp	r3, #32
 8004746:	d17c      	bne.n	8004842 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_UART_Transmit+0x2c>
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e075      	b.n	8004844 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475e:	2b01      	cmp	r3, #1
 8004760:	d101      	bne.n	8004766 <HAL_UART_Transmit+0x3e>
 8004762:	2302      	movs	r3, #2
 8004764:	e06e      	b.n	8004844 <HAL_UART_Transmit+0x11c>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2221      	movs	r2, #33	; 0x21
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800477c:	f7fc fbae 	bl	8000edc <HAL_GetTick>
 8004780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	88fa      	ldrh	r2, [r7, #6]
 8004786:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d108      	bne.n	80047aa <HAL_UART_Transmit+0x82>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	e003      	b.n	80047b2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80047ba:	e02a      	b.n	8004812 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2200      	movs	r2, #0
 80047c4:	2180      	movs	r1, #128	; 0x80
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fb1e 	bl	8004e08 <UART_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e036      	b.n	8004844 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	461a      	mov	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	3302      	adds	r3, #2
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	e007      	b.n	8004804 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	781a      	ldrb	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3301      	adds	r3, #1
 8004802:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1cf      	bne.n	80047bc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	2140      	movs	r1, #64	; 0x40
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 faee 	bl	8004e08 <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e006      	b.n	8004844 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800483e:	2300      	movs	r3, #0
 8004840:	e000      	b.n	8004844 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004842:	2302      	movs	r3, #2
  }
}
 8004844:	4618      	mov	r0, r3
 8004846:	3720      	adds	r7, #32
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b20      	cmp	r3, #32
 8004864:	d11d      	bne.n	80048a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_UART_Receive_IT+0x26>
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e016      	b.n	80048a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800487c:	2b01      	cmp	r3, #1
 800487e:	d101      	bne.n	8004884 <HAL_UART_Receive_IT+0x38>
 8004880:	2302      	movs	r3, #2
 8004882:	e00f      	b.n	80048a4 <HAL_UART_Receive_IT+0x58>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004892:	88fb      	ldrh	r3, [r7, #6]
 8004894:	461a      	mov	r2, r3
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 fb23 	bl	8004ee4 <UART_Start_Receive_IT>
 800489e:	4603      	mov	r3, r0
 80048a0:	e000      	b.n	80048a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80048a2:	2302      	movs	r3, #2
  }
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b0ba      	sub	sp, #232	; 0xe8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80048ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10f      	bne.n	8004912 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0320 	and.w	r3, r3, #32
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d009      	beq.n	8004912 <HAL_UART_IRQHandler+0x66>
 80048fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fc07 	bl	800511e <UART_Receive_IT>
      return;
 8004910:	e256      	b.n	8004dc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 80de 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x22c>
 800491c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d106      	bne.n	8004936 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80d1 	beq.w	8004ad8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_UART_IRQHandler+0xae>
 8004942:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d005      	beq.n	800495a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	f043 0201 	orr.w	r2, r3, #1
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800495a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <HAL_UART_IRQHandler+0xd2>
 8004966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f043 0202 	orr.w	r2, r3, #2
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800497e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <HAL_UART_IRQHandler+0xf6>
 800498a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f043 0204 	orr.w	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <HAL_UART_IRQHandler+0x126>
 80049ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d105      	bne.n	80049c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	f043 0208 	orr.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 81ed 	beq.w	8004db6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d008      	beq.n	80049fa <HAL_UART_IRQHandler+0x14e>
 80049e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ec:	f003 0320 	and.w	r3, r3, #32
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb92 	bl	800511e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_UART_IRQHandler+0x17a>
 8004a1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d04f      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa9a 	bl	8004f60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a36:	2b40      	cmp	r3, #64	; 0x40
 8004a38:	d141      	bne.n	8004abe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3314      	adds	r3, #20
 8004a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1d9      	bne.n	8004a3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d013      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	4a7d      	ldr	r2, [pc, #500]	; (8004c88 <HAL_UART_IRQHandler+0x3dc>)
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fc fbcf 	bl	800123e <HAL_DMA_Abort_IT>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d016      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab4:	e00e      	b.n	8004ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f990 	bl	8004ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e00a      	b.n	8004ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f98c 	bl	8004ddc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac4:	e006      	b.n	8004ad4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f988 	bl	8004ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ad2:	e170      	b.n	8004db6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	bf00      	nop
    return;
 8004ad6:	e16e      	b.n	8004db6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	f040 814a 	bne.w	8004d76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8143 	beq.w	8004d76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 813c 	beq.w	8004d76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1e:	2b40      	cmp	r3, #64	; 0x40
 8004b20:	f040 80b4 	bne.w	8004c8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8140 	beq.w	8004dba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b42:	429a      	cmp	r2, r3
 8004b44:	f080 8139 	bcs.w	8004dba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b5a:	f000 8088 	beq.w	8004c6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b6c:	e853 3f00 	ldrex	r3, [r3]
 8004b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b9a:	e841 2300 	strex	r3, r2, [r1]
 8004b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1d9      	bne.n	8004b5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3314      	adds	r3, #20
 8004bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb4:	e853 3f00 	ldrex	r3, [r3]
 8004bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3314      	adds	r3, #20
 8004bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e1      	bne.n	8004baa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	3314      	adds	r3, #20
 8004bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	3314      	adds	r3, #20
 8004c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e3      	bne.n	8004be6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2220      	movs	r2, #32
 8004c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c50:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e3      	bne.n	8004c2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fc fa78 	bl	800115e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8b6 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c84:	e099      	b.n	8004dba <HAL_UART_IRQHandler+0x50e>
 8004c86:	bf00      	nop
 8004c88:	08005027 	.word	0x08005027
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 808b 	beq.w	8004dbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 8086 	beq.w	8004dbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	330c      	adds	r3, #12
 8004cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004cd6:	647a      	str	r2, [r7, #68]	; 0x44
 8004cd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e3      	bne.n	8004cb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3314      	adds	r3, #20
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3314      	adds	r3, #20
 8004d0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d0e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e3      	bne.n	8004cea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2220      	movs	r2, #32
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d54:	61fa      	str	r2, [r7, #28]
 8004d56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	69b9      	ldr	r1, [r7, #24]
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	617b      	str	r3, [r7, #20]
   return(result);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e3      	bne.n	8004d30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f83e 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d74:	e023      	b.n	8004dbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_UART_IRQHandler+0x4ea>
 8004d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 f95d 	bl	800504e <UART_Transmit_IT>
    return;
 8004d94:	e014      	b.n	8004dc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00e      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x514>
 8004da2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f99d 	bl	80050ee <UART_EndTransmit_IT>
    return;
 8004db4:	e004      	b.n	8004dc0 <HAL_UART_IRQHandler+0x514>
    return;
 8004db6:	bf00      	nop
 8004db8:	e002      	b.n	8004dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8004dba:	bf00      	nop
 8004dbc:	e000      	b.n	8004dc0 <HAL_UART_IRQHandler+0x514>
      return;
 8004dbe:	bf00      	nop
  }
}
 8004dc0:	37e8      	adds	r7, #232	; 0xe8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop

08004dc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b090      	sub	sp, #64	; 0x40
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e18:	e050      	b.n	8004ebc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d04c      	beq.n	8004ebc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e28:	f7fc f858 	bl	8000edc <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d241      	bcs.n	8004ebc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	330c      	adds	r3, #12
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	330c      	adds	r3, #12
 8004e56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004e58:	637a      	str	r2, [r7, #52]	; 0x34
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3314      	adds	r3, #20
 8004e72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	3314      	adds	r3, #20
 8004e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e8c:	623a      	str	r2, [r7, #32]
 8004e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	69f9      	ldr	r1, [r7, #28]
 8004e92:	6a3a      	ldr	r2, [r7, #32]
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e5      	bne.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e00f      	b.n	8004edc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	68ba      	ldr	r2, [r7, #8]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	bf0c      	ite	eq
 8004ecc:	2301      	moveq	r3, #1
 8004ece:	2300      	movne	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d09f      	beq.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3740      	adds	r7, #64	; 0x40
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	88fa      	ldrh	r2, [r7, #6]
 8004efc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2222      	movs	r2, #34	; 0x22
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68da      	ldr	r2, [r3, #12]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f042 0220 	orr.w	r2, r2, #32
 8004f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b095      	sub	sp, #84	; 0x54
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f72:	e853 3f00 	ldrex	r3, [r3]
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f88:	643a      	str	r2, [r7, #64]	; 0x40
 8004f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f90:	e841 2300 	strex	r3, r2, [r1]
 8004f94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1e5      	bne.n	8004f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	e853 3f00 	ldrex	r3, [r3]
 8004faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3314      	adds	r3, #20
 8004fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc4:	e841 2300 	strex	r3, r2, [r1]
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1e5      	bne.n	8004f9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d119      	bne.n	800500c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f023 0310 	bic.w	r3, r3, #16
 8004fee:	647b      	str	r3, [r7, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ff8:	61ba      	str	r2, [r7, #24]
 8004ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6979      	ldr	r1, [r7, #20]
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	613b      	str	r3, [r7, #16]
   return(result);
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	631a      	str	r2, [r3, #48]	; 0x30
}
 800501a:	bf00      	nop
 800501c:	3754      	adds	r7, #84	; 0x54
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005032:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff fecb 	bl	8004ddc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005046:	bf00      	nop
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800504e:	b480      	push	{r7}
 8005050:	b085      	sub	sp, #20
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b21      	cmp	r3, #33	; 0x21
 8005060:	d13e      	bne.n	80050e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800506a:	d114      	bne.n	8005096 <UART_Transmit_IT+0x48>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d110      	bne.n	8005096 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a1b      	ldr	r3, [r3, #32]
 8005078:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005088:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	1c9a      	adds	r2, r3, #2
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]
 8005094:	e008      	b.n	80050a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	1c59      	adds	r1, r3, #1
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6211      	str	r1, [r2, #32]
 80050a0:	781a      	ldrb	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4619      	mov	r1, r3
 80050b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	e000      	b.n	80050e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050e0:	2302      	movs	r3, #2
  }
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005104:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff fe5a 	bl	8004dc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b08c      	sub	sp, #48	; 0x30
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b22      	cmp	r3, #34	; 0x22
 8005130:	f040 80ab 	bne.w	800528a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800513c:	d117      	bne.n	800516e <UART_Receive_IT+0x50>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d113      	bne.n	800516e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	b29b      	uxth	r3, r3
 8005158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515c:	b29a      	uxth	r2, r3
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	1c9a      	adds	r2, r3, #2
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
 800516c:	e026      	b.n	80051bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005172:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005174:	2300      	movs	r3, #0
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005180:	d007      	beq.n	8005192 <UART_Receive_IT+0x74>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <UART_Receive_IT+0x82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e008      	b.n	80051b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d15a      	bne.n	8005286 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0220 	bic.w	r2, r2, #32
 80051de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695a      	ldr	r2, [r3, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 0201 	bic.w	r2, r2, #1
 80051fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	2b01      	cmp	r3, #1
 800520e:	d135      	bne.n	800527c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	613b      	str	r3, [r7, #16]
   return(result);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f023 0310 	bic.w	r3, r3, #16
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	623a      	str	r2, [r7, #32]
 8005238:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	69f9      	ldr	r1, [r7, #28]
 800523c:	6a3a      	ldr	r2, [r7, #32]
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	61bb      	str	r3, [r7, #24]
   return(result);
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e5      	bne.n	8005216 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d10a      	bne.n	800526e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff fdbb 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
 800527a:	e002      	b.n	8005282 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f7fb fb69 	bl	8000954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	e002      	b.n	800528c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005286:	2300      	movs	r3, #0
 8005288:	e000      	b.n	800528c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800528a:	2302      	movs	r3, #2
  }
}
 800528c:	4618      	mov	r0, r3
 800528e:	3730      	adds	r7, #48	; 0x30
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005298:	b0c0      	sub	sp, #256	; 0x100
 800529a:	af00      	add	r7, sp, #0
 800529c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	68d9      	ldr	r1, [r3, #12]
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	ea40 0301 	orr.w	r3, r0, r1
 80052bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	431a      	orrs	r2, r3
 80052d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052ec:	f021 010c 	bic.w	r1, r1, #12
 80052f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052fa:	430b      	orrs	r3, r1
 80052fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800530a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530e:	6999      	ldr	r1, [r3, #24]
 8005310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	ea40 0301 	orr.w	r3, r0, r1
 800531a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b8f      	ldr	r3, [pc, #572]	; (8005560 <UART_SetConfig+0x2cc>)
 8005324:	429a      	cmp	r2, r3
 8005326:	d005      	beq.n	8005334 <UART_SetConfig+0xa0>
 8005328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4b8d      	ldr	r3, [pc, #564]	; (8005564 <UART_SetConfig+0x2d0>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d104      	bne.n	800533e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe ffce 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8005338:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800533c:	e003      	b.n	8005346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800533e:	f7fe ffb5 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8005342:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005350:	f040 810c 	bne.w	800556c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800535e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	1891      	adds	r1, r2, r2
 800536c:	65b9      	str	r1, [r7, #88]	; 0x58
 800536e:	415b      	adcs	r3, r3
 8005370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005376:	4621      	mov	r1, r4
 8005378:	eb12 0801 	adds.w	r8, r2, r1
 800537c:	4629      	mov	r1, r5
 800537e:	eb43 0901 	adc.w	r9, r3, r1
 8005382:	f04f 0200 	mov.w	r2, #0
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800538e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005396:	4690      	mov	r8, r2
 8005398:	4699      	mov	r9, r3
 800539a:	4623      	mov	r3, r4
 800539c:	eb18 0303 	adds.w	r3, r8, r3
 80053a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053a4:	462b      	mov	r3, r5
 80053a6:	eb49 0303 	adc.w	r3, r9, r3
 80053aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053c2:	460b      	mov	r3, r1
 80053c4:	18db      	adds	r3, r3, r3
 80053c6:	653b      	str	r3, [r7, #80]	; 0x50
 80053c8:	4613      	mov	r3, r2
 80053ca:	eb42 0303 	adc.w	r3, r2, r3
 80053ce:	657b      	str	r3, [r7, #84]	; 0x54
 80053d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053d8:	f7fa fef6 	bl	80001c8 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4b61      	ldr	r3, [pc, #388]	; (8005568 <UART_SetConfig+0x2d4>)
 80053e2:	fba3 2302 	umull	r2, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	011c      	lsls	r4, r3, #4
 80053ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053fc:	4642      	mov	r2, r8
 80053fe:	464b      	mov	r3, r9
 8005400:	1891      	adds	r1, r2, r2
 8005402:	64b9      	str	r1, [r7, #72]	; 0x48
 8005404:	415b      	adcs	r3, r3
 8005406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800540c:	4641      	mov	r1, r8
 800540e:	eb12 0a01 	adds.w	sl, r2, r1
 8005412:	4649      	mov	r1, r9
 8005414:	eb43 0b01 	adc.w	fp, r3, r1
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800542c:	4692      	mov	sl, r2
 800542e:	469b      	mov	fp, r3
 8005430:	4643      	mov	r3, r8
 8005432:	eb1a 0303 	adds.w	r3, sl, r3
 8005436:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800543a:	464b      	mov	r3, r9
 800543c:	eb4b 0303 	adc.w	r3, fp, r3
 8005440:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005450:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005458:	460b      	mov	r3, r1
 800545a:	18db      	adds	r3, r3, r3
 800545c:	643b      	str	r3, [r7, #64]	; 0x40
 800545e:	4613      	mov	r3, r2
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	647b      	str	r3, [r7, #68]	; 0x44
 8005466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800546a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800546e:	f7fa feab 	bl	80001c8 <__aeabi_uldivmod>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4611      	mov	r1, r2
 8005478:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <UART_SetConfig+0x2d4>)
 800547a:	fba3 2301 	umull	r2, r3, r3, r1
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	2264      	movs	r2, #100	; 0x64
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	1acb      	subs	r3, r1, r3
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800548e:	4b36      	ldr	r3, [pc, #216]	; (8005568 <UART_SetConfig+0x2d4>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800549c:	441c      	add	r4, r3
 800549e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054b0:	4642      	mov	r2, r8
 80054b2:	464b      	mov	r3, r9
 80054b4:	1891      	adds	r1, r2, r2
 80054b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054b8:	415b      	adcs	r3, r3
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054c0:	4641      	mov	r1, r8
 80054c2:	1851      	adds	r1, r2, r1
 80054c4:	6339      	str	r1, [r7, #48]	; 0x30
 80054c6:	4649      	mov	r1, r9
 80054c8:	414b      	adcs	r3, r1
 80054ca:	637b      	str	r3, [r7, #52]	; 0x34
 80054cc:	f04f 0200 	mov.w	r2, #0
 80054d0:	f04f 0300 	mov.w	r3, #0
 80054d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054d8:	4659      	mov	r1, fp
 80054da:	00cb      	lsls	r3, r1, #3
 80054dc:	4651      	mov	r1, sl
 80054de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054e2:	4651      	mov	r1, sl
 80054e4:	00ca      	lsls	r2, r1, #3
 80054e6:	4610      	mov	r0, r2
 80054e8:	4619      	mov	r1, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	4642      	mov	r2, r8
 80054ee:	189b      	adds	r3, r3, r2
 80054f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054f4:	464b      	mov	r3, r9
 80054f6:	460a      	mov	r2, r1
 80054f8:	eb42 0303 	adc.w	r3, r2, r3
 80054fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800550c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005514:	460b      	mov	r3, r1
 8005516:	18db      	adds	r3, r3, r3
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
 800551a:	4613      	mov	r3, r2
 800551c:	eb42 0303 	adc.w	r3, r2, r3
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800552a:	f7fa fe4d 	bl	80001c8 <__aeabi_uldivmod>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <UART_SetConfig+0x2d4>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	2164      	movs	r1, #100	; 0x64
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	3332      	adds	r3, #50	; 0x32
 8005546:	4a08      	ldr	r2, [pc, #32]	; (8005568 <UART_SetConfig+0x2d4>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 0207 	and.w	r2, r3, #7
 8005552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4422      	add	r2, r4
 800555a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800555c:	e105      	b.n	800576a <UART_SetConfig+0x4d6>
 800555e:	bf00      	nop
 8005560:	40011000 	.word	0x40011000
 8005564:	40011400 	.word	0x40011400
 8005568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800556c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005570:	2200      	movs	r2, #0
 8005572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005576:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800557a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	1891      	adds	r1, r2, r2
 8005584:	6239      	str	r1, [r7, #32]
 8005586:	415b      	adcs	r3, r3
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800558e:	4641      	mov	r1, r8
 8005590:	1854      	adds	r4, r2, r1
 8005592:	4649      	mov	r1, r9
 8005594:	eb43 0501 	adc.w	r5, r3, r1
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	00eb      	lsls	r3, r5, #3
 80055a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055a6:	00e2      	lsls	r2, r4, #3
 80055a8:	4614      	mov	r4, r2
 80055aa:	461d      	mov	r5, r3
 80055ac:	4643      	mov	r3, r8
 80055ae:	18e3      	adds	r3, r4, r3
 80055b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055b4:	464b      	mov	r3, r9
 80055b6:	eb45 0303 	adc.w	r3, r5, r3
 80055ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055da:	4629      	mov	r1, r5
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	4621      	mov	r1, r4
 80055e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e4:	4621      	mov	r1, r4
 80055e6:	008a      	lsls	r2, r1, #2
 80055e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055ec:	f7fa fdec 	bl	80001c8 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4b60      	ldr	r3, [pc, #384]	; (8005778 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2302 	umull	r2, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	011c      	lsls	r4, r3, #4
 80055fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005602:	2200      	movs	r2, #0
 8005604:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005608:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800560c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005610:	4642      	mov	r2, r8
 8005612:	464b      	mov	r3, r9
 8005614:	1891      	adds	r1, r2, r2
 8005616:	61b9      	str	r1, [r7, #24]
 8005618:	415b      	adcs	r3, r3
 800561a:	61fb      	str	r3, [r7, #28]
 800561c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005620:	4641      	mov	r1, r8
 8005622:	1851      	adds	r1, r2, r1
 8005624:	6139      	str	r1, [r7, #16]
 8005626:	4649      	mov	r1, r9
 8005628:	414b      	adcs	r3, r1
 800562a:	617b      	str	r3, [r7, #20]
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005638:	4659      	mov	r1, fp
 800563a:	00cb      	lsls	r3, r1, #3
 800563c:	4651      	mov	r1, sl
 800563e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005642:	4651      	mov	r1, sl
 8005644:	00ca      	lsls	r2, r1, #3
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	4603      	mov	r3, r0
 800564c:	4642      	mov	r2, r8
 800564e:	189b      	adds	r3, r3, r2
 8005650:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005654:	464b      	mov	r3, r9
 8005656:	460a      	mov	r2, r1
 8005658:	eb42 0303 	adc.w	r3, r2, r3
 800565c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	67bb      	str	r3, [r7, #120]	; 0x78
 800566a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005678:	4649      	mov	r1, r9
 800567a:	008b      	lsls	r3, r1, #2
 800567c:	4641      	mov	r1, r8
 800567e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005682:	4641      	mov	r1, r8
 8005684:	008a      	lsls	r2, r1, #2
 8005686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800568a:	f7fa fd9d 	bl	80001c8 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4b39      	ldr	r3, [pc, #228]	; (8005778 <UART_SetConfig+0x4e4>)
 8005694:	fba3 1302 	umull	r1, r3, r3, r2
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	2164      	movs	r1, #100	; 0x64
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	3332      	adds	r3, #50	; 0x32
 80056a6:	4a34      	ldr	r2, [pc, #208]	; (8005778 <UART_SetConfig+0x4e4>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056b2:	441c      	add	r4, r3
 80056b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b8:	2200      	movs	r2, #0
 80056ba:	673b      	str	r3, [r7, #112]	; 0x70
 80056bc:	677a      	str	r2, [r7, #116]	; 0x74
 80056be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056c2:	4642      	mov	r2, r8
 80056c4:	464b      	mov	r3, r9
 80056c6:	1891      	adds	r1, r2, r2
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	415b      	adcs	r3, r3
 80056cc:	60fb      	str	r3, [r7, #12]
 80056ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d2:	4641      	mov	r1, r8
 80056d4:	1851      	adds	r1, r2, r1
 80056d6:	6039      	str	r1, [r7, #0]
 80056d8:	4649      	mov	r1, r9
 80056da:	414b      	adcs	r3, r1
 80056dc:	607b      	str	r3, [r7, #4]
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056ea:	4659      	mov	r1, fp
 80056ec:	00cb      	lsls	r3, r1, #3
 80056ee:	4651      	mov	r1, sl
 80056f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f4:	4651      	mov	r1, sl
 80056f6:	00ca      	lsls	r2, r1, #3
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	4603      	mov	r3, r0
 80056fe:	4642      	mov	r2, r8
 8005700:	189b      	adds	r3, r3, r2
 8005702:	66bb      	str	r3, [r7, #104]	; 0x68
 8005704:	464b      	mov	r3, r9
 8005706:	460a      	mov	r2, r1
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800570e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	663b      	str	r3, [r7, #96]	; 0x60
 8005718:	667a      	str	r2, [r7, #100]	; 0x64
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005726:	4649      	mov	r1, r9
 8005728:	008b      	lsls	r3, r1, #2
 800572a:	4641      	mov	r1, r8
 800572c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005730:	4641      	mov	r1, r8
 8005732:	008a      	lsls	r2, r1, #2
 8005734:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005738:	f7fa fd46 	bl	80001c8 <__aeabi_uldivmod>
 800573c:	4602      	mov	r2, r0
 800573e:	460b      	mov	r3, r1
 8005740:	4b0d      	ldr	r3, [pc, #52]	; (8005778 <UART_SetConfig+0x4e4>)
 8005742:	fba3 1302 	umull	r1, r3, r3, r2
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2164      	movs	r1, #100	; 0x64
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	3332      	adds	r3, #50	; 0x32
 8005754:	4a08      	ldr	r2, [pc, #32]	; (8005778 <UART_SetConfig+0x4e4>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4422      	add	r2, r4
 8005768:	609a      	str	r2, [r3, #8]
}
 800576a:	bf00      	nop
 800576c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005770:	46bd      	mov	sp, r7
 8005772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005776:	bf00      	nop
 8005778:	51eb851f 	.word	0x51eb851f

0800577c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800577c:	b084      	sub	sp, #16
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	f107 001c 	add.w	r0, r7, #28
 800578a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2b01      	cmp	r3, #1
 8005792:	d122      	bne.n	80057da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d105      	bne.n	80057ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9c0 	bl	8005b54 <USB_CoreReset>
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e01a      	b.n	8005810 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9b4 	bl	8005b54 <USB_CoreReset>
 80057ec:	4603      	mov	r3, r0
 80057ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d106      	bne.n	8005804 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	639a      	str	r2, [r3, #56]	; 0x38
 8005802:	e005      	b.n	8005810 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10b      	bne.n	800582e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f043 0206 	orr.w	r2, r3, #6
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800583a:	b004      	add	sp, #16
 800583c:	4770      	bx	lr

0800583e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f043 0201 	orr.w	r2, r3, #1
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f023 0201 	bic.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	460b      	mov	r3, r1
 800588c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d115      	bne.n	80058d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7fb fb1f 	bl	8000ef4 <HAL_Delay>
      ms++;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f93a 	bl	8005b36 <USB_GetMode>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d01e      	beq.n	8005906 <USB_SetCurrentMode+0x84>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b31      	cmp	r3, #49	; 0x31
 80058cc:	d9f0      	bls.n	80058b0 <USB_SetCurrentMode+0x2e>
 80058ce:	e01a      	b.n	8005906 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d0:	78fb      	ldrb	r3, [r7, #3]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d115      	bne.n	8005902 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058e2:	2001      	movs	r0, #1
 80058e4:	f7fb fb06 	bl	8000ef4 <HAL_Delay>
      ms++;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3301      	adds	r3, #1
 80058ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f921 	bl	8005b36 <USB_GetMode>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <USB_SetCurrentMode+0x84>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b31      	cmp	r3, #49	; 0x31
 80058fe:	d9f0      	bls.n	80058e2 <USB_SetCurrentMode+0x60>
 8005900:	e001      	b.n	8005906 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e005      	b.n	8005912 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b32      	cmp	r3, #50	; 0x32
 800590a:	d101      	bne.n	8005910 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3301      	adds	r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <USB_FlushTxFifo+0x64>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d901      	bls.n	800593c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	e01b      	b.n	8005974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	daf2      	bge.n	800592a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	019b      	lsls	r3, r3, #6
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4a08      	ldr	r2, [pc, #32]	; (8005980 <USB_FlushTxFifo+0x64>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e006      	b.n	8005974 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b20      	cmp	r3, #32
 8005970:	d0f0      	beq.n	8005954 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	00030d40 	.word	0x00030d40

08005984 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	3301      	adds	r3, #1
 8005994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a11      	ldr	r2, [pc, #68]	; (80059e0 <USB_FlushRxFifo+0x5c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e018      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	daf2      	bge.n	8005990 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2210      	movs	r2, #16
 80059b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4a08      	ldr	r2, [pc, #32]	; (80059e0 <USB_FlushRxFifo+0x5c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d901      	bls.n	80059c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e006      	b.n	80059d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d0f0      	beq.n	80059b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	00030d40 	.word	0x00030d40

080059e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	460b      	mov	r3, r1
 80059f4:	71fb      	strb	r3, [r7, #7]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d123      	bne.n	8005a52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005a0a:	88bb      	ldrh	r3, [r7, #4]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005a12:	2300      	movs	r3, #0
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e018      	b.n	8005a4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005a18:	79fb      	ldrb	r3, [r7, #7]
 8005a1a:	031a      	lsls	r2, r3, #12
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a24:	461a      	mov	r2, r3
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3301      	adds	r3, #1
 8005a36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3301      	adds	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	3301      	adds	r3, #1
 8005a48:	61bb      	str	r3, [r7, #24]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d3e2      	bcc.n	8005a18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3724      	adds	r7, #36	; 0x24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b08b      	sub	sp, #44	; 0x2c
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	089b      	lsrs	r3, r3, #2
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a86:	2300      	movs	r3, #0
 8005a88:	623b      	str	r3, [r7, #32]
 8005a8a:	e014      	b.n	8005ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	3301      	adds	r3, #1
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	6a3a      	ldr	r2, [r7, #32]
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3e6      	bcc.n	8005a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005abe:	8bfb      	ldrh	r3, [r7, #30]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01e      	beq.n	8005b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ace:	461a      	mov	r2, r3
 8005ad0:	f107 0310 	add.w	r3, r7, #16
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ad8:	693a      	ldr	r2, [r7, #16]
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	3301      	adds	r3, #1
 8005aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	3301      	adds	r3, #1
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005af6:	8bfb      	ldrh	r3, [r7, #30]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005afc:	8bfb      	ldrh	r3, [r7, #30]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ea      	bne.n	8005ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	372c      	adds	r7, #44	; 0x2c
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4013      	ands	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b28:	68fb      	ldr	r3, [r7, #12]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3714      	adds	r7, #20
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b083      	sub	sp, #12
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0301 	and.w	r3, r3, #1
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	3301      	adds	r3, #1
 8005b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <USB_CoreReset+0x64>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d901      	bls.n	8005b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e01b      	b.n	8005baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	daf2      	bge.n	8005b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f043 0201 	orr.w	r2, r3, #1
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <USB_CoreReset+0x64>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d901      	bls.n	8005b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e006      	b.n	8005baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d0f0      	beq.n	8005b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	00030d40 	.word	0x00030d40

08005bbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2300      	movs	r3, #0
 8005be0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d018      	beq.n	8005c44 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10a      	bne.n	8005c2e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c26:	f043 0304 	orr.w	r3, r3, #4
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e014      	b.n	8005c58 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3c:	f023 0304 	bic.w	r3, r3, #4
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e009      	b.n	8005c58 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c52:	f023 0304 	bic.w	r3, r3, #4
 8005c56:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c58:	2110      	movs	r1, #16
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7ff fe5e 	bl	800591c <USB_FlushTxFifo>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff fe8a 	bl	8005984 <USB_FlushRxFifo>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e015      	b.n	8005cac <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d3e5      	bcc.n	8005c80 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cd4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a13      	ldr	r2, [pc, #76]	; (8005d28 <USB_HostInit+0x16c>)
 8005cda:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <USB_HostInit+0x170>)
 8005ce0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005ce4:	e009      	b.n	8005cfa <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a10      	ldr	r2, [pc, #64]	; (8005d30 <USB_HostInit+0x174>)
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a0f      	ldr	r2, [pc, #60]	; (8005d34 <USB_HostInit+0x178>)
 8005cf6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f043 0210 	orr.w	r2, r3, #16
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699a      	ldr	r2, [r3, #24]
 8005d10:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <USB_HostInit+0x17c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d24:	b004      	add	sp, #16
 8005d26:	4770      	bx	lr
 8005d28:	01000200 	.word	0x01000200
 8005d2c:	00e00300 	.word	0x00e00300
 8005d30:	00600080 	.word	0x00600080
 8005d34:	004000e0 	.word	0x004000e0
 8005d38:	a3200008 	.word	0xa3200008

08005d3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d5a:	f023 0303 	bic.w	r3, r3, #3
 8005d5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	f003 0303 	and.w	r3, r3, #3
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d74:	4313      	orrs	r3, r2
 8005d76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d107      	bne.n	8005d8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d84:	461a      	mov	r2, r3
 8005d86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005d8a:	6053      	str	r3, [r2, #4]
 8005d8c:	e009      	b.n	8005da2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d106      	bne.n	8005da2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8005da0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3714      	adds	r7, #20
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005dd0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005de0:	2064      	movs	r0, #100	; 0x64
 8005de2:	f7fb f887 	bl	8000ef4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005df4:	200a      	movs	r0, #10
 8005df6:	f7fb f87d 	bl	8000ef4 <HAL_Delay>

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005e28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d109      	bne.n	8005e48 <USB_DriveVbus+0x44>
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d106      	bne.n	8005e48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d109      	bne.n	8005e68 <USB_DriveVbus+0x64>
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d106      	bne.n	8005e68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b085      	sub	sp, #20
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	0c5b      	lsrs	r3, r3, #17
 8005e94:	f003 0303 	and.w	r3, r3, #3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	b29b      	uxth	r3, r3
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	70fb      	strb	r3, [r7, #3]
 8005eda:	460b      	mov	r3, r1
 8005edc:	70bb      	strb	r3, [r7, #2]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005eea:	78fb      	ldrb	r3, [r7, #3]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8005efc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005efe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d87e      	bhi.n	8006004 <USB_HC_Init+0x13c>
 8005f06:	a201      	add	r2, pc, #4	; (adr r2, 8005f0c <USB_HC_Init+0x44>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f1d 	.word	0x08005f1d
 8005f10:	08005fc7 	.word	0x08005fc7
 8005f14:	08005f1d 	.word	0x08005f1d
 8005f18:	08005f89 	.word	0x08005f89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8005f2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	da10      	bge.n	8005f5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f56:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005f58:	e057      	b.n	800600a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d051      	beq.n	800600a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005f66:	78fb      	ldrb	r3, [r7, #3]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005f84:	60d3      	str	r3, [r2, #12]
      break;
 8005f86:	e040      	b.n	800600a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005f88:	78fb      	ldrb	r3, [r7, #3]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f94:	461a      	mov	r2, r3
 8005f96:	f240 639d 	movw	r3, #1693	; 0x69d
 8005f9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005f9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	da34      	bge.n	800600e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	78fa      	ldrb	r2, [r7, #3]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fc2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005fc4:	e023      	b.n	800600e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f240 2325 	movw	r3, #549	; 0x225
 8005fd8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005fda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	da17      	bge.n	8006012 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	78fa      	ldrb	r2, [r7, #3]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ffc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006000:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006002:	e006      	b.n	8006012 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	77fb      	strb	r3, [r7, #31]
      break;
 8006008:	e004      	b.n	8006014 <USB_HC_Init+0x14c>
      break;
 800600a:	bf00      	nop
 800600c:	e002      	b.n	8006014 <USB_HC_Init+0x14c>
      break;
 800600e:	bf00      	nop
 8006010:	e000      	b.n	8006014 <USB_HC_Init+0x14c>
      break;
 8006012:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	78fa      	ldrb	r2, [r7, #3]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800602e:	f043 0302 	orr.w	r3, r3, #2
 8006032:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800603a:	699a      	ldr	r2, [r3, #24]
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	f003 030f 	and.w	r3, r3, #15
 8006042:	2101      	movs	r1, #1
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	6939      	ldr	r1, [r7, #16]
 800604a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800604e:	4313      	orrs	r3, r2
 8006050:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800605e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006062:	2b00      	cmp	r3, #0
 8006064:	da03      	bge.n	800606e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	e001      	b.n	8006072 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff feff 	bl	8005e76 <USB_GetHostSpeed>
 8006078:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800607a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800607e:	2b02      	cmp	r3, #2
 8006080:	d106      	bne.n	8006090 <USB_HC_Init+0x1c8>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d003      	beq.n	8006090 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e001      	b.n	8006094 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006094:	787b      	ldrb	r3, [r7, #1]
 8006096:	059b      	lsls	r3, r3, #22
 8006098:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800609c:	78bb      	ldrb	r3, [r7, #2]
 800609e:	02db      	lsls	r3, r3, #11
 80060a0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060a4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060aa:	049b      	lsls	r3, r3, #18
 80060ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80060b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060b2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80060b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80060b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	0159      	lsls	r1, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	440b      	add	r3, r1
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80060d0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80060d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d003      	beq.n	80060e2 <USB_HC_Init+0x21a>
 80060da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d10f      	bne.n	8006102 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	78fa      	ldrb	r2, [r7, #3]
 80060f2:	0151      	lsls	r1, r2, #5
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	440a      	add	r2, r1
 80060f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006100:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006102:	7ffb      	ldrb	r3, [r7, #31]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3720      	adds	r7, #32
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08c      	sub	sp, #48	; 0x30
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006124:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006128:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d02d      	beq.n	8006192 <USB_HC_StartXfer+0x86>
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	791b      	ldrb	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d129      	bne.n	8006192 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d117      	bne.n	8006174 <USB_HC_StartXfer+0x68>
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	79db      	ldrb	r3, [r3, #7]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <USB_HC_StartXfer+0x48>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	79db      	ldrb	r3, [r3, #7]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d10f      	bne.n	8006174 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	440a      	add	r2, r1
 800616a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006174:	79fb      	ldrb	r3, [r7, #7]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <USB_HC_StartXfer+0x86>
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	795b      	ldrb	r3, [r3, #5]
 800617e:	2b01      	cmp	r3, #1
 8006180:	d107      	bne.n	8006192 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	785b      	ldrb	r3, [r3, #1]
 8006186:	4619      	mov	r1, r3
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 fa0f 	bl	80065ac <USB_DoPing>
      return HAL_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	e0f8      	b.n	8006384 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d018      	beq.n	80061cc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	8912      	ldrh	r2, [r2, #8]
 80061a2:	4413      	add	r3, r2
 80061a4:	3b01      	subs	r3, #1
 80061a6:	68ba      	ldr	r2, [r7, #8]
 80061a8:	8912      	ldrh	r2, [r2, #8]
 80061aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ae:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80061b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061b2:	8b7b      	ldrh	r3, [r7, #26]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d90b      	bls.n	80061d0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80061b8:	8b7b      	ldrh	r3, [r7, #26]
 80061ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	8912      	ldrh	r2, [r2, #8]
 80061c2:	fb03 f202 	mul.w	r2, r3, r2
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	e001      	b.n	80061d0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80061cc:	2301      	movs	r3, #1
 80061ce:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	78db      	ldrb	r3, [r3, #3]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80061d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	8912      	ldrh	r2, [r2, #8]
 80061de:	fb03 f202 	mul.w	r2, r3, r2
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	611a      	str	r2, [r3, #16]
 80061e6:	e003      	b.n	80061f0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	695a      	ldr	r2, [r3, #20]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80061f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061fa:	04d9      	lsls	r1, r3, #19
 80061fc:	4b63      	ldr	r3, [pc, #396]	; (800638c <USB_HC_StartXfer+0x280>)
 80061fe:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006200:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	7a9b      	ldrb	r3, [r3, #10]
 8006206:	075b      	lsls	r3, r3, #29
 8006208:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800620c:	69f9      	ldr	r1, [r7, #28]
 800620e:	0148      	lsls	r0, r1, #5
 8006210:	6a39      	ldr	r1, [r7, #32]
 8006212:	4401      	add	r1, r0
 8006214:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006218:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800621a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800621c:	79fb      	ldrb	r3, [r7, #7]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	68d9      	ldr	r1, [r3, #12]
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	015a      	lsls	r2, r3, #5
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	4413      	add	r3, r2
 800622e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006232:	460a      	mov	r2, r1
 8006234:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	6a3a      	ldr	r2, [r7, #32]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006268:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800626c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	7e7b      	ldrb	r3, [r7, #25]
 800627e:	075b      	lsls	r3, r3, #29
 8006280:	69f9      	ldr	r1, [r7, #28]
 8006282:	0148      	lsls	r0, r1, #5
 8006284:	6a39      	ldr	r1, [r7, #32]
 8006286:	4401      	add	r1, r0
 8006288:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800628c:	4313      	orrs	r3, r2
 800628e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	4413      	add	r3, r2
 8006298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062a6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	78db      	ldrb	r3, [r3, #3]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d004      	beq.n	80062ba <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	e003      	b.n	80062c2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062c0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062c8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d6:	461a      	mov	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80062dc:	79fb      	ldrb	r3, [r7, #7]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e04e      	b.n	8006384 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d149      	bne.n	8006382 <USB_HC_StartXfer+0x276>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d045      	beq.n	8006382 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	79db      	ldrb	r3, [r3, #7]
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d830      	bhi.n	8006360 <USB_HC_StartXfer+0x254>
 80062fe:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <USB_HC_StartXfer+0x1f8>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	08006315 	.word	0x08006315
 8006308:	08006339 	.word	0x08006339
 800630c:	08006315 	.word	0x08006315
 8006310:	08006339 	.word	0x08006339
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	3303      	adds	r3, #3
 800631a:	089b      	lsrs	r3, r3, #2
 800631c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800631e:	8afa      	ldrh	r2, [r7, #22]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	b29b      	uxth	r3, r3
 8006326:	429a      	cmp	r2, r3
 8006328:	d91c      	bls.n	8006364 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	f043 0220 	orr.w	r2, r3, #32
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	619a      	str	r2, [r3, #24]
        }
        break;
 8006336:	e015      	b.n	8006364 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	3303      	adds	r3, #3
 800633e:	089b      	lsrs	r3, r3, #2
 8006340:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006342:	8afa      	ldrh	r2, [r7, #22]
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	b29b      	uxth	r3, r3
 800634e:	429a      	cmp	r2, r3
 8006350:	d90a      	bls.n	8006368 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	619a      	str	r2, [r3, #24]
        }
        break;
 800635e:	e003      	b.n	8006368 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006360:	bf00      	nop
 8006362:	e002      	b.n	800636a <USB_HC_StartXfer+0x25e>
        break;
 8006364:	bf00      	nop
 8006366:	e000      	b.n	800636a <USB_HC_StartXfer+0x25e>
        break;
 8006368:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	68d9      	ldr	r1, [r3, #12]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	785a      	ldrb	r2, [r3, #1]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	b29b      	uxth	r3, r3
 8006378:	2000      	movs	r0, #0
 800637a:	9000      	str	r0, [sp, #0]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fb31 	bl	80059e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	1ff80000 	.word	0x1ff80000

08006390 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	b29b      	uxth	r3, r3
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b089      	sub	sp, #36	; 0x24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80063c2:	78fb      	ldrb	r3, [r7, #3]
 80063c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	015a      	lsls	r2, r3, #5
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	4413      	add	r3, r2
 80063d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	0c9b      	lsrs	r3, r3, #18
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	0fdb      	lsrs	r3, r3, #31
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d104      	bne.n	800640c <USB_HC_Halt+0x5a>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006408:	2300      	movs	r3, #0
 800640a:	e0c8      	b.n	800659e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <USB_HC_Halt+0x66>
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d163      	bne.n	80064e0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	440a      	add	r2, r1
 800642e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006432:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006436:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f003 0320 	and.w	r3, r3, #32
 8006440:	2b00      	cmp	r3, #0
 8006442:	f040 80ab 	bne.w	800659c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d133      	bne.n	80064ba <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800646c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006470:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	4413      	add	r3, r2
 800647a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	69fa      	ldr	r2, [r7, #28]
 8006486:	440a      	add	r2, r1
 8006488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006490:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3301      	adds	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800649e:	d81d      	bhi.n	80064dc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064b6:	d0ec      	beq.n	8006492 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064b8:	e070      	b.n	800659c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064d8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064da:	e05f      	b.n	800659c <USB_HC_Halt+0x1ea>
            break;
 80064dc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80064de:	e05d      	b.n	800659c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064fe:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d133      	bne.n	8006578 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	015a      	lsls	r2, r3, #5
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	4413      	add	r3, r2
 8006518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	440a      	add	r2, r1
 8006526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800652a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800652e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	0151      	lsls	r1, r2, #5
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	440a      	add	r2, r1
 8006546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800654a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800654e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800655c:	d81d      	bhi.n	800659a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006570:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006574:	d0ec      	beq.n	8006550 <USB_HC_Halt+0x19e>
 8006576:	e011      	b.n	800659c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	440a      	add	r2, r1
 800658e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006592:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e000      	b.n	800659c <USB_HC_Halt+0x1ea>
          break;
 800659a:	bf00      	nop
    }
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3724      	adds	r7, #36	; 0x24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80065c0:	2301      	movs	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	04da      	lsls	r2, r3, #19
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <USB_DoPing+0x74>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065dc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065f4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065fc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660a:	461a      	mov	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
 800661e:	bf00      	nop
 8006620:	1ff80000 	.word	0x1ff80000

08006624 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff f911 	bl	8005860 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800663e:	2110      	movs	r1, #16
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff f96b 	bl	800591c <USB_FlushTxFifo>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff f997 	bl	8005984 <USB_FlushRxFifo>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006660:	2300      	movs	r3, #0
 8006662:	61bb      	str	r3, [r7, #24]
 8006664:	e01f      	b.n	80066a6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800667c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800668c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669a:	461a      	mov	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	2b0f      	cmp	r3, #15
 80066aa:	d9dc      	bls.n	8006666 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80066ac:	2300      	movs	r3, #0
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	e034      	b.n	800671c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066e6:	461a      	mov	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066f8:	d80c      	bhi.n	8006714 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	4413      	add	r3, r2
 8006702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800670c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006710:	d0ec      	beq.n	80066ec <USB_StopHost+0xc8>
 8006712:	e000      	b.n	8006716 <USB_StopHost+0xf2>
        break;
 8006714:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	3301      	adds	r3, #1
 800671a:	61bb      	str	r3, [r7, #24]
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b0f      	cmp	r3, #15
 8006720:	d9c7      	bls.n	80066b2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006728:	461a      	mov	r2, r3
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f04f 32ff 	mov.w	r2, #4294967295
 8006736:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff f880 	bl	800583e <USB_EnableGlobalInt>

  return ret;
 800673e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006740:	4618      	mov	r0, r3
 8006742:	3720      	adds	r7, #32
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b089      	sub	sp, #36	; 0x24
 800674c:	af04      	add	r7, sp, #16
 800674e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006750:	2301      	movs	r3, #1
 8006752:	2202      	movs	r2, #2
 8006754:	2102      	movs	r1, #2
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc66 	bl	8007028 <USBH_FindInterface>
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006760:	7bfb      	ldrb	r3, [r7, #15]
 8006762:	2bff      	cmp	r3, #255	; 0xff
 8006764:	d002      	beq.n	800676c <USBH_CDC_InterfaceInit+0x24>
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d901      	bls.n	8006770 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800676c:	2302      	movs	r3, #2
 800676e:	e13d      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fc3b 	bl	8006ff0 <USBH_SelectInterface>
 800677a:	4603      	mov	r3, r0
 800677c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800677e:	7bbb      	ldrb	r3, [r7, #14]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006784:	2302      	movs	r3, #2
 8006786:	e131      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800678e:	2050      	movs	r0, #80	; 0x50
 8006790:	f002 fafa 	bl	8008d88 <malloc>
 8006794:	4603      	mov	r3, r0
 8006796:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80067a8:	2302      	movs	r3, #2
 80067aa:	e11f      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80067ac:	2250      	movs	r2, #80	; 0x50
 80067ae:	2100      	movs	r1, #0
 80067b0:	68b8      	ldr	r0, [r7, #8]
 80067b2:	f002 faf9 	bl	8008da8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	211a      	movs	r1, #26
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	4413      	add	r3, r2
 80067c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	b25b      	sxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da15      	bge.n	80067fa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	211a      	movs	r1, #26
 80067d4:	fb01 f303 	mul.w	r3, r1, r3
 80067d8:	4413      	add	r3, r2
 80067da:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80067de:	781a      	ldrb	r2, [r3, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	211a      	movs	r1, #26
 80067ea:	fb01 f303 	mul.w	r3, r1, r3
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 ff2c 	bl	800865e <USBH_AllocPipe>
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	7819      	ldrb	r1, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	7858      	ldrb	r0, [r3, #1]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	8952      	ldrh	r2, [r2, #10]
 8006826:	9202      	str	r2, [sp, #8]
 8006828:	2203      	movs	r2, #3
 800682a:	9201      	str	r2, [sp, #4]
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	4623      	mov	r3, r4
 8006830:	4602      	mov	r2, r0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 fee4 	bl	8008600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2200      	movs	r2, #0
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f002 f9f3 	bl	8008c2c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006846:	2300      	movs	r3, #0
 8006848:	2200      	movs	r2, #0
 800684a:	210a      	movs	r1, #10
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fbeb 	bl	8007028 <USBH_FindInterface>
 8006852:	4603      	mov	r3, r0
 8006854:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006856:	7bfb      	ldrb	r3, [r7, #15]
 8006858:	2bff      	cmp	r3, #255	; 0xff
 800685a:	d002      	beq.n	8006862 <USBH_CDC_InterfaceInit+0x11a>
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	2b01      	cmp	r3, #1
 8006860:	d901      	bls.n	8006866 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006862:	2302      	movs	r3, #2
 8006864:	e0c2      	b.n	80069ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	211a      	movs	r1, #26
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	4413      	add	r3, r2
 8006872:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	b25b      	sxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	da16      	bge.n	80068ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	211a      	movs	r1, #26
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	211a      	movs	r1, #26
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	4413      	add	r3, r2
 80068a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068a4:	881a      	ldrh	r2, [r3, #0]
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	835a      	strh	r2, [r3, #26]
 80068aa:	e015      	b.n	80068d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068ac:	7bfb      	ldrb	r3, [r7, #15]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	211a      	movs	r1, #26
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	4413      	add	r3, r2
 80068b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068bc:	781a      	ldrb	r2, [r3, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	211a      	movs	r1, #26
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068d2:	881a      	ldrh	r2, [r3, #0]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80068d8:	7bfb      	ldrb	r3, [r7, #15]
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	211a      	movs	r1, #26
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	4413      	add	r3, r2
 80068e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b25b      	sxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	da16      	bge.n	800691e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	211a      	movs	r1, #26
 80068f6:	fb01 f303 	mul.w	r3, r1, r3
 80068fa:	4413      	add	r3, r2
 80068fc:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006900:	781a      	ldrb	r2, [r3, #0]
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	211a      	movs	r1, #26
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	4413      	add	r3, r2
 8006912:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006916:	881a      	ldrh	r2, [r3, #0]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	835a      	strh	r2, [r3, #26]
 800691c:	e015      	b.n	800694a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	211a      	movs	r1, #26
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	4413      	add	r3, r2
 800692a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800692e:	781a      	ldrb	r2, [r3, #0]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	211a      	movs	r1, #26
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	4413      	add	r3, r2
 8006940:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006944:	881a      	ldrh	r2, [r3, #0]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	7b9b      	ldrb	r3, [r3, #14]
 800694e:	4619      	mov	r1, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f001 fe84 	bl	800865e <USBH_AllocPipe>
 8006956:	4603      	mov	r3, r0
 8006958:	461a      	mov	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	7bdb      	ldrb	r3, [r3, #15]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fe7a 	bl	800865e <USBH_AllocPipe>
 800696a:	4603      	mov	r3, r0
 800696c:	461a      	mov	r2, r3
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	7b59      	ldrb	r1, [r3, #13]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	7b98      	ldrb	r0, [r3, #14]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	8b12      	ldrh	r2, [r2, #24]
 800698a:	9202      	str	r2, [sp, #8]
 800698c:	2202      	movs	r2, #2
 800698e:	9201      	str	r2, [sp, #4]
 8006990:	9300      	str	r3, [sp, #0]
 8006992:	4623      	mov	r3, r4
 8006994:	4602      	mov	r2, r0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fe32 	bl	8008600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	7b19      	ldrb	r1, [r3, #12]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	7bd8      	ldrb	r0, [r3, #15]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	8b52      	ldrh	r2, [r2, #26]
 80069b4:	9202      	str	r2, [sp, #8]
 80069b6:	2202      	movs	r2, #2
 80069b8:	9201      	str	r2, [sp, #4]
 80069ba:	9300      	str	r3, [sp, #0]
 80069bc:	4623      	mov	r3, r4
 80069be:	4602      	mov	r2, r0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f001 fe1d 	bl	8008600 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	7b5b      	ldrb	r3, [r3, #13]
 80069d2:	2200      	movs	r2, #0
 80069d4:	4619      	mov	r1, r3
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f002 f928 	bl	8008c2c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	7b1b      	ldrb	r3, [r3, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f921 	bl	8008c2c <USBH_LL_SetToggle>

  return USBH_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd90      	pop	{r4, r7, pc}

080069f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00e      	beq.n	8006a2c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fe12 	bl	800863e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	4619      	mov	r1, r3
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 fe3d 	bl	80086a0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	7b1b      	ldrb	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00e      	beq.n	8006a52 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	7b1b      	ldrb	r3, [r3, #12]
 8006a38:	4619      	mov	r1, r3
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fdff 	bl	800863e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	7b1b      	ldrb	r3, [r3, #12]
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fe2a 	bl	80086a0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	7b5b      	ldrb	r3, [r3, #13]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00e      	beq.n	8006a78 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7b5b      	ldrb	r3, [r3, #13]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fdec 	bl	800863e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	7b5b      	ldrb	r3, [r3, #13]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f001 fe17 	bl	80086a0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00b      	beq.n	8006a9c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a8a:	69db      	ldr	r3, [r3, #28]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f002 f983 	bl	8008d98 <free>
    phost->pActiveClass->pData = 0U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	3340      	adds	r3, #64	; 0x40
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f8b1 	bl	8006c26 <GetLineCoding>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d105      	bne.n	8006ada <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ad4:	2102      	movs	r1, #2
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006ada:	7afb      	ldrb	r3, [r7, #11]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	d877      	bhi.n	8006bf8 <USBH_CDC_Process+0x114>
 8006b08:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <USBH_CDC_Process+0x2c>)
 8006b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0e:	bf00      	nop
 8006b10:	08006b25 	.word	0x08006b25
 8006b14:	08006b2b 	.word	0x08006b2b
 8006b18:	08006b5b 	.word	0x08006b5b
 8006b1c:	08006bcf 	.word	0x08006bcf
 8006b20:	08006bdd 	.word	0x08006bdd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006b24:	2300      	movs	r3, #0
 8006b26:	73fb      	strb	r3, [r7, #15]
      break;
 8006b28:	e06d      	b.n	8006c06 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f897 	bl	8006c64 <SetLineCoding>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006b48:	e058      	b.n	8006bfc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d055      	beq.n	8006bfc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2204      	movs	r2, #4
 8006b54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006b58:	e050      	b.n	8006bfc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3340      	adds	r3, #64	; 0x40
 8006b5e:	4619      	mov	r1, r3
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f860 	bl	8006c26 <GetLineCoding>
 8006b66:	4603      	mov	r3, r0
 8006b68:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006b6a:	7bbb      	ldrb	r3, [r7, #14]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d126      	bne.n	8006bbe <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d13b      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b92:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d133      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d12b      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bb0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d124      	bne.n	8006c00 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f958 	bl	8006e6c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006bbc:	e020      	b.n	8006c00 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d01d      	beq.n	8006c00 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006bcc:	e018      	b.n	8006c00 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f867 	bl	8006ca2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f8da 	bl	8006d8e <CDC_ProcessReception>
      break;
 8006bda:	e014      	b.n	8006c06 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006bdc:	2100      	movs	r1, #0
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 ffef 	bl	8007bc2 <USBH_ClrFeature>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10a      	bne.n	8006c04 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006bf6:	e005      	b.n	8006c04 <USBH_CDC_Process+0x120>

    default:
      break;
 8006bf8:	bf00      	nop
 8006bfa:	e004      	b.n	8006c06 <USBH_CDC_Process+0x122>
      break;
 8006bfc:	bf00      	nop
 8006bfe:	e002      	b.n	8006c06 <USBH_CDC_Process+0x122>
      break;
 8006c00:	bf00      	nop
 8006c02:	e000      	b.n	8006c06 <USBH_CDC_Process+0x122>
      break;
 8006c04:	bf00      	nop

  }

  return status;
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	22a1      	movs	r2, #161	; 0xa1
 8006c34:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2221      	movs	r2, #33	; 0x21
 8006c3a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2207      	movs	r2, #7
 8006c4c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2207      	movs	r2, #7
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fa81 	bl	800815c <USBH_CtlReq>
 8006c5a:	4603      	mov	r3, r0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2221      	movs	r2, #33	; 0x21
 8006c72:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2220      	movs	r2, #32
 8006c78:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2207      	movs	r2, #7
 8006c8a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	2207      	movs	r2, #7
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f001 fa62 	bl	800815c <USBH_CtlReq>
 8006c98:	4603      	mov	r3, r0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af02      	add	r7, sp, #8
 8006ca8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d002      	beq.n	8006cc8 <CDC_ProcessTransmission+0x26>
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d023      	beq.n	8006d0e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006cc6:	e05e      	b.n	8006d86 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	8b12      	ldrh	r2, [r2, #24]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d90b      	bls.n	8006cec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	69d9      	ldr	r1, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8b1a      	ldrh	r2, [r3, #24]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	7b5b      	ldrb	r3, [r3, #13]
 8006ce0:	2001      	movs	r0, #1
 8006ce2:	9000      	str	r0, [sp, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fc48 	bl	800857a <USBH_BulkSendData>
 8006cea:	e00b      	b.n	8006d04 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	7b5b      	ldrb	r3, [r3, #13]
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	9000      	str	r0, [sp, #0]
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f001 fc3b 	bl	800857a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d0c:	e03b      	b.n	8006d86 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	7b5b      	ldrb	r3, [r3, #13]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 ff5f 	bl	8008bd8 <USBH_LL_GetURBState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006d1e:	7afb      	ldrb	r3, [r7, #11]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d128      	bne.n	8006d76 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	8b12      	ldrh	r2, [r2, #24]
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d90e      	bls.n	8006d4e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	8b12      	ldrh	r2, [r2, #24]
 8006d38:	1a9a      	subs	r2, r3, r2
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	8b12      	ldrh	r2, [r2, #24]
 8006d46:	441a      	add	r2, r3
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	61da      	str	r2, [r3, #28]
 8006d4c:	e002      	b.n	8006d54 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d004      	beq.n	8006d66 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d64:	e00e      	b.n	8006d84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f868 	bl	8006e44 <USBH_CDC_TransmitCallback>
      break;
 8006d74:	e006      	b.n	8006d84 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006d76:	7afb      	ldrb	r3, [r7, #11]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d103      	bne.n	8006d84 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006d84:	bf00      	nop
  }
}
 8006d86:	bf00      	nop
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006da0:	2300      	movs	r3, #0
 8006da2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d002      	beq.n	8006db4 <CDC_ProcessReception+0x26>
 8006dae:	2b04      	cmp	r3, #4
 8006db0:	d00e      	beq.n	8006dd0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006db2:	e043      	b.n	8006e3c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	6a19      	ldr	r1, [r3, #32]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	8b5a      	ldrh	r2, [r3, #26]
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	7b1b      	ldrb	r3, [r3, #12]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 fbff 	bl	80085c4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006dce:	e035      	b.n	8006e3c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 fefe 	bl	8008bd8 <USBH_LL_GetURBState>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d129      	bne.n	8006e3a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	7b1b      	ldrb	r3, [r3, #12]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fe61 	bl	8008ab4 <USBH_LL_GetLastXferSize>
 8006df2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d016      	beq.n	8006e2c <CDC_ProcessReception+0x9e>
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	8b5b      	ldrh	r3, [r3, #26]
 8006e02:	461a      	mov	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d910      	bls.n	8006e2c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1ad2      	subs	r2, r2, r3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	6a1a      	ldr	r2, [r3, #32]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	441a      	add	r2, r3
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2203      	movs	r2, #3
 8006e26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006e2a:	e006      	b.n	8006e3a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f80f 	bl	8006e58 <USBH_CDC_ReceiveCallback>
      break;
 8006e3a:	bf00      	nop
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b083      	sub	sp, #12
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e029      	b.n	8006eec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f81f 	bl	8006ef4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f001 fd31 	bl	800894c <USBH_LL_Init>

  return USBH_OK;
 8006eea:	2300      	movs	r3, #0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
 8006f04:	e009      	b.n	8006f1a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	33e0      	adds	r3, #224	; 0xe0
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	2200      	movs	r2, #0
 8006f12:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b0f      	cmp	r3, #15
 8006f1e:	d9f2      	bls.n	8006f06 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e009      	b.n	8006f3a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f40:	d3f1      	bcc.n	8006f26 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2240      	movs	r2, #64	; 0x40
 8006f66:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d016      	beq.n	8006fde <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10e      	bne.n	8006fd8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	33de      	adds	r3, #222	; 0xde
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
 8006fd6:	e004      	b.n	8006fe2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006fd8:	2302      	movs	r3, #2
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e001      	b.n	8006fe2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007006:	78fa      	ldrb	r2, [r7, #3]
 8007008:	429a      	cmp	r2, r3
 800700a:	d204      	bcs.n	8007016 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	78fa      	ldrb	r2, [r7, #3]
 8007010:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007014:	e001      	b.n	800701a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007016:	2302      	movs	r3, #2
 8007018:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	70bb      	strb	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007050:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007052:	e025      	b.n	80070a0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	221a      	movs	r2, #26
 8007058:	fb02 f303 	mul.w	r3, r2, r3
 800705c:	3308      	adds	r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	3302      	adds	r3, #2
 8007064:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	795b      	ldrb	r3, [r3, #5]
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	429a      	cmp	r2, r3
 800706e:	d002      	beq.n	8007076 <USBH_FindInterface+0x4e>
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2bff      	cmp	r3, #255	; 0xff
 8007074:	d111      	bne.n	800709a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800707a:	78ba      	ldrb	r2, [r7, #2]
 800707c:	429a      	cmp	r2, r3
 800707e:	d002      	beq.n	8007086 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007080:	78bb      	ldrb	r3, [r7, #2]
 8007082:	2bff      	cmp	r3, #255	; 0xff
 8007084:	d109      	bne.n	800709a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800708a:	787a      	ldrb	r2, [r7, #1]
 800708c:	429a      	cmp	r2, r3
 800708e:	d002      	beq.n	8007096 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007090:	787b      	ldrb	r3, [r7, #1]
 8007092:	2bff      	cmp	r3, #255	; 0xff
 8007094:	d101      	bne.n	800709a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	e006      	b.n	80070a8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800709a:	7dfb      	ldrb	r3, [r7, #23]
 800709c:	3301      	adds	r3, #1
 800709e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d9d6      	bls.n	8007054 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80070a6:	23ff      	movs	r3, #255	; 0xff
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f001 fc81 	bl	80089c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80070c2:	2101      	movs	r1, #1
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fd9a 	bl	8008bfe <USBH_LL_DriverVBUS>

  return USBH_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af04      	add	r7, sp, #16
 80070da:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80070dc:	2302      	movs	r3, #2
 80070de:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d102      	bne.n	80070f6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2203      	movs	r2, #3
 80070f4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b0b      	cmp	r3, #11
 80070fe:	f200 81be 	bhi.w	800747e <USBH_Process+0x3aa>
 8007102:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <USBH_Process+0x34>)
 8007104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007108:	08007139 	.word	0x08007139
 800710c:	0800716b 	.word	0x0800716b
 8007110:	080071d3 	.word	0x080071d3
 8007114:	08007419 	.word	0x08007419
 8007118:	0800747f 	.word	0x0800747f
 800711c:	08007277 	.word	0x08007277
 8007120:	080073bf 	.word	0x080073bf
 8007124:	080072ad 	.word	0x080072ad
 8007128:	080072cd 	.word	0x080072cd
 800712c:	080072ed 	.word	0x080072ed
 8007130:	08007331 	.word	0x08007331
 8007134:	08007401 	.word	0x08007401
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 819e 	beq.w	8007482 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800714c:	20c8      	movs	r0, #200	; 0xc8
 800714e:	f001 fd9d 	bl	8008c8c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f001 fc93 	bl	8008a7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007168:	e18b      	b.n	8007482 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007170:	2b01      	cmp	r3, #1
 8007172:	d107      	bne.n	8007184 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2202      	movs	r2, #2
 8007180:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007182:	e18d      	b.n	80074a0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800718a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718e:	d914      	bls.n	80071ba <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007196:	3301      	adds	r3, #1
 8007198:	b2da      	uxtb	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d903      	bls.n	80071b2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	220d      	movs	r2, #13
 80071ae:	701a      	strb	r2, [r3, #0]
      break;
 80071b0:	e176      	b.n	80074a0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
      break;
 80071b8:	e172      	b.n	80074a0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80071c0:	f103 020a 	add.w	r2, r3, #10
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80071ca:	200a      	movs	r0, #10
 80071cc:	f001 fd5e 	bl	8008c8c <USBH_Delay>
      break;
 80071d0:	e166      	b.n	80074a0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80071e2:	2104      	movs	r1, #4
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80071e8:	2064      	movs	r0, #100	; 0x64
 80071ea:	f001 fd4f 	bl	8008c8c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fc1e 	bl	8008a30 <USBH_LL_GetSpeed>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2205      	movs	r2, #5
 8007202:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007204:	2100      	movs	r1, #0
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fa29 	bl	800865e <USBH_AllocPipe>
 800720c:	4603      	mov	r3, r0
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007214:	2180      	movs	r1, #128	; 0x80
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f001 fa21 	bl	800865e <USBH_AllocPipe>
 800721c:	4603      	mov	r3, r0
 800721e:	461a      	mov	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	7919      	ldrb	r1, [r3, #4]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007238:	b292      	uxth	r2, r2
 800723a:	9202      	str	r2, [sp, #8]
 800723c:	2200      	movs	r2, #0
 800723e:	9201      	str	r2, [sp, #4]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4603      	mov	r3, r0
 8007244:	2280      	movs	r2, #128	; 0x80
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 f9da 	bl	8008600 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	7959      	ldrb	r1, [r3, #5]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007260:	b292      	uxth	r2, r2
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	2200      	movs	r2, #0
 8007266:	9201      	str	r2, [sp, #4]
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	4603      	mov	r3, r0
 800726c:	2200      	movs	r2, #0
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 f9c6 	bl	8008600 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007274:	e114      	b.n	80074a0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f918 	bl	80074ac <USBH_HandleEnum>
 800727c:	4603      	mov	r3, r0
 800727e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 80fe 	bne.w	8007486 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007298:	2b01      	cmp	r3, #1
 800729a:	d103      	bne.n	80072a4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2208      	movs	r2, #8
 80072a0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072a2:	e0f0      	b.n	8007486 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2207      	movs	r2, #7
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e0ec      	b.n	8007486 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 80e9 	beq.w	800748a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072be:	2101      	movs	r1, #1
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2208      	movs	r2, #8
 80072c8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80072ca:	e0de      	b.n	800748a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fc2c 	bl	8007b34 <USBH_SetCfg>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 80d5 	bne.w	800748e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2209      	movs	r2, #9
 80072e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80072ea:	e0d0      	b.n	800748e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80072fa:	2101      	movs	r1, #1
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fc3c 	bl	8007b7a <USBH_SetFeature>
 8007302:	4603      	mov	r3, r0
 8007304:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007306:	7bbb      	ldrb	r3, [r7, #14]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d103      	bne.n	8007316 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	220a      	movs	r2, #10
 8007312:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007314:	e0bd      	b.n	8007492 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	2b03      	cmp	r3, #3
 800731c:	f040 80b9 	bne.w	8007492 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	220a      	movs	r2, #10
 8007324:	701a      	strb	r2, [r3, #0]
      break;
 8007326:	e0b4      	b.n	8007492 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	220a      	movs	r2, #10
 800732c:	701a      	strb	r2, [r3, #0]
      break;
 800732e:	e0b0      	b.n	8007492 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 80ad 	beq.w	8007496 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
 8007348:	e016      	b.n	8007378 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800734a:	7bfa      	ldrb	r2, [r7, #15]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	32de      	adds	r2, #222	; 0xde
 8007350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007354:	791a      	ldrb	r2, [r3, #4]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800735c:	429a      	cmp	r2, r3
 800735e:	d108      	bne.n	8007372 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	32de      	adds	r2, #222	; 0xde
 8007366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007370:	e005      	b.n	800737e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007372:	7bfb      	ldrb	r3, [r7, #15]
 8007374:	3301      	adds	r3, #1
 8007376:	73fb      	strb	r3, [r7, #15]
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0e5      	beq.n	800734a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007384:	2b00      	cmp	r3, #0
 8007386:	d016      	beq.n	80073b6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	4798      	blx	r3
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2206      	movs	r2, #6
 800739e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073a6:	2103      	movs	r1, #3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073ac:	e073      	b.n	8007496 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	220d      	movs	r2, #13
 80073b2:	701a      	strb	r2, [r3, #0]
      break;
 80073b4:	e06f      	b.n	8007496 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	220d      	movs	r2, #13
 80073ba:	701a      	strb	r2, [r3, #0]
      break;
 80073bc:	e06b      	b.n	8007496 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d017      	beq.n	80073f8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	4798      	blx	r3
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d103      	bne.n	80073e8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	220b      	movs	r2, #11
 80073e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073e6:	e058      	b.n	800749a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d154      	bne.n	800749a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	220d      	movs	r2, #13
 80073f4:	701a      	strb	r2, [r3, #0]
      break;
 80073f6:	e050      	b.n	800749a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	220d      	movs	r2, #13
 80073fc:	701a      	strb	r2, [r3, #0]
      break;
 80073fe:	e04c      	b.n	800749a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d049      	beq.n	800749e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
      }
      break;
 8007416:	e042      	b.n	800749e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fd67 	bl	8006ef4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800742c:	2b00      	cmp	r3, #0
 800742e:	d009      	beq.n	8007444 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007454:	2105      	movs	r1, #5
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d107      	bne.n	8007476 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f7ff fe20 	bl	80070b4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007474:	e014      	b.n	80074a0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 faa4 	bl	80089c4 <USBH_LL_Start>
      break;
 800747c:	e010      	b.n	80074a0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800747e:	bf00      	nop
 8007480:	e00e      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007482:	bf00      	nop
 8007484:	e00c      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007486:	bf00      	nop
 8007488:	e00a      	b.n	80074a0 <USBH_Process+0x3cc>
    break;
 800748a:	bf00      	nop
 800748c:	e008      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 800748e:	bf00      	nop
 8007490:	e006      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007492:	bf00      	nop
 8007494:	e004      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <USBH_Process+0x3cc>
      break;
 800749e:	bf00      	nop
  }
  return USBH_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop

080074ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af04      	add	r7, sp, #16
 80074b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80074b8:	2301      	movs	r3, #1
 80074ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	785b      	ldrb	r3, [r3, #1]
 80074c0:	2b07      	cmp	r3, #7
 80074c2:	f200 81c1 	bhi.w	8007848 <USBH_HandleEnum+0x39c>
 80074c6:	a201      	add	r2, pc, #4	; (adr r2, 80074cc <USBH_HandleEnum+0x20>)
 80074c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080075ab 	.word	0x080075ab
 80074d4:	08007615 	.word	0x08007615
 80074d8:	080076a3 	.word	0x080076a3
 80074dc:	0800770d 	.word	0x0800770d
 80074e0:	0800777d 	.word	0x0800777d
 80074e4:	080077c3 	.word	0x080077c3
 80074e8:	08007809 	.word	0x08007809
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80074ec:	2108      	movs	r1, #8
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa50 	bl	8007994 <USBH_Get_DevDesc>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d130      	bne.n	8007560 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7919      	ldrb	r1, [r3, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007522:	b292      	uxth	r2, r2
 8007524:	9202      	str	r2, [sp, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	9201      	str	r2, [sp, #4]
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	4603      	mov	r3, r0
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f865 	bl	8008600 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	7959      	ldrb	r1, [r3, #5]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800754a:	b292      	uxth	r2, r2
 800754c:	9202      	str	r2, [sp, #8]
 800754e:	2200      	movs	r2, #0
 8007550:	9201      	str	r2, [sp, #4]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	4603      	mov	r3, r0
 8007556:	2200      	movs	r2, #0
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f851 	bl	8008600 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800755e:	e175      	b.n	800784c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	2b03      	cmp	r3, #3
 8007564:	f040 8172 	bne.w	800784c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800756e:	3301      	adds	r3, #1
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800757e:	2b03      	cmp	r3, #3
 8007580:	d903      	bls.n	800758a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	220d      	movs	r2, #13
 8007586:	701a      	strb	r2, [r3, #0]
      break;
 8007588:	e160      	b.n	800784c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f885 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	791b      	ldrb	r3, [r3, #4]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 f87f 	bl	80086a0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
      break;
 80075a8:	e150      	b.n	800784c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80075aa:	2112      	movs	r1, #18
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f9f1 	bl	8007994 <USBH_Get_DevDesc>
 80075b2:	4603      	mov	r3, r0
 80075b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d103      	bne.n	80075c4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80075c2:	e145      	b.n	8007850 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	f040 8142 	bne.w	8007850 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075d2:	3301      	adds	r3, #1
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80075e2:	2b03      	cmp	r3, #3
 80075e4:	d903      	bls.n	80075ee <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	220d      	movs	r2, #13
 80075ea:	701a      	strb	r2, [r3, #0]
      break;
 80075ec:	e130      	b.n	8007850 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	795b      	ldrb	r3, [r3, #5]
 80075f2:	4619      	mov	r1, r3
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 f853 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	791b      	ldrb	r3, [r3, #4]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 f84d 	bl	80086a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
      break;
 8007612:	e11d      	b.n	8007850 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007614:	2101      	movs	r1, #1
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa68 	bl	8007aec <USBH_SetAddress>
 800761c:	4603      	mov	r3, r0
 800761e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007620:	7bbb      	ldrb	r3, [r7, #14]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d132      	bne.n	800768c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007626:	2002      	movs	r0, #2
 8007628:	f001 fb30 	bl	8008c8c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2203      	movs	r2, #3
 8007638:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	7919      	ldrb	r1, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800764e:	b292      	uxth	r2, r2
 8007650:	9202      	str	r2, [sp, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	9201      	str	r2, [sp, #4]
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	4603      	mov	r3, r0
 800765a:	2280      	movs	r2, #128	; 0x80
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 ffcf 	bl	8008600 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7959      	ldrb	r1, [r3, #5]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007676:	b292      	uxth	r2, r2
 8007678:	9202      	str	r2, [sp, #8]
 800767a:	2200      	movs	r2, #0
 800767c:	9201      	str	r2, [sp, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4603      	mov	r3, r0
 8007682:	2200      	movs	r2, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 ffbb 	bl	8008600 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800768a:	e0e3      	b.n	8007854 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b03      	cmp	r3, #3
 8007690:	f040 80e0 	bne.w	8007854 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	220d      	movs	r2, #13
 8007698:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	705a      	strb	r2, [r3, #1]
      break;
 80076a0:	e0d8      	b.n	8007854 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80076a2:	2109      	movs	r1, #9
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 f99d 	bl	80079e4 <USBH_Get_CfgDesc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2204      	movs	r2, #4
 80076b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076ba:	e0cd      	b.n	8007858 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	f040 80ca 	bne.w	8007858 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d903      	bls.n	80076e6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	220d      	movs	r2, #13
 80076e2:	701a      	strb	r2, [r3, #0]
      break;
 80076e4:	e0b8      	b.n	8007858 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	795b      	ldrb	r3, [r3, #5]
 80076ea:	4619      	mov	r1, r3
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 ffd7 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	791b      	ldrb	r3, [r3, #4]
 80076f6:	4619      	mov	r1, r3
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 ffd1 	bl	80086a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
      break;
 800770a:	e0a5      	b.n	8007858 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007712:	4619      	mov	r1, r3
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f965 	bl	80079e4 <USBH_Get_CfgDesc>
 800771a:	4603      	mov	r3, r0
 800771c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d103      	bne.n	800772c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2205      	movs	r2, #5
 8007728:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800772a:	e097      	b.n	800785c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	2b03      	cmp	r3, #3
 8007730:	f040 8094 	bne.w	800785c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800773a:	3301      	adds	r3, #1
 800773c:	b2da      	uxtb	r2, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800774a:	2b03      	cmp	r3, #3
 800774c:	d903      	bls.n	8007756 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	220d      	movs	r2, #13
 8007752:	701a      	strb	r2, [r3, #0]
      break;
 8007754:	e082      	b.n	800785c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	795b      	ldrb	r3, [r3, #5]
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 ff9f 	bl	80086a0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	791b      	ldrb	r3, [r3, #4]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 ff99 	bl	80086a0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e06f      	b.n	800785c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007782:	2b00      	cmp	r3, #0
 8007784:	d019      	beq.n	80077ba <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007792:	23ff      	movs	r3, #255	; 0xff
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f949 	bl	8007a2c <USBH_Get_StringDesc>
 800779a:	4603      	mov	r3, r0
 800779c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800779e:	7bbb      	ldrb	r3, [r7, #14]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2206      	movs	r2, #6
 80077a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077aa:	e059      	b.n	8007860 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d156      	bne.n	8007860 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2206      	movs	r2, #6
 80077b6:	705a      	strb	r2, [r3, #1]
      break;
 80077b8:	e052      	b.n	8007860 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2206      	movs	r2, #6
 80077be:	705a      	strb	r2, [r3, #1]
      break;
 80077c0:	e04e      	b.n	8007860 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d019      	beq.n	8007800 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80077d8:	23ff      	movs	r3, #255	; 0xff
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f926 	bl	8007a2c <USBH_Get_StringDesc>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2207      	movs	r2, #7
 80077ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80077f0:	e038      	b.n	8007864 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80077f2:	7bbb      	ldrb	r3, [r7, #14]
 80077f4:	2b03      	cmp	r3, #3
 80077f6:	d135      	bne.n	8007864 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2207      	movs	r2, #7
 80077fc:	705a      	strb	r2, [r3, #1]
      break;
 80077fe:	e031      	b.n	8007864 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2207      	movs	r2, #7
 8007804:	705a      	strb	r2, [r3, #1]
      break;
 8007806:	e02d      	b.n	8007864 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800780e:	2b00      	cmp	r3, #0
 8007810:	d017      	beq.n	8007842 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800781e:	23ff      	movs	r3, #255	; 0xff
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f903 	bl	8007a2c <USBH_Get_StringDesc>
 8007826:	4603      	mov	r3, r0
 8007828:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d102      	bne.n	8007836 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007834:	e018      	b.n	8007868 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007836:	7bbb      	ldrb	r3, [r7, #14]
 8007838:	2b03      	cmp	r3, #3
 800783a:	d115      	bne.n	8007868 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73fb      	strb	r3, [r7, #15]
      break;
 8007840:	e012      	b.n	8007868 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]
      break;
 8007846:	e00f      	b.n	8007868 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007848:	bf00      	nop
 800784a:	e00e      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 800784c:	bf00      	nop
 800784e:	e00c      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007850:	bf00      	nop
 8007852:	e00a      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007854:	bf00      	nop
 8007856:	e008      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007858:	bf00      	nop
 800785a:	e006      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 800785c:	bf00      	nop
 800785e:	e004      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007860:	bf00      	nop
 8007862:	e002      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007864:	bf00      	nop
 8007866:	e000      	b.n	800786a <USBH_HandleEnum+0x3be>
      break;
 8007868:	bf00      	nop
  }
  return Status;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f804 	bl	80078b6 <USBH_HandleSof>
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b0b      	cmp	r3, #11
 80078c6:	d10a      	bne.n	80078de <USBH_HandleSof+0x28>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d005      	beq.n	80078de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
  }
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80078f6:	bf00      	nop
}
 80078f8:	370c      	adds	r7, #12
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007902:	b480      	push	{r7}
 8007904:	b083      	sub	sp, #12
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007912:	bf00      	nop
}
 8007914:	370c      	adds	r7, #12
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800791e:	b480      	push	{r7}
 8007920:	b083      	sub	sp, #12
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 f844 	bl	80089fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fe91 	bl	80086a0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	795b      	ldrb	r3, [r3, #5]
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fe8b 	bl	80086a0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af02      	add	r7, sp, #8
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80079a6:	78fb      	ldrb	r3, [r7, #3]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	9300      	str	r3, [sp, #0]
 80079ac:	4613      	mov	r3, r2
 80079ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 f864 	bl	8007a82 <USBH_GetDescriptor>
 80079ba:	4603      	mov	r3, r0
 80079bc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10a      	bne.n	80079da <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	b292      	uxth	r2, r2
 80079d4:	4619      	mov	r1, r3
 80079d6:	f000 f918 	bl	8007c0a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80079da:	7bfb      	ldrb	r3, [r7, #15]
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	460b      	mov	r3, r1
 80079ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	331c      	adds	r3, #28
 80079f4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80079f6:	887b      	ldrh	r3, [r7, #2]
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a00:	2100      	movs	r1, #0
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f83d 	bl	8007a82 <USBH_GetDescriptor>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d107      	bne.n	8007a22 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007a12:	887b      	ldrh	r3, [r7, #2]
 8007a14:	461a      	mov	r2, r3
 8007a16:	68b9      	ldr	r1, [r7, #8]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f987 	bl	8007d2c <USBH_ParseCfgDesc>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	607a      	str	r2, [r7, #4]
 8007a36:	461a      	mov	r2, r3
 8007a38:	460b      	mov	r3, r1
 8007a3a:	72fb      	strb	r3, [r7, #11]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007a40:	7afb      	ldrb	r3, [r7, #11]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007a48:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007a50:	893b      	ldrh	r3, [r7, #8]
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	460b      	mov	r3, r1
 8007a56:	2100      	movs	r1, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f812 	bl	8007a82 <USBH_GetDescriptor>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d107      	bne.n	8007a78 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a6e:	893a      	ldrh	r2, [r7, #8]
 8007a70:	6879      	ldr	r1, [r7, #4]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fb24 	bl	80080c0 <USBH_ParseStringDesc>
  }

  return status;
 8007a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	60f8      	str	r0, [r7, #12]
 8007a8a:	607b      	str	r3, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	72fb      	strb	r3, [r7, #11]
 8007a90:	4613      	mov	r3, r2
 8007a92:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	789b      	ldrb	r3, [r3, #2]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d11c      	bne.n	8007ad6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007a9c:	7afb      	ldrb	r3, [r7, #11]
 8007a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007aa2:	b2da      	uxtb	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2206      	movs	r2, #6
 8007aac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	893a      	ldrh	r2, [r7, #8]
 8007ab2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007ab4:	893b      	ldrh	r3, [r7, #8]
 8007ab6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007abe:	d104      	bne.n	8007aca <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ac6:	829a      	strh	r2, [r3, #20]
 8007ac8:	e002      	b.n	8007ad0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	8b3a      	ldrh	r2, [r7, #24]
 8007ad4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007ad6:	8b3b      	ldrh	r3, [r7, #24]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fb3d 	bl	800815c <USBH_CtlReq>
 8007ae2:	4603      	mov	r3, r0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d10f      	bne.n	8007b20 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2205      	movs	r2, #5
 8007b0a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	b29a      	uxth	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fb19 	bl	800815c <USBH_CtlReq>
 8007b2a:	4603      	mov	r3, r0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	789b      	ldrb	r3, [r3, #2]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d10e      	bne.n	8007b66 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2209      	movs	r2, #9
 8007b52:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	887a      	ldrh	r2, [r7, #2]
 8007b58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 faf6 	bl	800815c <USBH_CtlReq>
 8007b70:	4603      	mov	r3, r0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b082      	sub	sp, #8
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	789b      	ldrb	r3, [r3, #2]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d10f      	bne.n	8007bae <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2203      	movs	r2, #3
 8007b98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007b9a:	78fb      	ldrb	r3, [r7, #3]
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fad2 	bl	800815c <USBH_CtlReq>
 8007bb8:	4603      	mov	r3, r0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	789b      	ldrb	r3, [r3, #2]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d10f      	bne.n	8007bf6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007be8:	78fb      	ldrb	r3, [r7, #3]
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 faae 	bl	800815c <USBH_CtlReq>
 8007c00:	4603      	mov	r3, r0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	4613      	mov	r3, r2
 8007c16:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	785a      	ldrb	r2, [r3, #1]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	3303      	adds	r3, #3
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	021b      	lsls	r3, r3, #8
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	791a      	ldrb	r2, [r3, #4]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	795a      	ldrb	r2, [r3, #5]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	799a      	ldrb	r2, [r3, #6]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	79da      	ldrb	r2, [r3, #7]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	79db      	ldrb	r3, [r3, #7]
 8007c68:	2b20      	cmp	r3, #32
 8007c6a:	dc11      	bgt.n	8007c90 <USBH_ParseDevDesc+0x86>
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	db16      	blt.n	8007c9e <USBH_ParseDevDesc+0x94>
 8007c70:	3b08      	subs	r3, #8
 8007c72:	2201      	movs	r2, #1
 8007c74:	fa02 f303 	lsl.w	r3, r2, r3
 8007c78:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007c7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <USBH_ParseDevDesc+0x8a>
 8007c8e:	e006      	b.n	8007c9e <USBH_ParseDevDesc+0x94>
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d104      	bne.n	8007c9e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	79da      	ldrb	r2, [r3, #7]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	71da      	strb	r2, [r3, #7]
      break;
 8007c9c:	e003      	b.n	8007ca6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2240      	movs	r2, #64	; 0x40
 8007ca2:	71da      	strb	r2, [r3, #7]
      break;
 8007ca4:	bf00      	nop
  }

  if (length > 8U)
 8007ca6:	88fb      	ldrh	r3, [r7, #6]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d939      	bls.n	8007d20 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	3308      	adds	r3, #8
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	3309      	adds	r3, #9
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	330a      	adds	r3, #10
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	330b      	adds	r3, #11
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	330c      	adds	r3, #12
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	330d      	adds	r3, #13
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	021b      	lsls	r3, r3, #8
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	7b9a      	ldrb	r2, [r3, #14]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	7bda      	ldrb	r2, [r3, #15]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	7c1a      	ldrb	r2, [r3, #16]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	7c5a      	ldrb	r2, [r3, #17]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	745a      	strb	r2, [r3, #17]
  }
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08c      	sub	sp, #48	; 0x30
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007d40:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007d52:	2300      	movs	r3, #0
 8007d54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	781a      	ldrb	r2, [r3, #0]
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	785a      	ldrb	r2, [r3, #1]
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	3302      	adds	r3, #2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	3303      	adds	r3, #3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	021b      	lsls	r3, r3, #8
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	4313      	orrs	r3, r2
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d88:	bf28      	it	cs
 8007d8a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007d8e:	b29a      	uxth	r2, r3
 8007d90:	6a3b      	ldr	r3, [r7, #32]
 8007d92:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	791a      	ldrb	r2, [r3, #4]
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	795a      	ldrb	r2, [r3, #5]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	799a      	ldrb	r2, [r3, #6]
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	79da      	ldrb	r2, [r3, #7]
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	7a1a      	ldrb	r2, [r3, #8]
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b09      	cmp	r3, #9
 8007dc2:	d002      	beq.n	8007dca <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	2209      	movs	r2, #9
 8007dc8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	f240 809d 	bls.w	8007f0c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007dd2:	2309      	movs	r3, #9
 8007dd4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007dda:	e081      	b.n	8007ee0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007ddc:	f107 0316 	add.w	r3, r7, #22
 8007de0:	4619      	mov	r1, r3
 8007de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de4:	f000 f99f 	bl	8008126 <USBH_GetNextDesc>
 8007de8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dec:	785b      	ldrb	r3, [r3, #1]
 8007dee:	2b04      	cmp	r3, #4
 8007df0:	d176      	bne.n	8007ee0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	2b09      	cmp	r3, #9
 8007df8:	d002      	beq.n	8007e00 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	2209      	movs	r2, #9
 8007dfe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e04:	221a      	movs	r2, #26
 8007e06:	fb02 f303 	mul.w	r3, r2, r3
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	6a3a      	ldr	r2, [r7, #32]
 8007e0e:	4413      	add	r3, r2
 8007e10:	3302      	adds	r3, #2
 8007e12:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e16:	69f8      	ldr	r0, [r7, #28]
 8007e18:	f000 f87e 	bl	8007f18 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e26:	e043      	b.n	8007eb0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e28:	f107 0316 	add.w	r3, r7, #22
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e30:	f000 f979 	bl	8008126 <USBH_GetNextDesc>
 8007e34:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	785b      	ldrb	r3, [r3, #1]
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d138      	bne.n	8007eb0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	795b      	ldrb	r3, [r3, #5]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d10f      	bne.n	8007e66 <USBH_ParseCfgDesc+0x13a>
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	799b      	ldrb	r3, [r3, #6]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d10b      	bne.n	8007e66 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	79db      	ldrb	r3, [r3, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10f      	bne.n	8007e76 <USBH_ParseCfgDesc+0x14a>
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d00b      	beq.n	8007e76 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	2209      	movs	r2, #9
 8007e62:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e64:	e007      	b.n	8007e76 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8007e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b07      	cmp	r3, #7
 8007e6c:	d004      	beq.n	8007e78 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	2207      	movs	r2, #7
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	e000      	b.n	8007e78 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007e76:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007e78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e7c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007e80:	3201      	adds	r2, #1
 8007e82:	00d2      	lsls	r2, r2, #3
 8007e84:	211a      	movs	r1, #26
 8007e86:	fb01 f303 	mul.w	r3, r1, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	6a3a      	ldr	r2, [r7, #32]
 8007e90:	4413      	add	r3, r2
 8007e92:	3304      	adds	r3, #4
 8007e94:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e98:	69b9      	ldr	r1, [r7, #24]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f86b 	bl	8007f76 <USBH_ParseEPDesc>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8007ea6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007eaa:	3301      	adds	r3, #1
 8007eac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	791b      	ldrb	r3, [r3, #4]
 8007eb4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d204      	bcs.n	8007ec6 <USBH_ParseCfgDesc+0x19a>
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	885a      	ldrh	r2, [r3, #2]
 8007ec0:	8afb      	ldrh	r3, [r7, #22]
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d8b0      	bhi.n	8007e28 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	791b      	ldrb	r3, [r3, #4]
 8007eca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d201      	bcs.n	8007ed6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e01c      	b.n	8007f10 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8007ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eda:	3301      	adds	r3, #1
 8007edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d805      	bhi.n	8007ef4 <USBH_ParseCfgDesc+0x1c8>
 8007ee8:	6a3b      	ldr	r3, [r7, #32]
 8007eea:	885a      	ldrh	r2, [r3, #2]
 8007eec:	8afb      	ldrh	r3, [r7, #22]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	f63f af74 	bhi.w	8007ddc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	791b      	ldrb	r3, [r3, #4]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	bf28      	it	cs
 8007efc:	2302      	movcs	r3, #2
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d201      	bcs.n	8007f0c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	e001      	b.n	8007f10 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3730      	adds	r7, #48	; 0x30
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781a      	ldrb	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	785a      	ldrb	r2, [r3, #1]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	789a      	ldrb	r2, [r3, #2]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	78da      	ldrb	r2, [r3, #3]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	791a      	ldrb	r2, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	795a      	ldrb	r2, [r3, #5]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	799a      	ldrb	r2, [r3, #6]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	79da      	ldrb	r2, [r3, #7]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	7a1a      	ldrb	r2, [r3, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	721a      	strb	r2, [r3, #8]
}
 8007f6a:	bf00      	nop
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b087      	sub	sp, #28
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	785a      	ldrb	r2, [r3, #1]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	789a      	ldrb	r2, [r3, #2]
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	78da      	ldrb	r2, [r3, #3]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3305      	adds	r3, #5
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	799a      	ldrb	r2, [r3, #6]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	889b      	ldrh	r3, [r3, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	75fb      	strb	r3, [r7, #23]
 8007fd6:	e033      	b.n	8008040 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	889b      	ldrh	r3, [r3, #4]
 8007fdc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007fe0:	f023 0307 	bic.w	r3, r3, #7
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	889b      	ldrh	r3, [r3, #4]
 8007fee:	b21a      	sxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3304      	adds	r3, #4
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b299      	uxth	r1, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3305      	adds	r3, #5
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	b29b      	uxth	r3, r3
 8008004:	430b      	orrs	r3, r1
 8008006:	b29b      	uxth	r3, r3
 8008008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800800c:	2b00      	cmp	r3, #0
 800800e:	d110      	bne.n	8008032 <USBH_ParseEPDesc+0xbc>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	b299      	uxth	r1, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3305      	adds	r3, #5
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b29b      	uxth	r3, r3
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	b29b      	uxth	r3, r3
 8008024:	430b      	orrs	r3, r1
 8008026:	b29b      	uxth	r3, r3
 8008028:	b21b      	sxth	r3, r3
 800802a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800802e:	b21b      	sxth	r3, r3
 8008030:	e001      	b.n	8008036 <USBH_ParseEPDesc+0xc0>
 8008032:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008036:	4313      	orrs	r3, r2
 8008038:	b21b      	sxth	r3, r3
 800803a:	b29a      	uxth	r2, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008046:	2b00      	cmp	r3, #0
 8008048:	d116      	bne.n	8008078 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	78db      	ldrb	r3, [r3, #3]
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	2b01      	cmp	r3, #1
 8008054:	d005      	beq.n	8008062 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	78db      	ldrb	r3, [r3, #3]
 800805a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800805e:	2b03      	cmp	r3, #3
 8008060:	d127      	bne.n	80080b2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	799b      	ldrb	r3, [r3, #6]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <USBH_ParseEPDesc+0xfc>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	799b      	ldrb	r3, [r3, #6]
 800806e:	2b10      	cmp	r3, #16
 8008070:	d91f      	bls.n	80080b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008072:	2303      	movs	r3, #3
 8008074:	75fb      	strb	r3, [r7, #23]
 8008076:	e01c      	b.n	80080b2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	78db      	ldrb	r3, [r3, #3]
 800807c:	f003 0303 	and.w	r3, r3, #3
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10a      	bne.n	800809a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	799b      	ldrb	r3, [r3, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <USBH_ParseEPDesc+0x11e>
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	799b      	ldrb	r3, [r3, #6]
 8008090:	2b10      	cmp	r3, #16
 8008092:	d90e      	bls.n	80080b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008094:	2303      	movs	r3, #3
 8008096:	75fb      	strb	r3, [r7, #23]
 8008098:	e00b      	b.n	80080b2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	78db      	ldrb	r3, [r3, #3]
 800809e:	f003 0303 	and.w	r3, r3, #3
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d105      	bne.n	80080b2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	799b      	ldrb	r3, [r3, #6]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d101      	bne.n	80080b2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80080ae:	2303      	movs	r3, #3
 80080b0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80080b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d120      	bne.n	800811a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	1e9a      	subs	r2, r3, #2
 80080de:	88fb      	ldrh	r3, [r7, #6]
 80080e0:	4293      	cmp	r3, r2
 80080e2:	bf28      	it	cs
 80080e4:	4613      	movcs	r3, r2
 80080e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3302      	adds	r3, #2
 80080ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80080ee:	2300      	movs	r3, #0
 80080f0:	82fb      	strh	r3, [r7, #22]
 80080f2:	e00b      	b.n	800810c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80080f4:	8afb      	ldrh	r3, [r7, #22]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4413      	add	r3, r2
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	3301      	adds	r3, #1
 8008104:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008106:	8afb      	ldrh	r3, [r7, #22]
 8008108:	3302      	adds	r3, #2
 800810a:	82fb      	strh	r3, [r7, #22]
 800810c:	8afa      	ldrh	r2, [r7, #22]
 800810e:	8abb      	ldrh	r3, [r7, #20]
 8008110:	429a      	cmp	r2, r3
 8008112:	d3ef      	bcc.n	80080f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2200      	movs	r2, #0
 8008118:	701a      	strb	r2, [r3, #0]
  }
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	881a      	ldrh	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	b29b      	uxth	r3, r3
 800813a:	4413      	add	r3, r2
 800813c:	b29a      	uxth	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4413      	add	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800814e:	68fb      	ldr	r3, [r7, #12]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800816a:	2301      	movs	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	789b      	ldrb	r3, [r3, #2]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d002      	beq.n	800817c <USBH_CtlReq+0x20>
 8008176:	2b02      	cmp	r3, #2
 8008178:	d00f      	beq.n	800819a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800817a:	e027      	b.n	80081cc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	88fa      	ldrh	r2, [r7, #6]
 8008186:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2202      	movs	r2, #2
 8008192:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	e018      	b.n	80081cc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800819a:	68f8      	ldr	r0, [r7, #12]
 800819c:	f000 f81c 	bl	80081d8 <USBH_HandleControl>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <USBH_CtlReq+0x54>
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	2b03      	cmp	r3, #3
 80081ae:	d106      	bne.n	80081be <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2201      	movs	r2, #1
 80081b4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	761a      	strb	r2, [r3, #24]
      break;
 80081bc:	e005      	b.n	80081ca <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d102      	bne.n	80081ca <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	709a      	strb	r2, [r3, #2]
      break;
 80081ca:	bf00      	nop
  }
  return status;
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
	...

080081d8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af02      	add	r7, sp, #8
 80081de:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7e1b      	ldrb	r3, [r3, #24]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2b0a      	cmp	r3, #10
 80081f0:	f200 8156 	bhi.w	80084a0 <USBH_HandleControl+0x2c8>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <USBH_HandleControl+0x24>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	08008229 	.word	0x08008229
 8008200:	08008243 	.word	0x08008243
 8008204:	080082ad 	.word	0x080082ad
 8008208:	080082d3 	.word	0x080082d3
 800820c:	0800830b 	.word	0x0800830b
 8008210:	08008335 	.word	0x08008335
 8008214:	08008387 	.word	0x08008387
 8008218:	080083a9 	.word	0x080083a9
 800821c:	080083e5 	.word	0x080083e5
 8008220:	0800840b 	.word	0x0800840b
 8008224:	08008449 	.word	0x08008449
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0110 	add.w	r1, r3, #16
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	795b      	ldrb	r3, [r3, #5]
 8008232:	461a      	mov	r2, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f943 	bl	80084c0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	761a      	strb	r2, [r3, #24]
      break;
 8008240:	e139      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	795b      	ldrb	r3, [r3, #5]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fcc5 	bl	8008bd8 <USBH_LL_GetURBState>
 800824e:	4603      	mov	r3, r0
 8008250:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008252:	7bbb      	ldrb	r3, [r7, #14]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d11e      	bne.n	8008296 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7c1b      	ldrb	r3, [r3, #16]
 800825c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008260:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	8adb      	ldrh	r3, [r3, #22]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800826a:	7b7b      	ldrb	r3, [r7, #13]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d103      	bne.n	8008278 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2203      	movs	r2, #3
 8008274:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008276:	e115      	b.n	80084a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2205      	movs	r2, #5
 800827c:	761a      	strb	r2, [r3, #24]
      break;
 800827e:	e111      	b.n	80084a4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008280:	7b7b      	ldrb	r3, [r7, #13]
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d103      	bne.n	800828e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2209      	movs	r2, #9
 800828a:	761a      	strb	r2, [r3, #24]
      break;
 800828c:	e10a      	b.n	80084a4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2207      	movs	r2, #7
 8008292:	761a      	strb	r2, [r3, #24]
      break;
 8008294:	e106      	b.n	80084a4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d003      	beq.n	80082a4 <USBH_HandleControl+0xcc>
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	f040 8100 	bne.w	80084a4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220b      	movs	r2, #11
 80082a8:	761a      	strb	r2, [r3, #24]
      break;
 80082aa:	e0fb      	b.n	80084a4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6899      	ldr	r1, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	899a      	ldrh	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f93a 	bl	800853e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2204      	movs	r2, #4
 80082ce:	761a      	strb	r2, [r3, #24]
      break;
 80082d0:	e0f1      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	791b      	ldrb	r3, [r3, #4]
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fc7d 	bl	8008bd8 <USBH_LL_GetURBState>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d102      	bne.n	80082ee <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2209      	movs	r2, #9
 80082ec:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	d102      	bne.n	80082fa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80082f8:	e0d6      	b.n	80084a8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	f040 80d3 	bne.w	80084a8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	220b      	movs	r2, #11
 8008306:	761a      	strb	r2, [r3, #24]
      break;
 8008308:	e0ce      	b.n	80084a8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6899      	ldr	r1, [r3, #8]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	899a      	ldrh	r2, [r3, #12]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	795b      	ldrb	r3, [r3, #5]
 8008316:	2001      	movs	r0, #1
 8008318:	9000      	str	r0, [sp, #0]
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f000 f8ea 	bl	80084f4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008326:	b29a      	uxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2206      	movs	r2, #6
 8008330:	761a      	strb	r2, [r3, #24]
      break;
 8008332:	e0c0      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	795b      	ldrb	r3, [r3, #5]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fc4c 	bl	8008bd8 <USBH_LL_GetURBState>
 8008340:	4603      	mov	r3, r0
 8008342:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d103      	bne.n	8008352 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2207      	movs	r2, #7
 800834e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008350:	e0ac      	b.n	80084ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b05      	cmp	r3, #5
 8008356:	d105      	bne.n	8008364 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	220c      	movs	r2, #12
 800835c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800835e:	2303      	movs	r3, #3
 8008360:	73fb      	strb	r3, [r7, #15]
      break;
 8008362:	e0a3      	b.n	80084ac <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008364:	7bbb      	ldrb	r3, [r7, #14]
 8008366:	2b02      	cmp	r3, #2
 8008368:	d103      	bne.n	8008372 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2205      	movs	r2, #5
 800836e:	761a      	strb	r2, [r3, #24]
      break;
 8008370:	e09c      	b.n	80084ac <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	2b04      	cmp	r3, #4
 8008376:	f040 8099 	bne.w	80084ac <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	220b      	movs	r2, #11
 800837e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008380:	2302      	movs	r3, #2
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	e092      	b.n	80084ac <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	791b      	ldrb	r3, [r3, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	2100      	movs	r1, #0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f8d5 	bl	800853e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800839a:	b29a      	uxth	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2208      	movs	r2, #8
 80083a4:	761a      	strb	r2, [r3, #24]

      break;
 80083a6:	e086      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	791b      	ldrb	r3, [r3, #4]
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fc12 	bl	8008bd8 <USBH_LL_GetURBState>
 80083b4:	4603      	mov	r3, r0
 80083b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d105      	bne.n	80083ca <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	220d      	movs	r2, #13
 80083c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083c8:	e072      	b.n	80084b0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d103      	bne.n	80083d8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220b      	movs	r2, #11
 80083d4:	761a      	strb	r2, [r3, #24]
      break;
 80083d6:	e06b      	b.n	80084b0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b05      	cmp	r3, #5
 80083dc:	d168      	bne.n	80084b0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80083de:	2303      	movs	r3, #3
 80083e0:	73fb      	strb	r3, [r7, #15]
      break;
 80083e2:	e065      	b.n	80084b0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	795b      	ldrb	r3, [r3, #5]
 80083e8:	2201      	movs	r2, #1
 80083ea:	9200      	str	r2, [sp, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f87f 	bl	80084f4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	220a      	movs	r2, #10
 8008406:	761a      	strb	r2, [r3, #24]
      break;
 8008408:	e055      	b.n	80084b6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	795b      	ldrb	r3, [r3, #5]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fbe1 	bl	8008bd8 <USBH_LL_GetURBState>
 8008416:	4603      	mov	r3, r0
 8008418:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800841a:	7bbb      	ldrb	r3, [r7, #14]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d105      	bne.n	800842c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	220d      	movs	r2, #13
 8008428:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800842a:	e043      	b.n	80084b4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d103      	bne.n	800843a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2209      	movs	r2, #9
 8008436:	761a      	strb	r2, [r3, #24]
      break;
 8008438:	e03c      	b.n	80084b4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800843a:	7bbb      	ldrb	r3, [r7, #14]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d139      	bne.n	80084b4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	220b      	movs	r2, #11
 8008444:	761a      	strb	r2, [r3, #24]
      break;
 8008446:	e035      	b.n	80084b4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7e5b      	ldrb	r3, [r3, #25]
 800844c:	3301      	adds	r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	765a      	strb	r2, [r3, #25]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	7e5b      	ldrb	r3, [r3, #25]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d806      	bhi.n	800846a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008468:	e025      	b.n	80084b6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008470:	2106      	movs	r1, #6
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	795b      	ldrb	r3, [r3, #5]
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f90c 	bl	80086a0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	791b      	ldrb	r3, [r3, #4]
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f906 	bl	80086a0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800849a:	2302      	movs	r3, #2
 800849c:	73fb      	strb	r3, [r7, #15]
      break;
 800849e:	e00a      	b.n	80084b6 <USBH_HandleControl+0x2de>

    default:
      break;
 80084a0:	bf00      	nop
 80084a2:	e008      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084a4:	bf00      	nop
 80084a6:	e006      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084a8:	bf00      	nop
 80084aa:	e004      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084ac:	bf00      	nop
 80084ae:	e002      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084b0:	bf00      	nop
 80084b2:	e000      	b.n	80084b6 <USBH_HandleControl+0x2de>
      break;
 80084b4:	bf00      	nop
  }

  return status;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af04      	add	r7, sp, #16
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80084ce:	79f9      	ldrb	r1, [r7, #7]
 80084d0:	2300      	movs	r3, #0
 80084d2:	9303      	str	r3, [sp, #12]
 80084d4:	2308      	movs	r3, #8
 80084d6:	9302      	str	r3, [sp, #8]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	2300      	movs	r3, #0
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	2300      	movs	r3, #0
 80084e2:	2200      	movs	r2, #0
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 fb46 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af04      	add	r7, sp, #16
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	4611      	mov	r1, r2
 8008500:	461a      	mov	r2, r3
 8008502:	460b      	mov	r3, r1
 8008504:	80fb      	strh	r3, [r7, #6]
 8008506:	4613      	mov	r3, r2
 8008508:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008518:	7979      	ldrb	r1, [r7, #5]
 800851a:	7e3b      	ldrb	r3, [r7, #24]
 800851c:	9303      	str	r3, [sp, #12]
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	9302      	str	r3, [sp, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	9301      	str	r3, [sp, #4]
 8008526:	2301      	movs	r3, #1
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	2300      	movs	r3, #0
 800852c:	2200      	movs	r2, #0
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fb21 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b088      	sub	sp, #32
 8008542:	af04      	add	r7, sp, #16
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	4611      	mov	r1, r2
 800854a:	461a      	mov	r2, r3
 800854c:	460b      	mov	r3, r1
 800854e:	80fb      	strh	r3, [r7, #6]
 8008550:	4613      	mov	r3, r2
 8008552:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008554:	7979      	ldrb	r1, [r7, #5]
 8008556:	2300      	movs	r3, #0
 8008558:	9303      	str	r3, [sp, #12]
 800855a:	88fb      	ldrh	r3, [r7, #6]
 800855c:	9302      	str	r3, [sp, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	2301      	movs	r3, #1
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2300      	movs	r3, #0
 8008568:	2201      	movs	r2, #1
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 fb03 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008570:	2300      	movs	r3, #0

}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b088      	sub	sp, #32
 800857e:	af04      	add	r7, sp, #16
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	4611      	mov	r1, r2
 8008586:	461a      	mov	r2, r3
 8008588:	460b      	mov	r3, r1
 800858a:	80fb      	strh	r3, [r7, #6]
 800858c:	4613      	mov	r3, r2
 800858e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800859a:	2300      	movs	r3, #0
 800859c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800859e:	7979      	ldrb	r1, [r7, #5]
 80085a0:	7e3b      	ldrb	r3, [r7, #24]
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	88fb      	ldrh	r3, [r7, #6]
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	2301      	movs	r3, #1
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2302      	movs	r3, #2
 80085b2:	2200      	movs	r2, #0
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 fade 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af04      	add	r7, sp, #16
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4611      	mov	r1, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	460b      	mov	r3, r1
 80085d4:	80fb      	strh	r3, [r7, #6]
 80085d6:	4613      	mov	r3, r2
 80085d8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085da:	7979      	ldrb	r1, [r7, #5]
 80085dc:	2300      	movs	r3, #0
 80085de:	9303      	str	r3, [sp, #12]
 80085e0:	88fb      	ldrh	r3, [r7, #6]
 80085e2:	9302      	str	r3, [sp, #8]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	9301      	str	r3, [sp, #4]
 80085e8:	2301      	movs	r3, #1
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	2302      	movs	r3, #2
 80085ee:	2201      	movs	r2, #1
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fac0 	bl	8008b76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af04      	add	r7, sp, #16
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	4608      	mov	r0, r1
 800860a:	4611      	mov	r1, r2
 800860c:	461a      	mov	r2, r3
 800860e:	4603      	mov	r3, r0
 8008610:	70fb      	strb	r3, [r7, #3]
 8008612:	460b      	mov	r3, r1
 8008614:	70bb      	strb	r3, [r7, #2]
 8008616:	4613      	mov	r3, r2
 8008618:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800861a:	7878      	ldrb	r0, [r7, #1]
 800861c:	78ba      	ldrb	r2, [r7, #2]
 800861e:	78f9      	ldrb	r1, [r7, #3]
 8008620:	8b3b      	ldrh	r3, [r7, #24]
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	7d3b      	ldrb	r3, [r7, #20]
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	7c3b      	ldrb	r3, [r7, #16]
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	4603      	mov	r3, r0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 fa53 	bl	8008ada <USBH_LL_OpenPipe>

  return USBH_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3708      	adds	r7, #8
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800864a:	78fb      	ldrb	r3, [r7, #3]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa72 	bl	8008b38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
 8008666:	460b      	mov	r3, r1
 8008668:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f836 	bl	80086dc <USBH_GetFreePipe>
 8008670:	4603      	mov	r3, r0
 8008672:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008674:	89fb      	ldrh	r3, [r7, #14]
 8008676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800867a:	4293      	cmp	r3, r2
 800867c:	d00a      	beq.n	8008694 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800867e:	78fa      	ldrb	r2, [r7, #3]
 8008680:	89fb      	ldrh	r3, [r7, #14]
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	33e0      	adds	r3, #224	; 0xe0
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	440b      	add	r3, r1
 8008692:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008694:	89fb      	ldrh	r3, [r7, #14]
 8008696:	b2db      	uxtb	r3, r3
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80086ac:	78fb      	ldrb	r3, [r7, #3]
 80086ae:	2b0f      	cmp	r3, #15
 80086b0:	d80d      	bhi.n	80086ce <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	33e0      	adds	r3, #224	; 0xe0
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	78fb      	ldrb	r3, [r7, #3]
 80086c0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	33e0      	adds	r3, #224	; 0xe0
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	440b      	add	r3, r1
 80086cc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
 80086ec:	e00f      	b.n	800870e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	33e0      	adds	r3, #224	; 0xe0
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d102      	bne.n	8008708 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	b29b      	uxth	r3, r3
 8008706:	e007      	b.n	8008718 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	3301      	adds	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b0f      	cmp	r3, #15
 8008712:	d9ec      	bls.n	80086ee <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008714:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008728:	2201      	movs	r2, #1
 800872a:	490e      	ldr	r1, [pc, #56]	; (8008764 <MX_USB_HOST_Init+0x40>)
 800872c:	480e      	ldr	r0, [pc, #56]	; (8008768 <MX_USB_HOST_Init+0x44>)
 800872e:	f7fe fba7 	bl	8006e80 <USBH_Init>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d001      	beq.n	800873c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008738:	f7f8 f92c 	bl	8000994 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800873c:	490b      	ldr	r1, [pc, #44]	; (800876c <MX_USB_HOST_Init+0x48>)
 800873e:	480a      	ldr	r0, [pc, #40]	; (8008768 <MX_USB_HOST_Init+0x44>)
 8008740:	f7fe fc2c 	bl	8006f9c <USBH_RegisterClass>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d001      	beq.n	800874e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800874a:	f7f8 f923 	bl	8000994 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800874e:	4806      	ldr	r0, [pc, #24]	; (8008768 <MX_USB_HOST_Init+0x44>)
 8008750:	f7fe fcb0 	bl	80070b4 <USBH_Start>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800875a:	f7f8 f91b 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800875e:	bf00      	nop
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	08008785 	.word	0x08008785
 8008768:	200001f4 	.word	0x200001f4
 800876c:	2000000c 	.word	0x2000000c

08008770 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008774:	4802      	ldr	r0, [pc, #8]	; (8008780 <MX_USB_HOST_Process+0x10>)
 8008776:	f7fe fcad 	bl	80070d4 <USBH_Process>
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200001f4 	.word	0x200001f4

08008784 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	3b01      	subs	r3, #1
 8008794:	2b04      	cmp	r3, #4
 8008796:	d819      	bhi.n	80087cc <USBH_UserProcess+0x48>
 8008798:	a201      	add	r2, pc, #4	; (adr r2, 80087a0 <USBH_UserProcess+0x1c>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	080087cd 	.word	0x080087cd
 80087a4:	080087bd 	.word	0x080087bd
 80087a8:	080087cd 	.word	0x080087cd
 80087ac:	080087c5 	.word	0x080087c5
 80087b0:	080087b5 	.word	0x080087b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80087b4:	4b09      	ldr	r3, [pc, #36]	; (80087dc <USBH_UserProcess+0x58>)
 80087b6:	2203      	movs	r2, #3
 80087b8:	701a      	strb	r2, [r3, #0]
  break;
 80087ba:	e008      	b.n	80087ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80087bc:	4b07      	ldr	r3, [pc, #28]	; (80087dc <USBH_UserProcess+0x58>)
 80087be:	2202      	movs	r2, #2
 80087c0:	701a      	strb	r2, [r3, #0]
  break;
 80087c2:	e004      	b.n	80087ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <USBH_UserProcess+0x58>)
 80087c6:	2201      	movs	r2, #1
 80087c8:	701a      	strb	r2, [r3, #0]
  break;
 80087ca:	e000      	b.n	80087ce <USBH_UserProcess+0x4a>

  default:
  break;
 80087cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80087ce:	bf00      	nop
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	200005cc 	.word	0x200005cc

080087e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	; 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e8:	f107 0314 	add.w	r3, r7, #20
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	609a      	str	r2, [r3, #8]
 80087f4:	60da      	str	r2, [r3, #12]
 80087f6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008800:	d147      	bne.n	8008892 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008802:	2300      	movs	r3, #0
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	4b25      	ldr	r3, [pc, #148]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	4a24      	ldr	r2, [pc, #144]	; (800889c <HAL_HCD_MspInit+0xbc>)
 800880c:	f043 0301 	orr.w	r3, r3, #1
 8008810:	6313      	str	r3, [r2, #48]	; 0x30
 8008812:	4b22      	ldr	r3, [pc, #136]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	613b      	str	r3, [r7, #16]
 800881c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800881e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008824:	2300      	movs	r3, #0
 8008826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008828:	2300      	movs	r3, #0
 800882a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800882c:	f107 0314 	add.w	r3, r7, #20
 8008830:	4619      	mov	r1, r3
 8008832:	481b      	ldr	r0, [pc, #108]	; (80088a0 <HAL_HCD_MspInit+0xc0>)
 8008834:	f7f8 fd26 	bl	8001284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008838:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800883c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800883e:	2302      	movs	r3, #2
 8008840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008846:	2300      	movs	r3, #0
 8008848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800884a:	230a      	movs	r3, #10
 800884c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800884e:	f107 0314 	add.w	r3, r7, #20
 8008852:	4619      	mov	r1, r3
 8008854:	4812      	ldr	r0, [pc, #72]	; (80088a0 <HAL_HCD_MspInit+0xc0>)
 8008856:	f7f8 fd15 	bl	8001284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800885a:	4b10      	ldr	r3, [pc, #64]	; (800889c <HAL_HCD_MspInit+0xbc>)
 800885c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885e:	4a0f      	ldr	r2, [pc, #60]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008864:	6353      	str	r3, [r2, #52]	; 0x34
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	4b0c      	ldr	r3, [pc, #48]	; (800889c <HAL_HCD_MspInit+0xbc>)
 800886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886e:	4a0b      	ldr	r2, [pc, #44]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008874:	6453      	str	r3, [r2, #68]	; 0x44
 8008876:	4b09      	ldr	r3, [pc, #36]	; (800889c <HAL_HCD_MspInit+0xbc>)
 8008878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800887a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800887e:	60fb      	str	r3, [r7, #12]
 8008880:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008882:	2200      	movs	r2, #0
 8008884:	2100      	movs	r1, #0
 8008886:	2043      	movs	r0, #67	; 0x43
 8008888:	f7f8 fc33 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800888c:	2043      	movs	r0, #67	; 0x43
 800888e:	f7f8 fc4c 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008892:	bf00      	nop
 8008894:	3728      	adds	r7, #40	; 0x28
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	40023800 	.word	0x40023800
 80088a0:	40020000 	.word	0x40020000

080088a4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe ffed 	bl	8007892 <USBH_LL_IncTimer>
}
 80088b8:	bf00      	nop
 80088ba:	3708      	adds	r7, #8
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff f825 	bl	800791e <USBH_LL_Connect>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff f82e 	bl	800794c <USBH_LL_Disconnect>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	70fb      	strb	r3, [r7, #3]
 8008904:	4613      	mov	r3, r2
 8008906:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe ffdf 	bl	80078e6 <USBH_LL_PortEnabled>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe ffdf 	bl	8007902 <USBH_LL_PortDisabled>
}
 8008944:	bf00      	nop
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800895a:	2b01      	cmp	r3, #1
 800895c:	d12a      	bne.n	80089b4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800895e:	4a18      	ldr	r2, [pc, #96]	; (80089c0 <USBH_LL_Init+0x74>)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <USBH_LL_Init+0x74>)
 800896a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800896e:	4b14      	ldr	r3, [pc, #80]	; (80089c0 <USBH_LL_Init+0x74>)
 8008970:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008974:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008976:	4b12      	ldr	r3, [pc, #72]	; (80089c0 <USBH_LL_Init+0x74>)
 8008978:	2208      	movs	r2, #8
 800897a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800897c:	4b10      	ldr	r3, [pc, #64]	; (80089c0 <USBH_LL_Init+0x74>)
 800897e:	2201      	movs	r2, #1
 8008980:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008982:	4b0f      	ldr	r3, [pc, #60]	; (80089c0 <USBH_LL_Init+0x74>)
 8008984:	2200      	movs	r2, #0
 8008986:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008988:	4b0d      	ldr	r3, [pc, #52]	; (80089c0 <USBH_LL_Init+0x74>)
 800898a:	2202      	movs	r2, #2
 800898c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800898e:	4b0c      	ldr	r3, [pc, #48]	; (80089c0 <USBH_LL_Init+0x74>)
 8008990:	2200      	movs	r2, #0
 8008992:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008994:	480a      	ldr	r0, [pc, #40]	; (80089c0 <USBH_LL_Init+0x74>)
 8008996:	f7f8 fe2a 	bl	80015ee <HAL_HCD_Init>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80089a0:	f7f7 fff8 	bl	8000994 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80089a4:	4806      	ldr	r0, [pc, #24]	; (80089c0 <USBH_LL_Init+0x74>)
 80089a6:	f7f9 fa0e 	bl	8001dc6 <HAL_HCD_GetCurrentFrame>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4619      	mov	r1, r3
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fe ff60 	bl	8007874 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	200005d0 	.word	0x200005d0

080089c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f9 f97d 	bl	8001cda <HAL_HCD_Start>
 80089e0:	4603      	mov	r3, r0
 80089e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089e4:	7bfb      	ldrb	r3, [r7, #15]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 f95c 	bl	8008ca4 <USBH_Get_USB_Status>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7f9 f985 	bl	8001d20 <HAL_HCD_Stop>
 8008a16:	4603      	mov	r3, r0
 8008a18:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a1a:	7bfb      	ldrb	r3, [r7, #15]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f000 f941 	bl	8008ca4 <USBH_Get_USB_Status>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a26:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7f9 f9cd 	bl	8001de2 <HAL_HCD_GetCurrentSpeed>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d00c      	beq.n	8008a68 <USBH_LL_GetSpeed+0x38>
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d80d      	bhi.n	8008a6e <USBH_LL_GetSpeed+0x3e>
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d002      	beq.n	8008a5c <USBH_LL_GetSpeed+0x2c>
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d003      	beq.n	8008a62 <USBH_LL_GetSpeed+0x32>
 8008a5a:	e008      	b.n	8008a6e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a60:	e008      	b.n	8008a74 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008a62:	2301      	movs	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]
    break;
 8008a66:	e005      	b.n	8008a74 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6c:	e002      	b.n	8008a74 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	73fb      	strb	r3, [r7, #15]
    break;
 8008a72:	bf00      	nop
  }
  return  speed;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7f9 f960 	bl	8001d5a <HAL_HCD_ResetPort>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f8ff 	bl	8008ca4 <USBH_Get_USB_Status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f9 f967 	bl	8001d9e <HAL_HCD_HC_GetXferCount>
 8008ad0:	4603      	mov	r3, r0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ada:	b590      	push	{r4, r7, lr}
 8008adc:	b089      	sub	sp, #36	; 0x24
 8008ade:	af04      	add	r7, sp, #16
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	4608      	mov	r0, r1
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	4603      	mov	r3, r0
 8008aea:	70fb      	strb	r3, [r7, #3]
 8008aec:	460b      	mov	r3, r1
 8008aee:	70bb      	strb	r3, [r7, #2]
 8008af0:	4613      	mov	r3, r2
 8008af2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008af8:	2300      	movs	r3, #0
 8008afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b02:	787c      	ldrb	r4, [r7, #1]
 8008b04:	78ba      	ldrb	r2, [r7, #2]
 8008b06:	78f9      	ldrb	r1, [r7, #3]
 8008b08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008b0a:	9302      	str	r3, [sp, #8]
 8008b0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008b10:	9301      	str	r3, [sp, #4]
 8008b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	4623      	mov	r3, r4
 8008b1a:	f7f8 fdca 	bl	80016b2 <HAL_HCD_HC_Init>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 f8bd 	bl	8008ca4 <USBH_Get_USB_Status>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd90      	pop	{r4, r7, pc}

08008b38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f8 fe3a 	bl	80017d0 <HAL_HCD_HC_Halt>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f89e 	bl	8008ca4 <USBH_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008b76:	b590      	push	{r4, r7, lr}
 8008b78:	b089      	sub	sp, #36	; 0x24
 8008b7a:	af04      	add	r7, sp, #16
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	461a      	mov	r2, r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	70fb      	strb	r3, [r7, #3]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70bb      	strb	r3, [r7, #2]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008b9e:	787c      	ldrb	r4, [r7, #1]
 8008ba0:	78ba      	ldrb	r2, [r7, #2]
 8008ba2:	78f9      	ldrb	r1, [r7, #3]
 8008ba4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ba8:	9303      	str	r3, [sp, #12]
 8008baa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008bac:	9302      	str	r3, [sp, #8]
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	9301      	str	r3, [sp, #4]
 8008bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4623      	mov	r3, r4
 8008bba:	f7f8 fe2d 	bl	8001818 <HAL_HCD_HC_SubmitRequest>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f86d 	bl	8008ca4 <USBH_Get_USB_Status>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd90      	pop	{r4, r7, pc}

08008bd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	4611      	mov	r1, r2
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f9 f8c1 	bl	8001d76 <HAL_HCD_HC_GetURBState>
 8008bf4:	4603      	mov	r3, r0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d103      	bne.n	8008c1c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c14:	78fb      	ldrb	r3, [r7, #3]
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 f870 	bl	8008cfc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c1c:	20c8      	movs	r0, #200	; 0xc8
 8008c1e:	f7f8 f969 	bl	8000ef4 <HAL_Delay>
  return USBH_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	70fb      	strb	r3, [r7, #3]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008c42:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c44:	78fb      	ldrb	r3, [r7, #3]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	212c      	movs	r1, #44	; 0x2c
 8008c4a:	fb01 f303 	mul.w	r3, r1, r3
 8008c4e:	4413      	add	r3, r2
 8008c50:	333b      	adds	r3, #59	; 0x3b
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d009      	beq.n	8008c6c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	212c      	movs	r1, #44	; 0x2c
 8008c5e:	fb01 f303 	mul.w	r3, r1, r3
 8008c62:	4413      	add	r3, r2
 8008c64:	3354      	adds	r3, #84	; 0x54
 8008c66:	78ba      	ldrb	r2, [r7, #2]
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e008      	b.n	8008c7e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	212c      	movs	r1, #44	; 0x2c
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	3355      	adds	r3, #85	; 0x55
 8008c7a:	78ba      	ldrb	r2, [r7, #2]
 8008c7c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3714      	adds	r7, #20
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7f8 f92d 	bl	8000ef4 <HAL_Delay>
}
 8008c9a:	bf00      	nop
 8008c9c:	3708      	adds	r7, #8
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
	...

08008ca4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	d817      	bhi.n	8008ce8 <USBH_Get_USB_Status+0x44>
 8008cb8:	a201      	add	r2, pc, #4	; (adr r2, 8008cc0 <USBH_Get_USB_Status+0x1c>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008cd1 	.word	0x08008cd1
 8008cc4:	08008cd7 	.word	0x08008cd7
 8008cc8:	08008cdd 	.word	0x08008cdd
 8008ccc:	08008ce3 	.word	0x08008ce3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cd4:	e00b      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	73fb      	strb	r3, [r7, #15]
    break;
 8008cda:	e008      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce0:	e005      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008ce2:	2302      	movs	r3, #2
 8008ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ce6:	e002      	b.n	8008cee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ce8:	2302      	movs	r3, #2
 8008cea:	73fb      	strb	r3, [r7, #15]
    break;
 8008cec:	bf00      	nop
  }
  return usb_status;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d0a:	79fb      	ldrb	r3, [r7, #7]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d10:	2300      	movs	r3, #0
 8008d12:	73fb      	strb	r3, [r7, #15]
 8008d14:	e001      	b.n	8008d1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d16:	2301      	movs	r3, #1
 8008d18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	2101      	movs	r1, #1
 8008d20:	4803      	ldr	r0, [pc, #12]	; (8008d30 <MX_DriverVbusFS+0x34>)
 8008d22:	f7f8 fc4b 	bl	80015bc <HAL_GPIO_WritePin>
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	40020800 	.word	0x40020800

08008d34 <__errno>:
 8008d34:	4b01      	ldr	r3, [pc, #4]	; (8008d3c <__errno+0x8>)
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	2000002c 	.word	0x2000002c

08008d40 <__libc_init_array>:
 8008d40:	b570      	push	{r4, r5, r6, lr}
 8008d42:	4d0d      	ldr	r5, [pc, #52]	; (8008d78 <__libc_init_array+0x38>)
 8008d44:	4c0d      	ldr	r4, [pc, #52]	; (8008d7c <__libc_init_array+0x3c>)
 8008d46:	1b64      	subs	r4, r4, r5
 8008d48:	10a4      	asrs	r4, r4, #2
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	42a6      	cmp	r6, r4
 8008d4e:	d109      	bne.n	8008d64 <__libc_init_array+0x24>
 8008d50:	4d0b      	ldr	r5, [pc, #44]	; (8008d80 <__libc_init_array+0x40>)
 8008d52:	4c0c      	ldr	r4, [pc, #48]	; (8008d84 <__libc_init_array+0x44>)
 8008d54:	f000 f92e 	bl	8008fb4 <_init>
 8008d58:	1b64      	subs	r4, r4, r5
 8008d5a:	10a4      	asrs	r4, r4, #2
 8008d5c:	2600      	movs	r6, #0
 8008d5e:	42a6      	cmp	r6, r4
 8008d60:	d105      	bne.n	8008d6e <__libc_init_array+0x2e>
 8008d62:	bd70      	pop	{r4, r5, r6, pc}
 8008d64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d68:	4798      	blx	r3
 8008d6a:	3601      	adds	r6, #1
 8008d6c:	e7ee      	b.n	8008d4c <__libc_init_array+0xc>
 8008d6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d72:	4798      	blx	r3
 8008d74:	3601      	adds	r6, #1
 8008d76:	e7f2      	b.n	8008d5e <__libc_init_array+0x1e>
 8008d78:	08008ff0 	.word	0x08008ff0
 8008d7c:	08008ff0 	.word	0x08008ff0
 8008d80:	08008ff0 	.word	0x08008ff0
 8008d84:	08008ff4 	.word	0x08008ff4

08008d88 <malloc>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <malloc+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f000 b87f 	b.w	8008e90 <_malloc_r>
 8008d92:	bf00      	nop
 8008d94:	2000002c 	.word	0x2000002c

08008d98 <free>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <free+0xc>)
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	f000 b80b 	b.w	8008db8 <_free_r>
 8008da2:	bf00      	nop
 8008da4:	2000002c 	.word	0x2000002c

08008da8 <memset>:
 8008da8:	4402      	add	r2, r0
 8008daa:	4603      	mov	r3, r0
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d100      	bne.n	8008db2 <memset+0xa>
 8008db0:	4770      	bx	lr
 8008db2:	f803 1b01 	strb.w	r1, [r3], #1
 8008db6:	e7f9      	b.n	8008dac <memset+0x4>

08008db8 <_free_r>:
 8008db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008dba:	2900      	cmp	r1, #0
 8008dbc:	d044      	beq.n	8008e48 <_free_r+0x90>
 8008dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc2:	9001      	str	r0, [sp, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8008dca:	bfb8      	it	lt
 8008dcc:	18e4      	addlt	r4, r4, r3
 8008dce:	f000 f8e3 	bl	8008f98 <__malloc_lock>
 8008dd2:	4a1e      	ldr	r2, [pc, #120]	; (8008e4c <_free_r+0x94>)
 8008dd4:	9801      	ldr	r0, [sp, #4]
 8008dd6:	6813      	ldr	r3, [r2, #0]
 8008dd8:	b933      	cbnz	r3, 8008de8 <_free_r+0x30>
 8008dda:	6063      	str	r3, [r4, #4]
 8008ddc:	6014      	str	r4, [r2, #0]
 8008dde:	b003      	add	sp, #12
 8008de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de4:	f000 b8de 	b.w	8008fa4 <__malloc_unlock>
 8008de8:	42a3      	cmp	r3, r4
 8008dea:	d908      	bls.n	8008dfe <_free_r+0x46>
 8008dec:	6825      	ldr	r5, [r4, #0]
 8008dee:	1961      	adds	r1, r4, r5
 8008df0:	428b      	cmp	r3, r1
 8008df2:	bf01      	itttt	eq
 8008df4:	6819      	ldreq	r1, [r3, #0]
 8008df6:	685b      	ldreq	r3, [r3, #4]
 8008df8:	1949      	addeq	r1, r1, r5
 8008dfa:	6021      	streq	r1, [r4, #0]
 8008dfc:	e7ed      	b.n	8008dda <_free_r+0x22>
 8008dfe:	461a      	mov	r2, r3
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	b10b      	cbz	r3, 8008e08 <_free_r+0x50>
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d9fa      	bls.n	8008dfe <_free_r+0x46>
 8008e08:	6811      	ldr	r1, [r2, #0]
 8008e0a:	1855      	adds	r5, r2, r1
 8008e0c:	42a5      	cmp	r5, r4
 8008e0e:	d10b      	bne.n	8008e28 <_free_r+0x70>
 8008e10:	6824      	ldr	r4, [r4, #0]
 8008e12:	4421      	add	r1, r4
 8008e14:	1854      	adds	r4, r2, r1
 8008e16:	42a3      	cmp	r3, r4
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	d1e0      	bne.n	8008dde <_free_r+0x26>
 8008e1c:	681c      	ldr	r4, [r3, #0]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	6053      	str	r3, [r2, #4]
 8008e22:	4421      	add	r1, r4
 8008e24:	6011      	str	r1, [r2, #0]
 8008e26:	e7da      	b.n	8008dde <_free_r+0x26>
 8008e28:	d902      	bls.n	8008e30 <_free_r+0x78>
 8008e2a:	230c      	movs	r3, #12
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	e7d6      	b.n	8008dde <_free_r+0x26>
 8008e30:	6825      	ldr	r5, [r4, #0]
 8008e32:	1961      	adds	r1, r4, r5
 8008e34:	428b      	cmp	r3, r1
 8008e36:	bf04      	itt	eq
 8008e38:	6819      	ldreq	r1, [r3, #0]
 8008e3a:	685b      	ldreq	r3, [r3, #4]
 8008e3c:	6063      	str	r3, [r4, #4]
 8008e3e:	bf04      	itt	eq
 8008e40:	1949      	addeq	r1, r1, r5
 8008e42:	6021      	streq	r1, [r4, #0]
 8008e44:	6054      	str	r4, [r2, #4]
 8008e46:	e7ca      	b.n	8008dde <_free_r+0x26>
 8008e48:	b003      	add	sp, #12
 8008e4a:	bd30      	pop	{r4, r5, pc}
 8008e4c:	200008d4 	.word	0x200008d4

08008e50 <sbrk_aligned>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	4e0e      	ldr	r6, [pc, #56]	; (8008e8c <sbrk_aligned+0x3c>)
 8008e54:	460c      	mov	r4, r1
 8008e56:	6831      	ldr	r1, [r6, #0]
 8008e58:	4605      	mov	r5, r0
 8008e5a:	b911      	cbnz	r1, 8008e62 <sbrk_aligned+0x12>
 8008e5c:	f000 f88c 	bl	8008f78 <_sbrk_r>
 8008e60:	6030      	str	r0, [r6, #0]
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f000 f887 	bl	8008f78 <_sbrk_r>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d00a      	beq.n	8008e84 <sbrk_aligned+0x34>
 8008e6e:	1cc4      	adds	r4, r0, #3
 8008e70:	f024 0403 	bic.w	r4, r4, #3
 8008e74:	42a0      	cmp	r0, r4
 8008e76:	d007      	beq.n	8008e88 <sbrk_aligned+0x38>
 8008e78:	1a21      	subs	r1, r4, r0
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f000 f87c 	bl	8008f78 <_sbrk_r>
 8008e80:	3001      	adds	r0, #1
 8008e82:	d101      	bne.n	8008e88 <sbrk_aligned+0x38>
 8008e84:	f04f 34ff 	mov.w	r4, #4294967295
 8008e88:	4620      	mov	r0, r4
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	200008d8 	.word	0x200008d8

08008e90 <_malloc_r>:
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e94:	1ccd      	adds	r5, r1, #3
 8008e96:	f025 0503 	bic.w	r5, r5, #3
 8008e9a:	3508      	adds	r5, #8
 8008e9c:	2d0c      	cmp	r5, #12
 8008e9e:	bf38      	it	cc
 8008ea0:	250c      	movcc	r5, #12
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	4607      	mov	r7, r0
 8008ea6:	db01      	blt.n	8008eac <_malloc_r+0x1c>
 8008ea8:	42a9      	cmp	r1, r5
 8008eaa:	d905      	bls.n	8008eb8 <_malloc_r+0x28>
 8008eac:	230c      	movs	r3, #12
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	4e2e      	ldr	r6, [pc, #184]	; (8008f74 <_malloc_r+0xe4>)
 8008eba:	f000 f86d 	bl	8008f98 <__malloc_lock>
 8008ebe:	6833      	ldr	r3, [r6, #0]
 8008ec0:	461c      	mov	r4, r3
 8008ec2:	bb34      	cbnz	r4, 8008f12 <_malloc_r+0x82>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7ff ffc2 	bl	8008e50 <sbrk_aligned>
 8008ecc:	1c43      	adds	r3, r0, #1
 8008ece:	4604      	mov	r4, r0
 8008ed0:	d14d      	bne.n	8008f6e <_malloc_r+0xde>
 8008ed2:	6834      	ldr	r4, [r6, #0]
 8008ed4:	4626      	mov	r6, r4
 8008ed6:	2e00      	cmp	r6, #0
 8008ed8:	d140      	bne.n	8008f5c <_malloc_r+0xcc>
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	4631      	mov	r1, r6
 8008ede:	4638      	mov	r0, r7
 8008ee0:	eb04 0803 	add.w	r8, r4, r3
 8008ee4:	f000 f848 	bl	8008f78 <_sbrk_r>
 8008ee8:	4580      	cmp	r8, r0
 8008eea:	d13a      	bne.n	8008f62 <_malloc_r+0xd2>
 8008eec:	6821      	ldr	r1, [r4, #0]
 8008eee:	3503      	adds	r5, #3
 8008ef0:	1a6d      	subs	r5, r5, r1
 8008ef2:	f025 0503 	bic.w	r5, r5, #3
 8008ef6:	3508      	adds	r5, #8
 8008ef8:	2d0c      	cmp	r5, #12
 8008efa:	bf38      	it	cc
 8008efc:	250c      	movcc	r5, #12
 8008efe:	4629      	mov	r1, r5
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ffa5 	bl	8008e50 <sbrk_aligned>
 8008f06:	3001      	adds	r0, #1
 8008f08:	d02b      	beq.n	8008f62 <_malloc_r+0xd2>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	442b      	add	r3, r5
 8008f0e:	6023      	str	r3, [r4, #0]
 8008f10:	e00e      	b.n	8008f30 <_malloc_r+0xa0>
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	1b52      	subs	r2, r2, r5
 8008f16:	d41e      	bmi.n	8008f56 <_malloc_r+0xc6>
 8008f18:	2a0b      	cmp	r2, #11
 8008f1a:	d916      	bls.n	8008f4a <_malloc_r+0xba>
 8008f1c:	1961      	adds	r1, r4, r5
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	6025      	str	r5, [r4, #0]
 8008f22:	bf18      	it	ne
 8008f24:	6059      	strne	r1, [r3, #4]
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	bf08      	it	eq
 8008f2a:	6031      	streq	r1, [r6, #0]
 8008f2c:	5162      	str	r2, [r4, r5]
 8008f2e:	604b      	str	r3, [r1, #4]
 8008f30:	4638      	mov	r0, r7
 8008f32:	f104 060b 	add.w	r6, r4, #11
 8008f36:	f000 f835 	bl	8008fa4 <__malloc_unlock>
 8008f3a:	f026 0607 	bic.w	r6, r6, #7
 8008f3e:	1d23      	adds	r3, r4, #4
 8008f40:	1af2      	subs	r2, r6, r3
 8008f42:	d0b6      	beq.n	8008eb2 <_malloc_r+0x22>
 8008f44:	1b9b      	subs	r3, r3, r6
 8008f46:	50a3      	str	r3, [r4, r2]
 8008f48:	e7b3      	b.n	8008eb2 <_malloc_r+0x22>
 8008f4a:	6862      	ldr	r2, [r4, #4]
 8008f4c:	42a3      	cmp	r3, r4
 8008f4e:	bf0c      	ite	eq
 8008f50:	6032      	streq	r2, [r6, #0]
 8008f52:	605a      	strne	r2, [r3, #4]
 8008f54:	e7ec      	b.n	8008f30 <_malloc_r+0xa0>
 8008f56:	4623      	mov	r3, r4
 8008f58:	6864      	ldr	r4, [r4, #4]
 8008f5a:	e7b2      	b.n	8008ec2 <_malloc_r+0x32>
 8008f5c:	4634      	mov	r4, r6
 8008f5e:	6876      	ldr	r6, [r6, #4]
 8008f60:	e7b9      	b.n	8008ed6 <_malloc_r+0x46>
 8008f62:	230c      	movs	r3, #12
 8008f64:	603b      	str	r3, [r7, #0]
 8008f66:	4638      	mov	r0, r7
 8008f68:	f000 f81c 	bl	8008fa4 <__malloc_unlock>
 8008f6c:	e7a1      	b.n	8008eb2 <_malloc_r+0x22>
 8008f6e:	6025      	str	r5, [r4, #0]
 8008f70:	e7de      	b.n	8008f30 <_malloc_r+0xa0>
 8008f72:	bf00      	nop
 8008f74:	200008d4 	.word	0x200008d4

08008f78 <_sbrk_r>:
 8008f78:	b538      	push	{r3, r4, r5, lr}
 8008f7a:	4d06      	ldr	r5, [pc, #24]	; (8008f94 <_sbrk_r+0x1c>)
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	4604      	mov	r4, r0
 8008f80:	4608      	mov	r0, r1
 8008f82:	602b      	str	r3, [r5, #0]
 8008f84:	f7f7 fed2 	bl	8000d2c <_sbrk>
 8008f88:	1c43      	adds	r3, r0, #1
 8008f8a:	d102      	bne.n	8008f92 <_sbrk_r+0x1a>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b103      	cbz	r3, 8008f92 <_sbrk_r+0x1a>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	bd38      	pop	{r3, r4, r5, pc}
 8008f94:	200008dc 	.word	0x200008dc

08008f98 <__malloc_lock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_lock+0x8>)
 8008f9a:	f000 b809 	b.w	8008fb0 <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	200008e0 	.word	0x200008e0

08008fa4 <__malloc_unlock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_unlock+0x8>)
 8008fa6:	f000 b804 	b.w	8008fb2 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	200008e0 	.word	0x200008e0

08008fb0 <__retarget_lock_acquire_recursive>:
 8008fb0:	4770      	bx	lr

08008fb2 <__retarget_lock_release_recursive>:
 8008fb2:	4770      	bx	lr

08008fb4 <_init>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	bf00      	nop
 8008fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fba:	bc08      	pop	{r3}
 8008fbc:	469e      	mov	lr, r3
 8008fbe:	4770      	bx	lr

08008fc0 <_fini>:
 8008fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc2:	bf00      	nop
 8008fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc6:	bc08      	pop	{r3}
 8008fc8:	469e      	mov	lr, r3
 8008fca:	4770      	bx	lr
