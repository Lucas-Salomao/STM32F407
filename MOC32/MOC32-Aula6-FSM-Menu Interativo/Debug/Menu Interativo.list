
Menu Interativo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b6c  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034c4  080034c4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034c4  080034c4  000134c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c8  080034c8  000134c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080034cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000008c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000a4  200000a4  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e16  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181e  00000000  00000000  00027e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000750  00000000  00000000  00029680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021510  00000000  00000000  00029dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008226  00000000  00000000  0004b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7016  00000000  00000000  00053506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a51c  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000670  00000000  00000000  0011a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c28  00000000  00000000  0011abe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002938 	.word	0x08002938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08002938 	.word	0x08002938

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80004d2:	4b52      	ldr	r3, [pc, #328]	; (800061c <ili9341_Init+0x150>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d115      	bne.n	800050a <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80004de:	4b4f      	ldr	r3, [pc, #316]	; (800061c <ili9341_Init+0x150>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b4c      	ldr	r3, [pc, #304]	; (800061c <ili9341_Init+0x150>)
 80004ea:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80004ec:	4b4b      	ldr	r3, [pc, #300]	; (800061c <ili9341_Init+0x150>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d101      	bne.n	80004fc <ili9341_Init+0x30>
      LCD_IO_Init();
 80004f8:	f000 fb60 	bl	8000bbc <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80004fc:	4b47      	ldr	r3, [pc, #284]	; (800061c <ili9341_Init+0x150>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f043 0302 	orr.w	r3, r3, #2
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <ili9341_Init+0x150>)
 8000508:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f000 fb4a 	bl	8000ba4 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fb7d 	bl	8000c10 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f000 fb44 	bl	8000ba4 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 800051c:	2203      	movs	r2, #3
 800051e:	4940      	ldr	r1, [pc, #256]	; (8000620 <ili9341_Init+0x154>)
 8000520:	20ef      	movs	r0, #239	; 0xef
 8000522:	f000 fbd3 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000526:	2203      	movs	r2, #3
 8000528:	493e      	ldr	r1, [pc, #248]	; (8000624 <ili9341_Init+0x158>)
 800052a:	20cf      	movs	r0, #207	; 0xcf
 800052c:	f000 fbce 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8000530:	2204      	movs	r2, #4
 8000532:	493d      	ldr	r1, [pc, #244]	; (8000628 <ili9341_Init+0x15c>)
 8000534:	20ed      	movs	r0, #237	; 0xed
 8000536:	f000 fbc9 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800053a:	2203      	movs	r2, #3
 800053c:	493b      	ldr	r1, [pc, #236]	; (800062c <ili9341_Init+0x160>)
 800053e:	20e8      	movs	r0, #232	; 0xe8
 8000540:	f000 fbc4 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8000544:	2205      	movs	r2, #5
 8000546:	493a      	ldr	r1, [pc, #232]	; (8000630 <ili9341_Init+0x164>)
 8000548:	20cb      	movs	r0, #203	; 0xcb
 800054a:	f000 fbbf 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 800054e:	2201      	movs	r2, #1
 8000550:	4938      	ldr	r1, [pc, #224]	; (8000634 <ili9341_Init+0x168>)
 8000552:	20f7      	movs	r0, #247	; 0xf7
 8000554:	f000 fbba 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000558:	2202      	movs	r2, #2
 800055a:	4937      	ldr	r1, [pc, #220]	; (8000638 <ili9341_Init+0x16c>)
 800055c:	20ea      	movs	r0, #234	; 0xea
 800055e:	f000 fbb5 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8000562:	2201      	movs	r2, #1
 8000564:	4935      	ldr	r1, [pc, #212]	; (800063c <ili9341_Init+0x170>)
 8000566:	20c0      	movs	r0, #192	; 0xc0
 8000568:	f000 fbb0 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 800056c:	2201      	movs	r2, #1
 800056e:	4934      	ldr	r1, [pc, #208]	; (8000640 <ili9341_Init+0x174>)
 8000570:	20c1      	movs	r0, #193	; 0xc1
 8000572:	f000 fbab 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000576:	2202      	movs	r2, #2
 8000578:	4932      	ldr	r1, [pc, #200]	; (8000644 <ili9341_Init+0x178>)
 800057a:	20c5      	movs	r0, #197	; 0xc5
 800057c:	f000 fba6 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4931      	ldr	r1, [pc, #196]	; (8000648 <ili9341_Init+0x17c>)
 8000584:	20c7      	movs	r0, #199	; 0xc7
 8000586:	f000 fba1 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 800058a:	2201      	movs	r2, #1
 800058c:	492f      	ldr	r1, [pc, #188]	; (800064c <ili9341_Init+0x180>)
 800058e:	2037      	movs	r0, #55	; 0x37
 8000590:	f000 fb9c 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000594:	2201      	movs	r2, #1
 8000596:	492e      	ldr	r1, [pc, #184]	; (8000650 <ili9341_Init+0x184>)
 8000598:	203a      	movs	r0, #58	; 0x3a
 800059a:	f000 fb97 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 800059e:	2202      	movs	r2, #2
 80005a0:	492c      	ldr	r1, [pc, #176]	; (8000654 <ili9341_Init+0x188>)
 80005a2:	20b1      	movs	r0, #177	; 0xb1
 80005a4:	f000 fb92 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80005a8:	2203      	movs	r2, #3
 80005aa:	492b      	ldr	r1, [pc, #172]	; (8000658 <ili9341_Init+0x18c>)
 80005ac:	20b6      	movs	r0, #182	; 0xb6
 80005ae:	f000 fb8d 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80005b2:	2201      	movs	r2, #1
 80005b4:	4925      	ldr	r1, [pc, #148]	; (800064c <ili9341_Init+0x180>)
 80005b6:	20f2      	movs	r0, #242	; 0xf2
 80005b8:	f000 fb88 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80005bc:	2201      	movs	r2, #1
 80005be:	4927      	ldr	r1, [pc, #156]	; (800065c <ili9341_Init+0x190>)
 80005c0:	2026      	movs	r0, #38	; 0x26
 80005c2:	f000 fb83 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80005c6:	220f      	movs	r2, #15
 80005c8:	4925      	ldr	r1, [pc, #148]	; (8000660 <ili9341_Init+0x194>)
 80005ca:	20e0      	movs	r0, #224	; 0xe0
 80005cc:	f000 fb7e 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80005d0:	220f      	movs	r2, #15
 80005d2:	4924      	ldr	r1, [pc, #144]	; (8000664 <ili9341_Init+0x198>)
 80005d4:	20e1      	movs	r0, #225	; 0xe1
 80005d6:	f000 fb79 	bl	8000ccc <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80005da:	2036      	movs	r0, #54	; 0x36
 80005dc:	f000 fb18 	bl	8000c10 <LCD_IO_WriteCmd8>
 80005e0:	2048      	movs	r0, #72	; 0x48
 80005e2:	f000 fb25 	bl	8000c30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80005e6:	2011      	movs	r0, #17
 80005e8:	f000 fb12 	bl	8000c10 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 fad9 	bl	8000ba4 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, COLOR_BLUE);
 80005f2:	231f      	movs	r3, #31
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80005fa:	22f0      	movs	r2, #240	; 0xf0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f87c 	bl	80006fc <ili9341_FillRect>
  LCD_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f000 facd 	bl	8000ba4 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 800060a:	2029      	movs	r0, #41	; 0x29
 800060c:	f000 fb00 	bl	8000c10 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fac7 	bl	8000ba4 <LCD_Delay>
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000003a 	.word	0x2000003a
 8000620:	08002950 	.word	0x08002950
 8000624:	08002954 	.word	0x08002954
 8000628:	08002958 	.word	0x08002958
 800062c:	08002960 	.word	0x08002960
 8000630:	08002964 	.word	0x08002964
 8000634:	0800296c 	.word	0x0800296c
 8000638:	08002970 	.word	0x08002970
 800063c:	08002974 	.word	0x08002974
 8000640:	08002978 	.word	0x08002978
 8000644:	0800297c 	.word	0x0800297c
 8000648:	08002980 	.word	0x08002980
 800064c:	08002984 	.word	0x08002984
 8000650:	08002988 	.word	0x08002988
 8000654:	0800298c 	.word	0x0800298c
 8000658:	08002990 	.word	0x08002990
 800065c:	08002994 	.word	0x08002994
 8000660:	08002998 	.word	0x08002998
 8000664:	080029a8 	.word	0x080029a8

08000668 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]
 8000672:	460b      	mov	r3, r1
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	4613      	mov	r3, r2
 8000678:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 800067a:	202a      	movs	r0, #42	; 0x2a
 800067c:	f000 fac8 	bl	8000c10 <LCD_IO_WriteCmd8>
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fad1 	bl	8000c30 <LCD_IO_WriteData8>
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 facc 	bl	8000c30 <LCD_IO_WriteData8>
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fac5 	bl	8000c30 <LCD_IO_WriteData8>
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fac0 	bl	8000c30 <LCD_IO_WriteData8>
 80006b0:	202b      	movs	r0, #43	; 0x2b
 80006b2:	f000 faad 	bl	8000c10 <LCD_IO_WriteCmd8>
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fab6 	bl	8000c30 <LCD_IO_WriteData8>
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fab1 	bl	8000c30 <LCD_IO_WriteData8>
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 faaa 	bl	8000c30 <LCD_IO_WriteData8>
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 faa5 	bl	8000c30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80006e6:	202c      	movs	r0, #44	; 0x2c
 80006e8:	f000 fa92 	bl	8000c10 <LCD_IO_WriteCmd8>
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 faae 	bl	8000c50 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4604      	mov	r4, r0
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4623      	mov	r3, r4
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	4603      	mov	r3, r0
 8000710:	80bb      	strh	r3, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	807b      	strh	r3, [r7, #2]
 8000716:	4613      	mov	r3, r2
 8000718:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 800071a:	202a      	movs	r0, #42	; 0x2a
 800071c:	f000 fa78 	bl	8000c10 <LCD_IO_WriteCmd8>
 8000720:	88fb      	ldrh	r3, [r7, #6]
 8000722:	0a1b      	lsrs	r3, r3, #8
 8000724:	b29b      	uxth	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fa81 	bl	8000c30 <LCD_IO_WriteData8>
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fa7c 	bl	8000c30 <LCD_IO_WriteData8>
 8000738:	88fa      	ldrh	r2, [r7, #6]
 800073a:	887b      	ldrh	r3, [r7, #2]
 800073c:	4413      	add	r3, r2
 800073e:	3b01      	subs	r3, #1
 8000740:	121b      	asrs	r3, r3, #8
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa73 	bl	8000c30 <LCD_IO_WriteData8>
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	b2da      	uxtb	r2, r3
 800074e:	887b      	ldrh	r3, [r7, #2]
 8000750:	b2db      	uxtb	r3, r3
 8000752:	4413      	add	r3, r2
 8000754:	b2db      	uxtb	r3, r3
 8000756:	3b01      	subs	r3, #1
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fa68 	bl	8000c30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000760:	202b      	movs	r0, #43	; 0x2b
 8000762:	f000 fa55 	bl	8000c10 <LCD_IO_WriteCmd8>
 8000766:	88bb      	ldrh	r3, [r7, #4]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fa5e 	bl	8000c30 <LCD_IO_WriteData8>
 8000774:	88bb      	ldrh	r3, [r7, #4]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fa59 	bl	8000c30 <LCD_IO_WriteData8>
 800077e:	88ba      	ldrh	r2, [r7, #4]
 8000780:	883b      	ldrh	r3, [r7, #0]
 8000782:	4413      	add	r3, r2
 8000784:	3b01      	subs	r3, #1
 8000786:	121b      	asrs	r3, r3, #8
 8000788:	b2db      	uxtb	r3, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fa50 	bl	8000c30 <LCD_IO_WriteData8>
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	883b      	ldrh	r3, [r7, #0]
 8000796:	b2db      	uxtb	r3, r3
 8000798:	4413      	add	r3, r2
 800079a:	b2db      	uxtb	r3, r3
 800079c:	3b01      	subs	r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 fa45 	bl	8000c30 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80007a6:	887b      	ldrh	r3, [r7, #2]
 80007a8:	883a      	ldrh	r2, [r7, #0]
 80007aa:	fb02 f303 	mul.w	r3, r2, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	8b3b      	ldrh	r3, [r7, #24]
 80007b2:	4619      	mov	r1, r3
 80007b4:	202c      	movs	r0, #44	; 0x2c
 80007b6:	f000 fa63 	bl	8000c80 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd90      	pop	{r4, r7, pc}
	...

080007c4 <setCursor>:
  *Y = ty;
}
#endif // #if ILI9341_TOUCH == 1

void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	80fb      	strh	r3, [r7, #6]
 80007d0:	4613      	mov	r3, r2
 80007d2:	80bb      	strh	r3, [r7, #4]
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <setCursor+0x2c>)
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	88bb      	ldrh	r3, [r7, #4]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b04      	ldr	r3, [pc, #16]	; (80007f4 <setCursor+0x30>)
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	20000039 	.word	0x20000039
 80007f4:	20000038 	.word	0x20000038

080007f8 <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b08b      	sub	sp, #44	; 0x2c
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	4604      	mov	r4, r0
 8000800:	4608      	mov	r0, r1
 8000802:	4611      	mov	r1, r2
 8000804:	461a      	mov	r2, r3
 8000806:	4623      	mov	r3, r4
 8000808:	80fb      	strh	r3, [r7, #6]
 800080a:	4603      	mov	r3, r0
 800080c:	80bb      	strh	r3, [r7, #4]
 800080e:	460b      	mov	r3, r1
 8000810:	70fb      	strb	r3, [r7, #3]
 8000812:	4613      	mov	r3, r2
 8000814:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8000816:	4b54      	ldr	r3, [pc, #336]	; (8000968 <drawChar+0x170>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3308      	adds	r3, #8
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	78fa      	ldrb	r2, [r7, #3]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	00da      	lsls	r2, r3, #3
 8000828:	4b4f      	ldr	r3, [pc, #316]	; (8000968 <drawChar+0x170>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3304      	adds	r3, #4
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4413      	add	r3, r2
 8000832:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8000834:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <drawChar+0x170>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	789b      	ldrb	r3, [r3, #2]
 8000846:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	3305      	adds	r3, #5
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8000856:	693b      	ldr	r3, [r7, #16]
 8000858:	3306      	adds	r3, #6
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	76fb      	strb	r3, [r7, #27]
 8000862:	2300      	movs	r3, #0
 8000864:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	833b      	strh	r3, [r7, #24]
 800086a:	2300      	movs	r3, #0
 800086c:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 800086e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000872:	2b01      	cmp	r3, #1
 8000874:	d905      	bls.n	8000882 <drawChar+0x8a>
            xo16 = xo;
 8000876:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800087a:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 800087c:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8000880:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 8000882:	2300      	movs	r3, #0
 8000884:	773b      	strb	r3, [r7, #28]
 8000886:	e066      	b.n	8000956 <drawChar+0x15e>
            for(xx=0; xx<w; xx++) {
 8000888:	2300      	movs	r3, #0
 800088a:	777b      	strb	r3, [r7, #29]
 800088c:	e05c      	b.n	8000948 <drawChar+0x150>
                if(!(bit++ & 7)) {
 800088e:	7ebb      	ldrb	r3, [r7, #26]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	76ba      	strb	r2, [r7, #26]
 8000894:	f003 0307 	and.w	r3, r3, #7
 8000898:	2b00      	cmp	r3, #0
 800089a:	d107      	bne.n	80008ac <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 800089c:	8bfb      	ldrh	r3, [r7, #30]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	83fa      	strh	r2, [r7, #30]
 80008a2:	461a      	mov	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4413      	add	r3, r2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 80008ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	da43      	bge.n	800093c <drawChar+0x144>
                    if(size == 1) {
 80008b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d118      	bne.n	80008ee <drawChar+0xf6>
                        ili9341_WritePixel(x+xo+xx, y+yo+yy, color);
 80008bc:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	4413      	add	r3, r2
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	7f7b      	ldrb	r3, [r7, #29]
 80008ca:	b29b      	uxth	r3, r3
 80008cc:	4413      	add	r3, r2
 80008ce:	b298      	uxth	r0, r3
 80008d0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80008d4:	b29a      	uxth	r2, r3
 80008d6:	88bb      	ldrh	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	b29a      	uxth	r2, r3
 80008dc:	7f3b      	ldrb	r3, [r7, #28]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4413      	add	r3, r2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	883a      	ldrh	r2, [r7, #0]
 80008e6:	4619      	mov	r1, r3
 80008e8:	f7ff febe 	bl	8000668 <ili9341_WritePixel>
 80008ec:	e026      	b.n	800093c <drawChar+0x144>
                    } else {
                    	ili9341_FillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 80008ee:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80008f2:	7f7b      	ldrb	r3, [r7, #29]
 80008f4:	4413      	add	r3, r2
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	fb12 f303 	smulbb	r3, r2, r3
 8000902:	b29a      	uxth	r2, r3
 8000904:	88fb      	ldrh	r3, [r7, #6]
 8000906:	4413      	add	r3, r2
 8000908:	b298      	uxth	r0, r3
 800090a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800090e:	7f3b      	ldrb	r3, [r7, #28]
 8000910:	4413      	add	r3, r2
 8000912:	b29a      	uxth	r2, r3
 8000914:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000918:	b29b      	uxth	r3, r3
 800091a:	fb12 f303 	smulbb	r3, r2, r3
 800091e:	b29a      	uxth	r2, r3
 8000920:	88bb      	ldrh	r3, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	b299      	uxth	r1, r3
 8000926:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800092a:	b29a      	uxth	r2, r3
 800092c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000930:	b29c      	uxth	r4, r3
 8000932:	883b      	ldrh	r3, [r7, #0]
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	4623      	mov	r3, r4
 8000938:	f7ff fee0 	bl	80006fc <ili9341_FillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 800093c:	7efb      	ldrb	r3, [r7, #27]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8000942:	7f7b      	ldrb	r3, [r7, #29]
 8000944:	3301      	adds	r3, #1
 8000946:	777b      	strb	r3, [r7, #29]
 8000948:	7f7a      	ldrb	r2, [r7, #29]
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	429a      	cmp	r2, r3
 800094e:	d39e      	bcc.n	800088e <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 8000950:	7f3b      	ldrb	r3, [r7, #28]
 8000952:	3301      	adds	r3, #1
 8000954:	773b      	strb	r3, [r7, #28]
 8000956:	7f3a      	ldrb	r2, [r7, #28]
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	429a      	cmp	r2, r3
 800095c:	d394      	bcc.n	8000888 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	3724      	adds	r7, #36	; 0x24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	20000034 	.word	0x20000034

0800096c <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 800096c:	b5b0      	push	{r4, r5, r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af02      	add	r7, sp, #8
 8000972:	4603      	mov	r3, r0
 8000974:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b0a      	cmp	r3, #10
 800097a:	d112      	bne.n	80009a2 <write+0x36>
            cursor_x  = 0;
 800097c:	4b46      	ldr	r3, [pc, #280]	; (8000a98 <write+0x12c>)
 800097e:	2200      	movs	r2, #0
 8000980:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8000982:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <write+0x130>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	330a      	adds	r3, #10
 8000988:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <write+0x134>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	fb12 f303 	smulbb	r3, r2, r3
 8000992:	b2da      	uxtb	r2, r3
 8000994:	4b43      	ldr	r3, [pc, #268]	; (8000aa4 <write+0x138>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <write+0x138>)
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e074      	b.n	8000a8c <write+0x120>
        } else if(c != '\r') {
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	2b0d      	cmp	r3, #13
 80009a6:	d071      	beq.n	8000a8c <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <write+0x130>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	7a1b      	ldrb	r3, [r3, #8]
 80009ae:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	7dfb      	ldrb	r3, [r7, #23]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d369      	bcc.n	8000a8c <write+0x120>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <write+0x130>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3309      	adds	r3, #9
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d862      	bhi.n	8000a8c <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	1ad3      	subs	r3, r2, r3
 80009cc:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80009ce:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <write+0x130>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80009d8:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	789b      	ldrb	r3, [r3, #2]
 80009de:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	78db      	ldrb	r3, [r3, #3]
 80009e4:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d041      	beq.n	8000a70 <write+0x104>
 80009ec:	7bbb      	ldrb	r3, [r7, #14]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d03e      	beq.n	8000a70 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	3305      	adds	r3, #5
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	b25b      	sxtb	r3, r3
 80009fa:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <write+0x13c>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d022      	beq.n	8000a4a <write+0xde>
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <write+0x12c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <write+0x134>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	4413      	add	r3, r2
 8000a18:	fb00 f303 	mul.w	r3, r0, r3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <write+0x140>)
 8000a20:	8812      	ldrh	r2, [r2, #0]
 8000a22:	4293      	cmp	r3, r2
 8000a24:	dd11      	ble.n	8000a4a <write+0xde>
                        cursor_x  = 0;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <write+0x12c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <write+0x130>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	330a      	adds	r3, #10
 8000a32:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <write+0x134>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	fb12 f303 	smulbb	r3, r2, r3
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <write+0x138>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <write+0x138>)
 8000a48:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <write+0x12c>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b218      	sxth	r0, r3
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <write+0x138>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b219      	sxth	r1, r3
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <write+0x144>)
 8000a58:	881d      	ldrh	r5, [r3, #0]
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <write+0x148>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <write+0x134>)
 8000a60:	7812      	ldrb	r2, [r2, #0]
 8000a62:	79fc      	ldrb	r4, [r7, #7]
 8000a64:	9201      	str	r2, [sp, #4]
 8000a66:	9300      	str	r3, [sp, #0]
 8000a68:	462b      	mov	r3, r5
 8000a6a:	4622      	mov	r2, r4
 8000a6c:	f7ff fec4 	bl	80007f8 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	3304      	adds	r3, #4
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <write+0x134>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	fb12 f303 	smulbb	r3, r2, r3
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <write+0x12c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4413      	add	r3, r2
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <write+0x12c>)
 8000a8a:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bdb0      	pop	{r4, r5, r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000039 	.word	0x20000039
 8000a9c:	20000034 	.word	0x20000034
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000038 	.word	0x20000038
 8000aa8:	2000000a 	.word	0x2000000a
 8000aac:	20000006 	.word	0x20000006
 8000ab0:	20000002 	.word	0x20000002
 8000ab4:	20000004 	.word	0x20000004

08000ab8 <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d00a      	beq.n	8000adc <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <setFont+0x4c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d110      	bne.n	8000af0 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <setFont+0x50>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	3306      	adds	r3, #6
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <setFont+0x50>)
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e009      	b.n	8000af0 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <setFont+0x4c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d005      	beq.n	8000af0 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <setFont+0x50>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	3b06      	subs	r3, #6
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <setFont+0x50>)
 8000aee:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <setFont+0x4c>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000034 	.word	0x20000034
 8000b08:	20000038 	.word	0x20000038

08000b0c <tftWriteText>:

void tftWriteText (int x, int y, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	80fb      	strh	r3, [r7, #6]
	setFont(f);
 8000b1c:	6838      	ldr	r0, [r7, #0]
 8000b1e:	f7ff ffcb 	bl	8000ab8 <setFont>
	textcolor = txtcolor;
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <tftWriteText+0x60>)
 8000b24:	88fb      	ldrh	r3, [r7, #6]
 8000b26:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8000b28:	7e3b      	ldrb	r3, [r7, #24]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <tftWriteText+0x26>
 8000b2e:	7e3b      	ldrb	r3, [r7, #24]
 8000b30:	e000      	b.n	8000b34 <tftWriteText+0x28>
 8000b32:	2301      	movs	r3, #1
 8000b34:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <tftWriteText+0x64>)
 8000b36:	7013      	strb	r3, [r2, #0]
	setCursor(x, y);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	68ba      	ldr	r2, [r7, #8]
 8000b3e:	b212      	sxth	r2, r2
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fe3e 	bl	80007c4 <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 8000b48:	e006      	b.n	8000b58 <tftWriteText+0x4c>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	61fa      	str	r2, [r7, #28]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f7ff ff0a 	bl	800096c <write>
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d1f4      	bne.n	8000b4a <tftWriteText+0x3e>
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000002 	.word	0x20000002
 8000b70:	20000000 	.word	0x20000000

08000b74 <ili9341_FillScreen>:
	//while (*str) write (*str++);
	while (*str) write(*str++);
}

void ili9341_FillScreen(uint16_t color)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	ili9341_FillRect(0, 0, _width, _height, color);
 8000b7e:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <ili9341_FillScreen+0x28>)
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <ili9341_FillScreen+0x2c>)
 8000b84:	8819      	ldrh	r1, [r3, #0]
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	460b      	mov	r3, r1
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fdb4 	bl	80006fc <ili9341_FillRect>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000006 	.word	0x20000006
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f000 fe55 	bl	800185c <HAL_Delay>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LCD_IO_Init>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RST);
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <LCD_IO_Init+0x48>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <LCD_IO_Init+0x48>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <LCD_IO_Init+0x4c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <LCD_IO_Init+0x4c>)
 8000bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bda:	6013      	str	r3, [r2, #0]
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <LCD_IO_Init+0x50>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff ffde 	bl	8000ba4 <LCD_Delay>
  LCD_RST_ON;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <LCD_IO_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ffd8 	bl	8000ba4 <LCD_Delay>
  LCD_RST_OFF;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <LCD_IO_Init+0x50>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f7ff ffd2 	bl	8000ba4 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	4241828c 	.word	0x4241828c

08000c10 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
 8000c1a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	7013      	strb	r3, [r2, #0]
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <LCD_IO_WriteData8+0x1c>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	7013      	strb	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	600ffffe 	.word	0x600ffffe

08000c50 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8000c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c5e:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	ba5b      	rev16	r3, r3
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <LCD_IO_WriteData16+0x2c>)
 8000c6a:	b292      	uxth	r2, r2
 8000c6c:	801a      	strh	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	600ffffe 	.word	0x600ffffe

08000c80 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	603a      	str	r2, [r7, #0]
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	80bb      	strh	r3, [r7, #4]
  uint16_t d = RD(Data);
 8000c90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c94:	81bb      	strh	r3, [r7, #12]
 8000c96:	89bb      	ldrh	r3, [r7, #12]
 8000c98:	ba5b      	rev16	r3, r3
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	81fb      	strh	r3, [r7, #14]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000ca0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ca4:	79fb      	ldrb	r3, [r7, #7]
 8000ca6:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000ca8:	e002      	b.n	8000cb0 <LCD_IO_WriteCmd8DataFill16+0x30>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8000caa:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	1e5a      	subs	r2, r3, #1
 8000cb4:	603a      	str	r2, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f7      	bne.n	8000caa <LCD_IO_WriteCmd8DataFill16+0x2a>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8000cba:	bf00      	nop
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	600ffffe 	.word	0x600ffffe

08000ccc <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
 8000cd8:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000cda:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000ce2:	e006      	b.n	8000cf2 <LCD_IO_WriteCmd8MultipleData8+0x26>
  {
    *(volatile uint8_t *)LCD_ADDR_DATA =*pData;
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	7013      	strb	r3, [r2, #0]
    pData++;
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <LCD_IO_WriteCmd8MultipleData8+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 0);
  #endif
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	600ffffe 	.word	0x600ffffe

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fd30 	bl	8001778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f866 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f8ce 	bl	8000ebc <MX_GPIO_Init>
  MX_FSMC_Init();
 8000d20:	f000 f932 	bl	8000f88 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  ili9341_Init();
 8000d24:	f7ff fbd2 	bl	80004cc <ili9341_Init>
  ili9341_FillScreen(COLOR_BLACK);
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ff23 	bl	8000b74 <ili9341_FillScreen>

  fsmMenuState = MENUPRINCIPAL; //Estado inicial
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <main+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  tftMenuWrite(Fsm[fsmMenuState].out);
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <main+0xc0>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4926      	ldr	r1, [pc, #152]	; (8000dd4 <main+0xc4>)
 8000d3a:	4613      	mov	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	4413      	add	r3, r2
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	440b      	add	r3, r1
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f9be 	bl	80010c8 <tftMenuWrite>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  encoderInit();
 8000d4c:	f000 fb90 	bl	8001470 <encoderInit>
	  //1. Saída baseada no estado atual
	  if (fsmMenuState != fsmLastMenuState)
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <main+0xc0>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <main+0xc8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d00f      	beq.n	8000d7c <main+0x6c>
	  {
		  tftMenuWrite(Fsm[fsmMenuState].out);
 8000d5c:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <main+0xc0>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	491c      	ldr	r1, [pc, #112]	; (8000dd4 <main+0xc4>)
 8000d62:	4613      	mov	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	440b      	add	r3, r1
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f000 f9aa 	bl	80010c8 <tftMenuWrite>
		  fsmLastMenuState = fsmMenuState;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <main+0xc0>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <main+0xc8>)
 8000d7a:	6013      	str	r3, [r2, #0]
	  }
	  //3. Lê a entrada
	  if(HAL_GPIO_ReadPin(BTN_OK_GPIO_Port, BTN_OK_Pin) == GPIO_PIN_RESET)
 8000d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d80:	4816      	ldr	r0, [pc, #88]	; (8000ddc <main+0xcc>)
 8000d82:	f001 f811 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1df      	bne.n	8000d4c <main+0x3c>
	  {
		  buttonStatus = menuColorsValue;
 8000d8c:	4b14      	ldr	r3, [pc, #80]	; (8000de0 <main+0xd0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <main+0xd4>)
 8000d94:	601a      	str	r2, [r3, #0]
		  fsmMenuState = Fsm[fsmMenuState].next[buttonStatus];
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <main+0xc0>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <main+0xd4>)
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <main+0xc4>)
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	440b      	add	r3, r1
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4403      	add	r3, r0
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <main+0xc0>)
 8000db2:	6013      	str	r3, [r2, #0]
		  tftMenuWrite(Fsm[fsmMenuState].out);
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <main+0xc0>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4906      	ldr	r1, [pc, #24]	; (8000dd4 <main+0xc4>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f97e 	bl	80010c8 <tftMenuWrite>
	  encoderInit();
 8000dcc:	e7be      	b.n	8000d4c <main+0x3c>
 8000dce:	bf00      	nop
 8000dd0:	20000094 	.word	0x20000094
 8000dd4:	08003434 	.word	0x08003434
 8000dd8:	2000008c 	.word	0x2000008c
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	20000098 	.word	0x20000098
 8000de4:	20000090 	.word	0x20000090

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	; 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 fd96 	bl	8002928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e5c:	23a8      	movs	r3, #168	; 0xa8
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 ffb3 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 fb94 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2105      	movs	r1, #5
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 fa14 	bl	80022c8 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ea6:	f000 fb7d 	bl	80015a4 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a28      	ldr	r2, [pc, #160]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a1a      	ldr	r2, [pc, #104]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f14:	f043 0310 	orr.w	r3, r3, #16
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0310 	and.w	r3, r3, #16
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a13      	ldr	r2, [pc, #76]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_GPIO_Init+0xc0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0308 	and.w	r3, r3, #8
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : OUTA_Pin OUTB_Pin */
  GPIO_InitStruct.Pin = OUTA_Pin|OUTB_Pin;
 8000f42:	2303      	movs	r3, #3
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <MX_GPIO_Init+0xc4>)
 8000f56:	f000 fd8b 	bl	8001a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_OK_Pin */
  GPIO_InitStruct.Pin = BTN_OK_Pin;
 8000f5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_OK_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_GPIO_Init+0xc8>)
 8000f70:	f000 fd7e 	bl	8001a70 <HAL_GPIO_Init>

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40021000 	.word	0x40021000

08000f88 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fa2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fa6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fa8:	4b25      	ldr	r3, [pc, #148]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000faa:	4a26      	ldr	r2, [pc, #152]	; (8001044 <MX_FSMC_Init+0xbc>)
 8000fac:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fb4:	4b22      	ldr	r3, [pc, #136]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fcc:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fe0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_FSMC_Init+0xb8>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_FSMC_Init+0xb8>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001004:	2306      	movs	r3, #6
 8001006:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001008:	230f      	movs	r3, #15
 800100a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 800100c:	2306      	movs	r3, #6
 800100e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001010:	230f      	movs	r3, #15
 8001012:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001018:	2311      	movs	r3, #17
 800101a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_FSMC_Init+0xb8>)
 8001028:	f001 fb3a 	bl	80026a0 <HAL_SRAM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001032:	f000 fab7 	bl	80015a4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000003c 	.word	0x2000003c
 8001044:	a0000104 	.word	0xa0000104

08001048 <tftMenuColors>:

/* USER CODE BEGIN 4 */
void tftMenuColors(int menuColorsValue)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
	switch (menuColorsValue)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	2b03      	cmp	r3, #3
 8001056:	d833      	bhi.n	80010c0 <tftMenuColors+0x78>
 8001058:	a201      	add	r2, pc, #4	; (adr r2, 8001060 <tftMenuColors+0x18>)
 800105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105e:	bf00      	nop
 8001060:	08001071 	.word	0x08001071
 8001064:	08001085 	.word	0x08001085
 8001068:	08001099 	.word	0x08001099
 800106c:	080010ad 	.word	0x080010ad
	{
	case 1:
		ili9341_FillRect(20, 20, 200, 50, COLOR_GREEN);
 8001070:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2332      	movs	r3, #50	; 0x32
 8001078:	22c8      	movs	r2, #200	; 0xc8
 800107a:	2114      	movs	r1, #20
 800107c:	2014      	movs	r0, #20
 800107e:	f7ff fb3d 	bl	80006fc <ili9341_FillRect>
		break;
 8001082:	e01d      	b.n	80010c0 <tftMenuColors+0x78>
	case 2:
		ili9341_FillRect(20, 90, 200, 50, COLOR_GREEN);
 8001084:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2332      	movs	r3, #50	; 0x32
 800108c:	22c8      	movs	r2, #200	; 0xc8
 800108e:	215a      	movs	r1, #90	; 0x5a
 8001090:	2014      	movs	r0, #20
 8001092:	f7ff fb33 	bl	80006fc <ili9341_FillRect>
		break;
 8001096:	e013      	b.n	80010c0 <tftMenuColors+0x78>
	case 3:
		ili9341_FillRect(20, 160, 200, 50, COLOR_GREEN);
 8001098:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2332      	movs	r3, #50	; 0x32
 80010a0:	22c8      	movs	r2, #200	; 0xc8
 80010a2:	21a0      	movs	r1, #160	; 0xa0
 80010a4:	2014      	movs	r0, #20
 80010a6:	f7ff fb29 	bl	80006fc <ili9341_FillRect>
		break;
 80010aa:	e009      	b.n	80010c0 <tftMenuColors+0x78>
	case 4:
		ili9341_FillRect(20, 230, 200, 50, COLOR_GREEN);
 80010ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2332      	movs	r3, #50	; 0x32
 80010b4:	22c8      	movs	r2, #200	; 0xc8
 80010b6:	21e6      	movs	r1, #230	; 0xe6
 80010b8:	2014      	movs	r0, #20
 80010ba:	f7ff fb1f 	bl	80006fc <ili9341_FillRect>
		break;
 80010be:	bf00      	nop
	}
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <tftMenuWrite>:

void tftMenuWrite(int menuWriteValue)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
	switch (menuWriteValue)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	f200 81a4 	bhi.w	8001420 <tftMenuWrite+0x358>
 80010d8:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <tftMenuWrite+0x18>)
 80010da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010de:	bf00      	nop
 80010e0:	080010f5 	.word	0x080010f5
 80010e4:	08001199 	.word	0x08001199
 80010e8:	0800123d 	.word	0x0800123d
 80010ec:	080012d9 	.word	0x080012d9
 80010f0:	0800137d 	.word	0x0800137d
	{
	case 0:
		ili9341_FillRect(20, 20, 200, 50, COLOR_CYAN);
 80010f4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2332      	movs	r3, #50	; 0x32
 80010fc:	22c8      	movs	r2, #200	; 0xc8
 80010fe:	2114      	movs	r1, #20
 8001100:	2014      	movs	r0, #20
 8001102:	f7ff fafb 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 90, 200, 50, COLOR_CYAN);
 8001106:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2332      	movs	r3, #50	; 0x32
 800110e:	22c8      	movs	r2, #200	; 0xc8
 8001110:	215a      	movs	r1, #90	; 0x5a
 8001112:	2014      	movs	r0, #20
 8001114:	f7ff faf2 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 160, 200, 50, COLOR_CYAN);
 8001118:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2332      	movs	r3, #50	; 0x32
 8001120:	22c8      	movs	r2, #200	; 0xc8
 8001122:	21a0      	movs	r1, #160	; 0xa0
 8001124:	2014      	movs	r0, #20
 8001126:	f7ff fae9 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 230, 200, 50, COLOR_CYAN);
 800112a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2332      	movs	r3, #50	; 0x32
 8001132:	22c8      	movs	r2, #200	; 0xc8
 8001134:	21e6      	movs	r1, #230	; 0xe6
 8001136:	2014      	movs	r0, #20
 8001138:	f7ff fae0 	bl	80006fc <ili9341_FillRect>
		tftMenuColors(menuColorsValue);
 800113c:	4bba      	ldr	r3, [pc, #744]	; (8001428 <tftMenuWrite+0x360>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff81 	bl	8001048 <tftMenuColors>
		tftWriteText(80, 50, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 1");
 8001146:	4bb9      	ldr	r3, [pc, #740]	; (800142c <tftMenuWrite+0x364>)
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	2301      	movs	r3, #1
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	4bb8      	ldr	r3, [pc, #736]	; (8001430 <tftMenuWrite+0x368>)
 8001150:	2200      	movs	r2, #0
 8001152:	2132      	movs	r1, #50	; 0x32
 8001154:	2050      	movs	r0, #80	; 0x50
 8001156:	f7ff fcd9 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 120, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 2");
 800115a:	4bb6      	ldr	r3, [pc, #728]	; (8001434 <tftMenuWrite+0x36c>)
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	2301      	movs	r3, #1
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	4bb3      	ldr	r3, [pc, #716]	; (8001430 <tftMenuWrite+0x368>)
 8001164:	2200      	movs	r2, #0
 8001166:	2178      	movs	r1, #120	; 0x78
 8001168:	2050      	movs	r0, #80	; 0x50
 800116a:	f7ff fccf 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 190, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3");
 800116e:	4bb2      	ldr	r3, [pc, #712]	; (8001438 <tftMenuWrite+0x370>)
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	2301      	movs	r3, #1
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	4bae      	ldr	r3, [pc, #696]	; (8001430 <tftMenuWrite+0x368>)
 8001178:	2200      	movs	r2, #0
 800117a:	21be      	movs	r1, #190	; 0xbe
 800117c:	2050      	movs	r0, #80	; 0x50
 800117e:	f7ff fcc5 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 255, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"VOLTAR");
 8001182:	4bae      	ldr	r3, [pc, #696]	; (800143c <tftMenuWrite+0x374>)
 8001184:	9301      	str	r3, [sp, #4]
 8001186:	2301      	movs	r3, #1
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	4ba9      	ldr	r3, [pc, #676]	; (8001430 <tftMenuWrite+0x368>)
 800118c:	2200      	movs	r2, #0
 800118e:	21ff      	movs	r1, #255	; 0xff
 8001190:	2050      	movs	r0, #80	; 0x50
 8001192:	f7ff fcbb 	bl	8000b0c <tftWriteText>
		break;
 8001196:	e143      	b.n	8001420 <tftMenuWrite+0x358>
	case 1:
		ili9341_FillRect(20, 20, 200, 50, COLOR_YELLOW);
 8001198:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	2332      	movs	r3, #50	; 0x32
 80011a0:	22c8      	movs	r2, #200	; 0xc8
 80011a2:	2114      	movs	r1, #20
 80011a4:	2014      	movs	r0, #20
 80011a6:	f7ff faa9 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 90, 200, 50, COLOR_YELLOW);
 80011aa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2332      	movs	r3, #50	; 0x32
 80011b2:	22c8      	movs	r2, #200	; 0xc8
 80011b4:	215a      	movs	r1, #90	; 0x5a
 80011b6:	2014      	movs	r0, #20
 80011b8:	f7ff faa0 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 160, 200, 50, COLOR_YELLOW);
 80011bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2332      	movs	r3, #50	; 0x32
 80011c4:	22c8      	movs	r2, #200	; 0xc8
 80011c6:	21a0      	movs	r1, #160	; 0xa0
 80011c8:	2014      	movs	r0, #20
 80011ca:	f7ff fa97 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 230, 200, 50, COLOR_YELLOW);
 80011ce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	2332      	movs	r3, #50	; 0x32
 80011d6:	22c8      	movs	r2, #200	; 0xc8
 80011d8:	21e6      	movs	r1, #230	; 0xe6
 80011da:	2014      	movs	r0, #20
 80011dc:	f7ff fa8e 	bl	80006fc <ili9341_FillRect>
		tftMenuColors(menuColorsValue);
 80011e0:	4b91      	ldr	r3, [pc, #580]	; (8001428 <tftMenuWrite+0x360>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff2f 	bl	8001048 <tftMenuColors>
		tftWriteText(50, 50, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 1 - A");
 80011ea:	4b95      	ldr	r3, [pc, #596]	; (8001440 <tftMenuWrite+0x378>)
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4b8f      	ldr	r3, [pc, #572]	; (8001430 <tftMenuWrite+0x368>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	2132      	movs	r1, #50	; 0x32
 80011f8:	2032      	movs	r0, #50	; 0x32
 80011fa:	f7ff fc87 	bl	8000b0c <tftWriteText>
		tftWriteText(50, 120, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 1 - B");
 80011fe:	4b91      	ldr	r3, [pc, #580]	; (8001444 <tftMenuWrite+0x37c>)
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	2301      	movs	r3, #1
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	4b8a      	ldr	r3, [pc, #552]	; (8001430 <tftMenuWrite+0x368>)
 8001208:	2200      	movs	r2, #0
 800120a:	2178      	movs	r1, #120	; 0x78
 800120c:	2032      	movs	r0, #50	; 0x32
 800120e:	f7ff fc7d 	bl	8000b0c <tftWriteText>
		tftWriteText(50, 190, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 1 - C");
 8001212:	4b8d      	ldr	r3, [pc, #564]	; (8001448 <tftMenuWrite+0x380>)
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2301      	movs	r3, #1
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4b85      	ldr	r3, [pc, #532]	; (8001430 <tftMenuWrite+0x368>)
 800121c:	2200      	movs	r2, #0
 800121e:	21be      	movs	r1, #190	; 0xbe
 8001220:	2032      	movs	r0, #50	; 0x32
 8001222:	f7ff fc73 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 255, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"VOLTAR");
 8001226:	4b85      	ldr	r3, [pc, #532]	; (800143c <tftMenuWrite+0x374>)
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	2301      	movs	r3, #1
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	4b80      	ldr	r3, [pc, #512]	; (8001430 <tftMenuWrite+0x368>)
 8001230:	2200      	movs	r2, #0
 8001232:	21ff      	movs	r1, #255	; 0xff
 8001234:	2050      	movs	r0, #80	; 0x50
 8001236:	f7ff fc69 	bl	8000b0c <tftWriteText>
		break;
 800123a:	e0f1      	b.n	8001420 <tftMenuWrite+0x358>
	case 2:
		ili9341_FillRect(20, 20, 200, 50, COLOR_BLUE);
 800123c:	231f      	movs	r3, #31
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2332      	movs	r3, #50	; 0x32
 8001242:	22c8      	movs	r2, #200	; 0xc8
 8001244:	2114      	movs	r1, #20
 8001246:	2014      	movs	r0, #20
 8001248:	f7ff fa58 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 90, 200, 50, COLOR_BLUE);
 800124c:	231f      	movs	r3, #31
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	2332      	movs	r3, #50	; 0x32
 8001252:	22c8      	movs	r2, #200	; 0xc8
 8001254:	215a      	movs	r1, #90	; 0x5a
 8001256:	2014      	movs	r0, #20
 8001258:	f7ff fa50 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 160, 200, 50, COLOR_BLUE);
 800125c:	231f      	movs	r3, #31
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	2332      	movs	r3, #50	; 0x32
 8001262:	22c8      	movs	r2, #200	; 0xc8
 8001264:	21a0      	movs	r1, #160	; 0xa0
 8001266:	2014      	movs	r0, #20
 8001268:	f7ff fa48 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 230, 200, 50, COLOR_BLUE);
 800126c:	231f      	movs	r3, #31
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	2332      	movs	r3, #50	; 0x32
 8001272:	22c8      	movs	r2, #200	; 0xc8
 8001274:	21e6      	movs	r1, #230	; 0xe6
 8001276:	2014      	movs	r0, #20
 8001278:	f7ff fa40 	bl	80006fc <ili9341_FillRect>
		tftMenuColors(menuColorsValue);
 800127c:	4b6a      	ldr	r3, [pc, #424]	; (8001428 <tftMenuWrite+0x360>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fee1 	bl	8001048 <tftMenuColors>
		tftWriteText(50, 50, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 2 - A");
 8001286:	4b71      	ldr	r3, [pc, #452]	; (800144c <tftMenuWrite+0x384>)
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	2301      	movs	r3, #1
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	4b68      	ldr	r3, [pc, #416]	; (8001430 <tftMenuWrite+0x368>)
 8001290:	2200      	movs	r2, #0
 8001292:	2132      	movs	r1, #50	; 0x32
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f7ff fc39 	bl	8000b0c <tftWriteText>
		tftWriteText(50, 120, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 2 - B");
 800129a:	4b6d      	ldr	r3, [pc, #436]	; (8001450 <tftMenuWrite+0x388>)
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	2301      	movs	r3, #1
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <tftMenuWrite+0x368>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	2178      	movs	r1, #120	; 0x78
 80012a8:	2032      	movs	r0, #50	; 0x32
 80012aa:	f7ff fc2f 	bl	8000b0c <tftWriteText>
		tftWriteText(50, 190, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 2 - C");
 80012ae:	4b69      	ldr	r3, [pc, #420]	; (8001454 <tftMenuWrite+0x38c>)
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4b5e      	ldr	r3, [pc, #376]	; (8001430 <tftMenuWrite+0x368>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	21be      	movs	r1, #190	; 0xbe
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f7ff fc25 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 255, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"VOLTAR");
 80012c2:	4b5e      	ldr	r3, [pc, #376]	; (800143c <tftMenuWrite+0x374>)
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	4b59      	ldr	r3, [pc, #356]	; (8001430 <tftMenuWrite+0x368>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	21ff      	movs	r1, #255	; 0xff
 80012d0:	2050      	movs	r0, #80	; 0x50
 80012d2:	f7ff fc1b 	bl	8000b0c <tftWriteText>
		break;
 80012d6:	e0a3      	b.n	8001420 <tftMenuWrite+0x358>
	case 3:
		ili9341_FillRect(20, 20, 200, 50, COLOR_RED);
 80012d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2332      	movs	r3, #50	; 0x32
 80012e0:	22c8      	movs	r2, #200	; 0xc8
 80012e2:	2114      	movs	r1, #20
 80012e4:	2014      	movs	r0, #20
 80012e6:	f7ff fa09 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 90, 200, 50, COLOR_RED);
 80012ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2332      	movs	r3, #50	; 0x32
 80012f2:	22c8      	movs	r2, #200	; 0xc8
 80012f4:	215a      	movs	r1, #90	; 0x5a
 80012f6:	2014      	movs	r0, #20
 80012f8:	f7ff fa00 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 160, 200, 50, COLOR_RED);
 80012fc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	2332      	movs	r3, #50	; 0x32
 8001304:	22c8      	movs	r2, #200	; 0xc8
 8001306:	21a0      	movs	r1, #160	; 0xa0
 8001308:	2014      	movs	r0, #20
 800130a:	f7ff f9f7 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 230, 200, 50, COLOR_RED);
 800130e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2332      	movs	r3, #50	; 0x32
 8001316:	22c8      	movs	r2, #200	; 0xc8
 8001318:	21e6      	movs	r1, #230	; 0xe6
 800131a:	2014      	movs	r0, #20
 800131c:	f7ff f9ee 	bl	80006fc <ili9341_FillRect>
		tftMenuColors(menuColorsValue);
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <tftMenuWrite+0x360>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe8f 	bl	8001048 <tftMenuColors>
		tftWriteText(50, 50, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3 - A");
 800132a:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <tftMenuWrite+0x390>)
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2301      	movs	r3, #1
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <tftMenuWrite+0x368>)
 8001334:	2200      	movs	r2, #0
 8001336:	2132      	movs	r1, #50	; 0x32
 8001338:	2032      	movs	r0, #50	; 0x32
 800133a:	f7ff fbe7 	bl	8000b0c <tftWriteText>
		tftWriteText(50, 120, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3 - B");
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <tftMenuWrite+0x394>)
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	2301      	movs	r3, #1
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <tftMenuWrite+0x368>)
 8001348:	2200      	movs	r2, #0
 800134a:	2178      	movs	r1, #120	; 0x78
 800134c:	2032      	movs	r0, #50	; 0x32
 800134e:	f7ff fbdd 	bl	8000b0c <tftWriteText>
		tftWriteText(50, 190, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3 - C");
 8001352:	4b43      	ldr	r3, [pc, #268]	; (8001460 <tftMenuWrite+0x398>)
 8001354:	9301      	str	r3, [sp, #4]
 8001356:	2301      	movs	r3, #1
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <tftMenuWrite+0x368>)
 800135c:	2200      	movs	r2, #0
 800135e:	21be      	movs	r1, #190	; 0xbe
 8001360:	2032      	movs	r0, #50	; 0x32
 8001362:	f7ff fbd3 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 255, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"VOLTAR");
 8001366:	4b35      	ldr	r3, [pc, #212]	; (800143c <tftMenuWrite+0x374>)
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	2301      	movs	r3, #1
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	4b30      	ldr	r3, [pc, #192]	; (8001430 <tftMenuWrite+0x368>)
 8001370:	2200      	movs	r2, #0
 8001372:	21ff      	movs	r1, #255	; 0xff
 8001374:	2050      	movs	r0, #80	; 0x50
 8001376:	f7ff fbc9 	bl	8000b0c <tftWriteText>
		break;
 800137a:	e051      	b.n	8001420 <tftMenuWrite+0x358>
	case 4:
		ili9341_FillRect(20, 20, 200, 50, COLOR_RED);
 800137c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2332      	movs	r3, #50	; 0x32
 8001384:	22c8      	movs	r2, #200	; 0xc8
 8001386:	2114      	movs	r1, #20
 8001388:	2014      	movs	r0, #20
 800138a:	f7ff f9b7 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 90, 200, 50, COLOR_RED);
 800138e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2332      	movs	r3, #50	; 0x32
 8001396:	22c8      	movs	r2, #200	; 0xc8
 8001398:	215a      	movs	r1, #90	; 0x5a
 800139a:	2014      	movs	r0, #20
 800139c:	f7ff f9ae 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 160, 200, 50, COLOR_RED);
 80013a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2332      	movs	r3, #50	; 0x32
 80013a8:	22c8      	movs	r2, #200	; 0xc8
 80013aa:	21a0      	movs	r1, #160	; 0xa0
 80013ac:	2014      	movs	r0, #20
 80013ae:	f7ff f9a5 	bl	80006fc <ili9341_FillRect>
		ili9341_FillRect(20, 230, 200, 50, COLOR_RED);
 80013b2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2332      	movs	r3, #50	; 0x32
 80013ba:	22c8      	movs	r2, #200	; 0xc8
 80013bc:	21e6      	movs	r1, #230	; 0xe6
 80013be:	2014      	movs	r0, #20
 80013c0:	f7ff f99c 	bl	80006fc <ili9341_FillRect>
		tftMenuColors(menuColorsValue);
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <tftMenuWrite+0x360>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fe3d 	bl	8001048 <tftMenuColors>
		tftWriteText(40, 50, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3 - CA");
 80013ce:	4b25      	ldr	r3, [pc, #148]	; (8001464 <tftMenuWrite+0x39c>)
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2301      	movs	r3, #1
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <tftMenuWrite+0x368>)
 80013d8:	2200      	movs	r2, #0
 80013da:	2132      	movs	r1, #50	; 0x32
 80013dc:	2028      	movs	r0, #40	; 0x28
 80013de:	f7ff fb95 	bl	8000b0c <tftWriteText>
		tftWriteText(40, 120, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3 - CB");
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <tftMenuWrite+0x3a0>)
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2301      	movs	r3, #1
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <tftMenuWrite+0x368>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	2178      	movs	r1, #120	; 0x78
 80013f0:	2028      	movs	r0, #40	; 0x28
 80013f2:	f7ff fb8b 	bl	8000b0c <tftWriteText>
		tftWriteText(40, 190, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"MENU 3 - CC");
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <tftMenuWrite+0x3a4>)
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	2301      	movs	r3, #1
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <tftMenuWrite+0x368>)
 8001400:	2200      	movs	r2, #0
 8001402:	21be      	movs	r1, #190	; 0xbe
 8001404:	2028      	movs	r0, #40	; 0x28
 8001406:	f7ff fb81 	bl	8000b0c <tftWriteText>
		tftWriteText(80, 255, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"VOLTAR");
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <tftMenuWrite+0x374>)
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2301      	movs	r3, #1
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <tftMenuWrite+0x368>)
 8001414:	2200      	movs	r2, #0
 8001416:	21ff      	movs	r1, #255	; 0xff
 8001418:	2050      	movs	r0, #80	; 0x50
 800141a:	f7ff fb77 	bl	8000b0c <tftWriteText>
		break;
 800141e:	bf00      	nop
	}
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000098 	.word	0x20000098
 800142c:	080029bc 	.word	0x080029bc
 8001430:	08003428 	.word	0x08003428
 8001434:	080029c4 	.word	0x080029c4
 8001438:	080029cc 	.word	0x080029cc
 800143c:	080029d4 	.word	0x080029d4
 8001440:	080029dc 	.word	0x080029dc
 8001444:	080029e8 	.word	0x080029e8
 8001448:	080029f4 	.word	0x080029f4
 800144c:	08002a00 	.word	0x08002a00
 8001450:	08002a0c 	.word	0x08002a0c
 8001454:	08002a18 	.word	0x08002a18
 8001458:	08002a24 	.word	0x08002a24
 800145c:	08002a30 	.word	0x08002a30
 8001460:	08002a3c 	.word	0x08002a3c
 8001464:	08002a48 	.word	0x08002a48
 8001468:	08002a54 	.word	0x08002a54
 800146c:	08002a60 	.word	0x08002a60

08001470 <encoderInit>:

void encoderInit()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin) == GPIO_PIN_RESET)  // If the OUTA is RESET
 8001474:	2101      	movs	r1, #1
 8001476:	4847      	ldr	r0, [pc, #284]	; (8001594 <encoderInit+0x124>)
 8001478:	f000 fc96 	bl	8001da8 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 8085 	bne.w	800158e <encoderInit+0x11e>
	{
		if (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTB_Pin) == GPIO_PIN_RESET)  // If OUTB is also reset... CCK
 8001484:	2102      	movs	r1, #2
 8001486:	4843      	ldr	r0, [pc, #268]	; (8001594 <encoderInit+0x124>)
 8001488:	f000 fc8e 	bl	8001da8 <HAL_GPIO_ReadPin>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d137      	bne.n	8001502 <encoderInit+0x92>
		{
			while (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTB_Pin) == GPIO_PIN_RESET){};  // wait for the OUTB to go high
 8001492:	bf00      	nop
 8001494:	2102      	movs	r1, #2
 8001496:	483f      	ldr	r0, [pc, #252]	; (8001594 <encoderInit+0x124>)
 8001498:	f000 fc86 	bl	8001da8 <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f8      	beq.n	8001494 <encoderInit+0x24>
			menuColorsValue--;
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <encoderInit+0x128>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	4a3b      	ldr	r2, [pc, #236]	; (8001598 <encoderInit+0x128>)
 80014aa:	6013      	str	r3, [r2, #0]
			while (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin) == GPIO_PIN_RESET){};  // wait for the OUTA to go high
 80014ac:	bf00      	nop
 80014ae:	2101      	movs	r1, #1
 80014b0:	4838      	ldr	r0, [pc, #224]	; (8001594 <encoderInit+0x124>)
 80014b2:	f000 fc79 	bl	8001da8 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0f8      	beq.n	80014ae <encoderInit+0x3e>
			if (menuColorsValue <= 1){menuColorsValue = 1;}
 80014bc:	4b36      	ldr	r3, [pc, #216]	; (8001598 <encoderInit+0x128>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	dc02      	bgt.n	80014ca <encoderInit+0x5a>
 80014c4:	4b34      	ldr	r3, [pc, #208]	; (8001598 <encoderInit+0x128>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
			if (menuColorsValue >= 4){menuColorsValue = 4;}
 80014ca:	4b33      	ldr	r3, [pc, #204]	; (8001598 <encoderInit+0x128>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	dd02      	ble.n	80014d8 <encoderInit+0x68>
 80014d2:	4b31      	ldr	r3, [pc, #196]	; (8001598 <encoderInit+0x128>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	601a      	str	r2, [r3, #0]
			tftMenuColors(menuColorsValue);
 80014d8:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <encoderInit+0x128>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fdb3 	bl	8001048 <tftMenuColors>
			tftMenuWrite(Fsm[fsmMenuState].out);
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <encoderInit+0x12c>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	492e      	ldr	r1, [pc, #184]	; (80015a0 <encoderInit+0x130>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fde7 	bl	80010c8 <tftMenuWrite>
			HAL_Delay (10);  // wait for some more time
 80014fa:	200a      	movs	r0, #10
 80014fc:	f000 f9ae 	bl	800185c <HAL_Delay>
		}
		//uint8_t MSG[48] = {"\0"};
		//sprintf(MSG, "menuColorsValue: %d\r\n", menuColorsValue);
		//(&huart2, MSG, sizeof(MSG), 10);
	}
}
 8001500:	e045      	b.n	800158e <encoderInit+0x11e>
		else if (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTB_Pin) == GPIO_PIN_SET)  // If OUTB is also set
 8001502:	2102      	movs	r1, #2
 8001504:	4823      	ldr	r0, [pc, #140]	; (8001594 <encoderInit+0x124>)
 8001506:	f000 fc4f 	bl	8001da8 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d13e      	bne.n	800158e <encoderInit+0x11e>
			while (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTB_Pin) == GPIO_PIN_SET){};  // wait for the OUTB to go LOW.. CK
 8001510:	bf00      	nop
 8001512:	2102      	movs	r1, #2
 8001514:	481f      	ldr	r0, [pc, #124]	; (8001594 <encoderInit+0x124>)
 8001516:	f000 fc47 	bl	8001da8 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	2b01      	cmp	r3, #1
 800151e:	d0f8      	beq.n	8001512 <encoderInit+0xa2>
			menuColorsValue++;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <encoderInit+0x128>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	3301      	adds	r3, #1
 8001526:	4a1c      	ldr	r2, [pc, #112]	; (8001598 <encoderInit+0x128>)
 8001528:	6013      	str	r3, [r2, #0]
			while (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTA_Pin) == GPIO_PIN_RESET){};  // wait for the OUTA to go high
 800152a:	bf00      	nop
 800152c:	2101      	movs	r1, #1
 800152e:	4819      	ldr	r0, [pc, #100]	; (8001594 <encoderInit+0x124>)
 8001530:	f000 fc3a 	bl	8001da8 <HAL_GPIO_ReadPin>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f8      	beq.n	800152c <encoderInit+0xbc>
			while (HAL_GPIO_ReadPin(OUTA_GPIO_Port, OUTB_Pin) == GPIO_PIN_RESET){};  // wait for the OUTB to go high
 800153a:	bf00      	nop
 800153c:	2102      	movs	r1, #2
 800153e:	4815      	ldr	r0, [pc, #84]	; (8001594 <encoderInit+0x124>)
 8001540:	f000 fc32 	bl	8001da8 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f8      	beq.n	800153c <encoderInit+0xcc>
			if (menuColorsValue <= 1){menuColorsValue = 1;}
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <encoderInit+0x128>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	dc02      	bgt.n	8001558 <encoderInit+0xe8>
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <encoderInit+0x128>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
			if (menuColorsValue >= 4){menuColorsValue = 4;}
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <encoderInit+0x128>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b03      	cmp	r3, #3
 800155e:	dd02      	ble.n	8001566 <encoderInit+0xf6>
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <encoderInit+0x128>)
 8001562:	2204      	movs	r2, #4
 8001564:	601a      	str	r2, [r3, #0]
			tftMenuColors(menuColorsValue);
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <encoderInit+0x128>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fd6c 	bl	8001048 <tftMenuColors>
			tftMenuWrite(Fsm[fsmMenuState].out);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <encoderInit+0x12c>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	490a      	ldr	r1, [pc, #40]	; (80015a0 <encoderInit+0x130>)
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fda0 	bl	80010c8 <tftMenuWrite>
			HAL_Delay (10);  // wait for some more time
 8001588:	200a      	movs	r0, #10
 800158a:	f000 f967 	bl	800185c <HAL_Delay>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40020400 	.word	0x40020400
 8001598:	20000098 	.word	0x20000098
 800159c:	20000094 	.word	0x20000094
 80015a0:	08003434 	.word	0x08003434

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	e7fe      	b.n	80015ac <Error_Handler+0x8>
	...

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_MspInit+0x4c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_MspInit+0x4c>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_MspInit+0x4c>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a08      	ldr	r2, [pc, #32]	; (80015fc <HAL_MspInit+0x4c>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	603b      	str	r3, [r7, #0]
 80015ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_FSMC_MspInit+0x88>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d131      	bne.n	8001680 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800161c:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <HAL_FSMC_MspInit+0x88>)
 800161e:	2201      	movs	r2, #1
 8001620:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_FSMC_MspInit+0x8c>)
 8001628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162a:	4a18      	ldr	r2, [pc, #96]	; (800168c <HAL_FSMC_MspInit+0x8c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6393      	str	r3, [r2, #56]	; 0x38
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_FSMC_MspInit+0x8c>)
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800163e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164c:	2303      	movs	r3, #3
 800164e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001650:	230c      	movs	r3, #12
 8001652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4619      	mov	r1, r3
 8001658:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_FSMC_MspInit+0x90>)
 800165a:	f000 fa09 	bl	8001a70 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800165e:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 8001662:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001670:	230c      	movs	r3, #12
 8001672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <HAL_FSMC_MspInit+0x94>)
 800167a:	f000 f9f9 	bl	8001a70 <HAL_GPIO_Init>
 800167e:	e000      	b.n	8001682 <HAL_FSMC_MspInit+0x82>
    return;
 8001680:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	2000009c 	.word	0x2000009c
 800168c:	40023800 	.word	0x40023800
 8001690:	40021000 	.word	0x40021000
 8001694:	40020c00 	.word	0x40020c00

08001698 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80016a0:	f7ff ffae 	bl	8001600 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f890 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800175c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172a:	490e      	ldr	r1, [pc, #56]	; (8001764 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800172c:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001740:	4c0b      	ldr	r4, [pc, #44]	; (8001770 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800174e:	f7ff ffd7 	bl	8001700 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f001 f8c5 	bl	80028e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001756:	f7ff fadb 	bl	8000d10 <main>
  bx  lr    
 800175a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800175c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001768:	080034cc 	.word	0x080034cc
  ldr r2, =_sbss
 800176c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001770:	200000a4 	.word	0x200000a4

08001774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC_IRQHandler>
	...

08001778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <HAL_Init+0x40>)
 8001782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <HAL_Init+0x40>)
 800178e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <HAL_Init+0x40>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a07      	ldr	r2, [pc, #28]	; (80017b8 <HAL_Init+0x40>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800179e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a0:	2003      	movs	r0, #3
 80017a2:	f000 f931 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f000 f808 	bl	80017bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ac:	f7ff ff00 	bl	80015b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023c00 	.word	0x40023c00

080017bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <HAL_InitTick+0x54>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x58>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	4619      	mov	r1, r3
 80017ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 f93b 	bl	8001a56 <HAL_SYSTICK_Config>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00e      	b.n	8001808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b0f      	cmp	r3, #15
 80017ee:	d80a      	bhi.n	8001806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f0:	2200      	movs	r2, #0
 80017f2:	6879      	ldr	r1, [r7, #4]
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f000 f911 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4a06      	ldr	r2, [pc, #24]	; (8001818 <HAL_InitTick+0x5c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000000c 	.word	0x2000000c
 8001814:	20000014 	.word	0x20000014
 8001818:	20000010 	.word	0x20000010

0800181c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <HAL_IncTick+0x20>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x24>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4413      	add	r3, r2
 800182c:	4a04      	ldr	r2, [pc, #16]	; (8001840 <HAL_IncTick+0x24>)
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000014 	.word	0x20000014
 8001840:	200000a0 	.word	0x200000a0

08001844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_GetTick+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	200000a0 	.word	0x200000a0

0800185c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001864:	f7ff ffee 	bl	8001844 <HAL_GetTick>
 8001868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d005      	beq.n	8001882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <HAL_Delay+0x44>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	461a      	mov	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4413      	add	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001882:	bf00      	nop
 8001884:	f7ff ffde 	bl	8001844 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8f7      	bhi.n	8001884 <HAL_Delay+0x28>
  {
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000014 	.word	0x20000014

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	; (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	; (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff47 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff5c 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7ff ffb0 	bl	80019c4 <SysTick_Config>
 8001a64:	4603      	mov	r3, r0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b089      	sub	sp, #36	; 0x24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
 8001a8a:	e16b      	b.n	8001d64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 815a 	bne.w	8001d5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d005      	beq.n	8001ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d130      	bne.n	8001b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	2203      	movs	r2, #3
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	69b9      	ldr	r1, [r7, #24]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80b4 	beq.w	8001d5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	4b60      	ldr	r3, [pc, #384]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a5f      	ldr	r2, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_GPIO_Init+0x30c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c12:	4a5b      	ldr	r2, [pc, #364]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	089b      	lsrs	r3, r3, #2
 8001c18:	3302      	adds	r3, #2
 8001c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a52      	ldr	r2, [pc, #328]	; (8001d84 <HAL_GPIO_Init+0x314>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d02b      	beq.n	8001c96 <HAL_GPIO_Init+0x226>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a51      	ldr	r2, [pc, #324]	; (8001d88 <HAL_GPIO_Init+0x318>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d025      	beq.n	8001c92 <HAL_GPIO_Init+0x222>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_GPIO_Init+0x31c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01f      	beq.n	8001c8e <HAL_GPIO_Init+0x21e>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_GPIO_Init+0x320>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x21a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4e      	ldr	r2, [pc, #312]	; (8001d94 <HAL_GPIO_Init+0x324>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x216>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4d      	ldr	r2, [pc, #308]	; (8001d98 <HAL_GPIO_Init+0x328>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x212>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4c      	ldr	r2, [pc, #304]	; (8001d9c <HAL_GPIO_Init+0x32c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x20e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4b      	ldr	r2, [pc, #300]	; (8001da0 <HAL_GPIO_Init+0x330>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x20a>
 8001c76:	2307      	movs	r3, #7
 8001c78:	e00e      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7a:	2308      	movs	r3, #8
 8001c7c:	e00c      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c7e:	2306      	movs	r3, #6
 8001c80:	e00a      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c82:	2305      	movs	r3, #5
 8001c84:	e008      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c86:	2304      	movs	r3, #4
 8001c88:	e006      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e004      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e002      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c92:	2301      	movs	r3, #1
 8001c94:	e000      	b.n	8001c98 <HAL_GPIO_Init+0x228>
 8001c96:	2300      	movs	r3, #0
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	f002 0203 	and.w	r2, r2, #3
 8001c9e:	0092      	lsls	r2, r2, #2
 8001ca0:	4093      	lsls	r3, r2
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca8:	4935      	ldr	r1, [pc, #212]	; (8001d80 <HAL_GPIO_Init+0x310>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	089b      	lsrs	r3, r3, #2
 8001cae:	3302      	adds	r3, #2
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cda:	4a32      	ldr	r2, [pc, #200]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce0:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d04:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4013      	ands	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_GPIO_Init+0x334>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3301      	adds	r3, #1
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	2b0f      	cmp	r3, #15
 8001d68:	f67f ae90 	bls.w	8001a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e267      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d075      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 030c 	and.w	r3, r3, #12
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d00c      	beq.n	8001e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e02:	4b85      	ldr	r3, [pc, #532]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d112      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d05b      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d157      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e242      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x74>
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	e01d      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x98>
 8001e56:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6f      	ldr	r2, [pc, #444]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e00b      	b.n	8001e88 <HAL_RCC_OscConfig+0xb0>
 8001e70:	4b69      	ldr	r3, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a68      	ldr	r2, [pc, #416]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a65      	ldr	r2, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e90:	f7ff fcd8 	bl	8001844 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7ff fcd4 	bl	8001844 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e207      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eaa:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001eb6:	e014      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fcc4 	bl	8001844 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fcc0 	bl	8001844 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1f3      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed2:	4b51      	ldr	r3, [pc, #324]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d063      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d11c      	bne.n	8001f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f06:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d116      	bne.n	8001f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d005      	beq.n	8001f2a <HAL_RCC_OscConfig+0x152>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e1c7      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2a:	4b3b      	ldr	r3, [pc, #236]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4937      	ldr	r1, [pc, #220]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3e:	e03a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_RCC_OscConfig+0x244>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fc79 	bl	8001844 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fc75 	bl	8001844 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1a8      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f68:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4925      	ldr	r1, [pc, #148]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_OscConfig+0x244>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff fc58 	bl	8001844 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff fc54 	bl	8001844 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e187      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d036      	beq.n	8002030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_RCC_OscConfig+0x248>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fc38 	bl	8001844 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fc34 	bl	8001844 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e167      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fea:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_OscConfig+0x240>)
 8001fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x200>
 8001ff6:	e01b      	b.n	8002030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_OscConfig+0x248>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff fc21 	bl	8001844 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	e00e      	b.n	8002024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002006:	f7ff fc1d 	bl	8001844 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d907      	bls.n	8002024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e150      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
 8002018:	40023800 	.word	0x40023800
 800201c:	42470000 	.word	0x42470000
 8002020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ea      	bne.n	8002006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8097 	beq.w	800216c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b81      	ldr	r3, [pc, #516]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b7d      	ldr	r3, [pc, #500]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a7c      	ldr	r2, [pc, #496]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b7a      	ldr	r3, [pc, #488]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b77      	ldr	r3, [pc, #476]	; (800224c <HAL_RCC_OscConfig+0x474>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b74      	ldr	r3, [pc, #464]	; (800224c <HAL_RCC_OscConfig+0x474>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a73      	ldr	r2, [pc, #460]	; (800224c <HAL_RCC_OscConfig+0x474>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7ff fbdd 	bl	8001844 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7ff fbd9 	bl	8001844 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e10c      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x474>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x2ea>
 80020b4:	4b64      	ldr	r3, [pc, #400]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b8:	4a63      	ldr	r2, [pc, #396]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6713      	str	r3, [r2, #112]	; 0x70
 80020c0:	e01c      	b.n	80020fc <HAL_RCC_OscConfig+0x324>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b05      	cmp	r3, #5
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x30c>
 80020ca:	4b5f      	ldr	r3, [pc, #380]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ce:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6713      	str	r3, [r2, #112]	; 0x70
 80020d6:	4b5c      	ldr	r3, [pc, #368]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a5b      	ldr	r2, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0x324>
 80020e4:	4b58      	ldr	r3, [pc, #352]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a57      	ldr	r2, [pc, #348]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020ea:	f023 0301 	bic.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	4b55      	ldr	r3, [pc, #340]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f4:	4a54      	ldr	r2, [pc, #336]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80020f6:	f023 0304 	bic.w	r3, r3, #4
 80020fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d015      	beq.n	8002130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff fb9e 	bl	8001844 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff fb9a 	bl	8001844 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0cb      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002122:	4b49      	ldr	r3, [pc, #292]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ee      	beq.n	800210c <HAL_RCC_OscConfig+0x334>
 800212e:	e014      	b.n	800215a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff fb88 	bl	8001844 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff fb84 	bl	8001844 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e0b5      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ee      	bne.n	8002138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215a:	7dfb      	ldrb	r3, [r7, #23]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a38      	ldr	r2, [pc, #224]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a1 	beq.w	80022b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d05c      	beq.n	800223c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d141      	bne.n	800220e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7ff fb58 	bl	8001844 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff fb54 	bl	8001844 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e087      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021aa:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	019b      	lsls	r3, r3, #6
 80021c6:	431a      	orrs	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	085b      	lsrs	r3, r3, #1
 80021ce:	3b01      	subs	r3, #1
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	061b      	lsls	r3, r3, #24
 80021da:	491b      	ldr	r1, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fb2d 	bl	8001844 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff fb29 	bl	8001844 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e05c      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x416>
 800220c:	e054      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_RCC_OscConfig+0x478>)
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7ff fb16 	bl	8001844 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221c:	f7ff fb12 	bl	8001844 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e045      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <HAL_RCC_OscConfig+0x470>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x444>
 800223a:	e03d      	b.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d107      	bne.n	8002254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e038      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	40007000 	.word	0x40007000
 8002250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_OscConfig+0x4ec>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d028      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d121      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d11a      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800228a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0cc      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022dc:	4b68      	ldr	r3, [pc, #416]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d90c      	bls.n	8002304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ea:	4b65      	ldr	r3, [pc, #404]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a58      	ldr	r2, [pc, #352]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	4a52      	ldr	r2, [pc, #328]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d044      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d119      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d003      	beq.n	8002386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e06f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002396:	4b3b      	ldr	r3, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e067      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f023 0203 	bic.w	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4934      	ldr	r1, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b8:	f7ff fa44 	bl	8001844 <HAL_GetTick>
 80023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	e00a      	b.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c0:	f7ff fa40 	bl	8001844 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e04f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2b      	ldr	r3, [pc, #172]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 020c 	and.w	r2, r3, #12
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1eb      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d20c      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x1b8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800243a:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	; (8002488 <HAL_RCC_ClockConfig+0x1c0>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff f9a4 	bl	80017bc <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00
 8002484:	40023800 	.word	0x40023800
 8002488:	080034ac 	.word	0x080034ac
 800248c:	2000000c 	.word	0x2000000c
 8002490:	20000010 	.word	0x20000010

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002498:	b094      	sub	sp, #80	; 0x50
 800249a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	647b      	str	r3, [r7, #68]	; 0x44
 80024a0:	2300      	movs	r3, #0
 80024a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a4:	2300      	movs	r3, #0
 80024a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ac:	4b79      	ldr	r3, [pc, #484]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b08      	cmp	r3, #8
 80024b6:	d00d      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x40>
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	f200 80e1 	bhi.w	8002680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d003      	beq.n	80024ce <HAL_RCC_GetSysClockFreq+0x3a>
 80024c6:	e0db      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024c8:	4b73      	ldr	r3, [pc, #460]	; (8002698 <HAL_RCC_GetSysClockFreq+0x204>)
 80024ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024cc:	e0db      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ce:	4b73      	ldr	r3, [pc, #460]	; (800269c <HAL_RCC_GetSysClockFreq+0x208>)
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024d2:	e0d8      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024d4:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024de:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024fc:	633b      	str	r3, [r7, #48]	; 0x30
 80024fe:	2300      	movs	r3, #0
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
 8002502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002506:	4622      	mov	r2, r4
 8002508:	462b      	mov	r3, r5
 800250a:	f04f 0000 	mov.w	r0, #0
 800250e:	f04f 0100 	mov.w	r1, #0
 8002512:	0159      	lsls	r1, r3, #5
 8002514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002518:	0150      	lsls	r0, r2, #5
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4621      	mov	r1, r4
 8002520:	1a51      	subs	r1, r2, r1
 8002522:	6139      	str	r1, [r7, #16]
 8002524:	4629      	mov	r1, r5
 8002526:	eb63 0301 	sbc.w	r3, r3, r1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002538:	4659      	mov	r1, fp
 800253a:	018b      	lsls	r3, r1, #6
 800253c:	4651      	mov	r1, sl
 800253e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002542:	4651      	mov	r1, sl
 8002544:	018a      	lsls	r2, r1, #6
 8002546:	4651      	mov	r1, sl
 8002548:	ebb2 0801 	subs.w	r8, r2, r1
 800254c:	4659      	mov	r1, fp
 800254e:	eb63 0901 	sbc.w	r9, r3, r1
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800255e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002566:	4690      	mov	r8, r2
 8002568:	4699      	mov	r9, r3
 800256a:	4623      	mov	r3, r4
 800256c:	eb18 0303 	adds.w	r3, r8, r3
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	462b      	mov	r3, r5
 8002574:	eb49 0303 	adc.w	r3, r9, r3
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002586:	4629      	mov	r1, r5
 8002588:	024b      	lsls	r3, r1, #9
 800258a:	4621      	mov	r1, r4
 800258c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002590:	4621      	mov	r1, r4
 8002592:	024a      	lsls	r2, r1, #9
 8002594:	4610      	mov	r0, r2
 8002596:	4619      	mov	r1, r3
 8002598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800259a:	2200      	movs	r2, #0
 800259c:	62bb      	str	r3, [r7, #40]	; 0x28
 800259e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025a4:	f7fd fe10 	bl	80001c8 <__aeabi_uldivmod>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4613      	mov	r3, r2
 80025ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025b0:	e058      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025b2:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	2200      	movs	r2, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	4611      	mov	r1, r2
 80025be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025cc:	4642      	mov	r2, r8
 80025ce:	464b      	mov	r3, r9
 80025d0:	f04f 0000 	mov.w	r0, #0
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	0159      	lsls	r1, r3, #5
 80025da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025de:	0150      	lsls	r0, r2, #5
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4641      	mov	r1, r8
 80025e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ea:	4649      	mov	r1, r9
 80025ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002604:	ebb2 040a 	subs.w	r4, r2, sl
 8002608:	eb63 050b 	sbc.w	r5, r3, fp
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	00eb      	lsls	r3, r5, #3
 8002616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	4614      	mov	r4, r2
 800261e:	461d      	mov	r5, r3
 8002620:	4643      	mov	r3, r8
 8002622:	18e3      	adds	r3, r4, r3
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	464b      	mov	r3, r9
 8002628:	eb45 0303 	adc.w	r3, r5, r3
 800262c:	607b      	str	r3, [r7, #4]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800263a:	4629      	mov	r1, r5
 800263c:	028b      	lsls	r3, r1, #10
 800263e:	4621      	mov	r1, r4
 8002640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002644:	4621      	mov	r1, r4
 8002646:	028a      	lsls	r2, r1, #10
 8002648:	4610      	mov	r0, r2
 800264a:	4619      	mov	r1, r3
 800264c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800264e:	2200      	movs	r2, #0
 8002650:	61bb      	str	r3, [r7, #24]
 8002652:	61fa      	str	r2, [r7, #28]
 8002654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002658:	f7fd fdb6 	bl	80001c8 <__aeabi_uldivmod>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
 8002660:	4613      	mov	r3, r2
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCC_GetSysClockFreq+0x200>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	0c1b      	lsrs	r3, r3, #16
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	3301      	adds	r3, #1
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002678:	fbb2 f3f3 	udiv	r3, r2, r3
 800267c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800267e:	e002      	b.n	8002686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetSysClockFreq+0x204>)
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002688:	4618      	mov	r0, r3
 800268a:	3750      	adds	r7, #80	; 0x50
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	00f42400 	.word	0x00f42400
 800269c:	007a1200 	.word	0x007a1200

080026a0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e038      	b.n	8002728 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d106      	bne.n	80026d0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7fe ffe4 	bl	8001698 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	3308      	adds	r3, #8
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f000 f828 	bl	8002730 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	461a      	mov	r2, r3
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	f000 f88a 	bl	8002804 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6858      	ldr	r0, [r3, #4]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	f000 f8b7 	bl	8002870 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6892      	ldr	r2, [r2, #8]
 8002716:	f041 0101 	orr.w	r1, r1, #1
 800271a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	f023 0101 	bic.w	r1, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b08      	cmp	r3, #8
 8002758:	d102      	bne.n	8002760 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800275a:	2340      	movs	r3, #64	; 0x40
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e001      	b.n	8002764 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002770:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002776:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800277c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002782:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002788:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800278e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002794:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800279a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80027a0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <FSMC_NORSRAM_Init+0xd0>)
 80027c0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80027d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	ea02 0103 	and.w	r1, r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4319      	orrs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	0008fb7f 	.word	0x0008fb7f

08002804 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	431a      	orrs	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	431a      	orrs	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	041b      	lsls	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	3b01      	subs	r3, #1
 8002840:	051b      	lsls	r3, r3, #20
 8002842:	431a      	orrs	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	3b02      	subs	r3, #2
 800284a:	061b      	lsls	r3, r3, #24
 800284c:	431a      	orrs	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	3201      	adds	r2, #1
 8002858:	4319      	orrs	r1, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002884:	d11d      	bne.n	80028c2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002890:	4013      	ands	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	6811      	ldr	r1, [r2, #0]
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	6852      	ldr	r2, [r2, #4]
 800289a:	0112      	lsls	r2, r2, #4
 800289c:	4311      	orrs	r1, r2
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	6892      	ldr	r2, [r2, #8]
 80028a2:	0212      	lsls	r2, r2, #8
 80028a4:	4311      	orrs	r1, r2
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	6992      	ldr	r2, [r2, #24]
 80028aa:	4311      	orrs	r1, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	68d2      	ldr	r2, [r2, #12]
 80028b0:	0412      	lsls	r2, r2, #16
 80028b2:	430a      	orrs	r2, r1
 80028b4:	ea43 0102 	orr.w	r1, r3, r2
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80028c0:	e005      	b.n	80028ce <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80028ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	cff00000 	.word	0xcff00000

080028e0 <__libc_init_array>:
 80028e0:	b570      	push	{r4, r5, r6, lr}
 80028e2:	4d0d      	ldr	r5, [pc, #52]	; (8002918 <__libc_init_array+0x38>)
 80028e4:	4c0d      	ldr	r4, [pc, #52]	; (800291c <__libc_init_array+0x3c>)
 80028e6:	1b64      	subs	r4, r4, r5
 80028e8:	10a4      	asrs	r4, r4, #2
 80028ea:	2600      	movs	r6, #0
 80028ec:	42a6      	cmp	r6, r4
 80028ee:	d109      	bne.n	8002904 <__libc_init_array+0x24>
 80028f0:	4d0b      	ldr	r5, [pc, #44]	; (8002920 <__libc_init_array+0x40>)
 80028f2:	4c0c      	ldr	r4, [pc, #48]	; (8002924 <__libc_init_array+0x44>)
 80028f4:	f000 f820 	bl	8002938 <_init>
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	2600      	movs	r6, #0
 80028fe:	42a6      	cmp	r6, r4
 8002900:	d105      	bne.n	800290e <__libc_init_array+0x2e>
 8002902:	bd70      	pop	{r4, r5, r6, pc}
 8002904:	f855 3b04 	ldr.w	r3, [r5], #4
 8002908:	4798      	blx	r3
 800290a:	3601      	adds	r6, #1
 800290c:	e7ee      	b.n	80028ec <__libc_init_array+0xc>
 800290e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002912:	4798      	blx	r3
 8002914:	3601      	adds	r6, #1
 8002916:	e7f2      	b.n	80028fe <__libc_init_array+0x1e>
 8002918:	080034c4 	.word	0x080034c4
 800291c:	080034c4 	.word	0x080034c4
 8002920:	080034c4 	.word	0x080034c4
 8002924:	080034c8 	.word	0x080034c8

08002928 <memset>:
 8002928:	4402      	add	r2, r0
 800292a:	4603      	mov	r3, r0
 800292c:	4293      	cmp	r3, r2
 800292e:	d100      	bne.n	8002932 <memset+0xa>
 8002930:	4770      	bx	lr
 8002932:	f803 1b01 	strb.w	r1, [r3], #1
 8002936:	e7f9      	b.n	800292c <memset+0x4>

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	bf00      	nop
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
