
MOC32-Aula2 - Display TFT - Jogo Basquete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00063b84  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08066fd0  08066fd0  00080014  2**0
                  CONTENTS
  4 .ARM          00000008  08066fd0  08066fd0  00076fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08066fd8  08066fd8  00080014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08066fd8  08066fd8  00076fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08066fdc  08066fdc  00076fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08066fe0  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00080014  2**0
                  CONTENTS
 10 .bss          0000011c  20000014  20000014  00080014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000130  20000130  00080014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00080014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2bd  00000000  00000000  00080044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e91  00000000  00000000  0008d301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b40  00000000  00000000  0008f198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223a1  00000000  00000000  0008fcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cad7  00000000  00000000  000b2079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a37  00000000  00000000  000beb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195587  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000a28  00000000  00000000  001955d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002cc4  00000000  00000000  00196000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003434 	.word	0x08003434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003434 	.word	0x08003434

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 80004d2:	4b52      	ldr	r3, [pc, #328]	; (800061c <ili9341_Init+0x150>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d115      	bne.n	800050a <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 80004de:	4b4f      	ldr	r3, [pc, #316]	; (800061c <ili9341_Init+0x150>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	b2da      	uxtb	r2, r3
 80004e8:	4b4c      	ldr	r3, [pc, #304]	; (800061c <ili9341_Init+0x150>)
 80004ea:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 80004ec:	4b4b      	ldr	r3, [pc, #300]	; (800061c <ili9341_Init+0x150>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d101      	bne.n	80004fc <ili9341_Init+0x30>
      LCD_IO_Init();
 80004f8:	f000 fade 	bl	8000ab8 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 80004fc:	4b47      	ldr	r3, [pc, #284]	; (800061c <ili9341_Init+0x150>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f043 0302 	orr.w	r3, r3, #2
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b45      	ldr	r3, [pc, #276]	; (800061c <ili9341_Init+0x150>)
 8000508:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800050a:	200a      	movs	r0, #10
 800050c:	f000 fac9 	bl	8000aa2 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8000510:	2001      	movs	r0, #1
 8000512:	f000 fafb 	bl	8000b0c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000516:	200a      	movs	r0, #10
 8000518:	f000 fac3 	bl	8000aa2 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 800051c:	2203      	movs	r2, #3
 800051e:	4940      	ldr	r1, [pc, #256]	; (8000620 <ili9341_Init+0x154>)
 8000520:	20ef      	movs	r0, #239	; 0xef
 8000522:	f000 fb51 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000526:	2203      	movs	r2, #3
 8000528:	493e      	ldr	r1, [pc, #248]	; (8000624 <ili9341_Init+0x158>)
 800052a:	20cf      	movs	r0, #207	; 0xcf
 800052c:	f000 fb4c 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8000530:	2204      	movs	r2, #4
 8000532:	493d      	ldr	r1, [pc, #244]	; (8000628 <ili9341_Init+0x15c>)
 8000534:	20ed      	movs	r0, #237	; 0xed
 8000536:	f000 fb47 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800053a:	2203      	movs	r2, #3
 800053c:	493b      	ldr	r1, [pc, #236]	; (800062c <ili9341_Init+0x160>)
 800053e:	20e8      	movs	r0, #232	; 0xe8
 8000540:	f000 fb42 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8000544:	2205      	movs	r2, #5
 8000546:	493a      	ldr	r1, [pc, #232]	; (8000630 <ili9341_Init+0x164>)
 8000548:	20cb      	movs	r0, #203	; 0xcb
 800054a:	f000 fb3d 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 800054e:	2201      	movs	r2, #1
 8000550:	4938      	ldr	r1, [pc, #224]	; (8000634 <ili9341_Init+0x168>)
 8000552:	20f7      	movs	r0, #247	; 0xf7
 8000554:	f000 fb38 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000558:	2202      	movs	r2, #2
 800055a:	4937      	ldr	r1, [pc, #220]	; (8000638 <ili9341_Init+0x16c>)
 800055c:	20ea      	movs	r0, #234	; 0xea
 800055e:	f000 fb33 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8000562:	2201      	movs	r2, #1
 8000564:	4935      	ldr	r1, [pc, #212]	; (800063c <ili9341_Init+0x170>)
 8000566:	20c0      	movs	r0, #192	; 0xc0
 8000568:	f000 fb2e 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 800056c:	2201      	movs	r2, #1
 800056e:	4934      	ldr	r1, [pc, #208]	; (8000640 <ili9341_Init+0x174>)
 8000570:	20c1      	movs	r0, #193	; 0xc1
 8000572:	f000 fb29 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000576:	2202      	movs	r2, #2
 8000578:	4932      	ldr	r1, [pc, #200]	; (8000644 <ili9341_Init+0x178>)
 800057a:	20c5      	movs	r0, #197	; 0xc5
 800057c:	f000 fb24 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000580:	2201      	movs	r2, #1
 8000582:	4931      	ldr	r1, [pc, #196]	; (8000648 <ili9341_Init+0x17c>)
 8000584:	20c7      	movs	r0, #199	; 0xc7
 8000586:	f000 fb1f 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 800058a:	2201      	movs	r2, #1
 800058c:	492f      	ldr	r1, [pc, #188]	; (800064c <ili9341_Init+0x180>)
 800058e:	2037      	movs	r0, #55	; 0x37
 8000590:	f000 fb1a 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000594:	2201      	movs	r2, #1
 8000596:	492e      	ldr	r1, [pc, #184]	; (8000650 <ili9341_Init+0x184>)
 8000598:	203a      	movs	r0, #58	; 0x3a
 800059a:	f000 fb15 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 800059e:	2202      	movs	r2, #2
 80005a0:	492c      	ldr	r1, [pc, #176]	; (8000654 <ili9341_Init+0x188>)
 80005a2:	20b1      	movs	r0, #177	; 0xb1
 80005a4:	f000 fb10 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80005a8:	2203      	movs	r2, #3
 80005aa:	492b      	ldr	r1, [pc, #172]	; (8000658 <ili9341_Init+0x18c>)
 80005ac:	20b6      	movs	r0, #182	; 0xb6
 80005ae:	f000 fb0b 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80005b2:	2201      	movs	r2, #1
 80005b4:	4925      	ldr	r1, [pc, #148]	; (800064c <ili9341_Init+0x180>)
 80005b6:	20f2      	movs	r0, #242	; 0xf2
 80005b8:	f000 fb06 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80005bc:	2201      	movs	r2, #1
 80005be:	4927      	ldr	r1, [pc, #156]	; (800065c <ili9341_Init+0x190>)
 80005c0:	2026      	movs	r0, #38	; 0x26
 80005c2:	f000 fb01 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80005c6:	220f      	movs	r2, #15
 80005c8:	4925      	ldr	r1, [pc, #148]	; (8000660 <ili9341_Init+0x194>)
 80005ca:	20e0      	movs	r0, #224	; 0xe0
 80005cc:	f000 fafc 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 80005d0:	220f      	movs	r2, #15
 80005d2:	4924      	ldr	r1, [pc, #144]	; (8000664 <ili9341_Init+0x198>)
 80005d4:	20e1      	movs	r0, #225	; 0xe1
 80005d6:	f000 faf7 	bl	8000bc8 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 80005da:	2036      	movs	r0, #54	; 0x36
 80005dc:	f000 fa96 	bl	8000b0c <LCD_IO_WriteCmd8>
 80005e0:	2028      	movs	r0, #40	; 0x28
 80005e2:	f000 faa3 	bl	8000b2c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 80005e6:	2011      	movs	r0, #17
 80005e8:	f000 fa90 	bl	8000b0c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 fa58 	bl	8000aa2 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, COLOR_BLUE);
 80005f2:	231f      	movs	r3, #31
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	23f0      	movs	r3, #240	; 0xf0
 80005f8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 f8e4 	bl	80007cc <ili9341_FillRect>
  LCD_Delay(10);
 8000604:	200a      	movs	r0, #10
 8000606:	f000 fa4c 	bl	8000aa2 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 800060a:	2029      	movs	r0, #41	; 0x29
 800060c:	f000 fa7e 	bl	8000b0c <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f000 fa46 	bl	8000aa2 <LCD_Delay>
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000030 	.word	0x20000030
 8000620:	0800344c 	.word	0x0800344c
 8000624:	08003450 	.word	0x08003450
 8000628:	08003454 	.word	0x08003454
 800062c:	0800345c 	.word	0x0800345c
 8000630:	08003460 	.word	0x08003460
 8000634:	08003468 	.word	0x08003468
 8000638:	0800346c 	.word	0x0800346c
 800063c:	08003470 	.word	0x08003470
 8000640:	08003474 	.word	0x08003474
 8000644:	08003478 	.word	0x08003478
 8000648:	0800347c 	.word	0x0800347c
 800064c:	08003480 	.word	0x08003480
 8000650:	08003484 	.word	0x08003484
 8000654:	08003488 	.word	0x08003488
 8000658:	0800348c 	.word	0x0800348c
 800065c:	08003490 	.word	0x08003490
 8000660:	08003494 	.word	0x08003494
 8000664:	080034a4 	.word	0x080034a4

08000668 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]
 8000672:	460b      	mov	r3, r1
 8000674:	80bb      	strh	r3, [r7, #4]
 8000676:	4613      	mov	r3, r2
 8000678:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 800067a:	202a      	movs	r0, #42	; 0x2a
 800067c:	f000 fa46 	bl	8000b0c <LCD_IO_WriteCmd8>
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fa4f 	bl	8000b2c <LCD_IO_WriteData8>
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fa4a 	bl	8000b2c <LCD_IO_WriteData8>
 8000698:	88fb      	ldrh	r3, [r7, #6]
 800069a:	0a1b      	lsrs	r3, r3, #8
 800069c:	b29b      	uxth	r3, r3
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fa43 	bl	8000b2c <LCD_IO_WriteData8>
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fa3e 	bl	8000b2c <LCD_IO_WriteData8>
 80006b0:	202b      	movs	r0, #43	; 0x2b
 80006b2:	f000 fa2b 	bl	8000b0c <LCD_IO_WriteCmd8>
 80006b6:	88bb      	ldrh	r3, [r7, #4]
 80006b8:	0a1b      	lsrs	r3, r3, #8
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fa34 	bl	8000b2c <LCD_IO_WriteData8>
 80006c4:	88bb      	ldrh	r3, [r7, #4]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fa2f 	bl	8000b2c <LCD_IO_WriteData8>
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	0a1b      	lsrs	r3, r3, #8
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 fa28 	bl	8000b2c <LCD_IO_WriteData8>
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa23 	bl	8000b2c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 80006e6:	202c      	movs	r0, #44	; 0x2c
 80006e8:	f000 fa10 	bl	8000b0c <LCD_IO_WriteCmd8>
 80006ec:	887b      	ldrh	r3, [r7, #2]
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fa2c 	bl	8000b4c <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4604      	mov	r4, r0
 8000704:	4608      	mov	r0, r1
 8000706:	4611      	mov	r1, r2
 8000708:	461a      	mov	r2, r3
 800070a:	4623      	mov	r3, r4
 800070c:	80fb      	strh	r3, [r7, #6]
 800070e:	4603      	mov	r3, r0
 8000710:	80bb      	strh	r3, [r7, #4]
 8000712:	460b      	mov	r3, r1
 8000714:	807b      	strh	r3, [r7, #2]
 8000716:	4613      	mov	r3, r2
 8000718:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800071a:	4a2a      	ldr	r2, [pc, #168]	; (80007c4 <ili9341_SetDisplayWindow+0xc8>)
 800071c:	88bb      	ldrh	r3, [r7, #4]
 800071e:	8013      	strh	r3, [r2, #0]
 8000720:	88ba      	ldrh	r2, [r7, #4]
 8000722:	883b      	ldrh	r3, [r7, #0]
 8000724:	4413      	add	r3, r2
 8000726:	b29b      	uxth	r3, r3
 8000728:	3b01      	subs	r3, #1
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <ili9341_SetDisplayWindow+0xcc>)
 800072e:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8000730:	202a      	movs	r0, #42	; 0x2a
 8000732:	f000 f9eb 	bl	8000b0c <LCD_IO_WriteCmd8>
 8000736:	88fb      	ldrh	r3, [r7, #6]
 8000738:	0a1b      	lsrs	r3, r3, #8
 800073a:	b29b      	uxth	r3, r3
 800073c:	b2db      	uxtb	r3, r3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f9f4 	bl	8000b2c <LCD_IO_WriteData8>
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f9ef 	bl	8000b2c <LCD_IO_WriteData8>
 800074e:	88fa      	ldrh	r2, [r7, #6]
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	4413      	add	r3, r2
 8000754:	3b01      	subs	r3, #1
 8000756:	121b      	asrs	r3, r3, #8
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f9e6 	bl	8000b2c <LCD_IO_WriteData8>
 8000760:	88fb      	ldrh	r3, [r7, #6]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	887b      	ldrh	r3, [r7, #2]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	4413      	add	r3, r2
 800076a:	b2db      	uxtb	r3, r3
 800076c:	3b01      	subs	r3, #1
 800076e:	b2db      	uxtb	r3, r3
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f9db 	bl	8000b2c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8000776:	202b      	movs	r0, #43	; 0x2b
 8000778:	f000 f9c8 	bl	8000b0c <LCD_IO_WriteCmd8>
 800077c:	88bb      	ldrh	r3, [r7, #4]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f9d1 	bl	8000b2c <LCD_IO_WriteData8>
 800078a:	88bb      	ldrh	r3, [r7, #4]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f9cc 	bl	8000b2c <LCD_IO_WriteData8>
 8000794:	88ba      	ldrh	r2, [r7, #4]
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	3b01      	subs	r3, #1
 800079c:	121b      	asrs	r3, r3, #8
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	f000 f9c3 	bl	8000b2c <LCD_IO_WriteData8>
 80007a6:	88bb      	ldrh	r3, [r7, #4]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	883b      	ldrh	r3, [r7, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4413      	add	r3, r2
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	3b01      	subs	r3, #1
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f9b8 	bl	8000b2c <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	20000032 	.word	0x20000032
 80007c8:	20000034 	.word	0x20000034

080007cc <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4604      	mov	r4, r0
 80007d4:	4608      	mov	r0, r1
 80007d6:	4611      	mov	r1, r2
 80007d8:	461a      	mov	r2, r3
 80007da:	4623      	mov	r3, r4
 80007dc:	80fb      	strh	r3, [r7, #6]
 80007de:	4603      	mov	r3, r0
 80007e0:	80bb      	strh	r3, [r7, #4]
 80007e2:	460b      	mov	r3, r1
 80007e4:	807b      	strh	r3, [r7, #2]
 80007e6:	4613      	mov	r3, r2
 80007e8:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80007ea:	202a      	movs	r0, #42	; 0x2a
 80007ec:	f000 f98e 	bl	8000b0c <LCD_IO_WriteCmd8>
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f997 	bl	8000b2c <LCD_IO_WriteData8>
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f992 	bl	8000b2c <LCD_IO_WriteData8>
 8000808:	88fa      	ldrh	r2, [r7, #6]
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	4413      	add	r3, r2
 800080e:	3b01      	subs	r3, #1
 8000810:	121b      	asrs	r3, r3, #8
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f000 f989 	bl	8000b2c <LCD_IO_WriteData8>
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4413      	add	r3, r2
 8000824:	b2db      	uxtb	r3, r3
 8000826:	3b01      	subs	r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f97e 	bl	8000b2c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8000830:	202b      	movs	r0, #43	; 0x2b
 8000832:	f000 f96b 	bl	8000b0c <LCD_IO_WriteCmd8>
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f974 	bl	8000b2c <LCD_IO_WriteData8>
 8000844:	88bb      	ldrh	r3, [r7, #4]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	4618      	mov	r0, r3
 800084a:	f000 f96f 	bl	8000b2c <LCD_IO_WriteData8>
 800084e:	88ba      	ldrh	r2, [r7, #4]
 8000850:	883b      	ldrh	r3, [r7, #0]
 8000852:	4413      	add	r3, r2
 8000854:	3b01      	subs	r3, #1
 8000856:	121b      	asrs	r3, r3, #8
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 f966 	bl	8000b2c <LCD_IO_WriteData8>
 8000860:	88bb      	ldrh	r3, [r7, #4]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	883b      	ldrh	r3, [r7, #0]
 8000866:	b2db      	uxtb	r3, r3
 8000868:	4413      	add	r3, r2
 800086a:	b2db      	uxtb	r3, r3
 800086c:	3b01      	subs	r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f000 f95b 	bl	8000b2c <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8000876:	887b      	ldrh	r3, [r7, #2]
 8000878:	883a      	ldrh	r2, [r7, #0]
 800087a:	fb02 f303 	mul.w	r3, r2, r3
 800087e:	461a      	mov	r2, r3
 8000880:	8b3b      	ldrh	r3, [r7, #24]
 8000882:	4619      	mov	r1, r3
 8000884:	202c      	movs	r0, #44	; 0x2c
 8000886:	f000 f979 	bl	8000b7c <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bd90      	pop	{r4, r7, pc}

08000892 <ili9341_FillScreen>:

void ili9341_FillScreen(uint16_t color)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b084      	sub	sp, #16
 8000896:	af02      	add	r7, sp, #8
 8000898:	4603      	mov	r3, r0
 800089a:	80fb      	strh	r3, [r7, #6]
	ili9341_FillRect(0, 0, ILI9341_LCD_PIXEL_WIDTH, ILI9341_LCD_PIXEL_HEIGHT, color);
 800089c:	88fb      	ldrh	r3, [r7, #6]
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008a4:	22f0      	movs	r2, #240	; 0xf0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff ff8f 	bl	80007cc <ili9341_FillRect>
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b083      	sub	sp, #12
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4604      	mov	r4, r0
 80008be:	4608      	mov	r0, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	461a      	mov	r2, r3
 80008c4:	4623      	mov	r3, r4
 80008c6:	80fb      	strh	r3, [r7, #6]
 80008c8:	4603      	mov	r3, r0
 80008ca:	80bb      	strh	r3, [r7, #4]
 80008cc:	460b      	mov	r3, r1
 80008ce:	807b      	strh	r3, [r7, #2]
 80008d0:	4613      	mov	r3, r2
 80008d2:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80008d4:	883b      	ldrh	r3, [r7, #0]
 80008d6:	887a      	ldrh	r2, [r7, #2]
 80008d8:	88b9      	ldrh	r1, [r7, #4]
 80008da:	88f8      	ldrh	r0, [r7, #6]
 80008dc:	f7ff ff0e 	bl	80006fc <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 80008e0:	887b      	ldrh	r3, [r7, #2]
 80008e2:	883a      	ldrh	r2, [r7, #0]
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	461a      	mov	r2, r3
 80008ea:	69b9      	ldr	r1, [r7, #24]
 80008ec:	202c      	movs	r0, #44	; 0x2c
 80008ee:	f000 f98d 	bl	8000c0c <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd90      	pop	{r4, r7, pc}

080008fa <ili9341_DrawCircle>:
    	ili9341_WriteLine(x0, y0, x1, y1, color);
    }
}

void ili9341_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 80008fa:	b590      	push	{r4, r7, lr}
 80008fc:	b087      	sub	sp, #28
 80008fe:	af00      	add	r7, sp, #0
 8000900:	4604      	mov	r4, r0
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	461a      	mov	r2, r3
 8000908:	4623      	mov	r3, r4
 800090a:	80fb      	strh	r3, [r7, #6]
 800090c:	4603      	mov	r3, r0
 800090e:	80bb      	strh	r3, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	807b      	strh	r3, [r7, #2]
 8000914:	4613      	mov	r3, r2
 8000916:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8000918:	887b      	ldrh	r3, [r7, #2]
 800091a:	f1c3 0301 	rsb	r3, r3, #1
 800091e:	b29b      	uxth	r3, r3
 8000920:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000926:	887b      	ldrh	r3, [r7, #2]
 8000928:	461a      	mov	r2, r3
 800092a:	03d2      	lsls	r2, r2, #15
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	b29b      	uxth	r3, r3
 8000932:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8000938:	887b      	ldrh	r3, [r7, #2]
 800093a:	81fb      	strh	r3, [r7, #14]

    ili9341_WritePixel(x0  , y0+r, color);
 800093c:	88f8      	ldrh	r0, [r7, #6]
 800093e:	88ba      	ldrh	r2, [r7, #4]
 8000940:	887b      	ldrh	r3, [r7, #2]
 8000942:	4413      	add	r3, r2
 8000944:	b29b      	uxth	r3, r3
 8000946:	883a      	ldrh	r2, [r7, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f7ff fe8d 	bl	8000668 <ili9341_WritePixel>
    ili9341_WritePixel(x0  , y0-r, color);
 800094e:	88f8      	ldrh	r0, [r7, #6]
 8000950:	88ba      	ldrh	r2, [r7, #4]
 8000952:	887b      	ldrh	r3, [r7, #2]
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	b29b      	uxth	r3, r3
 8000958:	883a      	ldrh	r2, [r7, #0]
 800095a:	4619      	mov	r1, r3
 800095c:	f7ff fe84 	bl	8000668 <ili9341_WritePixel>
    ili9341_WritePixel(x0+r, y0  , color);
 8000960:	88fa      	ldrh	r2, [r7, #6]
 8000962:	887b      	ldrh	r3, [r7, #2]
 8000964:	4413      	add	r3, r2
 8000966:	b29b      	uxth	r3, r3
 8000968:	88b9      	ldrh	r1, [r7, #4]
 800096a:	883a      	ldrh	r2, [r7, #0]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe7b 	bl	8000668 <ili9341_WritePixel>
    ili9341_WritePixel(x0-r, y0  , color);
 8000972:	88fa      	ldrh	r2, [r7, #6]
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	b29b      	uxth	r3, r3
 800097a:	88b9      	ldrh	r1, [r7, #4]
 800097c:	883a      	ldrh	r2, [r7, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fe72 	bl	8000668 <ili9341_WritePixel>

    while (x<y) {
 8000984:	e081      	b.n	8000a8a <ili9341_DrawCircle+0x190>
        if (f >= 0) {
 8000986:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800098a:	2b00      	cmp	r3, #0
 800098c:	db0e      	blt.n	80009ac <ili9341_DrawCircle+0xb2>
            y--;
 800098e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000992:	b29b      	uxth	r3, r3
 8000994:	3b01      	subs	r3, #1
 8000996:	b29b      	uxth	r3, r3
 8000998:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 800099a:	8a7b      	ldrh	r3, [r7, #18]
 800099c:	3302      	adds	r3, #2
 800099e:	b29b      	uxth	r3, r3
 80009a0:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80009a2:	8afa      	ldrh	r2, [r7, #22]
 80009a4:	8a7b      	ldrh	r3, [r7, #18]
 80009a6:	4413      	add	r3, r2
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80009ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	3301      	adds	r3, #1
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80009b8:	8abb      	ldrh	r3, [r7, #20]
 80009ba:	3302      	adds	r3, #2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80009c0:	8afa      	ldrh	r2, [r7, #22]
 80009c2:	8abb      	ldrh	r3, [r7, #20]
 80009c4:	4413      	add	r3, r2
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	82fb      	strh	r3, [r7, #22]

        ili9341_WritePixel(x0 + x, y0 + y, color);
 80009ca:	88fa      	ldrh	r2, [r7, #6]
 80009cc:	8a3b      	ldrh	r3, [r7, #16]
 80009ce:	4413      	add	r3, r2
 80009d0:	b298      	uxth	r0, r3
 80009d2:	88ba      	ldrh	r2, [r7, #4]
 80009d4:	89fb      	ldrh	r3, [r7, #14]
 80009d6:	4413      	add	r3, r2
 80009d8:	b29b      	uxth	r3, r3
 80009da:	883a      	ldrh	r2, [r7, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	f7ff fe43 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 - x, y0 + y, color);
 80009e2:	88fa      	ldrh	r2, [r7, #6]
 80009e4:	8a3b      	ldrh	r3, [r7, #16]
 80009e6:	1ad3      	subs	r3, r2, r3
 80009e8:	b298      	uxth	r0, r3
 80009ea:	88ba      	ldrh	r2, [r7, #4]
 80009ec:	89fb      	ldrh	r3, [r7, #14]
 80009ee:	4413      	add	r3, r2
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	883a      	ldrh	r2, [r7, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f7ff fe37 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 + x, y0 - y, color);
 80009fa:	88fa      	ldrh	r2, [r7, #6]
 80009fc:	8a3b      	ldrh	r3, [r7, #16]
 80009fe:	4413      	add	r3, r2
 8000a00:	b298      	uxth	r0, r3
 8000a02:	88ba      	ldrh	r2, [r7, #4]
 8000a04:	89fb      	ldrh	r3, [r7, #14]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	883a      	ldrh	r2, [r7, #0]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	f7ff fe2b 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 - x, y0 - y, color);
 8000a12:	88fa      	ldrh	r2, [r7, #6]
 8000a14:	8a3b      	ldrh	r3, [r7, #16]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	b298      	uxth	r0, r3
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	89fb      	ldrh	r3, [r7, #14]
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	883a      	ldrh	r2, [r7, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f7ff fe1f 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 + y, y0 + x, color);
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	4413      	add	r3, r2
 8000a30:	b298      	uxth	r0, r3
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	8a3b      	ldrh	r3, [r7, #16]
 8000a36:	4413      	add	r3, r2
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	883a      	ldrh	r2, [r7, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f7ff fe13 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 - y, y0 + x, color);
 8000a42:	88fa      	ldrh	r2, [r7, #6]
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	b298      	uxth	r0, r3
 8000a4a:	88ba      	ldrh	r2, [r7, #4]
 8000a4c:	8a3b      	ldrh	r3, [r7, #16]
 8000a4e:	4413      	add	r3, r2
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	883a      	ldrh	r2, [r7, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f7ff fe07 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 + y, y0 - x, color);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	89fb      	ldrh	r3, [r7, #14]
 8000a5e:	4413      	add	r3, r2
 8000a60:	b298      	uxth	r0, r3
 8000a62:	88ba      	ldrh	r2, [r7, #4]
 8000a64:	8a3b      	ldrh	r3, [r7, #16]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	883a      	ldrh	r2, [r7, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fdfb 	bl	8000668 <ili9341_WritePixel>
        ili9341_WritePixel(x0 - y, y0 - x, color);
 8000a72:	88fa      	ldrh	r2, [r7, #6]
 8000a74:	89fb      	ldrh	r3, [r7, #14]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	b298      	uxth	r0, r3
 8000a7a:	88ba      	ldrh	r2, [r7, #4]
 8000a7c:	8a3b      	ldrh	r3, [r7, #16]
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	883a      	ldrh	r2, [r7, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f7ff fdef 	bl	8000668 <ili9341_WritePixel>
    while (x<y) {
 8000a8a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	f6ff af77 	blt.w	8000986 <ili9341_DrawCircle+0x8c>
    }
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	371c      	adds	r7, #28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd90      	pop	{r4, r7, pc}

08000aa2 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 fea6 	bl	80017fc <HAL_Delay>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <LCD_IO_Init>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RST);
 8000abc:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <LCD_IO_Init+0x48>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <LCD_IO_Init+0x48>)
 8000ac2:	f043 0308 	orr.w	r3, r3, #8
 8000ac6:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <LCD_IO_Init+0x4c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <LCD_IO_Init+0x4c>)
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad6:	6013      	str	r3, [r2, #0]
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <LCD_IO_Init+0x50>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ffdf 	bl	8000aa2 <LCD_Delay>
  LCD_RST_ON;
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <LCD_IO_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff ffd9 	bl	8000aa2 <LCD_Delay>
  LCD_RST_OFF;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <LCD_IO_Init+0x50>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ffd3 	bl	8000aa2 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40020c00 	.word	0x40020c00
 8000b08:	4241828c 	.word	0x4241828c

08000b0c <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
 8000b16:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	7013      	strb	r3, [r2, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <LCD_IO_WriteData8+0x1c>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	7013      	strb	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	600ffffe 	.word	0x600ffffe

08000b4c <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8000b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b5a:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8000b5c:	89fb      	ldrh	r3, [r7, #14]
 8000b5e:	ba5b      	rev16	r3, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	4b04      	ldr	r3, [pc, #16]	; (8000b78 <LCD_IO_WriteData16+0x2c>)
 8000b66:	b292      	uxth	r2, r2
 8000b68:	801a      	strh	r2, [r3, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	600ffffe 	.word	0x600ffffe

08000b7c <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	603a      	str	r2, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	80bb      	strh	r3, [r7, #4]
  uint16_t d = RD(Data);
 8000b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b90:	81bb      	strh	r3, [r7, #12]
 8000b92:	89bb      	ldrh	r3, [r7, #12]
 8000b94:	ba5b      	rev16	r3, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
 8000b9a:	81fb      	strh	r3, [r7, #14]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000b9c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000ba4:	e002      	b.n	8000bac <LCD_IO_WriteCmd8DataFill16+0x30>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8000ba6:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8000ba8:	89fb      	ldrh	r3, [r7, #14]
 8000baa:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d1f7      	bne.n	8000ba6 <LCD_IO_WriteCmd8DataFill16+0x2a>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	600ffffe 	.word	0x600ffffe

08000bc8 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000bd6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8000bde:	e006      	b.n	8000bee <LCD_IO_WriteCmd8MultipleData8+0x26>
  {
    *(volatile uint8_t *)LCD_ADDR_DATA =*pData;
 8000be0:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	7013      	strb	r3, [r2, #0]
    pData++;
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3301      	adds	r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	1e5a      	subs	r2, r3, #1
 8000bf2:	607a      	str	r2, [r7, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d1f3      	bne.n	8000be0 <LCD_IO_WriteCmd8MultipleData8+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 0);
  #endif
}
 8000bf8:	bf00      	nop
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	600ffffe 	.word	0x600ffffe

08000c0c <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
 8000c18:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8000c1a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
 8000c20:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 0
  while(Size--)
 8000c22:	e00d      	b.n	8000c40 <LCD_IO_WriteCmd8MultipleData16+0x34>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = RD(*pData);
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	b21b      	sxth	r3, r3
 8000c2a:	82fb      	strh	r3, [r7, #22]
 8000c2c:	8afb      	ldrh	r3, [r7, #22]
 8000c2e:	ba5b      	rev16	r3, r3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	b21a      	sxth	r2, r3
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <LCD_IO_WriteCmd8MultipleData16+0x4c>)
 8000c36:	b292      	uxth	r2, r2
 8000c38:	801a      	strh	r2, [r3, #0]
    pData++;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	3302      	adds	r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	1e5a      	subs	r2, r3, #1
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d1ec      	bne.n	8000c24 <LCD_IO_WriteCmd8MultipleData16+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 1);
  #endif
}
 8000c4a:	bf00      	nop
 8000c4c:	bf00      	nop
 8000c4e:	371c      	adds	r7, #28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	600ffffe 	.word	0x600ffffe

08000c5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000c60:	f3bf 8f4f 	dsb	sy
}
 8000c64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <__NVIC_SystemReset+0x24>)
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c6e:	4904      	ldr	r1, [pc, #16]	; (8000c80 <__NVIC_SystemReset+0x24>)
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <__NVIC_SystemReset+0x28>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c76:	f3bf 8f4f 	dsb	sy
}
 8000c7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <__NVIC_SystemReset+0x20>
 8000c80:	e000ed00 	.word	0xe000ed00
 8000c84:	05fa0004 	.word	0x05fa0004

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 fd43 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f831 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f000 f925 	bl	8000ee4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c9a:	f000 f897 	bl	8000dcc <MX_ADC1_Init>
  MX_FSMC_Init();
 8000c9e:	f000 f987 	bl	8000fb0 <MX_FSMC_Init>
  MX_USART2_UART_Init();
 8000ca2:	f000 f8f5 	bl	8000e90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, dataReceivedInTheRx, 1);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	490f      	ldr	r1, [pc, #60]	; (8000ce8 <main+0x60>)
 8000caa:	4810      	ldr	r0, [pc, #64]	; (8000cec <main+0x64>)
 8000cac:	f001 ffdb 	bl	8002c66 <HAL_UART_Receive_IT>
  ili9341_Init();
 8000cb0:	f7ff fc0c 	bl	80004cc <ili9341_Init>
  ili9341_FillScreen(COLOR_BLACK); // fundo com tela preta
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	f7ff fdec 	bl	8000892 <ili9341_FillScreen>
  ili9341_DrawRGBImage(0, 172, 320, 240, gameImage); // carrega a imagem do game
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <main+0x68>)
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	23f0      	movs	r3, #240	; 0xf0
 8000cc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cc4:	21ac      	movs	r1, #172	; 0xac
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fdf5 	bl	80008b6 <ili9341_DrawRGBImage>
  ili9341_DrawRGBImage(0, 235, 320, 62, StrengthAimImage);
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <main+0x6c>)
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	233e      	movs	r3, #62	; 0x3e
 8000cd2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000cd6:	21eb      	movs	r1, #235	; 0xeb
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fdec 	bl	80008b6 <ili9341_DrawRGBImage>
  initImageBall(); // inicializa a função criar bola de basquete
 8000cde:	f000 fa27 	bl	8001130 <initImageBall>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  initStrengthBar();
 8000ce2:	f000 fa51 	bl	8001188 <initStrengthBar>
 8000ce6:	e7fc      	b.n	8000ce2 <main+0x5a>
 8000ce8:	20000114 	.word	0x20000114
 8000cec:	20000080 	.word	0x20000080
 8000cf0:	080034b8 	.word	0x080034b8
 8000cf4:	080412b8 	.word	0x080412b8

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2230      	movs	r2, #48	; 0x30
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 fb8c 	bl	8003424 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <SystemClock_Config+0xcc>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d46:	6013      	str	r3, [r2, #0]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <SystemClock_Config+0xd0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d54:	2302      	movs	r3, #2
 8000d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d68:	2308      	movs	r3, #8
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000d6c:	23a8      	movs	r3, #168	; 0xa8
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d74:	2304      	movs	r3, #4
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0320 	add.w	r3, r7, #32
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fa45 	bl	800220c <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d88:	f000 fb34 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2302      	movs	r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2105      	movs	r1, #5
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 fca6 	bl	80026fc <HAL_RCC_ClockConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000db6:	f000 fb1d 	bl	80013f4 <Error_Handler>
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3750      	adds	r7, #80	; 0x50
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40007000 	.word	0x40007000

08000dcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dde:	4b29      	ldr	r3, [pc, #164]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000de0:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <MX_ADC1_Init+0xbc>)
 8000de2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000de4:	4b27      	ldr	r3, [pc, #156]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000de6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000df2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000df4:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e00:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e10:	4a1e      	ldr	r2, [pc, #120]	; (8000e8c <MX_ADC1_Init+0xc0>)
 8000e12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e2e:	4815      	ldr	r0, [pc, #84]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e30:	f000 fd08 	bl	8001844 <HAL_ADC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000e3a:	f000 fadb 	bl	80013f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000e46:	2307      	movs	r3, #7
 8000e48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480d      	ldr	r0, [pc, #52]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e50:	f000 fd3c 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e5a:	f000 facb 	bl	80013f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e5e:	230b      	movs	r3, #11
 8000e60:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	463b      	mov	r3, r7
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_ADC1_Init+0xb8>)
 8000e6c:	f000 fd2e 	bl	80018cc <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000e76:	f000 fabd 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000038 	.word	0x20000038
 8000e88:	40012000 	.word	0x40012000
 8000e8c:	0f000001 	.word	0x0f000001

08000e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_USART2_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART2_UART_Init+0x4c>)
 8000ec8:	f001 fe80 	bl	8002bcc <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f000 fa8f 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000080 	.word	0x20000080
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f58:	f043 0310 	orr.w	r3, r3, #16
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a0d      	ldr	r2, [pc, #52]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <MX_GPIO_Init+0xc4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_GPIO_Init+0xc8>)
 8000f9c:	f000 ff9a 	bl	8001ed4 <HAL_GPIO_Init>

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	; 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40021000 	.word	0x40021000

08000fb0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fc8:	4b27      	ldr	r3, [pc, #156]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000fca:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fce:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fd0:	4b25      	ldr	r3, [pc, #148]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000fd2:	4a26      	ldr	r2, [pc, #152]	; (800106c <MX_FSMC_Init+0xbc>)
 8000fd4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fd6:	4b24      	ldr	r3, [pc, #144]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fdc:	4b22      	ldr	r3, [pc, #136]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000ffa:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <MX_FSMC_Init+0xb8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001000:	4b19      	ldr	r3, [pc, #100]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001008:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800100c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001016:	2200      	movs	r2, #0
 8001018:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <MX_FSMC_Init+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001022:	2200      	movs	r2, #0
 8001024:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001028:	2200      	movs	r2, #0
 800102a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 800102c:	2306      	movs	r3, #6
 800102e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001030:	230f      	movs	r3, #15
 8001032:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 8001034:	2306      	movs	r3, #6
 8001036:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001038:	230f      	movs	r3, #15
 800103a:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800103c:	2310      	movs	r3, #16
 800103e:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001040:	2311      	movs	r3, #17
 8001042:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_FSMC_Init+0xb8>)
 8001050:	f001 fd74 	bl	8002b3c <HAL_SRAM_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 800105a:	f000 f9cb 	bl	80013f4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800105e:	bf00      	nop
 8001060:	3720      	adds	r7, #32
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000c4 	.word	0x200000c4
 800106c:	a0000104 	.word	0xa0000104

08001070 <checkingRxData>:
	HAL_UART_Receive_IT(&huart2, dataReceivedInTheRx, 1);
	flagReceivedDataInTheRx = 1;
}

void checkingRxData()
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af02      	add	r7, sp, #8
	if (flagReceivedDataInTheRx) // verifica se chegou algo na porta serial
 8001076:	4b2a      	ldr	r3, [pc, #168]	; (8001120 <checkingRxData+0xb0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d04d      	beq.n	800111a <checkingRxData+0xaa>
	{
		flagReceivedDataInTheRx = 0;
 800107e:	4b28      	ldr	r3, [pc, #160]	; (8001120 <checkingRxData+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
		if(strengthBarAimValue >= 130 && strengthBarAimValue <= 170)
 8001084:	4b27      	ldr	r3, [pc, #156]	; (8001124 <checkingRxData+0xb4>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b81      	cmp	r3, #129	; 0x81
 800108a:	dd16      	ble.n	80010ba <checkingRxData+0x4a>
 800108c:	4b25      	ldr	r3, [pc, #148]	; (8001124 <checkingRxData+0xb4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2baa      	cmp	r3, #170	; 0xaa
 8001092:	dc12      	bgt.n	80010ba <checkingRxData+0x4a>
		{
			animationHitThePitch();
 8001094:	f000 f8ce 	bl	8001234 <animationHitThePitch>
			ili9341_FillScreen(COLOR_BLACK); // fundo com tela preta
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff fbfa 	bl	8000892 <ili9341_FillScreen>
			ili9341_DrawRGBImage(40, 239, 240, 240, youWinImage); // carrega a imagem do game
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <checkingRxData+0xb8>)
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	23f0      	movs	r3, #240	; 0xf0
 80010a4:	22f0      	movs	r2, #240	; 0xf0
 80010a6:	21ef      	movs	r1, #239	; 0xef
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f7ff fc04 	bl	80008b6 <ili9341_DrawRGBImage>
			HAL_Delay(2000);
 80010ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010b2:	f000 fba3 	bl	80017fc <HAL_Delay>
			NVIC_SystemReset();
 80010b6:	f7ff fdd1 	bl	8000c5c <__NVIC_SystemReset>
		}
		if(strengthBarAimValue < 130)
 80010ba:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <checkingRxData+0xb4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b81      	cmp	r3, #129	; 0x81
 80010c0:	dc13      	bgt.n	80010ea <checkingRxData+0x7a>
		{
			strongThrowAnimation();
 80010c2:	f000 f90d 	bl	80012e0 <strongThrowAnimation>
			ili9341_FillScreen(COLOR_BLACK); // fundo com tela preta
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff fbe3 	bl	8000892 <ili9341_FillScreen>
			ili9341_DrawRGBImage(10, 239, 300, 240, gameOverImage); // carrega a imagem do game
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <checkingRxData+0xbc>)
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	23f0      	movs	r3, #240	; 0xf0
 80010d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010d6:	21ef      	movs	r1, #239	; 0xef
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff fbec 	bl	80008b6 <ili9341_DrawRGBImage>
			HAL_Delay(2000);
 80010de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010e2:	f000 fb8b 	bl	80017fc <HAL_Delay>
			NVIC_SystemReset();
 80010e6:	f7ff fdb9 	bl	8000c5c <__NVIC_SystemReset>
		}
		if(strengthBarAimValue >170)
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <checkingRxData+0xb4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2baa      	cmp	r3, #170	; 0xaa
 80010f0:	dd13      	ble.n	800111a <checkingRxData+0xaa>
		{
			weakThrowAnimation();
 80010f2:	f000 f929 	bl	8001348 <weakThrowAnimation>
			ili9341_FillScreen(COLOR_BLACK); // fundo com tela preta
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff fbcb 	bl	8000892 <ili9341_FillScreen>
			ili9341_DrawRGBImage(10, 239, 300, 240, gameOverImage); // carrega a imagem do game
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <checkingRxData+0xbc>)
 80010fe:	9300      	str	r3, [sp, #0]
 8001100:	23f0      	movs	r3, #240	; 0xf0
 8001102:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001106:	21ef      	movs	r1, #239	; 0xef
 8001108:	200a      	movs	r0, #10
 800110a:	f7ff fbd4 	bl	80008b6 <ili9341_DrawRGBImage>
			HAL_Delay(2000);
 800110e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001112:	f000 fb73 	bl	80017fc <HAL_Delay>
			NVIC_SystemReset();
 8001116:	f7ff fda1 	bl	8000c5c <__NVIC_SystemReset>
		}
	}
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000120 	.word	0x20000120
 8001124:	20000124 	.word	0x20000124
 8001128:	0804add0 	.word	0x0804add0
 800112c:	0801e038 	.word	0x0801e038

08001130 <initImageBall>:

void initImageBall(void) // função criar bola de basquete
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	ili9341_DrawCircle(ballsXAxis[0], ballsYAxis[0], 1, COLOR_ORANGE);
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <initImageBall+0x50>)
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <initImageBall+0x54>)
 800113a:	6819      	ldr	r1, [r3, #0]
 800113c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001140:	2201      	movs	r2, #1
 8001142:	f7ff fbda 	bl	80008fa <ili9341_DrawCircle>
	ili9341_DrawCircle(ballsXAxis[0], ballsYAxis[0], 2, COLOR_ORANGE);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <initImageBall+0x50>)
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <initImageBall+0x54>)
 800114c:	6819      	ldr	r1, [r3, #0]
 800114e:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001152:	2202      	movs	r2, #2
 8001154:	f7ff fbd1 	bl	80008fa <ili9341_DrawCircle>
	ili9341_DrawCircle(ballsXAxis[0], ballsYAxis[0], 3, COLOR_ORANGE);
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <initImageBall+0x50>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <initImageBall+0x54>)
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001164:	2203      	movs	r2, #3
 8001166:	f7ff fbc8 	bl	80008fa <ili9341_DrawCircle>
	ili9341_DrawCircle(ballsXAxis[0], ballsYAxis[0], 4, COLOR_ORANGE);
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <initImageBall+0x50>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <initImageBall+0x54>)
 8001170:	6819      	ldr	r1, [r3, #0]
 8001172:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001176:	2204      	movs	r2, #4
 8001178:	f7ff fbbf 	bl	80008fa <ili9341_DrawCircle>
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000004 	.word	0x20000004

08001188 <initStrengthBar>:

void initStrengthBar() // função iniciar barra de força
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
	if (strengthBarAimValue < 290)
 800118e:	4b27      	ldr	r3, [pc, #156]	; (800122c <initStrengthBar+0xa4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001196:	da22      	bge.n	80011de <initStrengthBar+0x56>
	{
		for (int i = 4; i <= 300; i = i + 10)
 8001198:	2304      	movs	r3, #4
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	e01a      	b.n	80011d4 <initStrengthBar+0x4c>
		{
			strengthBarAimValue = i;
 800119e:	4a23      	ldr	r2, [pc, #140]	; (800122c <initStrengthBar+0xa4>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6013      	str	r3, [r2, #0]
			ili9341_DrawRGBImage(0, 235, 320, 62, StrengthAimImage);
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <initStrengthBar+0xa8>)
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	233e      	movs	r3, #62	; 0x3e
 80011aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011ae:	21eb      	movs	r1, #235	; 0xeb
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fb80 	bl	80008b6 <ili9341_DrawRGBImage>
			ili9341_FillRect(strengthBarAimValue, 235, 20, -62, COLOR_BLACK);
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <initStrengthBar+0xa4>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 80011c2:	2214      	movs	r2, #20
 80011c4:	21eb      	movs	r1, #235	; 0xeb
 80011c6:	f7ff fb01 	bl	80007cc <ili9341_FillRect>
			checkingRxData();
 80011ca:	f7ff ff51 	bl	8001070 <checkingRxData>
		for (int i = 4; i <= 300; i = i + 10)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	330a      	adds	r3, #10
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011da:	dde0      	ble.n	800119e <initStrengthBar+0x16>
			ili9341_DrawRGBImage(0, 235, 320, 62, StrengthAimImage);
			ili9341_FillRect(strengthBarAimValue, 235, 20, -62, COLOR_BLACK);
			checkingRxData();
		}
	}
}
 80011dc:	e021      	b.n	8001222 <initStrengthBar+0x9a>
		for (int i = 310; i >= 10; i = i - 10)
 80011de:	f44f 739b 	mov.w	r3, #310	; 0x136
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	e01a      	b.n	800121c <initStrengthBar+0x94>
			strengthBarAimValue = i;
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <initStrengthBar+0xa4>)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6013      	str	r3, [r2, #0]
			ili9341_DrawRGBImage(0, 235, 320, 62, StrengthAimImage);
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <initStrengthBar+0xa8>)
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	233e      	movs	r3, #62	; 0x3e
 80011f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80011f6:	21eb      	movs	r1, #235	; 0xeb
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fb5c 	bl	80008b6 <ili9341_DrawRGBImage>
			ili9341_FillRect(strengthBarAimValue, 235, 20, -62, COLOR_BLACK);
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <initStrengthBar+0xa4>)
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	2300      	movs	r3, #0
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	f06f 033d 	mvn.w	r3, #61	; 0x3d
 800120a:	2214      	movs	r2, #20
 800120c:	21eb      	movs	r1, #235	; 0xeb
 800120e:	f7ff fadd 	bl	80007cc <ili9341_FillRect>
			checkingRxData();
 8001212:	f7ff ff2d 	bl	8001070 <checkingRxData>
		for (int i = 310; i >= 10; i = i - 10)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3b0a      	subs	r3, #10
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	2b09      	cmp	r3, #9
 8001220:	dce1      	bgt.n	80011e6 <initStrengthBar+0x5e>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000124 	.word	0x20000124
 8001230:	080412b8 	.word	0x080412b8

08001234 <animationHitThePitch>:

void animationHitThePitch()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af02      	add	r7, sp, #8
	int count = 1;
 800123a:	2301      	movs	r3, #1
 800123c:	607b      	str	r3, [r7, #4]
	while(count <= 11)
 800123e:	e040      	b.n	80012c2 <animationHitThePitch+0x8e>
	{
		if(ballsXAxis[0] > 175)
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <animationHitThePitch+0xa0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2baf      	cmp	r3, #175	; 0xaf
 8001246:	dd18      	ble.n	800127a <animationHitThePitch+0x46>
		{
			ili9341_DrawRGBImage(0, 172, 320, 171, gameImage);
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <animationHitThePitch+0xa4>)
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	23ab      	movs	r3, #171	; 0xab
 800124e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001252:	21ac      	movs	r1, #172	; 0xac
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fb2e 	bl	80008b6 <ili9341_DrawRGBImage>
			ballsXAxis[0] = ballsXAxis[0] - 19;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <animationHitThePitch+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3b13      	subs	r3, #19
 8001260:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <animationHitThePitch+0xa0>)
 8001262:	6013      	str	r3, [r2, #0]
			ballsYAxis[0] = ballsYAxis[0] - 11;
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <animationHitThePitch+0xa8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3b0b      	subs	r3, #11
 800126a:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <animationHitThePitch+0xa8>)
 800126c:	6013      	str	r3, [r2, #0]
			initImageBall();
 800126e:	f7ff ff5f 	bl	8001130 <initImageBall>
			HAL_Delay(300);
 8001272:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001276:	f000 fac1 	bl	80017fc <HAL_Delay>
		}
		if(ballsXAxis[0] < 175 && ballsXAxis[0] > 69)
 800127a:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <animationHitThePitch+0xa0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2bae      	cmp	r3, #174	; 0xae
 8001280:	dc1c      	bgt.n	80012bc <animationHitThePitch+0x88>
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <animationHitThePitch+0xa0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b45      	cmp	r3, #69	; 0x45
 8001288:	dd18      	ble.n	80012bc <animationHitThePitch+0x88>
		{
			ili9341_DrawRGBImage(0, 172, 320, 171, gameImage);
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <animationHitThePitch+0xa4>)
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	23ab      	movs	r3, #171	; 0xab
 8001290:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001294:	21ac      	movs	r1, #172	; 0xac
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff fb0d 	bl	80008b6 <ili9341_DrawRGBImage>
			ballsXAxis[0] = ballsXAxis[0] - 21;
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <animationHitThePitch+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3b15      	subs	r3, #21
 80012a2:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <animationHitThePitch+0xa0>)
 80012a4:	6013      	str	r3, [r2, #0]
			ballsYAxis[0] = ballsYAxis[0] + 14;
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <animationHitThePitch+0xa8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	330e      	adds	r3, #14
 80012ac:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <animationHitThePitch+0xa8>)
 80012ae:	6013      	str	r3, [r2, #0]
			initImageBall();
 80012b0:	f7ff ff3e 	bl	8001130 <initImageBall>
			HAL_Delay(300);
 80012b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80012b8:	f000 faa0 	bl	80017fc <HAL_Delay>
		}
		count++;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3301      	adds	r3, #1
 80012c0:	607b      	str	r3, [r7, #4]
	while(count <= 11)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0b      	cmp	r3, #11
 80012c6:	ddbb      	ble.n	8001240 <animationHitThePitch+0xc>
	}
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000000 	.word	0x20000000
 80012d8:	080034b8 	.word	0x080034b8
 80012dc:	20000004 	.word	0x20000004

080012e0 <strongThrowAnimation>:

void strongThrowAnimation()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af02      	add	r7, sp, #8
	int count = 1;
 80012e6:	2301      	movs	r3, #1
 80012e8:	607b      	str	r3, [r7, #4]
	while(count <= 14)
 80012ea:	e01e      	b.n	800132a <strongThrowAnimation+0x4a>
	{
		if(ballsXAxis[0] > 0)
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <strongThrowAnimation+0x5c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	dd17      	ble.n	8001324 <strongThrowAnimation+0x44>
		{
			ili9341_DrawRGBImage(0, 172, 320, 171, gameImage);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <strongThrowAnimation+0x60>)
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	23ab      	movs	r3, #171	; 0xab
 80012fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80012fe:	21ac      	movs	r1, #172	; 0xac
 8001300:	2000      	movs	r0, #0
 8001302:	f7ff fad8 	bl	80008b6 <ili9341_DrawRGBImage>
			ballsXAxis[0] = ballsXAxis[0] - 20;
 8001306:	4b0d      	ldr	r3, [pc, #52]	; (800133c <strongThrowAnimation+0x5c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	3b14      	subs	r3, #20
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <strongThrowAnimation+0x5c>)
 800130e:	6013      	str	r3, [r2, #0]
			ballsYAxis[0] = ballsYAxis[0] - 4;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <strongThrowAnimation+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3b04      	subs	r3, #4
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <strongThrowAnimation+0x64>)
 8001318:	6013      	str	r3, [r2, #0]
			initImageBall();
 800131a:	f7ff ff09 	bl	8001130 <initImageBall>
			HAL_Delay(100);
 800131e:	2064      	movs	r0, #100	; 0x64
 8001320:	f000 fa6c 	bl	80017fc <HAL_Delay>
		}
		count++;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3301      	adds	r3, #1
 8001328:	607b      	str	r3, [r7, #4]
	while(count <= 14)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0e      	cmp	r3, #14
 800132e:	dddd      	ble.n	80012ec <strongThrowAnimation+0xc>
	}
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000
 8001340:	080034b8 	.word	0x080034b8
 8001344:	20000004 	.word	0x20000004

08001348 <weakThrowAnimation>:
void weakThrowAnimation()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
	int count = 1;
 800134e:	2301      	movs	r3, #1
 8001350:	607b      	str	r3, [r7, #4]
	while(count <= 15)
 8001352:	e040      	b.n	80013d6 <weakThrowAnimation+0x8e>
	{
		if(ballsXAxis[0] > 200)
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <weakThrowAnimation+0xa0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2bc8      	cmp	r3, #200	; 0xc8
 800135a:	dd18      	ble.n	800138e <weakThrowAnimation+0x46>
		{
			ili9341_DrawRGBImage(0, 172, 320, 171, gameImage);
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <weakThrowAnimation+0xa4>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	23ab      	movs	r3, #171	; 0xab
 8001362:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001366:	21ac      	movs	r1, #172	; 0xac
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff faa4 	bl	80008b6 <ili9341_DrawRGBImage>
			ballsXAxis[0] = ballsXAxis[0] - 19;
 800136e:	4b1e      	ldr	r3, [pc, #120]	; (80013e8 <weakThrowAnimation+0xa0>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3b13      	subs	r3, #19
 8001374:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <weakThrowAnimation+0xa0>)
 8001376:	6013      	str	r3, [r2, #0]
			ballsYAxis[0] = ballsYAxis[0] - 11;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <weakThrowAnimation+0xa8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3b0b      	subs	r3, #11
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <weakThrowAnimation+0xa8>)
 8001380:	6013      	str	r3, [r2, #0]
			initImageBall();
 8001382:	f7ff fed5 	bl	8001130 <initImageBall>
			HAL_Delay(300);
 8001386:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800138a:	f000 fa37 	bl	80017fc <HAL_Delay>
		}
		if(ballsXAxis[0] < 200 && ballsXAxis[0] > 30)
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <weakThrowAnimation+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2bc7      	cmp	r3, #199	; 0xc7
 8001394:	dc1c      	bgt.n	80013d0 <weakThrowAnimation+0x88>
 8001396:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <weakThrowAnimation+0xa0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b1e      	cmp	r3, #30
 800139c:	dd18      	ble.n	80013d0 <weakThrowAnimation+0x88>
		{
			ili9341_DrawRGBImage(0, 172, 320, 171, gameImage);
 800139e:	4b13      	ldr	r3, [pc, #76]	; (80013ec <weakThrowAnimation+0xa4>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	23ab      	movs	r3, #171	; 0xab
 80013a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80013a8:	21ac      	movs	r1, #172	; 0xac
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fa83 	bl	80008b6 <ili9341_DrawRGBImage>
			ballsXAxis[0] = ballsXAxis[0] - 21;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <weakThrowAnimation+0xa0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3b15      	subs	r3, #21
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <weakThrowAnimation+0xa0>)
 80013b8:	6013      	str	r3, [r2, #0]
			ballsYAxis[0] = ballsYAxis[0] + 14;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <weakThrowAnimation+0xa8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	330e      	adds	r3, #14
 80013c0:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <weakThrowAnimation+0xa8>)
 80013c2:	6013      	str	r3, [r2, #0]
			initImageBall();
 80013c4:	f7ff feb4 	bl	8001130 <initImageBall>
			HAL_Delay(300);
 80013c8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013cc:	f000 fa16 	bl	80017fc <HAL_Delay>
		}
		count++;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	607b      	str	r3, [r7, #4]
	while(count <= 15)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	ddbb      	ble.n	8001354 <weakThrowAnimation+0xc>
	}
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000
 80013ec:	080034b8 	.word	0x080034b8
 80013f0:	20000004 	.word	0x20000004

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	e7fe      	b.n	80013fc <Error_Handler+0x8>
	...

08001400 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_MspInit+0x4c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <HAL_MspInit+0x4c>)
 8001410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_MspInit+0x4c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_MspInit+0x4c>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_MspInit+0x4c>)
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_MspInit+0x4c>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a24      	ldr	r2, [pc, #144]	; (8001500 <HAL_ADC_MspInit+0xb0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d141      	bne.n	80014f6 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b23      	ldr	r3, [pc, #140]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	4a22      	ldr	r2, [pc, #136]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6453      	str	r3, [r2, #68]	; 0x44
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a14      	ldr	r2, [pc, #80]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_ADC_MspInit+0xb4>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014c6:	2302      	movs	r3, #2
 80014c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ca:	2303      	movs	r3, #3
 80014cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	480b      	ldr	r0, [pc, #44]	; (8001508 <HAL_ADC_MspInit+0xb8>)
 80014da:	f000 fcfb 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014de:	2302      	movs	r3, #2
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e2:	2303      	movs	r3, #3
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	4619      	mov	r1, r3
 80014f0:	4806      	ldr	r0, [pc, #24]	; (800150c <HAL_ADC_MspInit+0xbc>)
 80014f2:	f000 fcef 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40012000 	.word	0x40012000
 8001504:	40023800 	.word	0x40023800
 8001508:	40020800 	.word	0x40020800
 800150c:	40020000 	.word	0x40020000

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_UART_MspInit+0x84>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d12b      	bne.n	800158a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a17      	ldr	r2, [pc, #92]	; (8001598 <HAL_UART_MspInit+0x88>)
 800153c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_UART_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800156a:	230c      	movs	r3, #12
 800156c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001576:	2303      	movs	r3, #3
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157a:	2307      	movs	r3, #7
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_UART_MspInit+0x8c>)
 8001586:	f000 fca5 	bl	8001ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	; 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40004400 	.word	0x40004400
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000

080015a0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <HAL_FSMC_MspInit+0x88>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d131      	bne.n	8001620 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_FSMC_MspInit+0x88>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_FSMC_MspInit+0x8c>)
 80015c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ca:	4a18      	ldr	r2, [pc, #96]	; (800162c <HAL_FSMC_MspInit+0x8c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6393      	str	r3, [r2, #56]	; 0x38
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_FSMC_MspInit+0x8c>)
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80015de:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80015e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80015f0:	230c      	movs	r3, #12
 80015f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	480d      	ldr	r0, [pc, #52]	; (8001630 <HAL_FSMC_MspInit+0x90>)
 80015fa:	f000 fc6b 	bl	8001ed4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80015fe:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 8001602:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160c:	2303      	movs	r3, #3
 800160e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001610:	230c      	movs	r3, #12
 8001612:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	4619      	mov	r1, r3
 8001618:	4806      	ldr	r0, [pc, #24]	; (8001634 <HAL_FSMC_MspInit+0x94>)
 800161a:	f000 fc5b 	bl	8001ed4 <HAL_GPIO_Init>
 800161e:	e000      	b.n	8001622 <HAL_FSMC_MspInit+0x82>
    return;
 8001620:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000128 	.word	0x20000128
 800162c:	40023800 	.word	0x40023800
 8001630:	40021000 	.word	0x40021000
 8001634:	40020c00 	.word	0x40020c00

08001638 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001640:	f7ff ffae 	bl	80015a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f890 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <SystemInit+0x20>)
 80016a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <SystemInit+0x20>)
 80016ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ca:	490e      	ldr	r1, [pc, #56]	; (8001704 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d0:	e002      	b.n	80016d8 <LoopCopyDataInit>

080016d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d6:	3304      	adds	r3, #4

080016d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016dc:	d3f9      	bcc.n	80016d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016de:	4a0b      	ldr	r2, [pc, #44]	; (800170c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016e0:	4c0b      	ldr	r4, [pc, #44]	; (8001710 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e4:	e001      	b.n	80016ea <LoopFillZerobss>

080016e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e8:	3204      	adds	r2, #4

080016ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016ec:	d3fb      	bcc.n	80016e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016ee:	f7ff ffd7 	bl	80016a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f001 fe73 	bl	80033dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff fac7 	bl	8000c88 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001708:	08066fe0 	.word	0x08066fe0
  ldr r2, =_sbss
 800170c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001710:	20000130 	.word	0x20000130

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	; (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	; (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 fb93 	bl	8001e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	200f      	movs	r0, #15
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fe58 	bl	8001400 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 fb9d 	bl	8001eba <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 fb73 	bl	8001e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000010 	.word	0x20000010
 80017b8:	2000000c 	.word	0x2000000c

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000010 	.word	0x20000010
 80017e0:	2000012c 	.word	0x2000012c

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	; (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	2000012c 	.word	0x2000012c

080017fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff ffee 	bl	80017e4 <HAL_GetTick>
 8001808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001814:	d005      	beq.n	8001822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_Delay+0x44>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001822:	bf00      	nop
 8001824:	f7ff ffde 	bl	80017e4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	429a      	cmp	r2, r3
 8001832:	d8f7      	bhi.n	8001824 <HAL_Delay+0x28>
  {
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000010 	.word	0x20000010

08001844 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e033      	b.n	80018c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff fdf4 	bl	8001450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	d118      	bne.n	80018b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800188a:	f023 0302 	bic.w	r3, r3, #2
 800188e:	f043 0202 	orr.w	r2, r3, #2
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f93a 	bl	8001b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f023 0303 	bic.w	r3, r3, #3
 80018aa:	f043 0201 	orr.w	r2, r3, #1
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
 80018b2:	e001      	b.n	80018b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1c>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e105      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x228>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b09      	cmp	r3, #9
 80018f6:	d925      	bls.n	8001944 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68d9      	ldr	r1, [r3, #12]
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	b29b      	uxth	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	3b1e      	subs	r3, #30
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43da      	mvns	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	400a      	ands	r2, r1
 800191c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68d9      	ldr	r1, [r3, #12]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	4603      	mov	r3, r0
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4403      	add	r3, r0
 8001936:	3b1e      	subs	r3, #30
 8001938:	409a      	lsls	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	e022      	b.n	800198a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6919      	ldr	r1, [r3, #16]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	2207      	movs	r2, #7
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6919      	ldr	r1, [r3, #16]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4618      	mov	r0, r3
 800197a:	4603      	mov	r3, r0
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4403      	add	r3, r0
 8001980:	409a      	lsls	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b06      	cmp	r3, #6
 8001990:	d824      	bhi.n	80019dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b05      	subs	r3, #5
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43da      	mvns	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	400a      	ands	r2, r1
 80019b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	3b05      	subs	r3, #5
 80019ce:	fa00 f203 	lsl.w	r2, r0, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
 80019da:	e04c      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d824      	bhi.n	8001a2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	221f      	movs	r2, #31
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43da      	mvns	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	400a      	ands	r2, r1
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4618      	mov	r0, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b23      	subs	r3, #35	; 0x23
 8001a20:	fa00 f203 	lsl.w	r2, r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a2c:	e023      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3b41      	subs	r3, #65	; 0x41
 8001a40:	221f      	movs	r2, #31
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	400a      	ands	r2, r1
 8001a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	3b41      	subs	r3, #65	; 0x41
 8001a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <HAL_ADC_ConfigChannel+0x234>)
 8001a78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <HAL_ADC_ConfigChannel+0x238>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d109      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b12      	cmp	r3, #18
 8001a8a:	d105      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_ADC_ConfigChannel+0x238>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d123      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d003      	beq.n	8001ab2 <HAL_ADC_ConfigChannel+0x1e6>
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b11      	cmp	r3, #17
 8001ab0:	d11b      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b10      	cmp	r3, #16
 8001ac4:	d111      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_ADC_ConfigChannel+0x23c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_ADC_ConfigChannel+0x240>)
 8001acc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad0:	0c9a      	lsrs	r2, r3, #18
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001adc:	e002      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f9      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	40012300 	.word	0x40012300
 8001b04:	40012000 	.word	0x40012000
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b18:	4b79      	ldr	r3, [pc, #484]	; (8001d00 <ADC_Init+0x1f0>)
 8001b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	431a      	orrs	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	021a      	lsls	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689a      	ldr	r2, [r3, #8]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6899      	ldr	r1, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	4a58      	ldr	r2, [pc, #352]	; (8001d04 <ADC_Init+0x1f4>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d022      	beq.n	8001bee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e00f      	b.n	8001c0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 0202 	bic.w	r2, r2, #2
 8001c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6899      	ldr	r1, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	7e1b      	ldrb	r3, [r3, #24]
 8001c28:	005a      	lsls	r2, r3, #1
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d01b      	beq.n	8001c74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6859      	ldr	r1, [r3, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	3b01      	subs	r3, #1
 8001c68:	035a      	lsls	r2, r3, #13
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	e007      	b.n	8001c84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	051a      	lsls	r2, r3, #20
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6899      	ldr	r1, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001cc6:	025a      	lsls	r2, r3, #9
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6899      	ldr	r1, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	029a      	lsls	r2, r3, #10
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	609a      	str	r2, [r3, #8]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40012300 	.word	0x40012300
 8001d04:	0f000001 	.word	0x0f000001

08001d08 <__NVIC_SetPriorityGrouping>:
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_SetPriority>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4908      	ldr	r1, [pc, #32]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	3b04      	subs	r3, #4
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	f04f 32ff 	mov.w	r2, #4294967295
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	401a      	ands	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e08:	f04f 31ff 	mov.w	r1, #4294967295
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	4313      	orrs	r3, r2
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
	...

08001e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e38:	d301      	bcc.n	8001e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00f      	b.n	8001e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e3e:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <SysTick_Config+0x40>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e46:	210f      	movs	r1, #15
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f7ff ff8e 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <SysTick_Config+0x40>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <SysTick_Config+0x40>)
 8001e58:	2207      	movs	r2, #7
 8001e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	e000e010 	.word	0xe000e010

08001e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff47 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e94:	f7ff ff5c 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68b9      	ldr	r1, [r7, #8]
 8001e9e:	6978      	ldr	r0, [r7, #20]
 8001ea0:	f7ff ff8e 	bl	8001dc0 <NVIC_EncodePriority>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff5d 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eb2:	bf00      	nop
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffb0 	bl	8001e28 <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e16b      	b.n	80021c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	4013      	ands	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	f040 815a 	bne.w	80021c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d005      	beq.n	8001f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d130      	bne.n	8001f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0201 	and.w	r2, r3, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	d017      	beq.n	8001fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d123      	bne.n	8002018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	08da      	lsrs	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3208      	adds	r2, #8
 8001fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	220f      	movs	r2, #15
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	08da      	lsrs	r2, r3, #3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3208      	adds	r2, #8
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2203      	movs	r2, #3
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0203 	and.w	r2, r3, #3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80b4 	beq.w	80021c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	4b60      	ldr	r3, [pc, #384]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a5f      	ldr	r2, [pc, #380]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 8002064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_GPIO_Init+0x30c>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002076:	4a5b      	ldr	r2, [pc, #364]	; (80021e4 <HAL_GPIO_Init+0x310>)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	3302      	adds	r3, #2
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_GPIO_Init+0x314>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <HAL_GPIO_Init+0x226>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a51      	ldr	r2, [pc, #324]	; (80021ec <HAL_GPIO_Init+0x318>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d025      	beq.n	80020f6 <HAL_GPIO_Init+0x222>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a50      	ldr	r2, [pc, #320]	; (80021f0 <HAL_GPIO_Init+0x31c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01f      	beq.n	80020f2 <HAL_GPIO_Init+0x21e>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_GPIO_Init+0x320>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d019      	beq.n	80020ee <HAL_GPIO_Init+0x21a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4e      	ldr	r2, [pc, #312]	; (80021f8 <HAL_GPIO_Init+0x324>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <HAL_GPIO_Init+0x216>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_GPIO_Init+0x328>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d00d      	beq.n	80020e6 <HAL_GPIO_Init+0x212>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4c      	ldr	r2, [pc, #304]	; (8002200 <HAL_GPIO_Init+0x32c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d007      	beq.n	80020e2 <HAL_GPIO_Init+0x20e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <HAL_GPIO_Init+0x330>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d101      	bne.n	80020de <HAL_GPIO_Init+0x20a>
 80020da:	2307      	movs	r3, #7
 80020dc:	e00e      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020de:	2308      	movs	r3, #8
 80020e0:	e00c      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e2:	2306      	movs	r3, #6
 80020e4:	e00a      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020e6:	2305      	movs	r3, #5
 80020e8:	e008      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ea:	2304      	movs	r3, #4
 80020ec:	e006      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020ee:	2303      	movs	r3, #3
 80020f0:	e004      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e002      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e000      	b.n	80020fc <HAL_GPIO_Init+0x228>
 80020fa:	2300      	movs	r3, #0
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	f002 0203 	and.w	r2, r2, #3
 8002102:	0092      	lsls	r2, r2, #2
 8002104:	4093      	lsls	r3, r2
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800210c:	4935      	ldr	r1, [pc, #212]	; (80021e4 <HAL_GPIO_Init+0x310>)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211a:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_GPIO_Init+0x334>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213e:	4a32      	ldr	r2, [pc, #200]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002144:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002168:	4a27      	ldr	r2, [pc, #156]	; (8002208 <HAL_GPIO_Init+0x334>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800216e:	4b26      	ldr	r3, [pc, #152]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <HAL_GPIO_Init+0x334>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_GPIO_Init+0x334>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021bc:	4a12      	ldr	r2, [pc, #72]	; (8002208 <HAL_GPIO_Init+0x334>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3301      	adds	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	f67f ae90 	bls.w	8001ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	3724      	adds	r7, #36	; 0x24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40013800 	.word	0x40013800
 80021e8:	40020000 	.word	0x40020000
 80021ec:	40020400 	.word	0x40020400
 80021f0:	40020800 	.word	0x40020800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40021400 	.word	0x40021400
 8002200:	40021800 	.word	0x40021800
 8002204:	40021c00 	.word	0x40021c00
 8002208:	40013c00 	.word	0x40013c00

0800220c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e267      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d075      	beq.n	8002316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800222a:	4b88      	ldr	r3, [pc, #544]	; (800244c <HAL_RCC_OscConfig+0x240>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b04      	cmp	r3, #4
 8002234:	d00c      	beq.n	8002250 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002236:	4b85      	ldr	r3, [pc, #532]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800223e:	2b08      	cmp	r3, #8
 8002240:	d112      	bne.n	8002268 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002242:	4b82      	ldr	r3, [pc, #520]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800224a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800224e:	d10b      	bne.n	8002268 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002250:	4b7e      	ldr	r3, [pc, #504]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d05b      	beq.n	8002314 <HAL_RCC_OscConfig+0x108>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d157      	bne.n	8002314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e242      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002270:	d106      	bne.n	8002280 <HAL_RCC_OscConfig+0x74>
 8002272:	4b76      	ldr	r3, [pc, #472]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a75      	ldr	r2, [pc, #468]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e01d      	b.n	80022bc <HAL_RCC_OscConfig+0xb0>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x98>
 800228a:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a6f      	ldr	r2, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b6d      	ldr	r3, [pc, #436]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6c      	ldr	r2, [pc, #432]	; (800244c <HAL_RCC_OscConfig+0x240>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e00b      	b.n	80022bc <HAL_RCC_OscConfig+0xb0>
 80022a4:	4b69      	ldr	r3, [pc, #420]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a68      	ldr	r2, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80022aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	4b66      	ldr	r3, [pc, #408]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a65      	ldr	r2, [pc, #404]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80022b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d013      	beq.n	80022ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c4:	f7ff fa8e 	bl	80017e4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022cc:	f7ff fa8a 	bl	80017e4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e207      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022de:	4b5b      	ldr	r3, [pc, #364]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0xc0>
 80022ea:	e014      	b.n	8002316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fa7a 	bl	80017e4 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f4:	f7ff fa76 	bl	80017e4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e1f3      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002306:	4b51      	ldr	r3, [pc, #324]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0xe8>
 8002312:	e000      	b.n	8002316 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d063      	beq.n	80023ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002322:	4b4a      	ldr	r3, [pc, #296]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00b      	beq.n	8002346 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800232e:	4b47      	ldr	r3, [pc, #284]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002336:	2b08      	cmp	r3, #8
 8002338:	d11c      	bne.n	8002374 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800233a:	4b44      	ldr	r3, [pc, #272]	; (800244c <HAL_RCC_OscConfig+0x240>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d116      	bne.n	8002374 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x152>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d001      	beq.n	800235e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e1c7      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4937      	ldr	r1, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x240>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002372:	e03a      	b.n	80023ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d020      	beq.n	80023be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800237c:	4b34      	ldr	r3, [pc, #208]	; (8002450 <HAL_RCC_OscConfig+0x244>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff fa2f 	bl	80017e4 <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800238a:	f7ff fa2b 	bl	80017e4 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e1a8      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b28      	ldr	r3, [pc, #160]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4925      	ldr	r1, [pc, #148]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
 80023bc:	e015      	b.n	80023ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <HAL_RCC_OscConfig+0x244>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7ff fa0e 	bl	80017e4 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023cc:	f7ff fa0a 	bl	80017e4 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e187      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d036      	beq.n	8002464 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_RCC_OscConfig+0x248>)
 8002400:	2201      	movs	r2, #1
 8002402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff f9ee 	bl	80017e4 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff f9ea 	bl	80017e4 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e167      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x240>)
 8002420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d0f0      	beq.n	800240c <HAL_RCC_OscConfig+0x200>
 800242a:	e01b      	b.n	8002464 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_OscConfig+0x248>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002432:	f7ff f9d7 	bl	80017e4 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002438:	e00e      	b.n	8002458 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800243a:	f7ff f9d3 	bl	80017e4 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d907      	bls.n	8002458 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e150      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
 800244c:	40023800 	.word	0x40023800
 8002450:	42470000 	.word	0x42470000
 8002454:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002458:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800245a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ea      	bne.n	800243a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 8097 	beq.w	80025a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	4b7d      	ldr	r3, [pc, #500]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	4a7c      	ldr	r2, [pc, #496]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	; 0x40
 8002492:	4b7a      	ldr	r3, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b77      	ldr	r3, [pc, #476]	; (8002680 <HAL_RCC_OscConfig+0x474>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b74      	ldr	r3, [pc, #464]	; (8002680 <HAL_RCC_OscConfig+0x474>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a73      	ldr	r2, [pc, #460]	; (8002680 <HAL_RCC_OscConfig+0x474>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7ff f993 	bl	80017e4 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7ff f98f 	bl	80017e4 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e10c      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x474>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2ea>
 80024e8:	4b64      	ldr	r3, [pc, #400]	; (800267c <HAL_RCC_OscConfig+0x470>)
 80024ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ec:	4a63      	ldr	r2, [pc, #396]	; (800267c <HAL_RCC_OscConfig+0x470>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6713      	str	r3, [r2, #112]	; 0x70
 80024f4:	e01c      	b.n	8002530 <HAL_RCC_OscConfig+0x324>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b05      	cmp	r3, #5
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x30c>
 80024fe:	4b5f      	ldr	r3, [pc, #380]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a5e      	ldr	r2, [pc, #376]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
 800250a:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	4a5b      	ldr	r2, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6713      	str	r3, [r2, #112]	; 0x70
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0x324>
 8002518:	4b58      	ldr	r3, [pc, #352]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251c:	4a57      	ldr	r2, [pc, #348]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6713      	str	r3, [r2, #112]	; 0x70
 8002524:	4b55      	ldr	r3, [pc, #340]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	4a54      	ldr	r2, [pc, #336]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800252a:	f023 0304 	bic.w	r3, r3, #4
 800252e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d015      	beq.n	8002564 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff f954 	bl	80017e4 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff f950 	bl	80017e4 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e0cb      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0ee      	beq.n	8002540 <HAL_RCC_OscConfig+0x334>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002564:	f7ff f93e 	bl	80017e4 <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800256c:	f7ff f93a 	bl	80017e4 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e0b5      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	4b3e      	ldr	r3, [pc, #248]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1ee      	bne.n	800256c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d105      	bne.n	80025a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002594:	4b39      	ldr	r3, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002598:	4a38      	ldr	r2, [pc, #224]	; (800267c <HAL_RCC_OscConfig+0x470>)
 800259a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a1 	beq.w	80026ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025aa:	4b34      	ldr	r3, [pc, #208]	; (800267c <HAL_RCC_OscConfig+0x470>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d05c      	beq.n	8002670 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d141      	bne.n	8002642 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b31      	ldr	r3, [pc, #196]	; (8002684 <HAL_RCC_OscConfig+0x478>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7ff f90e 	bl	80017e4 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7ff f90a 	bl	80017e4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e087      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	4b27      	ldr	r3, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x470>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69da      	ldr	r2, [r3, #28]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	019b      	lsls	r3, r3, #6
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	3b01      	subs	r3, #1
 8002604:	041b      	lsls	r3, r3, #16
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	491b      	ldr	r1, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_OscConfig+0x478>)
 8002616:	2201      	movs	r2, #1
 8002618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261a:	f7ff f8e3 	bl	80017e4 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002622:	f7ff f8df 	bl	80017e4 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e05c      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x416>
 8002640:	e054      	b.n	80026ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_OscConfig+0x478>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7ff f8cc 	bl	80017e4 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002650:	f7ff f8c8 	bl	80017e4 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e045      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_RCC_OscConfig+0x470>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x444>
 800266e:	e03d      	b.n	80026ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d107      	bne.n	8002688 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e038      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
 800267c:	40023800 	.word	0x40023800
 8002680:	40007000 	.word	0x40007000
 8002684:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_RCC_OscConfig+0x4ec>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d028      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d121      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d11a      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026b8:	4013      	ands	r3, r2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d111      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	3b01      	subs	r3, #1
 80026d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40023800 	.word	0x40023800

080026fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0cc      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d90c      	bls.n	8002738 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b65      	ldr	r3, [pc, #404]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b63      	ldr	r3, [pc, #396]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0b8      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d020      	beq.n	8002786 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800275a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a52      	ldr	r2, [pc, #328]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002772:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002774:	4b50      	ldr	r3, [pc, #320]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	494d      	ldr	r1, [pc, #308]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d044      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d119      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e07f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b3f      	ldr	r3, [pc, #252]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e06f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e067      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4934      	ldr	r1, [pc, #208]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fffa 	bl	80017e4 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fff6 	bl	80017e4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e04f      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2b      	ldr	r3, [pc, #172]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d20c      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b22      	ldr	r3, [pc, #136]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002832:	4b20      	ldr	r3, [pc, #128]	; (80028b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d001      	beq.n	8002844 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e032      	b.n	80028aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002850:	4b19      	ldr	r3, [pc, #100]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4916      	ldr	r1, [pc, #88]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	490e      	ldr	r1, [pc, #56]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002882:	f000 f821 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002886:	4602      	mov	r2, r0
 8002888:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	490a      	ldr	r1, [pc, #40]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	5ccb      	ldrb	r3, [r1, r3]
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe ff5a 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40023c00 	.word	0x40023c00
 80028b8:	40023800 	.word	0x40023800
 80028bc:	0804adb8 	.word	0x0804adb8
 80028c0:	20000008 	.word	0x20000008
 80028c4:	2000000c 	.word	0x2000000c

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028cc:	b094      	sub	sp, #80	; 0x50
 80028ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	647b      	str	r3, [r7, #68]	; 0x44
 80028d4:	2300      	movs	r3, #0
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028d8:	2300      	movs	r3, #0
 80028da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028e0:	4b79      	ldr	r3, [pc, #484]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d00d      	beq.n	8002908 <HAL_RCC_GetSysClockFreq+0x40>
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	f200 80e1 	bhi.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x34>
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x3a>
 80028fa:	e0db      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028fc:	4b73      	ldr	r3, [pc, #460]	; (8002acc <HAL_RCC_GetSysClockFreq+0x204>)
 80028fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002900:	e0db      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002902:	4b73      	ldr	r3, [pc, #460]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002906:	e0d8      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002908:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002912:	4b6d      	ldr	r3, [pc, #436]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800291e:	4b6a      	ldr	r3, [pc, #424]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	099b      	lsrs	r3, r3, #6
 8002924:	2200      	movs	r2, #0
 8002926:	63bb      	str	r3, [r7, #56]	; 0x38
 8002928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
 8002932:	2300      	movs	r3, #0
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
 8002936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	0159      	lsls	r1, r3, #5
 8002948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294c:	0150      	lsls	r0, r2, #5
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4621      	mov	r1, r4
 8002954:	1a51      	subs	r1, r2, r1
 8002956:	6139      	str	r1, [r7, #16]
 8002958:	4629      	mov	r1, r5
 800295a:	eb63 0301 	sbc.w	r3, r3, r1
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800296c:	4659      	mov	r1, fp
 800296e:	018b      	lsls	r3, r1, #6
 8002970:	4651      	mov	r1, sl
 8002972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002976:	4651      	mov	r1, sl
 8002978:	018a      	lsls	r2, r1, #6
 800297a:	4651      	mov	r1, sl
 800297c:	ebb2 0801 	subs.w	r8, r2, r1
 8002980:	4659      	mov	r1, fp
 8002982:	eb63 0901 	sbc.w	r9, r3, r1
 8002986:	f04f 0200 	mov.w	r2, #0
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299a:	4690      	mov	r8, r2
 800299c:	4699      	mov	r9, r3
 800299e:	4623      	mov	r3, r4
 80029a0:	eb18 0303 	adds.w	r3, r8, r3
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	462b      	mov	r3, r5
 80029a8:	eb49 0303 	adc.w	r3, r9, r3
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029ba:	4629      	mov	r1, r5
 80029bc:	024b      	lsls	r3, r1, #9
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029c4:	4621      	mov	r1, r4
 80029c6:	024a      	lsls	r2, r1, #9
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029d8:	f7fd fbf6 	bl	80001c8 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e4:	e058      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e6:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	099b      	lsrs	r3, r3, #6
 80029ec:	2200      	movs	r2, #0
 80029ee:	4618      	mov	r0, r3
 80029f0:	4611      	mov	r1, r2
 80029f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	2300      	movs	r3, #0
 80029fa:	627b      	str	r3, [r7, #36]	; 0x24
 80029fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a00:	4642      	mov	r2, r8
 8002a02:	464b      	mov	r3, r9
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	0159      	lsls	r1, r3, #5
 8002a0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a12:	0150      	lsls	r0, r2, #5
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4641      	mov	r1, r8
 8002a1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a1e:	4649      	mov	r1, r9
 8002a20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a38:	ebb2 040a 	subs.w	r4, r2, sl
 8002a3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	00eb      	lsls	r3, r5, #3
 8002a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a4e:	00e2      	lsls	r2, r4, #3
 8002a50:	4614      	mov	r4, r2
 8002a52:	461d      	mov	r5, r3
 8002a54:	4643      	mov	r3, r8
 8002a56:	18e3      	adds	r3, r4, r3
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	eb45 0303 	adc.w	r3, r5, r3
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	f04f 0300 	mov.w	r3, #0
 8002a6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a6e:	4629      	mov	r1, r5
 8002a70:	028b      	lsls	r3, r1, #10
 8002a72:	4621      	mov	r1, r4
 8002a74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a78:	4621      	mov	r1, r4
 8002a7a:	028a      	lsls	r2, r1, #10
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a82:	2200      	movs	r2, #0
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	61fa      	str	r2, [r7, #28]
 8002a88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a8c:	f7fd fb9c 	bl	80001c8 <__aeabi_uldivmod>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4613      	mov	r3, r2
 8002a96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a98:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0c1b      	lsrs	r3, r3, #16
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3750      	adds	r7, #80	; 0x50
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	00f42400 	.word	0x00f42400
 8002ad0:	007a1200 	.word	0x007a1200

08002ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ad8:	4b03      	ldr	r3, [pc, #12]	; (8002ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ada:	681b      	ldr	r3, [r3, #0]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000008 	.word	0x20000008

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002af0:	f7ff fff0 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	0a9b      	lsrs	r3, r3, #10
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	0804adc8 	.word	0x0804adc8

08002b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b18:	f7ff ffdc 	bl	8002ad4 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	0b5b      	lsrs	r3, r3, #13
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4903      	ldr	r1, [pc, #12]	; (8002b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40023800 	.word	0x40023800
 8002b38:	0804adc8 	.word	0x0804adc8

08002b3c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e038      	b.n	8002bc4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d106      	bne.n	8002b6c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7fe fd66 	bl	8001638 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	3308      	adds	r3, #8
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f000 fb58 	bl	800322c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	461a      	mov	r2, r3
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	f000 fbba 	bl	8003300 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6858      	ldr	r0, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	f000 fbe7 	bl	800336c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	6892      	ldr	r2, [r2, #8]
 8002ba6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	f041 0101 	orr.w	r1, r1, #1
 8002bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e03f      	b.n	8002c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fc8c 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	; 0x24
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f897 	bl	8002d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	60f8      	str	r0, [r7, #12]
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	4613      	mov	r3, r2
 8002c72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b20      	cmp	r3, #32
 8002c7e:	d11d      	bne.n	8002cbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <HAL_UART_Receive_IT+0x26>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e016      	b.n	8002cbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d101      	bne.n	8002c9e <HAL_UART_Receive_IT+0x38>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	e00f      	b.n	8002cbe <HAL_UART_Receive_IT+0x58>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f807 	bl	8002cc6 <UART_Start_Receive_IT>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	e000      	b.n	8002cbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	88fa      	ldrh	r2, [r7, #6]
 8002ce4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d12:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0220 	orr.w	r2, r2, #32
 8002d32:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d48:	b0c0      	sub	sp, #256	; 0x100
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d60:	68d9      	ldr	r1, [r3, #12]
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	ea40 0301 	orr.w	r3, r0, r1
 8002d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d9c:	f021 010c 	bic.w	r1, r1, #12
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002daa:	430b      	orrs	r3, r1
 8002dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dbe:	6999      	ldr	r1, [r3, #24]
 8002dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	ea40 0301 	orr.w	r3, r0, r1
 8002dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b8f      	ldr	r3, [pc, #572]	; (8003010 <UART_SetConfig+0x2cc>)
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d005      	beq.n	8002de4 <UART_SetConfig+0xa0>
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b8d      	ldr	r3, [pc, #564]	; (8003014 <UART_SetConfig+0x2d0>)
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d104      	bne.n	8002dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002de4:	f7ff fe96 	bl	8002b14 <HAL_RCC_GetPCLK2Freq>
 8002de8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002dec:	e003      	b.n	8002df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002dee:	f7ff fe7d 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8002df2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e00:	f040 810c 	bne.w	800301c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	1891      	adds	r1, r2, r2
 8002e1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e1e:	415b      	adcs	r3, r3
 8002e20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e26:	4621      	mov	r1, r4
 8002e28:	eb12 0801 	adds.w	r8, r2, r1
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	eb43 0901 	adc.w	r9, r3, r1
 8002e32:	f04f 0200 	mov.w	r2, #0
 8002e36:	f04f 0300 	mov.w	r3, #0
 8002e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e46:	4690      	mov	r8, r2
 8002e48:	4699      	mov	r9, r3
 8002e4a:	4623      	mov	r3, r4
 8002e4c:	eb18 0303 	adds.w	r3, r8, r3
 8002e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e54:	462b      	mov	r3, r5
 8002e56:	eb49 0303 	adc.w	r3, r9, r3
 8002e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e72:	460b      	mov	r3, r1
 8002e74:	18db      	adds	r3, r3, r3
 8002e76:	653b      	str	r3, [r7, #80]	; 0x50
 8002e78:	4613      	mov	r3, r2
 8002e7a:	eb42 0303 	adc.w	r3, r2, r3
 8002e7e:	657b      	str	r3, [r7, #84]	; 0x54
 8002e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002e88:	f7fd f99e 	bl	80001c8 <__aeabi_uldivmod>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4b61      	ldr	r3, [pc, #388]	; (8003018 <UART_SetConfig+0x2d4>)
 8002e92:	fba3 2302 	umull	r2, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	011c      	lsls	r4, r3, #4
 8002e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002eac:	4642      	mov	r2, r8
 8002eae:	464b      	mov	r3, r9
 8002eb0:	1891      	adds	r1, r2, r2
 8002eb2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eb4:	415b      	adcs	r3, r3
 8002eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ebc:	4641      	mov	r1, r8
 8002ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002edc:	4692      	mov	sl, r2
 8002ede:	469b      	mov	fp, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8002ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eea:	464b      	mov	r3, r9
 8002eec:	eb4b 0303 	adc.w	r3, fp, r3
 8002ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	18db      	adds	r3, r3, r3
 8002f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f0e:	4613      	mov	r3, r2
 8002f10:	eb42 0303 	adc.w	r3, r2, r3
 8002f14:	647b      	str	r3, [r7, #68]	; 0x44
 8002f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f1e:	f7fd f953 	bl	80001c8 <__aeabi_uldivmod>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <UART_SetConfig+0x2d4>)
 8002f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2264      	movs	r2, #100	; 0x64
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	1acb      	subs	r3, r1, r3
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <UART_SetConfig+0x2d4>)
 8002f40:	fba3 2302 	umull	r2, r3, r3, r2
 8002f44:	095b      	lsrs	r3, r3, #5
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f4c:	441c      	add	r4, r3
 8002f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f52:	2200      	movs	r2, #0
 8002f54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f60:	4642      	mov	r2, r8
 8002f62:	464b      	mov	r3, r9
 8002f64:	1891      	adds	r1, r2, r2
 8002f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f68:	415b      	adcs	r3, r3
 8002f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f70:	4641      	mov	r1, r8
 8002f72:	1851      	adds	r1, r2, r1
 8002f74:	6339      	str	r1, [r7, #48]	; 0x30
 8002f76:	4649      	mov	r1, r9
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002f88:	4659      	mov	r1, fp
 8002f8a:	00cb      	lsls	r3, r1, #3
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f92:	4651      	mov	r1, sl
 8002f94:	00ca      	lsls	r2, r1, #3
 8002f96:	4610      	mov	r0, r2
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4642      	mov	r2, r8
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa4:	464b      	mov	r3, r9
 8002fa6:	460a      	mov	r2, r1
 8002fa8:	eb42 0303 	adc.w	r3, r2, r3
 8002fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	18db      	adds	r3, r3, r3
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	4613      	mov	r3, r2
 8002fcc:	eb42 0303 	adc.w	r3, r2, r3
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002fda:	f7fd f8f5 	bl	80001c8 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <UART_SetConfig+0x2d4>)
 8002fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	2164      	movs	r1, #100	; 0x64
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	3332      	adds	r3, #50	; 0x32
 8002ff6:	4a08      	ldr	r2, [pc, #32]	; (8003018 <UART_SetConfig+0x2d4>)
 8002ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	f003 0207 	and.w	r2, r3, #7
 8003002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4422      	add	r2, r4
 800300a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800300c:	e105      	b.n	800321a <UART_SetConfig+0x4d6>
 800300e:	bf00      	nop
 8003010:	40011000 	.word	0x40011000
 8003014:	40011400 	.word	0x40011400
 8003018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800301c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003020:	2200      	movs	r2, #0
 8003022:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003026:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800302a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800302e:	4642      	mov	r2, r8
 8003030:	464b      	mov	r3, r9
 8003032:	1891      	adds	r1, r2, r2
 8003034:	6239      	str	r1, [r7, #32]
 8003036:	415b      	adcs	r3, r3
 8003038:	627b      	str	r3, [r7, #36]	; 0x24
 800303a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800303e:	4641      	mov	r1, r8
 8003040:	1854      	adds	r4, r2, r1
 8003042:	4649      	mov	r1, r9
 8003044:	eb43 0501 	adc.w	r5, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003064:	464b      	mov	r3, r9
 8003066:	eb45 0303 	adc.w	r3, r5, r3
 800306a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800306e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800307a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800308a:	4629      	mov	r1, r5
 800308c:	008b      	lsls	r3, r1, #2
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003094:	4621      	mov	r1, r4
 8003096:	008a      	lsls	r2, r1, #2
 8003098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800309c:	f7fd f894 	bl	80001c8 <__aeabi_uldivmod>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4b60      	ldr	r3, [pc, #384]	; (8003228 <UART_SetConfig+0x4e4>)
 80030a6:	fba3 2302 	umull	r2, r3, r3, r2
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	011c      	lsls	r4, r3, #4
 80030ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030b2:	2200      	movs	r2, #0
 80030b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030c0:	4642      	mov	r2, r8
 80030c2:	464b      	mov	r3, r9
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	61b9      	str	r1, [r7, #24]
 80030c8:	415b      	adcs	r3, r3
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030d0:	4641      	mov	r1, r8
 80030d2:	1851      	adds	r1, r2, r1
 80030d4:	6139      	str	r1, [r7, #16]
 80030d6:	4649      	mov	r1, r9
 80030d8:	414b      	adcs	r3, r1
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	f04f 0200 	mov.w	r2, #0
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030e8:	4659      	mov	r1, fp
 80030ea:	00cb      	lsls	r3, r1, #3
 80030ec:	4651      	mov	r1, sl
 80030ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030f2:	4651      	mov	r1, sl
 80030f4:	00ca      	lsls	r2, r1, #3
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	4642      	mov	r2, r8
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003104:	464b      	mov	r3, r9
 8003106:	460a      	mov	r2, r1
 8003108:	eb42 0303 	adc.w	r3, r2, r3
 800310c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	67bb      	str	r3, [r7, #120]	; 0x78
 800311a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003128:	4649      	mov	r1, r9
 800312a:	008b      	lsls	r3, r1, #2
 800312c:	4641      	mov	r1, r8
 800312e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003132:	4641      	mov	r1, r8
 8003134:	008a      	lsls	r2, r1, #2
 8003136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800313a:	f7fd f845 	bl	80001c8 <__aeabi_uldivmod>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4b39      	ldr	r3, [pc, #228]	; (8003228 <UART_SetConfig+0x4e4>)
 8003144:	fba3 1302 	umull	r1, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	2164      	movs	r1, #100	; 0x64
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	3332      	adds	r3, #50	; 0x32
 8003156:	4a34      	ldr	r2, [pc, #208]	; (8003228 <UART_SetConfig+0x4e4>)
 8003158:	fba2 2303 	umull	r2, r3, r2, r3
 800315c:	095b      	lsrs	r3, r3, #5
 800315e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003162:	441c      	add	r4, r3
 8003164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003168:	2200      	movs	r2, #0
 800316a:	673b      	str	r3, [r7, #112]	; 0x70
 800316c:	677a      	str	r2, [r7, #116]	; 0x74
 800316e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003172:	4642      	mov	r2, r8
 8003174:	464b      	mov	r3, r9
 8003176:	1891      	adds	r1, r2, r2
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	415b      	adcs	r3, r3
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003182:	4641      	mov	r1, r8
 8003184:	1851      	adds	r1, r2, r1
 8003186:	6039      	str	r1, [r7, #0]
 8003188:	4649      	mov	r1, r9
 800318a:	414b      	adcs	r3, r1
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800319a:	4659      	mov	r1, fp
 800319c:	00cb      	lsls	r3, r1, #3
 800319e:	4651      	mov	r1, sl
 80031a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031a4:	4651      	mov	r1, sl
 80031a6:	00ca      	lsls	r2, r1, #3
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	4603      	mov	r3, r0
 80031ae:	4642      	mov	r2, r8
 80031b0:	189b      	adds	r3, r3, r2
 80031b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b4:	464b      	mov	r3, r9
 80031b6:	460a      	mov	r2, r1
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	663b      	str	r3, [r7, #96]	; 0x60
 80031c8:	667a      	str	r2, [r7, #100]	; 0x64
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031d6:	4649      	mov	r1, r9
 80031d8:	008b      	lsls	r3, r1, #2
 80031da:	4641      	mov	r1, r8
 80031dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031e0:	4641      	mov	r1, r8
 80031e2:	008a      	lsls	r2, r1, #2
 80031e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80031e8:	f7fc ffee 	bl	80001c8 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <UART_SetConfig+0x4e4>)
 80031f2:	fba3 1302 	umull	r1, r3, r3, r2
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2164      	movs	r1, #100	; 0x64
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	011b      	lsls	r3, r3, #4
 8003202:	3332      	adds	r3, #50	; 0x32
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <UART_SetConfig+0x4e4>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	f003 020f 	and.w	r2, r3, #15
 8003210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4422      	add	r2, r4
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	bf00      	nop
 800321c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003220:	46bd      	mov	sp, r7
 8003222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003226:	bf00      	nop
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	6812      	ldr	r2, [r2, #0]
 8003244:	f023 0101 	bic.w	r1, r3, #1
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d102      	bne.n	800325c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003256:	2340      	movs	r3, #64	; 0x40
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	e001      	b.n	8003260 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800326c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003272:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003278:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800327e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003284:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800328a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003290:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003296:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800329c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <FSMC_NORSRAM_Init+0xd0>)
 80032bc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80032cc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	ea02 0103 	and.w	r1, r2, r3
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4319      	orrs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	0008fb7f 	.word	0x0008fb7f

08003300 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003316:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	431a      	orrs	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	431a      	orrs	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	041b      	lsls	r3, r3, #16
 8003334:	431a      	orrs	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	3b01      	subs	r3, #1
 800333c:	051b      	lsls	r3, r3, #20
 800333e:	431a      	orrs	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	3b02      	subs	r3, #2
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	431a      	orrs	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	3201      	adds	r2, #1
 8003354:	4319      	orrs	r1, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	607a      	str	r2, [r7, #4]
 8003378:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003380:	d11d      	bne.n	80033be <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800338a:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800338c:	4013      	ands	r3, r2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	6811      	ldr	r1, [r2, #0]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	6852      	ldr	r2, [r2, #4]
 8003396:	0112      	lsls	r2, r2, #4
 8003398:	4311      	orrs	r1, r2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	6892      	ldr	r2, [r2, #8]
 800339e:	0212      	lsls	r2, r2, #8
 80033a0:	4311      	orrs	r1, r2
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	6992      	ldr	r2, [r2, #24]
 80033a6:	4311      	orrs	r1, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	68d2      	ldr	r2, [r2, #12]
 80033ac:	0412      	lsls	r2, r2, #16
 80033ae:	430a      	orrs	r2, r1
 80033b0:	ea43 0102 	orr.w	r1, r3, r2
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80033bc:	e005      	b.n	80033ca <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80033c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr
 80033d8:	cff00000 	.word	0xcff00000

080033dc <__libc_init_array>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4d0d      	ldr	r5, [pc, #52]	; (8003414 <__libc_init_array+0x38>)
 80033e0:	4c0d      	ldr	r4, [pc, #52]	; (8003418 <__libc_init_array+0x3c>)
 80033e2:	1b64      	subs	r4, r4, r5
 80033e4:	10a4      	asrs	r4, r4, #2
 80033e6:	2600      	movs	r6, #0
 80033e8:	42a6      	cmp	r6, r4
 80033ea:	d109      	bne.n	8003400 <__libc_init_array+0x24>
 80033ec:	4d0b      	ldr	r5, [pc, #44]	; (800341c <__libc_init_array+0x40>)
 80033ee:	4c0c      	ldr	r4, [pc, #48]	; (8003420 <__libc_init_array+0x44>)
 80033f0:	f000 f820 	bl	8003434 <_init>
 80033f4:	1b64      	subs	r4, r4, r5
 80033f6:	10a4      	asrs	r4, r4, #2
 80033f8:	2600      	movs	r6, #0
 80033fa:	42a6      	cmp	r6, r4
 80033fc:	d105      	bne.n	800340a <__libc_init_array+0x2e>
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	f855 3b04 	ldr.w	r3, [r5], #4
 8003404:	4798      	blx	r3
 8003406:	3601      	adds	r6, #1
 8003408:	e7ee      	b.n	80033e8 <__libc_init_array+0xc>
 800340a:	f855 3b04 	ldr.w	r3, [r5], #4
 800340e:	4798      	blx	r3
 8003410:	3601      	adds	r6, #1
 8003412:	e7f2      	b.n	80033fa <__libc_init_array+0x1e>
 8003414:	08066fd8 	.word	0x08066fd8
 8003418:	08066fd8 	.word	0x08066fd8
 800341c:	08066fd8 	.word	0x08066fd8
 8003420:	08066fdc 	.word	0x08066fdc

08003424 <memset>:
 8003424:	4402      	add	r2, r0
 8003426:	4603      	mov	r3, r0
 8003428:	4293      	cmp	r3, r2
 800342a:	d100      	bne.n	800342e <memset+0xa>
 800342c:	4770      	bx	lr
 800342e:	f803 1b01 	strb.w	r1, [r3], #1
 8003432:	e7f9      	b.n	8003428 <memset+0x4>

08003434 <_init>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr

08003440 <_fini>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr
