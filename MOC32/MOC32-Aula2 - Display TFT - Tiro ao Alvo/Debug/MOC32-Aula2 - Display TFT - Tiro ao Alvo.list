
MOC32-Aula2 - Display TFT - Tiro ao Alvo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000547c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000262c8  08005610  08005610  00015610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b8d8  0802b8d8  0004007c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b8d8  0802b8d8  0003b8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b8e0  0802b8e0  0004007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b8e0  0802b8e0  0003b8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b8e4  0802b8e4  0003b8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0802b8e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004007c  2**0
                  CONTENTS
 10 .bss          000000f0  2000007c  2000007c  0004007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000016c  2000016c  0004007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009590  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001be9  00000000  00000000  0004963c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000898  00000000  00000000  0004b228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002301c  00000000  00000000  0004bac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f4e  00000000  00000000  0006eadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d46dc  00000000  00000000  00078a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d106  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00000780  00000000  00000000  0014d158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000029d4  00000000  00000000  0014d8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055f4 	.word	0x080055f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080055f4 	.word	0x080055f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295
 8000b5c:	f000 b974 	b.w	8000e48 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468e      	mov	lr, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14d      	bne.n	8000c22 <__udivmoddi4+0xaa>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4694      	mov	ip, r2
 8000b8a:	d969      	bls.n	8000c60 <__udivmoddi4+0xe8>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b152      	cbz	r2, 8000ba8 <__udivmoddi4+0x30>
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	f1c2 0120 	rsb	r1, r2, #32
 8000b9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba6:	4094      	lsls	r4, r2
 8000ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bac:	0c21      	lsrs	r1, r4, #16
 8000bae:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb2:	fa1f f78c 	uxth.w	r7, ip
 8000bb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bbe:	fb06 f107 	mul.w	r1, r6, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x64>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bce:	f080 811f 	bcs.w	8000e10 <__udivmoddi4+0x298>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 811c 	bls.w	8000e10 <__udivmoddi4+0x298>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 f707 	mul.w	r7, r0, r7
 8000bf0:	42a7      	cmp	r7, r4
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x92>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bfc:	f080 810a 	bcs.w	8000e14 <__udivmoddi4+0x29c>
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	f240 8107 	bls.w	8000e14 <__udivmoddi4+0x29c>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0e:	1be4      	subs	r4, r4, r7
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa4>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0xc2>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80ef 	beq.w	8000e0a <__udivmoddi4+0x292>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x160>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xd4>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80f9 	bhi.w	8000e3e <__udivmoddi4+0x2c6>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	469e      	mov	lr, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e0      	beq.n	8000c1c <__udivmoddi4+0xa4>
 8000c5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5e:	e7dd      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000c60:	b902      	cbnz	r2, 8000c64 <__udivmoddi4+0xec>
 8000c62:	deff      	udf	#255	; 0xff
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f040 8092 	bne.w	8000d92 <__udivmoddi4+0x21a>
 8000c6e:	eba1 010c 	sub.w	r1, r1, ip
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0c20      	lsrs	r0, r4, #16
 8000c7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c82:	fb07 1113 	mls	r1, r7, r3, r1
 8000c86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8a:	fb0e f003 	mul.w	r0, lr, r3
 8000c8e:	4288      	cmp	r0, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x12c>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x12a>
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2c0>
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x156>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x154>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2ca>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x9a>
 8000cd8:	f1c6 0720 	rsb	r7, r6, #32
 8000cdc:	40b3      	lsls	r3, r6
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	40f9      	lsrs	r1, r7
 8000cf2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfe:	0c20      	lsrs	r0, r4, #16
 8000d00:	fa1f fe8c 	uxth.w	lr, ip
 8000d04:	fb09 1118 	mls	r1, r9, r8, r1
 8000d08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d10:	4288      	cmp	r0, r1
 8000d12:	fa02 f206 	lsl.w	r2, r2, r6
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b8>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2bc>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2bc>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d38:	fb09 1110 	mls	r1, r9, r0, r1
 8000d3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d44:	458e      	cmp	lr, r1
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1e2>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2b4>
 8000d52:	458e      	cmp	lr, r1
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2b4>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d62:	eba1 010e 	sub.w	r1, r1, lr
 8000d66:	42a1      	cmp	r1, r4
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46a6      	mov	lr, r4
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x2a4>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x2a0>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x212>
 8000d72:	ebb3 0208 	subs.w	r2, r3, r8
 8000d76:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d82:	40f1      	lsrs	r1, r6
 8000d84:	431f      	orrs	r7, r3
 8000d86:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	40d8      	lsrs	r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000da0:	4091      	lsls	r1, r2
 8000da2:	4301      	orrs	r1, r0
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db0:	fb07 3610 	mls	r6, r7, r0, r3
 8000db4:	0c0b      	lsrs	r3, r1, #16
 8000db6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dba:	fb00 f60e 	mul.w	r6, r0, lr
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x260>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd0:	429e      	cmp	r6, r3
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	b289      	uxth	r1, r1
 8000ddc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de0:	fb07 3316 	mls	r3, r7, r6, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x28a>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfe:	3e02      	subs	r6, #2
 8000e00:	4461      	add	r1, ip
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0x104>
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e705      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e3      	b.n	8000bdc <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6f8      	b.n	8000c0a <__udivmoddi4+0x92>
 8000e18:	454b      	cmp	r3, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f8>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f8>
 8000e28:	4646      	mov	r6, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x28a>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1e2>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b8>
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x12c>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e709      	b.n	8000c56 <__udivmoddi4+0xde>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x156>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop

08000e4c <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8000e52:	4b52      	ldr	r3, [pc, #328]	; (8000f9c <ili9341_Init+0x150>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d115      	bne.n	8000e8a <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8000e5e:	4b4f      	ldr	r3, [pc, #316]	; (8000f9c <ili9341_Init+0x150>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b4c      	ldr	r3, [pc, #304]	; (8000f9c <ili9341_Init+0x150>)
 8000e6a:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8000e6c:	4b4b      	ldr	r3, [pc, #300]	; (8000f9c <ili9341_Init+0x150>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d101      	bne.n	8000e7c <ili9341_Init+0x30>
      LCD_IO_Init();
 8000e78:	f000 fd9a 	bl	80019b0 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8000e7c:	4b47      	ldr	r3, [pc, #284]	; (8000f9c <ili9341_Init+0x150>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4b45      	ldr	r3, [pc, #276]	; (8000f9c <ili9341_Init+0x150>)
 8000e88:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8000e8a:	200a      	movs	r0, #10
 8000e8c:	f000 fd84 	bl	8001998 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8000e90:	2001      	movs	r0, #1
 8000e92:	f000 fdb7 	bl	8001a04 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000e96:	200a      	movs	r0, #10
 8000e98:	f000 fd7e 	bl	8001998 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	4940      	ldr	r1, [pc, #256]	; (8000fa0 <ili9341_Init+0x154>)
 8000ea0:	20ef      	movs	r0, #239	; 0xef
 8000ea2:	f000 fe0d 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	493e      	ldr	r1, [pc, #248]	; (8000fa4 <ili9341_Init+0x158>)
 8000eaa:	20cf      	movs	r0, #207	; 0xcf
 8000eac:	f000 fe08 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	493d      	ldr	r1, [pc, #244]	; (8000fa8 <ili9341_Init+0x15c>)
 8000eb4:	20ed      	movs	r0, #237	; 0xed
 8000eb6:	f000 fe03 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8000eba:	2203      	movs	r2, #3
 8000ebc:	493b      	ldr	r1, [pc, #236]	; (8000fac <ili9341_Init+0x160>)
 8000ebe:	20e8      	movs	r0, #232	; 0xe8
 8000ec0:	f000 fdfe 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8000ec4:	2205      	movs	r2, #5
 8000ec6:	493a      	ldr	r1, [pc, #232]	; (8000fb0 <ili9341_Init+0x164>)
 8000ec8:	20cb      	movs	r0, #203	; 0xcb
 8000eca:	f000 fdf9 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4938      	ldr	r1, [pc, #224]	; (8000fb4 <ili9341_Init+0x168>)
 8000ed2:	20f7      	movs	r0, #247	; 0xf7
 8000ed4:	f000 fdf4 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000ed8:	2202      	movs	r2, #2
 8000eda:	4937      	ldr	r1, [pc, #220]	; (8000fb8 <ili9341_Init+0x16c>)
 8000edc:	20ea      	movs	r0, #234	; 0xea
 8000ede:	f000 fdef 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	4935      	ldr	r1, [pc, #212]	; (8000fbc <ili9341_Init+0x170>)
 8000ee6:	20c0      	movs	r0, #192	; 0xc0
 8000ee8:	f000 fdea 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	4934      	ldr	r1, [pc, #208]	; (8000fc0 <ili9341_Init+0x174>)
 8000ef0:	20c1      	movs	r0, #193	; 0xc1
 8000ef2:	f000 fde5 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4932      	ldr	r1, [pc, #200]	; (8000fc4 <ili9341_Init+0x178>)
 8000efa:	20c5      	movs	r0, #197	; 0xc5
 8000efc:	f000 fde0 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000f00:	2201      	movs	r2, #1
 8000f02:	4931      	ldr	r1, [pc, #196]	; (8000fc8 <ili9341_Init+0x17c>)
 8000f04:	20c7      	movs	r0, #199	; 0xc7
 8000f06:	f000 fddb 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	492f      	ldr	r1, [pc, #188]	; (8000fcc <ili9341_Init+0x180>)
 8000f0e:	2037      	movs	r0, #55	; 0x37
 8000f10:	f000 fdd6 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	492e      	ldr	r1, [pc, #184]	; (8000fd0 <ili9341_Init+0x184>)
 8000f18:	203a      	movs	r0, #58	; 0x3a
 8000f1a:	f000 fdd1 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8000f1e:	2202      	movs	r2, #2
 8000f20:	492c      	ldr	r1, [pc, #176]	; (8000fd4 <ili9341_Init+0x188>)
 8000f22:	20b1      	movs	r0, #177	; 0xb1
 8000f24:	f000 fdcc 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8000f28:	2203      	movs	r2, #3
 8000f2a:	492b      	ldr	r1, [pc, #172]	; (8000fd8 <ili9341_Init+0x18c>)
 8000f2c:	20b6      	movs	r0, #182	; 0xb6
 8000f2e:	f000 fdc7 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 8000f32:	2201      	movs	r2, #1
 8000f34:	4925      	ldr	r1, [pc, #148]	; (8000fcc <ili9341_Init+0x180>)
 8000f36:	20f2      	movs	r0, #242	; 0xf2
 8000f38:	f000 fdc2 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4927      	ldr	r1, [pc, #156]	; (8000fdc <ili9341_Init+0x190>)
 8000f40:	2026      	movs	r0, #38	; 0x26
 8000f42:	f000 fdbd 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8000f46:	220f      	movs	r2, #15
 8000f48:	4925      	ldr	r1, [pc, #148]	; (8000fe0 <ili9341_Init+0x194>)
 8000f4a:	20e0      	movs	r0, #224	; 0xe0
 8000f4c:	f000 fdb8 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8000f50:	220f      	movs	r2, #15
 8000f52:	4924      	ldr	r1, [pc, #144]	; (8000fe4 <ili9341_Init+0x198>)
 8000f54:	20e1      	movs	r0, #225	; 0xe1
 8000f56:	f000 fdb3 	bl	8001ac0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8000f5a:	2036      	movs	r0, #54	; 0x36
 8000f5c:	f000 fd52 	bl	8001a04 <LCD_IO_WriteCmd8>
 8000f60:	2028      	movs	r0, #40	; 0x28
 8000f62:	f000 fd5f 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8000f66:	2011      	movs	r0, #17
 8000f68:	f000 fd4c 	bl	8001a04 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000f6c:	200a      	movs	r0, #10
 8000f6e:	f000 fd13 	bl	8001998 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, COLOR_BLUE);
 8000f72:	231f      	movs	r3, #31
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	23f0      	movs	r3, #240	; 0xf0
 8000f78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f992 	bl	80012a8 <ili9341_FillRect>
  LCD_Delay(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f000 fd07 	bl	8001998 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8000f8a:	2029      	movs	r0, #41	; 0x29
 8000f8c:	f000 fd3a 	bl	8001a04 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000f90:	200a      	movs	r0, #10
 8000f92:	f000 fd01 	bl	8001998 <LCD_Delay>
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000009e 	.word	0x2000009e
 8000fa0:	08005610 	.word	0x08005610
 8000fa4:	08005614 	.word	0x08005614
 8000fa8:	08005618 	.word	0x08005618
 8000fac:	08005620 	.word	0x08005620
 8000fb0:	08005624 	.word	0x08005624
 8000fb4:	0800562c 	.word	0x0800562c
 8000fb8:	08005630 	.word	0x08005630
 8000fbc:	08005634 	.word	0x08005634
 8000fc0:	08005638 	.word	0x08005638
 8000fc4:	0800563c 	.word	0x0800563c
 8000fc8:	08005640 	.word	0x08005640
 8000fcc:	08005644 	.word	0x08005644
 8000fd0:	08005648 	.word	0x08005648
 8000fd4:	0800564c 	.word	0x0800564c
 8000fd8:	08005650 	.word	0x08005650
 8000fdc:	08005654 	.word	0x08005654
 8000fe0:	08005658 	.word	0x08005658
 8000fe4:	08005668 	.word	0x08005668

08000fe8 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	80bb      	strh	r3, [r7, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8000ffa:	202a      	movs	r0, #42	; 0x2a
 8000ffc:	f000 fd02 	bl	8001a04 <LCD_IO_WriteCmd8>
 8001000:	88fb      	ldrh	r3, [r7, #6]
 8001002:	0a1b      	lsrs	r3, r3, #8
 8001004:	b29b      	uxth	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f000 fd0b 	bl	8001a24 <LCD_IO_WriteData8>
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fd06 	bl	8001a24 <LCD_IO_WriteData8>
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	b29b      	uxth	r3, r3
 800101e:	b2db      	uxtb	r3, r3
 8001020:	4618      	mov	r0, r3
 8001022:	f000 fcff 	bl	8001a24 <LCD_IO_WriteData8>
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fcfa 	bl	8001a24 <LCD_IO_WriteData8>
 8001030:	202b      	movs	r0, #43	; 0x2b
 8001032:	f000 fce7 	bl	8001a04 <LCD_IO_WriteCmd8>
 8001036:	88bb      	ldrh	r3, [r7, #4]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	b29b      	uxth	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fcf0 	bl	8001a24 <LCD_IO_WriteData8>
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f000 fceb 	bl	8001a24 <LCD_IO_WriteData8>
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fce4 	bl	8001a24 <LCD_IO_WriteData8>
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	b2db      	uxtb	r3, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fcdf 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8001066:	202c      	movs	r0, #44	; 0x2c
 8001068:	f000 fccc 	bl	8001a04 <LCD_IO_WriteCmd8>
 800106c:	887b      	ldrh	r3, [r7, #2]
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fce8 	bl	8001a44 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4604      	mov	r4, r0
 8001084:	4608      	mov	r0, r1
 8001086:	4611      	mov	r1, r2
 8001088:	461a      	mov	r2, r3
 800108a:	4623      	mov	r3, r4
 800108c:	80fb      	strh	r3, [r7, #6]
 800108e:	4603      	mov	r3, r0
 8001090:	80bb      	strh	r3, [r7, #4]
 8001092:	460b      	mov	r3, r1
 8001094:	807b      	strh	r3, [r7, #2]
 8001096:	4613      	mov	r3, r2
 8001098:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 800109a:	4a2a      	ldr	r2, [pc, #168]	; (8001144 <ili9341_SetDisplayWindow+0xc8>)
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	8013      	strh	r3, [r2, #0]
 80010a0:	88ba      	ldrh	r2, [r7, #4]
 80010a2:	883b      	ldrh	r3, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <ili9341_SetDisplayWindow+0xcc>)
 80010ae:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 80010b0:	202a      	movs	r0, #42	; 0x2a
 80010b2:	f000 fca7 	bl	8001a04 <LCD_IO_WriteCmd8>
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fcb0 	bl	8001a24 <LCD_IO_WriteData8>
 80010c4:	88fb      	ldrh	r3, [r7, #6]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fcab 	bl	8001a24 <LCD_IO_WriteData8>
 80010ce:	88fa      	ldrh	r2, [r7, #6]
 80010d0:	887b      	ldrh	r3, [r7, #2]
 80010d2:	4413      	add	r3, r2
 80010d4:	3b01      	subs	r3, #1
 80010d6:	121b      	asrs	r3, r3, #8
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fca2 	bl	8001a24 <LCD_IO_WriteData8>
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4413      	add	r3, r2
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 fc97 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80010f6:	202b      	movs	r0, #43	; 0x2b
 80010f8:	f000 fc84 	bl	8001a04 <LCD_IO_WriteCmd8>
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fc8d 	bl	8001a24 <LCD_IO_WriteData8>
 800110a:	88bb      	ldrh	r3, [r7, #4]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fc88 	bl	8001a24 <LCD_IO_WriteData8>
 8001114:	88ba      	ldrh	r2, [r7, #4]
 8001116:	883b      	ldrh	r3, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	3b01      	subs	r3, #1
 800111c:	121b      	asrs	r3, r3, #8
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fc7f 	bl	8001a24 <LCD_IO_WriteData8>
 8001126:	88bb      	ldrh	r3, [r7, #4]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	883b      	ldrh	r3, [r7, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4413      	add	r3, r2
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3b01      	subs	r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fc74 	bl	8001a24 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}
 8001144:	200000a0 	.word	0x200000a0
 8001148:	200000a2 	.word	0x200000a2

0800114c <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4604      	mov	r4, r0
 8001154:	4608      	mov	r0, r1
 8001156:	4611      	mov	r1, r2
 8001158:	461a      	mov	r2, r3
 800115a:	4623      	mov	r3, r4
 800115c:	80fb      	strh	r3, [r7, #6]
 800115e:	4603      	mov	r3, r0
 8001160:	80bb      	strh	r3, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	4613      	mov	r3, r2
 8001168:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 800116a:	202a      	movs	r0, #42	; 0x2a
 800116c:	f000 fc4a 	bl	8001a04 <LCD_IO_WriteCmd8>
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fc53 	bl	8001a24 <LCD_IO_WriteData8>
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fc4e 	bl	8001a24 <LCD_IO_WriteData8>
 8001188:	88ba      	ldrh	r2, [r7, #4]
 800118a:	883b      	ldrh	r3, [r7, #0]
 800118c:	4413      	add	r3, r2
 800118e:	3b01      	subs	r3, #1
 8001190:	121b      	asrs	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fc45 	bl	8001a24 <LCD_IO_WriteData8>
 800119a:	88bb      	ldrh	r3, [r7, #4]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	883b      	ldrh	r3, [r7, #0]
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	3b01      	subs	r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fc3a 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 80011b0:	202b      	movs	r0, #43	; 0x2b
 80011b2:	f000 fc27 	bl	8001a04 <LCD_IO_WriteCmd8>
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fc30 	bl	8001a24 <LCD_IO_WriteData8>
 80011c4:	887b      	ldrh	r3, [r7, #2]
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 fc2b 	bl	8001a24 <LCD_IO_WriteData8>
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fc24 	bl	8001a24 <LCD_IO_WriteData8>
 80011dc:	887b      	ldrh	r3, [r7, #2]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fc1f 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 80011e6:	883a      	ldrh	r2, [r7, #0]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	4619      	mov	r1, r3
 80011ec:	202c      	movs	r0, #44	; 0x2c
 80011ee:	f000 fc41 	bl	8001a74 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}

080011fa <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4604      	mov	r4, r0
 8001202:	4608      	mov	r0, r1
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	4623      	mov	r3, r4
 800120a:	80fb      	strh	r3, [r7, #6]
 800120c:	4603      	mov	r3, r0
 800120e:	80bb      	strh	r3, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
 8001214:	4613      	mov	r3, r2
 8001216:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8001218:	202a      	movs	r0, #42	; 0x2a
 800121a:	f000 fbf3 	bl	8001a04 <LCD_IO_WriteCmd8>
 800121e:	88bb      	ldrh	r3, [r7, #4]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2db      	uxtb	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fbfc 	bl	8001a24 <LCD_IO_WriteData8>
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fbf7 	bl	8001a24 <LCD_IO_WriteData8>
 8001236:	88bb      	ldrh	r3, [r7, #4]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	b29b      	uxth	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fbf0 	bl	8001a24 <LCD_IO_WriteData8>
 8001244:	88bb      	ldrh	r3, [r7, #4]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f000 fbeb 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 800124e:	202b      	movs	r0, #43	; 0x2b
 8001250:	f000 fbd8 	bl	8001a04 <LCD_IO_WriteCmd8>
 8001254:	887b      	ldrh	r3, [r7, #2]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b29b      	uxth	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fbe1 	bl	8001a24 <LCD_IO_WriteData8>
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fbdc 	bl	8001a24 <LCD_IO_WriteData8>
 800126c:	887a      	ldrh	r2, [r7, #2]
 800126e:	883b      	ldrh	r3, [r7, #0]
 8001270:	4413      	add	r3, r2
 8001272:	3b01      	subs	r3, #1
 8001274:	121b      	asrs	r3, r3, #8
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f000 fbd3 	bl	8001a24 <LCD_IO_WriteData8>
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	883b      	ldrh	r3, [r7, #0]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4413      	add	r3, r2
 8001288:	b2db      	uxtb	r3, r3
 800128a:	3b01      	subs	r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 fbc8 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8001294:	883a      	ldrh	r2, [r7, #0]
 8001296:	88fb      	ldrh	r3, [r7, #6]
 8001298:	4619      	mov	r1, r3
 800129a:	202c      	movs	r0, #44	; 0x2c
 800129c:	f000 fbea 	bl	8001a74 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	80fb      	strh	r3, [r7, #6]
 80012ba:	4603      	mov	r3, r0
 80012bc:	80bb      	strh	r3, [r7, #4]
 80012be:	460b      	mov	r3, r1
 80012c0:	807b      	strh	r3, [r7, #2]
 80012c2:	4613      	mov	r3, r2
 80012c4:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80012c6:	202a      	movs	r0, #42	; 0x2a
 80012c8:	f000 fb9c 	bl	8001a04 <LCD_IO_WriteCmd8>
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	0a1b      	lsrs	r3, r3, #8
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 fba5 	bl	8001a24 <LCD_IO_WriteData8>
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fba0 	bl	8001a24 <LCD_IO_WriteData8>
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	4413      	add	r3, r2
 80012ea:	3b01      	subs	r3, #1
 80012ec:	121b      	asrs	r3, r3, #8
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4618      	mov	r0, r3
 80012f2:	f000 fb97 	bl	8001a24 <LCD_IO_WriteData8>
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b2db      	uxtb	r3, r3
 8001302:	3b01      	subs	r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fb8c 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800130c:	202b      	movs	r0, #43	; 0x2b
 800130e:	f000 fb79 	bl	8001a04 <LCD_IO_WriteCmd8>
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fb82 	bl	8001a24 <LCD_IO_WriteData8>
 8001320:	88bb      	ldrh	r3, [r7, #4]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fb7d 	bl	8001a24 <LCD_IO_WriteData8>
 800132a:	88ba      	ldrh	r2, [r7, #4]
 800132c:	883b      	ldrh	r3, [r7, #0]
 800132e:	4413      	add	r3, r2
 8001330:	3b01      	subs	r3, #1
 8001332:	121b      	asrs	r3, r3, #8
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fb74 	bl	8001a24 <LCD_IO_WriteData8>
 800133c:	88bb      	ldrh	r3, [r7, #4]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	883b      	ldrh	r3, [r7, #0]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	4413      	add	r3, r2
 8001346:	b2db      	uxtb	r3, r3
 8001348:	3b01      	subs	r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fb69 	bl	8001a24 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	883a      	ldrh	r2, [r7, #0]
 8001356:	fb02 f303 	mul.w	r3, r2, r3
 800135a:	461a      	mov	r2, r3
 800135c:	8b3b      	ldrh	r3, [r7, #24]
 800135e:	4619      	mov	r1, r3
 8001360:	202c      	movs	r0, #44	; 0x2c
 8001362:	f000 fb87 	bl	8001a74 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}

0800136e <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 800136e:	b590      	push	{r4, r7, lr}
 8001370:	b085      	sub	sp, #20
 8001372:	af02      	add	r7, sp, #8
 8001374:	4604      	mov	r4, r0
 8001376:	4608      	mov	r0, r1
 8001378:	4611      	mov	r1, r2
 800137a:	461a      	mov	r2, r3
 800137c:	4623      	mov	r3, r4
 800137e:	80fb      	strh	r3, [r7, #6]
 8001380:	4603      	mov	r3, r0
 8001382:	80bb      	strh	r3, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	803b      	strh	r3, [r7, #0]
	ili9341_FillRect(x, y, 1, h, color);
 800138c:	88f8      	ldrh	r0, [r7, #6]
 800138e:	88b9      	ldrh	r1, [r7, #4]
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	883b      	ldrh	r3, [r7, #0]
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	4613      	mov	r3, r2
 8001398:	2201      	movs	r2, #1
 800139a:	f7ff ff85 	bl	80012a8 <ili9341_FillRect>
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}

080013a6 <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 80013a6:	b590      	push	{r4, r7, lr}
 80013a8:	b087      	sub	sp, #28
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4604      	mov	r4, r0
 80013ae:	4608      	mov	r0, r1
 80013b0:	4611      	mov	r1, r2
 80013b2:	461a      	mov	r2, r3
 80013b4:	4623      	mov	r3, r4
 80013b6:	80fb      	strh	r3, [r7, #6]
 80013b8:	4603      	mov	r3, r0
 80013ba:	80bb      	strh	r3, [r7, #4]
 80013bc:	460b      	mov	r3, r1
 80013be:	807b      	strh	r3, [r7, #2]
 80013c0:	4613      	mov	r3, r2
 80013c2:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	f1c3 0301 	rsb	r3, r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80013d2:	887b      	ldrh	r3, [r7, #2]
 80013d4:	461a      	mov	r2, r3
 80013d6:	03d2      	lsls	r2, r2, #15
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	b29b      	uxth	r3, r3
 80013de:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80013e8:	8a3b      	ldrh	r3, [r7, #16]
 80013ea:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80013f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	3301      	adds	r3, #1
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 80013fc:	e095      	b.n	800152a <fillCircleHelper+0x184>
        if (f >= 0) {
 80013fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0e      	blt.n	8001424 <fillCircleHelper+0x7e>
            y--;
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	3302      	adds	r3, #2
 8001416:	b29b      	uxth	r3, r3
 8001418:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 800141a:	8afa      	ldrh	r2, [r7, #22]
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001424:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001428:	b29b      	uxth	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001430:	8abb      	ldrh	r3, [r7, #20]
 8001432:	3302      	adds	r3, #2
 8001434:	b29b      	uxth	r3, r3
 8001436:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8001438:	8afa      	ldrh	r2, [r7, #22]
 800143a:	8abb      	ldrh	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8001442:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001446:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800144a:	429a      	cmp	r2, r3
 800144c:	db31      	blt.n	80014b2 <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 800144e:	787b      	ldrb	r3, [r7, #1]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	d013      	beq.n	8001480 <fillCircleHelper+0xda>
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	8a3b      	ldrh	r3, [r7, #16]
 800145c:	4413      	add	r3, r2
 800145e:	b29b      	uxth	r3, r3
 8001460:	b218      	sxth	r0, r3
 8001462:	88ba      	ldrh	r2, [r7, #4]
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	b219      	sxth	r1, r3
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	b29a      	uxth	r2, r3
 8001472:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001474:	4413      	add	r3, r2
 8001476:	b29b      	uxth	r3, r3
 8001478:	b21a      	sxth	r2, r3
 800147a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800147c:	f7ff ff77 	bl	800136e <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d013      	beq.n	80014b2 <fillCircleHelper+0x10c>
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	8a3b      	ldrh	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	b218      	sxth	r0, r3
 8001494:	88ba      	ldrh	r2, [r7, #4]
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	b29b      	uxth	r3, r3
 800149c:	b219      	sxth	r1, r3
 800149e:	89fb      	ldrh	r3, [r7, #14]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014a6:	4413      	add	r3, r2
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014ae:	f7ff ff5e 	bl	800136e <drawFastVLine>
        }
        if(y != py) {
 80014b2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d033      	beq.n	8001526 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d013      	beq.n	80014f0 <fillCircleHelper+0x14a>
 80014c8:	88fa      	ldrh	r2, [r7, #6]
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	4413      	add	r3, r2
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b218      	sxth	r0, r3
 80014d2:	88ba      	ldrh	r2, [r7, #4]
 80014d4:	89bb      	ldrh	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	b219      	sxth	r1, r3
 80014dc:	89bb      	ldrh	r3, [r7, #12]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014e4:	4413      	add	r3, r2
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80014ec:	f7ff ff3f 	bl	800136e <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80014f0:	787b      	ldrb	r3, [r7, #1]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d013      	beq.n	8001522 <fillCircleHelper+0x17c>
 80014fa:	88fa      	ldrh	r2, [r7, #6]
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	b29b      	uxth	r3, r3
 8001502:	b218      	sxth	r0, r3
 8001504:	88ba      	ldrh	r2, [r7, #4]
 8001506:	89bb      	ldrh	r3, [r7, #12]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	b219      	sxth	r1, r3
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	b29a      	uxth	r2, r3
 8001514:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001516:	4413      	add	r3, r2
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21a      	sxth	r2, r3
 800151c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800151e:	f7ff ff26 	bl	800136e <drawFastVLine>
            py = y;
 8001522:	89fb      	ldrh	r3, [r7, #14]
 8001524:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8001526:	8a3b      	ldrh	r3, [r7, #16]
 8001528:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 800152a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800152e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001532:	429a      	cmp	r2, r3
 8001534:	f6ff af63 	blt.w	80013fe <fillCircleHelper+0x58>
    }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}

08001542 <ili9341_FillCircle>:

void ili9341_FillCircle(int16_t Xpos, int16_t Ypos, int16_t r, uint16_t RGBColor)
{
 8001542:	b590      	push	{r4, r7, lr}
 8001544:	b085      	sub	sp, #20
 8001546:	af02      	add	r7, sp, #8
 8001548:	4604      	mov	r4, r0
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	461a      	mov	r2, r3
 8001550:	4623      	mov	r3, r4
 8001552:	80fb      	strh	r3, [r7, #6]
 8001554:	4603      	mov	r3, r0
 8001556:	80bb      	strh	r3, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	803b      	strh	r3, [r7, #0]
    drawFastVLine(Xpos, Ypos-r, 2*r+1, RGBColor);
 8001560:	88ba      	ldrh	r2, [r7, #4]
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	b29b      	uxth	r3, r3
 8001568:	b219      	sxth	r1, r3
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	b29b      	uxth	r3, r3
 8001570:	3301      	adds	r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	b21a      	sxth	r2, r3
 8001576:	883b      	ldrh	r3, [r7, #0]
 8001578:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800157c:	f7ff fef7 	bl	800136e <drawFastVLine>
    fillCircleHelper(Xpos, Ypos, r, 3, 0, RGBColor);
 8001580:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001584:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001588:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800158c:	883b      	ldrh	r3, [r7, #0]
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2303      	movs	r3, #3
 8001596:	f7ff ff06 	bl	80013a6 <fillCircleHelper>
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}

080015a2 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 80015a2:	b590      	push	{r4, r7, lr}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4604      	mov	r4, r0
 80015aa:	4608      	mov	r0, r1
 80015ac:	4611      	mov	r1, r2
 80015ae:	461a      	mov	r2, r3
 80015b0:	4623      	mov	r3, r4
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4603      	mov	r3, r0
 80015b6:	80bb      	strh	r3, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80015c0:	883b      	ldrh	r3, [r7, #0]
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	88b9      	ldrh	r1, [r7, #4]
 80015c6:	88f8      	ldrh	r0, [r7, #6]
 80015c8:	f7ff fd58 	bl	800107c <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	883a      	ldrh	r2, [r7, #0]
 80015d0:	fb02 f303 	mul.w	r3, r2, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	69b9      	ldr	r1, [r7, #24]
 80015d8:	202c      	movs	r0, #44	; 0x2c
 80015da:	f000 fa93 	bl	8001b04 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}
	...

080015e8 <setCursor>:
  *Y = ty;
}
#endif // #if ILI9341_TOUCH == 1

void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	80fb      	strh	r3, [r7, #6]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80bb      	strh	r3, [r7, #4]
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <setCursor+0x2c>)
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	88bb      	ldrh	r3, [r7, #4]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <setCursor+0x30>)
 8001606:	701a      	strb	r2, [r3, #0]
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	2000009d 	.word	0x2000009d
 8001618:	2000009c 	.word	0x2000009c

0800161c <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af02      	add	r7, sp, #8
 8001622:	4604      	mov	r4, r0
 8001624:	4608      	mov	r0, r1
 8001626:	4611      	mov	r1, r2
 8001628:	461a      	mov	r2, r3
 800162a:	4623      	mov	r3, r4
 800162c:	80fb      	strh	r3, [r7, #6]
 800162e:	4603      	mov	r3, r0
 8001630:	80bb      	strh	r3, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	70fb      	strb	r3, [r7, #3]
 8001636:	4613      	mov	r3, r2
 8001638:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 800163a:	4b54      	ldr	r3, [pc, #336]	; (800178c <drawChar+0x170>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3308      	adds	r3, #8
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	00da      	lsls	r2, r3, #3
 800164c:	4b4f      	ldr	r3, [pc, #316]	; (800178c <drawChar+0x170>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	3304      	adds	r3, #4
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4413      	add	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <drawChar+0x170>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	789b      	ldrb	r3, [r3, #2]
 800166a:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	3305      	adds	r3, #5
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	3306      	adds	r3, #6
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	76fb      	strb	r3, [r7, #27]
 8001686:	2300      	movs	r3, #0
 8001688:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 800168a:	2300      	movs	r3, #0
 800168c:	833b      	strh	r3, [r7, #24]
 800168e:	2300      	movs	r3, #0
 8001690:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 8001692:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001696:	2b01      	cmp	r3, #1
 8001698:	d905      	bls.n	80016a6 <drawChar+0x8a>
            xo16 = xo;
 800169a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800169e:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 80016a0:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80016a4:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	773b      	strb	r3, [r7, #28]
 80016aa:	e066      	b.n	800177a <drawChar+0x15e>
            for(xx=0; xx<w; xx++) {
 80016ac:	2300      	movs	r3, #0
 80016ae:	777b      	strb	r3, [r7, #29]
 80016b0:	e05c      	b.n	800176c <drawChar+0x150>
                if(!(bit++ & 7)) {
 80016b2:	7ebb      	ldrb	r3, [r7, #26]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	76ba      	strb	r2, [r7, #26]
 80016b8:	f003 0307 	and.w	r3, r3, #7
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80016c0:	8bfb      	ldrh	r3, [r7, #30]
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	83fa      	strh	r2, [r7, #30]
 80016c6:	461a      	mov	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4413      	add	r3, r2
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 80016d0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da43      	bge.n	8001760 <drawChar+0x144>
                    if(size == 1) {
 80016d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d118      	bne.n	8001712 <drawChar+0xf6>
                        ili9341_WritePixel(x+xo+xx, y+yo+yy, color);
 80016e0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	4413      	add	r3, r2
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	7f7b      	ldrb	r3, [r7, #29]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	b298      	uxth	r0, r3
 80016f4:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	88bb      	ldrh	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	b29a      	uxth	r2, r3
 8001700:	7f3b      	ldrb	r3, [r7, #28]
 8001702:	b29b      	uxth	r3, r3
 8001704:	4413      	add	r3, r2
 8001706:	b29b      	uxth	r3, r3
 8001708:	883a      	ldrh	r2, [r7, #0]
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fc6c 	bl	8000fe8 <ili9341_WritePixel>
 8001710:	e026      	b.n	8001760 <drawChar+0x144>
                    } else {
                    	ili9341_FillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 8001712:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001716:	7f7b      	ldrb	r3, [r7, #29]
 8001718:	4413      	add	r3, r2
 800171a:	b29a      	uxth	r2, r3
 800171c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001720:	b29b      	uxth	r3, r3
 8001722:	fb12 f303 	smulbb	r3, r2, r3
 8001726:	b29a      	uxth	r2, r3
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	4413      	add	r3, r2
 800172c:	b298      	uxth	r0, r3
 800172e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001732:	7f3b      	ldrb	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	b29a      	uxth	r2, r3
 8001738:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800173c:	b29b      	uxth	r3, r3
 800173e:	fb12 f303 	smulbb	r3, r2, r3
 8001742:	b29a      	uxth	r2, r3
 8001744:	88bb      	ldrh	r3, [r7, #4]
 8001746:	4413      	add	r3, r2
 8001748:	b299      	uxth	r1, r3
 800174a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800174e:	b29a      	uxth	r2, r3
 8001750:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001754:	b29c      	uxth	r4, r3
 8001756:	883b      	ldrh	r3, [r7, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4623      	mov	r3, r4
 800175c:	f7ff fda4 	bl	80012a8 <ili9341_FillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8001760:	7efb      	ldrb	r3, [r7, #27]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 8001766:	7f7b      	ldrb	r3, [r7, #29]
 8001768:	3301      	adds	r3, #1
 800176a:	777b      	strb	r3, [r7, #29]
 800176c:	7f7a      	ldrb	r2, [r7, #29]
 800176e:	7afb      	ldrb	r3, [r7, #11]
 8001770:	429a      	cmp	r2, r3
 8001772:	d39e      	bcc.n	80016b2 <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 8001774:	7f3b      	ldrb	r3, [r7, #28]
 8001776:	3301      	adds	r3, #1
 8001778:	773b      	strb	r3, [r7, #28]
 800177a:	7f3a      	ldrb	r2, [r7, #28]
 800177c:	7abb      	ldrb	r3, [r7, #10]
 800177e:	429a      	cmp	r2, r3
 8001780:	d394      	bcc.n	80016ac <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 8001782:	bf00      	nop
 8001784:	bf00      	nop
 8001786:	3724      	adds	r7, #36	; 0x24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd90      	pop	{r4, r7, pc}
 800178c:	20000098 	.word	0x20000098

08001790 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8001790:	b5b0      	push	{r4, r5, r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af02      	add	r7, sp, #8
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b0a      	cmp	r3, #10
 800179e:	d112      	bne.n	80017c6 <write+0x36>
            cursor_x  = 0;
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <write+0x12c>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80017a6:	4b46      	ldr	r3, [pc, #280]	; (80018c0 <write+0x130>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	330a      	adds	r3, #10
 80017ac:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 80017ae:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <write+0x134>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	fb12 f303 	smulbb	r3, r2, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <write+0x138>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4413      	add	r3, r2
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <write+0x138>)
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	e074      	b.n	80018b0 <write+0x120>
        } else if(c != '\r') {
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b0d      	cmp	r3, #13
 80017ca:	d071      	beq.n	80018b0 <write+0x120>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80017cc:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <write+0x130>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	7a1b      	ldrb	r3, [r3, #8]
 80017d2:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d369      	bcc.n	80018b0 <write+0x120>
 80017dc:	4b38      	ldr	r3, [pc, #224]	; (80018c0 <write+0x130>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	3309      	adds	r3, #9
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	79fa      	ldrb	r2, [r7, #7]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d862      	bhi.n	80018b0 <write+0x120>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 80017ea:	79fa      	ldrb	r2, [r7, #7]
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80017f2:	4b33      	ldr	r3, [pc, #204]	; (80018c0 <write+0x130>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80017fc:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	789b      	ldrb	r3, [r3, #2]
 8001802:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	78db      	ldrb	r3, [r3, #3]
 8001808:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d041      	beq.n	8001894 <write+0x104>
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d03e      	beq.n	8001894 <write+0x104>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	3305      	adds	r3, #5
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	b25b      	sxtb	r3, r3
 800181e:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > _width)) {
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <write+0x13c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d022      	beq.n	800186e <write+0xde>
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <write+0x12c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4b25      	ldr	r3, [pc, #148]	; (80018c4 <write+0x134>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	4413      	add	r3, r2
 800183c:	fb00 f303 	mul.w	r3, r0, r3
 8001840:	440b      	add	r3, r1
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <write+0x140>)
 8001844:	8812      	ldrh	r2, [r2, #0]
 8001846:	4293      	cmp	r3, r2
 8001848:	dd11      	ble.n	800186e <write+0xde>
                        cursor_x  = 0;
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <write+0x12c>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <write+0x130>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	330a      	adds	r3, #10
 8001856:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <write+0x134>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	fb12 f303 	smulbb	r3, r2, r3
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <write+0x138>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <write+0x138>)
 800186c:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <write+0x12c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b218      	sxth	r0, r3
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <write+0x138>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	b219      	sxth	r1, r3
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <write+0x144>)
 800187c:	881d      	ldrh	r5, [r3, #0]
 800187e:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <write+0x148>)
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	4a10      	ldr	r2, [pc, #64]	; (80018c4 <write+0x134>)
 8001884:	7812      	ldrb	r2, [r2, #0]
 8001886:	79fc      	ldrb	r4, [r7, #7]
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	462b      	mov	r3, r5
 800188e:	4622      	mov	r2, r4
 8001890:	f7ff fec4 	bl	800161c <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	3304      	adds	r3, #4
 8001898:	781a      	ldrb	r2, [r3, #0]
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <write+0x134>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	fb12 f303 	smulbb	r3, r2, r3
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b05      	ldr	r3, [pc, #20]	; (80018bc <write+0x12c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <write+0x12c>)
 80018ae:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bdb0      	pop	{r4, r5, r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000009d 	.word	0x2000009d
 80018c0:	20000098 	.word	0x20000098
 80018c4:	20000000 	.word	0x20000000
 80018c8:	2000009c 	.word	0x2000009c
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000006 	.word	0x20000006
 80018d4:	20000002 	.word	0x20000002
 80018d8:	20000004 	.word	0x20000004

080018dc <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <setFont+0x4c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d110      	bne.n	8001914 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <setFont+0x50>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	3306      	adds	r3, #6
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <setFont+0x50>)
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e009      	b.n	8001914 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8001900:	4b09      	ldr	r3, [pc, #36]	; (8001928 <setFont+0x4c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <setFont+0x50>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	3b06      	subs	r3, #6
 800190e:	b2da      	uxtb	r2, r3
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <setFont+0x50>)
 8001912:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <setFont+0x4c>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6013      	str	r3, [r2, #0]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000098 	.word	0x20000098
 800192c:	2000009c 	.word	0x2000009c

08001930 <tftWriteText>:

void tftWriteText (int x, int y, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	4613      	mov	r3, r2
 800193e:	80fb      	strh	r3, [r7, #6]
	setFont(f);
 8001940:	6838      	ldr	r0, [r7, #0]
 8001942:	f7ff ffcb 	bl	80018dc <setFont>
	textcolor = txtcolor;
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <tftWriteText+0x60>)
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 800194c:	7e3b      	ldrb	r3, [r7, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <tftWriteText+0x26>
 8001952:	7e3b      	ldrb	r3, [r7, #24]
 8001954:	e000      	b.n	8001958 <tftWriteText+0x28>
 8001956:	2301      	movs	r3, #1
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <tftWriteText+0x64>)
 800195a:	7013      	strb	r3, [r2, #0]
	setCursor(x, y);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	b21b      	sxth	r3, r3
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	b212      	sxth	r2, r2
 8001964:	4611      	mov	r1, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fe3e 	bl	80015e8 <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 800196c:	e006      	b.n	800197c <tftWriteText+0x4c>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	61fa      	str	r2, [r7, #28]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff0a 	bl	8001790 <write>
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f4      	bne.n	800196e <tftWriteText+0x3e>
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000002 	.word	0x20000002
 8001994:	20000000 	.word	0x20000000

08001998 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fe2b 	bl	80025fc <HAL_Delay>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
	...

080019b0 <LCD_IO_Init>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RST);
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <LCD_IO_Init+0x48>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <LCD_IO_Init+0x48>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <LCD_IO_Init+0x4c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <LCD_IO_Init+0x4c>)
 80019ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ce:	6013      	str	r3, [r2, #0]
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
 80019d0:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <LCD_IO_Init+0x50>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f7ff ffde 	bl	8001998 <LCD_Delay>
  LCD_RST_ON;
 80019dc:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <LCD_IO_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f7ff ffd8 	bl	8001998 <LCD_Delay>
  LCD_RST_OFF;
 80019e8:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <LCD_IO_Init+0x50>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff ffd2 	bl	8001998 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020c00 	.word	0x40020c00
 8001a00:	4241828c 	.word	0x4241828c

08001a04 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
 8001a0e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	7013      	strb	r3, [r2, #0]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <LCD_IO_WriteData8+0x1c>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	7013      	strb	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	600ffffe 	.word	0x600ffffe

08001a44 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8001a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a52:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	ba5b      	rev16	r3, r3
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <LCD_IO_WriteData16+0x2c>)
 8001a5e:	b292      	uxth	r2, r2
 8001a60:	801a      	strh	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	600ffffe 	.word	0x600ffffe

08001a74 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	603a      	str	r2, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
 8001a80:	460b      	mov	r3, r1
 8001a82:	80bb      	strh	r3, [r7, #4]
  uint16_t d = RD(Data);
 8001a84:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001a88:	81bb      	strh	r3, [r7, #12]
 8001a8a:	89bb      	ldrh	r3, [r7, #12]
 8001a8c:	ba5b      	rev16	r3, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	81fb      	strh	r3, [r7, #14]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8001a94:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8001a9c:	e002      	b.n	8001aa4 <LCD_IO_WriteCmd8DataFill16+0x30>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8001a9e:	4a07      	ldr	r2, [pc, #28]	; (8001abc <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001aa0:	89fb      	ldrh	r3, [r7, #14]
 8001aa2:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	1e5a      	subs	r2, r3, #1
 8001aa8:	603a      	str	r2, [r7, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f7      	bne.n	8001a9e <LCD_IO_WriteCmd8DataFill16+0x2a>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	600ffffe 	.word	0x600ffffe

08001ac0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8001ace:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8001ad6:	e006      	b.n	8001ae6 <LCD_IO_WriteCmd8MultipleData8+0x26>
  {
    *(volatile uint8_t *)LCD_ADDR_DATA =*pData;
 8001ad8:	4a09      	ldr	r2, [pc, #36]	; (8001b00 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	7013      	strb	r3, [r2, #0]
    pData++;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f3      	bne.n	8001ad8 <LCD_IO_WriteCmd8MultipleData8+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 0);
  #endif
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	600ffffe 	.word	0x600ffffe

08001b04 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8001b12:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0 || LCD_REVERSE16 == 0
  while(Size--)
 8001b1a:	e00d      	b.n	8001b38 <LCD_IO_WriteCmd8MultipleData16+0x34>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = RD(*pData);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	82fb      	strh	r3, [r7, #22]
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	ba5b      	rev16	r3, r3
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <LCD_IO_WriteCmd8MultipleData16+0x4c>)
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	801a      	strh	r2, [r3, #0]
    pData++;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3302      	adds	r3, #2
 8001b36:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	1e5a      	subs	r2, r3, #1
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ec      	bne.n	8001b1c <LCD_IO_WriteCmd8MultipleData16+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 1);
  #endif
}
 8001b42:	bf00      	nop
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	600ffffe 	.word	0x600ffffe

08001b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b5a:	f000 fcdd 	bl	8002518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5e:	f000 f863 	bl	8001c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b62:	f000 f92d 	bl	8001dc0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b66:	f000 f8c9 	bl	8001cfc <MX_ADC1_Init>
  MX_FSMC_Init();
 8001b6a:	f000 f98f 	bl	8001e8c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  ili9341_Init();
 8001b6e:	f7ff f96d 	bl	8000e4c <ili9341_Init>
  ili9341_DrawRGBImage(0, 0, 320, 240, alvo_resize);
 8001b72:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <main+0xc8>)
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	23f0      	movs	r3, #240	; 0xf0
 8001b78:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fd0f 	bl	80015a2 <ili9341_DrawRGBImage>
  init_alvo(160,120);
 8001b84:	2178      	movs	r1, #120	; 0x78
 8001b86:	20a0      	movs	r0, #160	; 0xa0
 8001b88:	f000 f9e0 	bl	8001f4c <init_alvo>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adc_valueX = (uint16_t)Read_ADC_Channel(ADC_CHANNEL_1);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f000 fa49 	bl	8002024 <Read_ADC_Channel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <main+0xcc>)
 8001b98:	801a      	strh	r2, [r3, #0]
	  adc_valueY = (uint16_t)Read_ADC_Channel(ADC_CHANNEL_11);
 8001b9a:	200b      	movs	r0, #11
 8001b9c:	f000 fa42 	bl	8002024 <Read_ADC_Channel>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <main+0xd0>)
 8001ba6:	801a      	strh	r2, [r3, #0]
	  adc_valueX=map(adc_valueX,6,255,0,320);
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <main+0xcc>)
 8001baa:	8818      	ldrh	r0, [r3, #0]
 8001bac:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	22ff      	movs	r2, #255	; 0xff
 8001bb6:	2106      	movs	r1, #6
 8001bb8:	f000 fa0e 	bl	8001fd8 <map>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <main+0xcc>)
 8001bc2:	801a      	strh	r2, [r3, #0]
	  adc_valueY=map(adc_valueY,6,255,0,240);
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <main+0xd0>)
 8001bc6:	8818      	ldrh	r0, [r3, #0]
 8001bc8:	23f0      	movs	r3, #240	; 0xf0
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	2300      	movs	r3, #0
 8001bce:	22ff      	movs	r2, #255	; 0xff
 8001bd0:	2106      	movs	r1, #6
 8001bd2:	f000 fa01 	bl	8001fd8 <map>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <main+0xd0>)
 8001bdc:	801a      	strh	r2, [r3, #0]
	  ili9341_DrawRGBImage(0, 0, 320, 240, alvo_resize);
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <main+0xc8>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	23f0      	movs	r3, #240	; 0xf0
 8001be4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001be8:	2100      	movs	r1, #0
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff fcd9 	bl	80015a2 <ili9341_DrawRGBImage>
	  score_update();
 8001bf0:	f000 fa40 	bl	8002074 <score_update>
	  init_alvo(adc_valueX, adc_valueY);
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <main+0xcc>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <main+0xd0>)
 8001bfa:	8812      	ldrh	r2, [r2, #0]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f9a4 	bl	8001f4c <init_alvo>
	  verifica_alvo(adc_valueX,adc_valueY);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <main+0xcc>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	4a06      	ldr	r2, [pc, #24]	; (8001c24 <main+0xd0>)
 8001c0a:	8812      	ldrh	r2, [r2, #0]
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 faa2 	bl	8002158 <verifica_alvo>
	  HAL_Delay(150);
 8001c14:	2096      	movs	r0, #150	; 0x96
 8001c16:	f000 fcf1 	bl	80025fc <HAL_Delay>
	  adc_valueX = (uint16_t)Read_ADC_Channel(ADC_CHANNEL_1);
 8001c1a:	e7b7      	b.n	8001b8c <main+0x38>
 8001c1c:	0800569c 	.word	0x0800569c
 8001c20:	2000013c 	.word	0x2000013c
 8001c24:	2000013e 	.word	0x2000013e

08001c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b094      	sub	sp, #80	; 0x50
 8001c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2e:	f107 0320 	add.w	r3, r7, #32
 8001c32:	2230      	movs	r2, #48	; 0x30
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 f94c 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	4b28      	ldr	r3, [pc, #160]	; (8001cf4 <SystemClock_Config+0xcc>)
 8001c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c54:	4a27      	ldr	r2, [pc, #156]	; (8001cf4 <SystemClock_Config+0xcc>)
 8001c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <SystemClock_Config+0xcc>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c68:	2300      	movs	r3, #0
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <SystemClock_Config+0xd0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <SystemClock_Config+0xd0>)
 8001c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <SystemClock_Config+0xd0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c84:	2302      	movs	r3, #2
 8001c86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c8c:	2310      	movs	r3, #16
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c90:	2302      	movs	r3, #2
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c9c:	23a8      	movs	r3, #168	; 0xa8
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 fb63 	bl	8003378 <HAL_RCC_OscConfig>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cb8:	f000 faae 	bl	8002218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ccc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2105      	movs	r1, #5
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fdc4 	bl	8003868 <HAL_RCC_ClockConfig>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ce6:	f000 fa97 	bl	8002218 <Error_Handler>
  }
}
 8001cea:	bf00      	nop
 8001cec:	3750      	adds	r7, #80	; 0x50
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40007000 	.word	0x40007000

08001cfc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d0e:	4b29      	ldr	r3, [pc, #164]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d10:	4a29      	ldr	r2, [pc, #164]	; (8001db8 <MX_ADC1_Init+0xbc>)
 8001d12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d22:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d24:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d40:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <MX_ADC1_Init+0xc0>)
 8001d42:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d58:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d5e:	4815      	ldr	r0, [pc, #84]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d60:	f000 fc70 	bl	8002644 <HAL_ADC_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001d6a:	f000 fa55 	bl	8002218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d72:	2301      	movs	r3, #1
 8001d74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001d76:	2307      	movs	r3, #7
 8001d78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d80:	f000 fe42 	bl	8002a08 <HAL_ADC_ConfigChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001d8a:	f000 fa45 	bl	8002218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001d8e:	230b      	movs	r3, #11
 8001d90:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d92:	2302      	movs	r3, #2
 8001d94:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <MX_ADC1_Init+0xb8>)
 8001d9c:	f000 fe34 	bl	8002a08 <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001da6:	f000 fa37 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200000a4 	.word	0x200000a4
 8001db8:	40012000 	.word	0x40012000
 8001dbc:	0f000001 	.word	0x0f000001

08001dc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08a      	sub	sp, #40	; 0x28
 8001dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a29      	ldr	r2, [pc, #164]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a22      	ldr	r2, [pc, #136]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b20      	ldr	r3, [pc, #128]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b15      	ldr	r3, [pc, #84]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a14      	ldr	r2, [pc, #80]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e34:	f043 0310 	orr.w	r3, r3, #16
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <MX_GPIO_Init+0xc4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BOTAO_Pin */
  GPIO_InitStruct.Pin = BOTAO_Pin;
 8001e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOTAO_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4804      	ldr	r0, [pc, #16]	; (8001e88 <MX_GPIO_Init+0xc8>)
 8001e78:	f001 f8ca 	bl	8003010 <HAL_GPIO_Init>

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40021000 	.word	0x40021000

08001e8c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ea6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001eaa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001eae:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <MX_FSMC_Init+0xbc>)
 8001eb0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001eb8:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001ebe:	4b21      	ldr	r3, [pc, #132]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8001ec4:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001eca:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8001f08:	2306      	movs	r3, #6
 8001f0a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001f0c:	230f      	movs	r3, #15
 8001f0e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 8001f10:	2306      	movs	r3, #6
 8001f12:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001f14:	230f      	movs	r3, #15
 8001f16:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001f18:	2310      	movs	r3, #16
 8001f1a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001f1c:	2311      	movs	r3, #17
 8001f1e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4806      	ldr	r0, [pc, #24]	; (8001f44 <MX_FSMC_Init+0xb8>)
 8001f2c:	f001 fe88 	bl	8003c40 <HAL_SRAM_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001f36:	f000 f96f 	bl	8002218 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000ec 	.word	0x200000ec
 8001f48:	a0000104 	.word	0xa0000104

08001f4c <init_alvo>:

/* USER CODE BEGIN 4 */
void init_alvo(uint16_t x,uint16_t y)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	80bb      	strh	r3, [r7, #4]

	ili9341_FillCircle(x, y, 5, COLOR_BLACK);
 8001f5c:	88f8      	ldrh	r0, [r7, #6]
 8001f5e:	88b9      	ldrh	r1, [r7, #4]
 8001f60:	2300      	movs	r3, #0
 8001f62:	2205      	movs	r2, #5
 8001f64:	f7ff faed 	bl	8001542 <ili9341_FillCircle>
	ili9341_DrawVLine(COLOR_BLACK, x-1, y-20, 40);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	1e59      	subs	r1, r3, #1
 8001f6c:	88bb      	ldrh	r3, [r7, #4]
 8001f6e:	f1a3 0214 	sub.w	r2, r3, #20
 8001f72:	2328      	movs	r3, #40	; 0x28
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff f940 	bl	80011fa <ili9341_DrawVLine>
	ili9341_DrawVLine(COLOR_BLACK, x, y-20, 40);
 8001f7a:	88f9      	ldrh	r1, [r7, #6]
 8001f7c:	88bb      	ldrh	r3, [r7, #4]
 8001f7e:	f1a3 0214 	sub.w	r2, r3, #20
 8001f82:	2328      	movs	r3, #40	; 0x28
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7ff f938 	bl	80011fa <ili9341_DrawVLine>
	ili9341_DrawVLine(COLOR_BLACK, x+1, y-20, 40);
 8001f8a:	88fb      	ldrh	r3, [r7, #6]
 8001f8c:	1c59      	adds	r1, r3, #1
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	f1a3 0214 	sub.w	r2, r3, #20
 8001f94:	2328      	movs	r3, #40	; 0x28
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff f92f 	bl	80011fa <ili9341_DrawVLine>
	ili9341_DrawHLine(COLOR_BLACK, x-20, y-1, 40);
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	f1a3 0114 	sub.w	r1, r3, #20
 8001fa2:	88bb      	ldrh	r3, [r7, #4]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	2328      	movs	r3, #40	; 0x28
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7ff f8cf 	bl	800114c <ili9341_DrawHLine>
	ili9341_DrawHLine(COLOR_BLACK, x-20, y, 40);
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	f1a3 0114 	sub.w	r1, r3, #20
 8001fb4:	88ba      	ldrh	r2, [r7, #4]
 8001fb6:	2328      	movs	r3, #40	; 0x28
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff f8c7 	bl	800114c <ili9341_DrawHLine>
	ili9341_DrawHLine(COLOR_BLACK, x-20, y+1, 40);
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	f1a3 0114 	sub.w	r1, r3, #20
 8001fc4:	88bb      	ldrh	r3, [r7, #4]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	2328      	movs	r3, #40	; 0x28
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f7ff f8be 	bl	800114c <ili9341_DrawHLine>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <map>:

uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max)
{
 8001fd8:	b490      	push	{r4, r7}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	80fb      	strh	r3, [r7, #6]
 8001fea:	4603      	mov	r3, r0
 8001fec:	80bb      	strh	r3, [r7, #4]
 8001fee:	460b      	mov	r3, r1
 8001ff0:	807b      	strh	r3, [r7, #2]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	803b      	strh	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	88bb      	ldrh	r3, [r7, #4]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	8a39      	ldrh	r1, [r7, #16]
 8001ffe:	883a      	ldrh	r2, [r7, #0]
 8002000:	1a8a      	subs	r2, r1, r2
 8002002:	fb03 f202 	mul.w	r2, r3, r2
 8002006:	8879      	ldrh	r1, [r7, #2]
 8002008:	88bb      	ldrh	r3, [r7, #4]
 800200a:	1acb      	subs	r3, r1, r3
 800200c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002010:	b29a      	uxth	r2, r3
 8002012:	883b      	ldrh	r3, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	b29b      	uxth	r3, r3
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bc90      	pop	{r4, r7}
 8002020:	4770      	bx	lr
	...

08002024 <Read_ADC_Channel>:

uint32_t Read_ADC_Channel(uint32_t channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b088      	sub	sp, #32
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60fb      	str	r3, [r7, #12]
  sConfig.Rank = 1;
 8002030:	2301      	movs	r3, #1
 8002032:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002034:	2307      	movs	r3, #7
 8002036:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4619      	mov	r1, r3
 8002042:	480b      	ldr	r0, [pc, #44]	; (8002070 <Read_ADC_Channel+0x4c>)
 8002044:	f000 fce0 	bl	8002a08 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(&hadc1);
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <Read_ADC_Channel+0x4c>)
 800204a:	f000 fb3f 	bl	80026cc <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 50);
 800204e:	2132      	movs	r1, #50	; 0x32
 8002050:	4807      	ldr	r0, [pc, #28]	; (8002070 <Read_ADC_Channel+0x4c>)
 8002052:	f000 fc40 	bl	80028d6 <HAL_ADC_PollForConversion>
  uint32_t adc_value = HAL_ADC_GetValue(&hadc1);
 8002056:	4806      	ldr	r0, [pc, #24]	; (8002070 <Read_ADC_Channel+0x4c>)
 8002058:	f000 fcc8 	bl	80029ec <HAL_ADC_GetValue>
 800205c:	61f8      	str	r0, [r7, #28]
  HAL_ADC_Stop(&hadc1);
 800205e:	4804      	ldr	r0, [pc, #16]	; (8002070 <Read_ADC_Channel+0x4c>)
 8002060:	f000 fc06 	bl	8002870 <HAL_ADC_Stop>

  return adc_value;
 8002064:	69fb      	ldr	r3, [r7, #28]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200000a4 	.word	0x200000a4

08002074 <score_update>:

void score_update(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af02      	add	r7, sp, #8
	sprintf(score_text, "SCORE:%d", score);
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <score_update+0x30>)
 800207c:	881b      	ldrh	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <score_update+0x34>)
 8002082:	480a      	ldr	r0, [pc, #40]	; (80020ac <score_update+0x38>)
 8002084:	f001 ff2e 	bl	8003ee4 <siprintf>
	tftWriteText(140, 15, COLOR_BLACK, &mono12x7bold, 1, score_text);
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <score_update+0x38>)
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	2301      	movs	r3, #1
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <score_update+0x3c>)
 8002092:	2200      	movs	r2, #0
 8002094:	210f      	movs	r1, #15
 8002096:	208c      	movs	r0, #140	; 0x8c
 8002098:	f7ff fc4a 	bl	8001930 <tftWriteText>
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000140 	.word	0x20000140
 80020a8:	0800567c 	.word	0x0800567c
 80020ac:	20000144 	.word	0x20000144
 80020b0:	0802b858 	.word	0x0802b858
 80020b4:	00000000 	.word	0x00000000

080020b8 <point_in_circle>:

bool point_in_circle(int x, int y, int center_x, int center_y, int radius)
{
 80020b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  return pow(x - center_x, 2) + pow(y - center_y, 2) <= pow(radius, 2);
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa21 	bl	8000514 <__aeabi_i2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8002150 <point_in_circle+0x98>
 80020da:	ec43 2b10 	vmov	d0, r2, r3
 80020de:	f002 fb6f 	bl	80047c0 <pow>
 80020e2:	ec55 4b10 	vmov	r4, r5, d0
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fa11 	bl	8000514 <__aeabi_i2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002150 <point_in_circle+0x98>
 80020fa:	ec43 2b10 	vmov	d0, r2, r3
 80020fe:	f002 fb5f 	bl	80047c0 <pow>
 8002102:	ec53 2b10 	vmov	r2, r3, d0
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe f8b7 	bl	800027c <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	461d      	mov	r5, r3
 8002116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002118:	f7fe f9fc 	bl	8000514 <__aeabi_i2d>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8002150 <point_in_circle+0x98>
 8002124:	ec43 2b10 	vmov	d0, r2, r3
 8002128:	f002 fb4a 	bl	80047c0 <pow>
 800212c:	ec53 2b10 	vmov	r2, r3, d0
 8002130:	2101      	movs	r1, #1
 8002132:	460e      	mov	r6, r1
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe fcd2 	bl	8000ae0 <__aeabi_dcmple>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <point_in_circle+0x8e>
 8002142:	2300      	movs	r3, #0
 8002144:	461e      	mov	r6, r3
 8002146:	b2f3      	uxtb	r3, r6
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002150:	00000000 	.word	0x00000000
 8002154:	40000000 	.word	0x40000000

08002158 <verifica_alvo>:

void verifica_alvo(uint16_t x,uint16_t y)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af02      	add	r7, sp, #8
 800215e:	4603      	mov	r3, r0
 8002160:	460a      	mov	r2, r1
 8002162:	80fb      	strh	r3, [r7, #6]
 8002164:	4613      	mov	r3, r2
 8002166:	80bb      	strh	r3, [r7, #4]
	if(point_in_circle(x, y, 51, 167, 15)||point_in_circle(x, y, 157, 167, 15)||point_in_circle(x, y, 263, 167, 15))
 8002168:	88f8      	ldrh	r0, [r7, #6]
 800216a:	88b9      	ldrh	r1, [r7, #4]
 800216c:	230f      	movs	r3, #15
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	23a7      	movs	r3, #167	; 0xa7
 8002172:	2233      	movs	r2, #51	; 0x33
 8002174:	f7ff ffa0 	bl	80020b8 <point_in_circle>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d116      	bne.n	80021ac <verifica_alvo+0x54>
 800217e:	88f8      	ldrh	r0, [r7, #6]
 8002180:	88b9      	ldrh	r1, [r7, #4]
 8002182:	230f      	movs	r3, #15
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	23a7      	movs	r3, #167	; 0xa7
 8002188:	229d      	movs	r2, #157	; 0x9d
 800218a:	f7ff ff95 	bl	80020b8 <point_in_circle>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10b      	bne.n	80021ac <verifica_alvo+0x54>
 8002194:	88f8      	ldrh	r0, [r7, #6]
 8002196:	88b9      	ldrh	r1, [r7, #4]
 8002198:	230f      	movs	r3, #15
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	23a7      	movs	r3, #167	; 0xa7
 800219e:	f240 1207 	movw	r2, #263	; 0x107
 80021a2:	f7ff ff89 	bl	80020b8 <point_in_circle>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <verifica_alvo+0x8c>
	{
		tftWriteText(10, 15, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"ALVO");
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <verifica_alvo+0xac>)
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	2301      	movs	r3, #1
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <verifica_alvo+0xb0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	210f      	movs	r1, #15
 80021ba:	200a      	movs	r0, #10
 80021bc:	f7ff fbb8 	bl	8001930 <tftWriteText>
		if(!HAL_GPIO_ReadPin(BOTAO_GPIO_Port, BOTAO_Pin))
 80021c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c4:	4811      	ldr	r0, [pc, #68]	; (800220c <verifica_alvo+0xb4>)
 80021c6:	f001 f8bf 	bl	8003348 <HAL_GPIO_ReadPin>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d114      	bne.n	80021fa <verifica_alvo+0xa2>
		{
			score=score+10;
 80021d0:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <verifica_alvo+0xb8>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	330a      	adds	r3, #10
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <verifica_alvo+0xb8>)
 80021da:	801a      	strh	r2, [r3, #0]
			HAL_Delay(10);
 80021dc:	200a      	movs	r0, #10
 80021de:	f000 fa0d 	bl	80025fc <HAL_Delay>
	{
 80021e2:	e00a      	b.n	80021fa <verifica_alvo+0xa2>
		}
	}
	else
	{
		tftWriteText(10, 15, COLOR_BLACK, &mono12x7bold, 1, (uint8_t *)"NAO ALVO");
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <verifica_alvo+0xbc>)
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2301      	movs	r3, #1
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <verifica_alvo+0xb0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	210f      	movs	r1, #15
 80021f2:	200a      	movs	r0, #10
 80021f4:	f7ff fb9c 	bl	8001930 <tftWriteText>
	}
}
 80021f8:	e000      	b.n	80021fc <verifica_alvo+0xa4>
	{
 80021fa:	bf00      	nop
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	08005688 	.word	0x08005688
 8002208:	0802b858 	.word	0x0802b858
 800220c:	40021000 	.word	0x40021000
 8002210:	20000140 	.word	0x20000140
 8002214:	08005690 	.word	0x08005690

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002220:	e7fe      	b.n	8002220 <Error_Handler+0x8>
	...

08002224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_MspInit+0x4c>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_MspInit+0x4c>)
 8002234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002238:	6453      	str	r3, [r2, #68]	; 0x44
 800223a:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	603b      	str	r3, [r7, #0]
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_MspInit+0x4c>)
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	4a08      	ldr	r2, [pc, #32]	; (8002270 <HAL_MspInit+0x4c>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002254:	6413      	str	r3, [r2, #64]	; 0x40
 8002256:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	603b      	str	r3, [r7, #0]
 8002260:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <HAL_ADC_MspInit+0xb0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d141      	bne.n	800231a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_ADC_MspInit+0xb4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022ea:	2302      	movs	r3, #2
 80022ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022ee:	2303      	movs	r3, #3
 80022f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	480b      	ldr	r0, [pc, #44]	; (800232c <HAL_ADC_MspInit+0xb8>)
 80022fe:	f000 fe87 	bl	8003010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002302:	2302      	movs	r3, #2
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002306:	2303      	movs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <HAL_ADC_MspInit+0xbc>)
 8002316:	f000 fe7b 	bl	8003010 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012000 	.word	0x40012000
 8002328:	40023800 	.word	0x40023800
 800232c:	40020800 	.word	0x40020800
 8002330:	40020000 	.word	0x40020000

08002334 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_FSMC_MspInit+0x88>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d131      	bne.n	80023b4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002350:	4b1a      	ldr	r3, [pc, #104]	; (80023bc <HAL_FSMC_MspInit+0x88>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HAL_FSMC_MspInit+0x8c>)
 800235c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235e:	4a18      	ldr	r2, [pc, #96]	; (80023c0 <HAL_FSMC_MspInit+0x8c>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6393      	str	r3, [r2, #56]	; 0x38
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_FSMC_MspInit+0x8c>)
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002372:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002384:	230c      	movs	r3, #12
 8002386:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	4619      	mov	r1, r3
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <HAL_FSMC_MspInit+0x90>)
 800238e:	f000 fe3f 	bl	8003010 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8002392:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 8002396:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80023a4:	230c      	movs	r3, #12
 80023a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	4619      	mov	r1, r3
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <HAL_FSMC_MspInit+0x94>)
 80023ae:	f000 fe2f 	bl	8003010 <HAL_GPIO_Init>
 80023b2:	e000      	b.n	80023b6 <HAL_FSMC_MspInit+0x82>
    return;
 80023b4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000150 	.word	0x20000150
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40020c00 	.word	0x40020c00

080023cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80023d4:	f7ff ffae 	bl	8002334 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023e4:	e7fe      	b.n	80023e4 <NMI_Handler+0x4>

080023e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ea:	e7fe      	b.n	80023ea <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	e7fe      	b.n	80023f0 <MemManage_Handler+0x4>

080023f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f6:	e7fe      	b.n	80023f6 <BusFault_Handler+0x4>

080023f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <UsageFault_Handler+0x4>

080023fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800242c:	f000 f8c6 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b086      	sub	sp, #24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800243c:	4a14      	ldr	r2, [pc, #80]	; (8002490 <_sbrk+0x5c>)
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <_sbrk+0x60>)
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <_sbrk+0x64>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <_sbrk+0x64>)
 8002452:	4a12      	ldr	r2, [pc, #72]	; (800249c <_sbrk+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <_sbrk+0x64>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	429a      	cmp	r2, r3
 8002462:	d207      	bcs.n	8002474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002464:	f001 fd0c 	bl	8003e80 <__errno>
 8002468:	4603      	mov	r3, r0
 800246a:	220c      	movs	r2, #12
 800246c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800246e:	f04f 33ff 	mov.w	r3, #4294967295
 8002472:	e009      	b.n	8002488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <_sbrk+0x64>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	4a05      	ldr	r2, [pc, #20]	; (8002498 <_sbrk+0x64>)
 8002484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002486:	68fb      	ldr	r3, [r7, #12]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20020000 	.word	0x20020000
 8002494:	00000400 	.word	0x00000400
 8002498:	20000154 	.word	0x20000154
 800249c:	20000170 	.word	0x20000170

080024a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <SystemInit+0x20>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <SystemInit+0x20>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c8:	480d      	ldr	r0, [pc, #52]	; (8002500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ca:	490e      	ldr	r1, [pc, #56]	; (8002504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024cc:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d0:	e002      	b.n	80024d8 <LoopCopyDataInit>

080024d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024d6:	3304      	adds	r3, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024dc:	d3f9      	bcc.n	80024d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024de:	4a0b      	ldr	r2, [pc, #44]	; (800250c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e0:	4c0b      	ldr	r4, [pc, #44]	; (8002510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e4:	e001      	b.n	80024ea <LoopFillZerobss>

080024e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e8:	3204      	adds	r2, #4

080024ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ec:	d3fb      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024ee:	f7ff ffd7 	bl	80024a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f2:	f001 fccb 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024f6:	f7ff fb2d 	bl	8001b54 <main>
  bx  lr    
 80024fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002504:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002508:	0802b8e8 	.word	0x0802b8e8
  ldr r2, =_sbss
 800250c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8002510:	2000016c 	.word	0x2000016c

08002514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002514:	e7fe      	b.n	8002514 <ADC_IRQHandler>
	...

08002518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <HAL_Init+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_Init+0x40>)
 8002522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_Init+0x40>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0a      	ldr	r2, [pc, #40]	; (8002558 <HAL_Init+0x40>)
 800252e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_Init+0x40>)
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 fd31 	bl	8002fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	200f      	movs	r0, #15
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fe6a 	bl	8002224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40023c00 	.word	0x40023c00

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fd3b 	bl	8002ff6 <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 fd11 	bl	8002fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	2000000c 	.word	0x2000000c
 80025b4:	20000014 	.word	0x20000014
 80025b8:	20000010 	.word	0x20000010

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000014 	.word	0x20000014
 80025e0:	20000158 	.word	0x20000158

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	20000158 	.word	0x20000158

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <HAL_Delay+0x44>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000014 	.word	0x20000014

08002644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e033      	b.n	80026c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fe06 	bl	8002274 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d118      	bne.n	80026b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800268a:	f023 0302 	bic.w	r3, r3, #2
 800268e:	f043 0202 	orr.w	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fad8 	bl	8002c4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f023 0303 	bic.w	r3, r3, #3
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
 80026b2:	e001      	b.n	80026b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Start+0x1a>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0b2      	b.n	800284c <HAL_ADC_Start+0x180>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d018      	beq.n	800272e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800270c:	4b52      	ldr	r3, [pc, #328]	; (8002858 <HAL_ADC_Start+0x18c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_ADC_Start+0x190>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9a      	lsrs	r2, r3, #18
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002720:	e002      	b.n	8002728 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3b01      	subs	r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f9      	bne.n	8002722 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d17a      	bne.n	8002832 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002766:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277a:	d106      	bne.n	800278a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f023 0206 	bic.w	r2, r3, #6
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
 8002788:	e002      	b.n	8002790 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002798:	4b31      	ldr	r3, [pc, #196]	; (8002860 <HAL_ADC_Start+0x194>)
 800279a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 031f 	and.w	r3, r3, #31
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d12a      	bne.n	8002808 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <HAL_ADC_Start+0x198>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d015      	beq.n	80027e8 <HAL_ADC_Start+0x11c>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_ADC_Start+0x19c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d105      	bne.n	80027d2 <HAL_ADC_Start+0x106>
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_ADC_Start+0x194>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a25      	ldr	r2, [pc, #148]	; (800286c <HAL_ADC_Start+0x1a0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d136      	bne.n	800284a <HAL_ADC_Start+0x17e>
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_ADC_Start+0x194>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d130      	bne.n	800284a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d129      	bne.n	800284a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002804:	609a      	str	r2, [r3, #8]
 8002806:	e020      	b.n	800284a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <HAL_ADC_Start+0x198>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d11b      	bne.n	800284a <HAL_ADC_Start+0x17e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d114      	bne.n	800284a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e00b      	b.n	800284a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	f043 0210 	orr.w	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	2000000c 	.word	0x2000000c
 800285c:	431bde83 	.word	0x431bde83
 8002860:	40012300 	.word	0x40012300
 8002864:	40012000 	.word	0x40012000
 8002868:	40012100 	.word	0x40012100
 800286c:	40012200 	.word	0x40012200

08002870 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Stop+0x16>
 8002882:	2302      	movs	r3, #2
 8002884:	e021      	b.n	80028ca <HAL_ADC_Stop+0x5a>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f2:	d113      	bne.n	800291c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002902:	d10b      	bne.n	800291c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e063      	b.n	80029e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800291c:	f7ff fe62 	bl	80025e4 <HAL_GetTick>
 8002920:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002922:	e021      	b.n	8002968 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292a:	d01d      	beq.n	8002968 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_ADC_PollForConversion+0x6c>
 8002932:	f7ff fe57 	bl	80025e4 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d212      	bcs.n	8002968 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b02      	cmp	r3, #2
 800294e:	d00b      	beq.n	8002968 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	f043 0204 	orr.w	r2, r3, #4
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e03d      	b.n	80029e4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d1d6      	bne.n	8002924 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f06f 0212 	mvn.w	r2, #18
 800297e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d123      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d11f      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d111      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1c>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e105      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x228>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b09      	cmp	r3, #9
 8002a32:	d925      	bls.n	8002a80 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68d9      	ldr	r1, [r3, #12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	461a      	mov	r2, r3
 8002a42:	4613      	mov	r3, r2
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	4413      	add	r3, r2
 8002a48:	3b1e      	subs	r3, #30
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43da      	mvns	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	400a      	ands	r2, r1
 8002a58:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68d9      	ldr	r1, [r3, #12]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4403      	add	r3, r0
 8002a72:	3b1e      	subs	r3, #30
 8002a74:	409a      	lsls	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	e022      	b.n	8002ac6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6919      	ldr	r1, [r3, #16]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	2207      	movs	r2, #7
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6919      	ldr	r1, [r3, #16]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4403      	add	r3, r0
 8002abc:	409a      	lsls	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d824      	bhi.n	8002b18 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3b05      	subs	r3, #5
 8002ae0:	221f      	movs	r2, #31
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	400a      	ands	r2, r1
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	4618      	mov	r0, r3
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	3b05      	subs	r3, #5
 8002b0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	635a      	str	r2, [r3, #52]	; 0x34
 8002b16:	e04c      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b0c      	cmp	r3, #12
 8002b1e:	d824      	bhi.n	8002b6a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4413      	add	r3, r2
 8002b30:	3b23      	subs	r3, #35	; 0x23
 8002b32:	221f      	movs	r2, #31
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	43da      	mvns	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	400a      	ands	r2, r1
 8002b40:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b23      	subs	r3, #35	; 0x23
 8002b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
 8002b68:	e023      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b41      	subs	r3, #65	; 0x41
 8002b7c:	221f      	movs	r2, #31
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	43da      	mvns	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	400a      	ands	r2, r1
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3b41      	subs	r3, #65	; 0x41
 8002ba6:	fa00 f203 	lsl.w	r2, r0, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_ADC_ConfigChannel+0x234>)
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_ADC_ConfigChannel+0x238>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1cc>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b12      	cmp	r3, #18
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <HAL_ADC_ConfigChannel+0x238>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d123      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x21e>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d003      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x1e6>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b11      	cmp	r3, #17
 8002bec:	d11b      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d111      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <HAL_ADC_ConfigChannel+0x23c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a10      	ldr	r2, [pc, #64]	; (8002c48 <HAL_ADC_ConfigChannel+0x240>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	0c9a      	lsrs	r2, r3, #18
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c18:	e002      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f9      	bne.n	8002c1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40012300 	.word	0x40012300
 8002c40:	40012000 	.word	0x40012000
 8002c44:	2000000c 	.word	0x2000000c
 8002c48:	431bde83 	.word	0x431bde83

08002c4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c54:	4b79      	ldr	r3, [pc, #484]	; (8002e3c <ADC_Init+0x1f0>)
 8002c56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ca4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6859      	ldr	r1, [r3, #4]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6899      	ldr	r1, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cde:	4a58      	ldr	r2, [pc, #352]	; (8002e40 <ADC_Init+0x1f4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d022      	beq.n	8002d2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cf2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6899      	ldr	r1, [r3, #8]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6899      	ldr	r1, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	e00f      	b.n	8002d4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0202 	bic.w	r2, r2, #2
 8002d58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6899      	ldr	r1, [r3, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	7e1b      	ldrb	r3, [r3, #24]
 8002d64:	005a      	lsls	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d01b      	beq.n	8002db0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	3b01      	subs	r3, #1
 8002da4:	035a      	lsls	r2, r3, #13
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	e007      	b.n	8002dc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	051a      	lsls	r2, r3, #20
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002df4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6899      	ldr	r1, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e02:	025a      	lsls	r2, r3, #9
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	029a      	lsls	r2, r3, #10
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40012300 	.word	0x40012300
 8002e40:	0f000001 	.word	0x0f000001

08002e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e60:	4013      	ands	r3, r2
 8002e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e76:	4a04      	ldr	r2, [pc, #16]	; (8002e88 <__NVIC_SetPriorityGrouping+0x44>)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	60d3      	str	r3, [r2, #12]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	f003 0307 	and.w	r3, r3, #7
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	6039      	str	r1, [r7, #0]
 8002eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db0a      	blt.n	8002ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	490c      	ldr	r1, [pc, #48]	; (8002ef4 <__NVIC_SetPriority+0x4c>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	0112      	lsls	r2, r2, #4
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	440b      	add	r3, r1
 8002ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed0:	e00a      	b.n	8002ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4908      	ldr	r1, [pc, #32]	; (8002ef8 <__NVIC_SetPriority+0x50>)
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	3b04      	subs	r3, #4
 8002ee0:	0112      	lsls	r2, r2, #4
 8002ee2:	b2d2      	uxtb	r2, r2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	761a      	strb	r2, [r3, #24]
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	e000e100 	.word	0xe000e100
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b089      	sub	sp, #36	; 0x24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f1c3 0307 	rsb	r3, r3, #7
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf28      	it	cs
 8002f1a:	2304      	movcs	r3, #4
 8002f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3304      	adds	r3, #4
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d902      	bls.n	8002f2c <NVIC_EncodePriority+0x30>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3b03      	subs	r3, #3
 8002f2a:	e000      	b.n	8002f2e <NVIC_EncodePriority+0x32>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	f04f 32ff 	mov.w	r2, #4294967295
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3a:	43da      	mvns	r2, r3
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	401a      	ands	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f44:	f04f 31ff 	mov.w	r1, #4294967295
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	43d9      	mvns	r1, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f54:	4313      	orrs	r3, r2
         );
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3724      	adds	r7, #36	; 0x24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f74:	d301      	bcc.n	8002f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f76:	2301      	movs	r3, #1
 8002f78:	e00f      	b.n	8002f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	; (8002fa4 <SysTick_Config+0x40>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f82:	210f      	movs	r1, #15
 8002f84:	f04f 30ff 	mov.w	r0, #4294967295
 8002f88:	f7ff ff8e 	bl	8002ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f8c:	4b05      	ldr	r3, [pc, #20]	; (8002fa4 <SysTick_Config+0x40>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f92:	4b04      	ldr	r3, [pc, #16]	; (8002fa4 <SysTick_Config+0x40>)
 8002f94:	2207      	movs	r2, #7
 8002f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000e010 	.word	0xe000e010

08002fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff47 	bl	8002e44 <__NVIC_SetPriorityGrouping>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b086      	sub	sp, #24
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd0:	f7ff ff5c 	bl	8002e8c <__NVIC_GetPriorityGrouping>
 8002fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff8e 	bl	8002efc <NVIC_EncodePriority>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ff5d 	bl	8002ea8 <__NVIC_SetPriority>
}
 8002fee:	bf00      	nop
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff ffb0 	bl	8002f64 <SysTick_Config>
 8003004:	4603      	mov	r3, r0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	e16b      	b.n	8003304 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800302c:	2201      	movs	r2, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4013      	ands	r3, r2
 800303e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	429a      	cmp	r2, r3
 8003046:	f040 815a 	bne.w	80032fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b01      	cmp	r3, #1
 8003054:	d005      	beq.n	8003062 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305e:	2b02      	cmp	r3, #2
 8003060:	d130      	bne.n	80030c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2203      	movs	r2, #3
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003098:	2201      	movs	r2, #1
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 0201 	and.w	r2, r3, #1
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d017      	beq.n	8003100 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	2203      	movs	r2, #3
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4013      	ands	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d123      	bne.n	8003154 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	08da      	lsrs	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3208      	adds	r2, #8
 8003114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	220f      	movs	r2, #15
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4013      	ands	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4313      	orrs	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	08da      	lsrs	r2, r3, #3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3208      	adds	r2, #8
 800314e:	69b9      	ldr	r1, [r7, #24]
 8003150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	2203      	movs	r2, #3
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0203 	and.w	r2, r3, #3
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80b4 	beq.w	80032fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	4b60      	ldr	r3, [pc, #384]	; (800331c <HAL_GPIO_Init+0x30c>)
 800319c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319e:	4a5f      	ldr	r2, [pc, #380]	; (800331c <HAL_GPIO_Init+0x30c>)
 80031a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031a4:	6453      	str	r3, [r2, #68]	; 0x44
 80031a6:	4b5d      	ldr	r3, [pc, #372]	; (800331c <HAL_GPIO_Init+0x30c>)
 80031a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031b2:	4a5b      	ldr	r2, [pc, #364]	; (8003320 <HAL_GPIO_Init+0x310>)
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	089b      	lsrs	r3, r3, #2
 80031b8:	3302      	adds	r3, #2
 80031ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	220f      	movs	r2, #15
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_GPIO_Init+0x314>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d02b      	beq.n	8003236 <HAL_GPIO_Init+0x226>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_GPIO_Init+0x318>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d025      	beq.n	8003232 <HAL_GPIO_Init+0x222>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_GPIO_Init+0x31c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d01f      	beq.n	800322e <HAL_GPIO_Init+0x21e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4f      	ldr	r2, [pc, #316]	; (8003330 <HAL_GPIO_Init+0x320>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d019      	beq.n	800322a <HAL_GPIO_Init+0x21a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4e      	ldr	r2, [pc, #312]	; (8003334 <HAL_GPIO_Init+0x324>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d013      	beq.n	8003226 <HAL_GPIO_Init+0x216>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4d      	ldr	r2, [pc, #308]	; (8003338 <HAL_GPIO_Init+0x328>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d00d      	beq.n	8003222 <HAL_GPIO_Init+0x212>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4c      	ldr	r2, [pc, #304]	; (800333c <HAL_GPIO_Init+0x32c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d007      	beq.n	800321e <HAL_GPIO_Init+0x20e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4b      	ldr	r2, [pc, #300]	; (8003340 <HAL_GPIO_Init+0x330>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_GPIO_Init+0x20a>
 8003216:	2307      	movs	r3, #7
 8003218:	e00e      	b.n	8003238 <HAL_GPIO_Init+0x228>
 800321a:	2308      	movs	r3, #8
 800321c:	e00c      	b.n	8003238 <HAL_GPIO_Init+0x228>
 800321e:	2306      	movs	r3, #6
 8003220:	e00a      	b.n	8003238 <HAL_GPIO_Init+0x228>
 8003222:	2305      	movs	r3, #5
 8003224:	e008      	b.n	8003238 <HAL_GPIO_Init+0x228>
 8003226:	2304      	movs	r3, #4
 8003228:	e006      	b.n	8003238 <HAL_GPIO_Init+0x228>
 800322a:	2303      	movs	r3, #3
 800322c:	e004      	b.n	8003238 <HAL_GPIO_Init+0x228>
 800322e:	2302      	movs	r3, #2
 8003230:	e002      	b.n	8003238 <HAL_GPIO_Init+0x228>
 8003232:	2301      	movs	r3, #1
 8003234:	e000      	b.n	8003238 <HAL_GPIO_Init+0x228>
 8003236:	2300      	movs	r3, #0
 8003238:	69fa      	ldr	r2, [r7, #28]
 800323a:	f002 0203 	and.w	r2, r2, #3
 800323e:	0092      	lsls	r2, r2, #2
 8003240:	4093      	lsls	r3, r2
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4313      	orrs	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003248:	4935      	ldr	r1, [pc, #212]	; (8003320 <HAL_GPIO_Init+0x310>)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	089b      	lsrs	r3, r3, #2
 800324e:	3302      	adds	r3, #2
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003256:	4b3b      	ldr	r3, [pc, #236]	; (8003344 <HAL_GPIO_Init+0x334>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800327a:	4a32      	ldr	r2, [pc, #200]	; (8003344 <HAL_GPIO_Init+0x334>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003280:	4b30      	ldr	r3, [pc, #192]	; (8003344 <HAL_GPIO_Init+0x334>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a4:	4a27      	ldr	r2, [pc, #156]	; (8003344 <HAL_GPIO_Init+0x334>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032aa:	4b26      	ldr	r3, [pc, #152]	; (8003344 <HAL_GPIO_Init+0x334>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ce:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_GPIO_Init+0x334>)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_GPIO_Init+0x334>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f8:	4a12      	ldr	r2, [pc, #72]	; (8003344 <HAL_GPIO_Init+0x334>)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3301      	adds	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	2b0f      	cmp	r3, #15
 8003308:	f67f ae90 	bls.w	800302c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800330c:	bf00      	nop
 800330e:	bf00      	nop
 8003310:	3724      	adds	r7, #36	; 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800
 8003320:	40013800 	.word	0x40013800
 8003324:	40020000 	.word	0x40020000
 8003328:	40020400 	.word	0x40020400
 800332c:	40020800 	.word	0x40020800
 8003330:	40020c00 	.word	0x40020c00
 8003334:	40021000 	.word	0x40021000
 8003338:	40021400 	.word	0x40021400
 800333c:	40021800 	.word	0x40021800
 8003340:	40021c00 	.word	0x40021c00
 8003344:	40013c00 	.word	0x40013c00

08003348 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	4013      	ands	r3, r2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003360:	2301      	movs	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e001      	b.n	800336a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800336a:	7bfb      	ldrb	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e267      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d075      	beq.n	8003482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003396:	4b88      	ldr	r3, [pc, #544]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d00c      	beq.n	80033bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a2:	4b85      	ldr	r3, [pc, #532]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d112      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033bc:	4b7e      	ldr	r3, [pc, #504]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05b      	beq.n	8003480 <HAL_RCC_OscConfig+0x108>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d157      	bne.n	8003480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e242      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d106      	bne.n	80033ec <HAL_RCC_OscConfig+0x74>
 80033de:	4b76      	ldr	r3, [pc, #472]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a75      	ldr	r2, [pc, #468]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0x98>
 80033f6:	4b70      	ldr	r3, [pc, #448]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6f      	ldr	r2, [pc, #444]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6d      	ldr	r3, [pc, #436]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6c      	ldr	r2, [pc, #432]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xb0>
 8003410:	4b69      	ldr	r3, [pc, #420]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a68      	ldr	r2, [pc, #416]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b66      	ldr	r3, [pc, #408]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7ff f8d8 	bl	80025e4 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003438:	f7ff f8d4 	bl	80025e4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e207      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5b      	ldr	r3, [pc, #364]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xc0>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7ff f8c4 	bl	80025e4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003460:	f7ff f8c0 	bl	80025e4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1f3      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b51      	ldr	r3, [pc, #324]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0xe8>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348e:	4b4a      	ldr	r3, [pc, #296]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349a:	4b47      	ldr	r3, [pc, #284]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a6:	4b44      	ldr	r3, [pc, #272]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b41      	ldr	r3, [pc, #260]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c7      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4937      	ldr	r1, [pc, #220]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCC_OscConfig+0x244>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ee:	f7ff f879 	bl	80025e4 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f6:	f7ff f875 	bl	80025e4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a8      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2b      	ldr	r3, [pc, #172]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b28      	ldr	r3, [pc, #160]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4925      	ldr	r1, [pc, #148]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <HAL_RCC_OscConfig+0x244>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7ff f858 	bl	80025e4 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003538:	f7ff f854 	bl	80025e4 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e187      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d036      	beq.n	80035d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b15      	ldr	r3, [pc, #84]	; (80035c0 <HAL_RCC_OscConfig+0x248>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7ff f838 	bl	80025e4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003578:	f7ff f834 	bl	80025e4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e167      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <HAL_RCC_OscConfig+0x240>)
 800358c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x200>
 8003596:	e01b      	b.n	80035d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003598:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_OscConfig+0x248>)
 800359a:	2200      	movs	r2, #0
 800359c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359e:	f7ff f821 	bl	80025e4 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	e00e      	b.n	80035c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a6:	f7ff f81d 	bl	80025e4 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d907      	bls.n	80035c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e150      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80035b8:	40023800 	.word	0x40023800
 80035bc:	42470000 	.word	0x42470000
 80035c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	4b88      	ldr	r3, [pc, #544]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ea      	bne.n	80035a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f000 8097 	beq.w	800370c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	4b7d      	ldr	r3, [pc, #500]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a7c      	ldr	r2, [pc, #496]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b7a      	ldr	r3, [pc, #488]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b77      	ldr	r3, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b74      	ldr	r3, [pc, #464]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a73      	ldr	r2, [pc, #460]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fe ffdd 	bl	80025e4 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fe ffd9 	bl	80025e4 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e10c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCC_OscConfig+0x474>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x2ea>
 8003654:	4b64      	ldr	r3, [pc, #400]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003658:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6713      	str	r3, [r2, #112]	; 0x70
 8003660:	e01c      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b05      	cmp	r3, #5
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x30c>
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5e      	ldr	r2, [pc, #376]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003670:	f043 0304 	orr.w	r3, r3, #4
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	4b5c      	ldr	r3, [pc, #368]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a5b      	ldr	r2, [pc, #364]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0x324>
 8003684:	4b58      	ldr	r3, [pc, #352]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	4a57      	ldr	r2, [pc, #348]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	; 0x70
 8003690:	4b55      	ldr	r3, [pc, #340]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a54      	ldr	r2, [pc, #336]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 0304 	bic.w	r3, r3, #4
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fe ff9e 	bl	80025e4 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ac:	f7fe ff9a 	bl	80025e4 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e0cb      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	4b49      	ldr	r3, [pc, #292]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0ee      	beq.n	80036ac <HAL_RCC_OscConfig+0x334>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe ff88 	bl	80025e4 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d6:	e00a      	b.n	80036ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d8:	f7fe ff84 	bl	80025e4 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e0b5      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	4b3e      	ldr	r3, [pc, #248]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1ee      	bne.n	80036d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d105      	bne.n	800370c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003700:	4b39      	ldr	r3, [pc, #228]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	4a38      	ldr	r2, [pc, #224]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80a1 	beq.w	8003858 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003716:	4b34      	ldr	r3, [pc, #208]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
 800371e:	2b08      	cmp	r3, #8
 8003720:	d05c      	beq.n	80037dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d141      	bne.n	80037ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372a:	4b31      	ldr	r3, [pc, #196]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fe ff58 	bl	80025e4 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003738:	f7fe ff54 	bl	80025e4 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e087      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1f0      	bne.n	8003738 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	019b      	lsls	r3, r3, #6
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	3b01      	subs	r3, #1
 8003770:	041b      	lsls	r3, r3, #16
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	491b      	ldr	r1, [pc, #108]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe ff2d 	bl	80025e4 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe ff29 	bl	80025e4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e05c      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x416>
 80037ac:	e054      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ae:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_RCC_OscConfig+0x478>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fe ff16 	bl	80025e4 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe ff12 	bl	80025e4 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_OscConfig+0x470>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x444>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e038      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
 80037e8:	40023800 	.word	0x40023800
 80037ec:	40007000 	.word	0x40007000
 80037f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x4ec>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d028      	beq.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d121      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	429a      	cmp	r2, r3
 800381c:	d11a      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003824:	4013      	ands	r3, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800382a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800382c:	4293      	cmp	r3, r2
 800382e:	d111      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383a:	085b      	lsrs	r3, r3, #1
 800383c:	3b01      	subs	r3, #1
 800383e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0cc      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800387c:	4b68      	ldr	r3, [pc, #416]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	429a      	cmp	r2, r3
 8003888:	d90c      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388a:	4b65      	ldr	r3, [pc, #404]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003892:	4b63      	ldr	r3, [pc, #396]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e0b8      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d005      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038bc:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a58      	ldr	r2, [pc, #352]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0308 	and.w	r3, r3, #8
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a52      	ldr	r2, [pc, #328]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e0:	4b50      	ldr	r3, [pc, #320]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	494d      	ldr	r1, [pc, #308]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d044      	beq.n	8003988 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d119      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d003      	beq.n	8003926 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003922:	2b03      	cmp	r3, #3
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003936:	4b3b      	ldr	r3, [pc, #236]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e067      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 0203 	bic.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4934      	ldr	r1, [pc, #208]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	4313      	orrs	r3, r2
 8003956:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003958:	f7fe fe44 	bl	80025e4 <HAL_GetTick>
 800395c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395e:	e00a      	b.n	8003976 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003960:	f7fe fe40 	bl	80025e4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f241 3288 	movw	r2, #5000	; 0x1388
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e04f      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 020c 	and.w	r2, r3, #12
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d1eb      	bne.n	8003960 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b25      	ldr	r3, [pc, #148]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d20c      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e032      	b.n	8003a16 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0304 	and.w	r3, r3, #4
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039bc:	4b19      	ldr	r3, [pc, #100]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4916      	ldr	r1, [pc, #88]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d009      	beq.n	80039ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039da:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	490e      	ldr	r1, [pc, #56]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039ee:	f000 f821 	bl	8003a34 <HAL_RCC_GetSysClockFreq>
 80039f2:	4602      	mov	r2, r0
 80039f4:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	490a      	ldr	r1, [pc, #40]	; (8003a28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	5ccb      	ldrb	r3, [r1, r3]
 8003a02:	fa22 f303 	lsr.w	r3, r2, r3
 8003a06:	4a09      	ldr	r2, [pc, #36]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fda4 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023c00 	.word	0x40023c00
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0802b864 	.word	0x0802b864
 8003a2c:	2000000c 	.word	0x2000000c
 8003a30:	20000010 	.word	0x20000010

08003a34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a38:	b094      	sub	sp, #80	; 0x50
 8003a3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a40:	2300      	movs	r3, #0
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a44:	2300      	movs	r3, #0
 8003a46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a4c:	4b79      	ldr	r3, [pc, #484]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d00d      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x40>
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	f200 80e1 	bhi.w	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x34>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a66:	e0db      	b.n	8003c20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a68:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a6c:	e0db      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6e:	4b73      	ldr	r3, [pc, #460]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a72:	e0d8      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a74:	4b6f      	ldr	r3, [pc, #444]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a7c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7e:	4b6d      	ldr	r3, [pc, #436]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	099b      	lsrs	r3, r3, #6
 8003a90:	2200      	movs	r2, #0
 8003a92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	f04f 0000 	mov.w	r0, #0
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	0159      	lsls	r1, r3, #5
 8003ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab8:	0150      	lsls	r0, r2, #5
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4621      	mov	r1, r4
 8003ac0:	1a51      	subs	r1, r2, r1
 8003ac2:	6139      	str	r1, [r7, #16]
 8003ac4:	4629      	mov	r1, r5
 8003ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad8:	4659      	mov	r1, fp
 8003ada:	018b      	lsls	r3, r1, #6
 8003adc:	4651      	mov	r1, sl
 8003ade:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	018a      	lsls	r2, r1, #6
 8003ae6:	4651      	mov	r1, sl
 8003ae8:	ebb2 0801 	subs.w	r8, r2, r1
 8003aec:	4659      	mov	r1, fp
 8003aee:	eb63 0901 	sbc.w	r9, r3, r1
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	4623      	mov	r3, r4
 8003b0c:	eb18 0303 	adds.w	r3, r8, r3
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	462b      	mov	r3, r5
 8003b14:	eb49 0303 	adc.w	r3, r9, r3
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b26:	4629      	mov	r1, r5
 8003b28:	024b      	lsls	r3, r1, #9
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b30:	4621      	mov	r1, r4
 8003b32:	024a      	lsls	r2, r1, #9
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b44:	f7fd f800 	bl	8000b48 <__aeabi_uldivmod>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b50:	e058      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b52:	4b38      	ldr	r3, [pc, #224]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	099b      	lsrs	r3, r3, #6
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b62:	623b      	str	r3, [r7, #32]
 8003b64:	2300      	movs	r3, #0
 8003b66:	627b      	str	r3, [r7, #36]	; 0x24
 8003b68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b6c:	4642      	mov	r2, r8
 8003b6e:	464b      	mov	r3, r9
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	0159      	lsls	r1, r3, #5
 8003b7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7e:	0150      	lsls	r0, r2, #5
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4641      	mov	r1, r8
 8003b86:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ba0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	00eb      	lsls	r3, r5, #3
 8003bb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bba:	00e2      	lsls	r2, r4, #3
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	461d      	mov	r5, r3
 8003bc0:	4643      	mov	r3, r8
 8003bc2:	18e3      	adds	r3, r4, r3
 8003bc4:	603b      	str	r3, [r7, #0]
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	eb45 0303 	adc.w	r3, r5, r3
 8003bcc:	607b      	str	r3, [r7, #4]
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bda:	4629      	mov	r1, r5
 8003bdc:	028b      	lsls	r3, r1, #10
 8003bde:	4621      	mov	r1, r4
 8003be0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be4:	4621      	mov	r1, r4
 8003be6:	028a      	lsls	r2, r1, #10
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	61fa      	str	r2, [r7, #28]
 8003bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf8:	f7fc ffa6 	bl	8000b48 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4613      	mov	r3, r2
 8003c02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c1e:	e002      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3750      	adds	r7, #80	; 0x50
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	007a1200 	.word	0x007a1200

08003c40 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e038      	b.n	8003cc8 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7fe fbae 	bl	80023cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3308      	adds	r3, #8
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	f000 f828 	bl	8003cd0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	f000 f88a 	bl	8003da4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6858      	ldr	r0, [r3, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	f000 f8b7 	bl	8003e10 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	6892      	ldr	r2, [r2, #8]
 8003caa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	6892      	ldr	r2, [r2, #8]
 8003cb6:	f041 0101 	orr.w	r1, r1, #1
 8003cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	f023 0101 	bic.w	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d102      	bne.n	8003d00 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003cfa:	2340      	movs	r3, #64	; 0x40
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e001      	b.n	8003d04 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003d10:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003d16:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003d1c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003d22:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003d28:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003d2e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8003d34:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8003d3a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8003d40:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <FSMC_NORSRAM_Init+0xd0>)
 8003d60:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d68:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8003d70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	ea02 0103 	and.w	r1, r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4319      	orrs	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	371c      	adds	r7, #28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	0008fb7f 	.word	0x0008fb7f

08003da4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	021b      	lsls	r3, r3, #8
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	051b      	lsls	r3, r3, #20
 8003de2:	431a      	orrs	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	3b02      	subs	r3, #2
 8003dea:	061b      	lsls	r3, r3, #24
 8003dec:	431a      	orrs	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	3201      	adds	r2, #1
 8003df8:	4319      	orrs	r1, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e24:	d11d      	bne.n	8003e62 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e2e:	4b13      	ldr	r3, [pc, #76]	; (8003e7c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	6811      	ldr	r1, [r2, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	6852      	ldr	r2, [r2, #4]
 8003e3a:	0112      	lsls	r2, r2, #4
 8003e3c:	4311      	orrs	r1, r2
 8003e3e:	68ba      	ldr	r2, [r7, #8]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	0212      	lsls	r2, r2, #8
 8003e44:	4311      	orrs	r1, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	6992      	ldr	r2, [r2, #24]
 8003e4a:	4311      	orrs	r1, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	68d2      	ldr	r2, [r2, #12]
 8003e50:	0412      	lsls	r2, r2, #16
 8003e52:	430a      	orrs	r2, r1
 8003e54:	ea43 0102 	orr.w	r1, r3, r2
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003e60:	e005      	b.n	8003e6e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8003e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	cff00000 	.word	0xcff00000

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	; (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	20000018 	.word	0x20000018

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	4d0d      	ldr	r5, [pc, #52]	; (8003ec4 <__libc_init_array+0x38>)
 8003e90:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <__libc_init_array+0x3c>)
 8003e92:	1b64      	subs	r4, r4, r5
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	2600      	movs	r6, #0
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	4d0b      	ldr	r5, [pc, #44]	; (8003ecc <__libc_init_array+0x40>)
 8003e9e:	4c0c      	ldr	r4, [pc, #48]	; (8003ed0 <__libc_init_array+0x44>)
 8003ea0:	f001 fba8 	bl	80055f4 <_init>
 8003ea4:	1b64      	subs	r4, r4, r5
 8003ea6:	10a4      	asrs	r4, r4, #2
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	0802b8e0 	.word	0x0802b8e0
 8003ec8:	0802b8e0 	.word	0x0802b8e0
 8003ecc:	0802b8e0 	.word	0x0802b8e0
 8003ed0:	0802b8e4 	.word	0x0802b8e4

08003ed4 <memset>:
 8003ed4:	4402      	add	r2, r0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <siprintf>:
 8003ee4:	b40e      	push	{r1, r2, r3}
 8003ee6:	b500      	push	{lr}
 8003ee8:	b09c      	sub	sp, #112	; 0x70
 8003eea:	ab1d      	add	r3, sp, #116	; 0x74
 8003eec:	9002      	str	r0, [sp, #8]
 8003eee:	9006      	str	r0, [sp, #24]
 8003ef0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ef4:	4809      	ldr	r0, [pc, #36]	; (8003f1c <siprintf+0x38>)
 8003ef6:	9107      	str	r1, [sp, #28]
 8003ef8:	9104      	str	r1, [sp, #16]
 8003efa:	4909      	ldr	r1, [pc, #36]	; (8003f20 <siprintf+0x3c>)
 8003efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f00:	9105      	str	r1, [sp, #20]
 8003f02:	6800      	ldr	r0, [r0, #0]
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	a902      	add	r1, sp, #8
 8003f08:	f000 f868 	bl	8003fdc <_svfiprintf_r>
 8003f0c:	9b02      	ldr	r3, [sp, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	b01c      	add	sp, #112	; 0x70
 8003f14:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f18:	b003      	add	sp, #12
 8003f1a:	4770      	bx	lr
 8003f1c:	20000018 	.word	0x20000018
 8003f20:	ffff0208 	.word	0xffff0208

08003f24 <__ssputs_r>:
 8003f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	688e      	ldr	r6, [r1, #8]
 8003f2a:	429e      	cmp	r6, r3
 8003f2c:	4682      	mov	sl, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	4690      	mov	r8, r2
 8003f32:	461f      	mov	r7, r3
 8003f34:	d838      	bhi.n	8003fa8 <__ssputs_r+0x84>
 8003f36:	898a      	ldrh	r2, [r1, #12]
 8003f38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f3c:	d032      	beq.n	8003fa4 <__ssputs_r+0x80>
 8003f3e:	6825      	ldr	r5, [r4, #0]
 8003f40:	6909      	ldr	r1, [r1, #16]
 8003f42:	eba5 0901 	sub.w	r9, r5, r1
 8003f46:	6965      	ldr	r5, [r4, #20]
 8003f48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f50:	3301      	adds	r3, #1
 8003f52:	444b      	add	r3, r9
 8003f54:	106d      	asrs	r5, r5, #1
 8003f56:	429d      	cmp	r5, r3
 8003f58:	bf38      	it	cc
 8003f5a:	461d      	movcc	r5, r3
 8003f5c:	0553      	lsls	r3, r2, #21
 8003f5e:	d531      	bpl.n	8003fc4 <__ssputs_r+0xa0>
 8003f60:	4629      	mov	r1, r5
 8003f62:	f000 fb63 	bl	800462c <_malloc_r>
 8003f66:	4606      	mov	r6, r0
 8003f68:	b950      	cbnz	r0, 8003f80 <__ssputs_r+0x5c>
 8003f6a:	230c      	movs	r3, #12
 8003f6c:	f8ca 3000 	str.w	r3, [sl]
 8003f70:	89a3      	ldrh	r3, [r4, #12]
 8003f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f80:	6921      	ldr	r1, [r4, #16]
 8003f82:	464a      	mov	r2, r9
 8003f84:	f000 fabe 	bl	8004504 <memcpy>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	6126      	str	r6, [r4, #16]
 8003f96:	6165      	str	r5, [r4, #20]
 8003f98:	444e      	add	r6, r9
 8003f9a:	eba5 0509 	sub.w	r5, r5, r9
 8003f9e:	6026      	str	r6, [r4, #0]
 8003fa0:	60a5      	str	r5, [r4, #8]
 8003fa2:	463e      	mov	r6, r7
 8003fa4:	42be      	cmp	r6, r7
 8003fa6:	d900      	bls.n	8003faa <__ssputs_r+0x86>
 8003fa8:	463e      	mov	r6, r7
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	4632      	mov	r2, r6
 8003fae:	4641      	mov	r1, r8
 8003fb0:	f000 fab6 	bl	8004520 <memmove>
 8003fb4:	68a3      	ldr	r3, [r4, #8]
 8003fb6:	1b9b      	subs	r3, r3, r6
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	4433      	add	r3, r6
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	e7db      	b.n	8003f7c <__ssputs_r+0x58>
 8003fc4:	462a      	mov	r2, r5
 8003fc6:	f000 fba5 	bl	8004714 <_realloc_r>
 8003fca:	4606      	mov	r6, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d1e1      	bne.n	8003f94 <__ssputs_r+0x70>
 8003fd0:	6921      	ldr	r1, [r4, #16]
 8003fd2:	4650      	mov	r0, sl
 8003fd4:	f000 fabe 	bl	8004554 <_free_r>
 8003fd8:	e7c7      	b.n	8003f6a <__ssputs_r+0x46>
	...

08003fdc <_svfiprintf_r>:
 8003fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe0:	4698      	mov	r8, r3
 8003fe2:	898b      	ldrh	r3, [r1, #12]
 8003fe4:	061b      	lsls	r3, r3, #24
 8003fe6:	b09d      	sub	sp, #116	; 0x74
 8003fe8:	4607      	mov	r7, r0
 8003fea:	460d      	mov	r5, r1
 8003fec:	4614      	mov	r4, r2
 8003fee:	d50e      	bpl.n	800400e <_svfiprintf_r+0x32>
 8003ff0:	690b      	ldr	r3, [r1, #16]
 8003ff2:	b963      	cbnz	r3, 800400e <_svfiprintf_r+0x32>
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	f000 fb19 	bl	800462c <_malloc_r>
 8003ffa:	6028      	str	r0, [r5, #0]
 8003ffc:	6128      	str	r0, [r5, #16]
 8003ffe:	b920      	cbnz	r0, 800400a <_svfiprintf_r+0x2e>
 8004000:	230c      	movs	r3, #12
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	f04f 30ff 	mov.w	r0, #4294967295
 8004008:	e0d1      	b.n	80041ae <_svfiprintf_r+0x1d2>
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	616b      	str	r3, [r5, #20]
 800400e:	2300      	movs	r3, #0
 8004010:	9309      	str	r3, [sp, #36]	; 0x24
 8004012:	2320      	movs	r3, #32
 8004014:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004018:	f8cd 800c 	str.w	r8, [sp, #12]
 800401c:	2330      	movs	r3, #48	; 0x30
 800401e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80041c8 <_svfiprintf_r+0x1ec>
 8004022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004026:	f04f 0901 	mov.w	r9, #1
 800402a:	4623      	mov	r3, r4
 800402c:	469a      	mov	sl, r3
 800402e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004032:	b10a      	cbz	r2, 8004038 <_svfiprintf_r+0x5c>
 8004034:	2a25      	cmp	r2, #37	; 0x25
 8004036:	d1f9      	bne.n	800402c <_svfiprintf_r+0x50>
 8004038:	ebba 0b04 	subs.w	fp, sl, r4
 800403c:	d00b      	beq.n	8004056 <_svfiprintf_r+0x7a>
 800403e:	465b      	mov	r3, fp
 8004040:	4622      	mov	r2, r4
 8004042:	4629      	mov	r1, r5
 8004044:	4638      	mov	r0, r7
 8004046:	f7ff ff6d 	bl	8003f24 <__ssputs_r>
 800404a:	3001      	adds	r0, #1
 800404c:	f000 80aa 	beq.w	80041a4 <_svfiprintf_r+0x1c8>
 8004050:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004052:	445a      	add	r2, fp
 8004054:	9209      	str	r2, [sp, #36]	; 0x24
 8004056:	f89a 3000 	ldrb.w	r3, [sl]
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a2 	beq.w	80041a4 <_svfiprintf_r+0x1c8>
 8004060:	2300      	movs	r3, #0
 8004062:	f04f 32ff 	mov.w	r2, #4294967295
 8004066:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800406a:	f10a 0a01 	add.w	sl, sl, #1
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	9307      	str	r3, [sp, #28]
 8004072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004076:	931a      	str	r3, [sp, #104]	; 0x68
 8004078:	4654      	mov	r4, sl
 800407a:	2205      	movs	r2, #5
 800407c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004080:	4851      	ldr	r0, [pc, #324]	; (80041c8 <_svfiprintf_r+0x1ec>)
 8004082:	f7fc f8a5 	bl	80001d0 <memchr>
 8004086:	9a04      	ldr	r2, [sp, #16]
 8004088:	b9d8      	cbnz	r0, 80040c2 <_svfiprintf_r+0xe6>
 800408a:	06d0      	lsls	r0, r2, #27
 800408c:	bf44      	itt	mi
 800408e:	2320      	movmi	r3, #32
 8004090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004094:	0711      	lsls	r1, r2, #28
 8004096:	bf44      	itt	mi
 8004098:	232b      	movmi	r3, #43	; 0x2b
 800409a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800409e:	f89a 3000 	ldrb.w	r3, [sl]
 80040a2:	2b2a      	cmp	r3, #42	; 0x2a
 80040a4:	d015      	beq.n	80040d2 <_svfiprintf_r+0xf6>
 80040a6:	9a07      	ldr	r2, [sp, #28]
 80040a8:	4654      	mov	r4, sl
 80040aa:	2000      	movs	r0, #0
 80040ac:	f04f 0c0a 	mov.w	ip, #10
 80040b0:	4621      	mov	r1, r4
 80040b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040b6:	3b30      	subs	r3, #48	; 0x30
 80040b8:	2b09      	cmp	r3, #9
 80040ba:	d94e      	bls.n	800415a <_svfiprintf_r+0x17e>
 80040bc:	b1b0      	cbz	r0, 80040ec <_svfiprintf_r+0x110>
 80040be:	9207      	str	r2, [sp, #28]
 80040c0:	e014      	b.n	80040ec <_svfiprintf_r+0x110>
 80040c2:	eba0 0308 	sub.w	r3, r0, r8
 80040c6:	fa09 f303 	lsl.w	r3, r9, r3
 80040ca:	4313      	orrs	r3, r2
 80040cc:	9304      	str	r3, [sp, #16]
 80040ce:	46a2      	mov	sl, r4
 80040d0:	e7d2      	b.n	8004078 <_svfiprintf_r+0x9c>
 80040d2:	9b03      	ldr	r3, [sp, #12]
 80040d4:	1d19      	adds	r1, r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	9103      	str	r1, [sp, #12]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	bfbb      	ittet	lt
 80040de:	425b      	neglt	r3, r3
 80040e0:	f042 0202 	orrlt.w	r2, r2, #2
 80040e4:	9307      	strge	r3, [sp, #28]
 80040e6:	9307      	strlt	r3, [sp, #28]
 80040e8:	bfb8      	it	lt
 80040ea:	9204      	strlt	r2, [sp, #16]
 80040ec:	7823      	ldrb	r3, [r4, #0]
 80040ee:	2b2e      	cmp	r3, #46	; 0x2e
 80040f0:	d10c      	bne.n	800410c <_svfiprintf_r+0x130>
 80040f2:	7863      	ldrb	r3, [r4, #1]
 80040f4:	2b2a      	cmp	r3, #42	; 0x2a
 80040f6:	d135      	bne.n	8004164 <_svfiprintf_r+0x188>
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	9203      	str	r2, [sp, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	bfb8      	it	lt
 8004104:	f04f 33ff 	movlt.w	r3, #4294967295
 8004108:	3402      	adds	r4, #2
 800410a:	9305      	str	r3, [sp, #20]
 800410c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80041d8 <_svfiprintf_r+0x1fc>
 8004110:	7821      	ldrb	r1, [r4, #0]
 8004112:	2203      	movs	r2, #3
 8004114:	4650      	mov	r0, sl
 8004116:	f7fc f85b 	bl	80001d0 <memchr>
 800411a:	b140      	cbz	r0, 800412e <_svfiprintf_r+0x152>
 800411c:	2340      	movs	r3, #64	; 0x40
 800411e:	eba0 000a 	sub.w	r0, r0, sl
 8004122:	fa03 f000 	lsl.w	r0, r3, r0
 8004126:	9b04      	ldr	r3, [sp, #16]
 8004128:	4303      	orrs	r3, r0
 800412a:	3401      	adds	r4, #1
 800412c:	9304      	str	r3, [sp, #16]
 800412e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004132:	4826      	ldr	r0, [pc, #152]	; (80041cc <_svfiprintf_r+0x1f0>)
 8004134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004138:	2206      	movs	r2, #6
 800413a:	f7fc f849 	bl	80001d0 <memchr>
 800413e:	2800      	cmp	r0, #0
 8004140:	d038      	beq.n	80041b4 <_svfiprintf_r+0x1d8>
 8004142:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <_svfiprintf_r+0x1f4>)
 8004144:	bb1b      	cbnz	r3, 800418e <_svfiprintf_r+0x1b2>
 8004146:	9b03      	ldr	r3, [sp, #12]
 8004148:	3307      	adds	r3, #7
 800414a:	f023 0307 	bic.w	r3, r3, #7
 800414e:	3308      	adds	r3, #8
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004154:	4433      	add	r3, r6
 8004156:	9309      	str	r3, [sp, #36]	; 0x24
 8004158:	e767      	b.n	800402a <_svfiprintf_r+0x4e>
 800415a:	fb0c 3202 	mla	r2, ip, r2, r3
 800415e:	460c      	mov	r4, r1
 8004160:	2001      	movs	r0, #1
 8004162:	e7a5      	b.n	80040b0 <_svfiprintf_r+0xd4>
 8004164:	2300      	movs	r3, #0
 8004166:	3401      	adds	r4, #1
 8004168:	9305      	str	r3, [sp, #20]
 800416a:	4619      	mov	r1, r3
 800416c:	f04f 0c0a 	mov.w	ip, #10
 8004170:	4620      	mov	r0, r4
 8004172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004176:	3a30      	subs	r2, #48	; 0x30
 8004178:	2a09      	cmp	r2, #9
 800417a:	d903      	bls.n	8004184 <_svfiprintf_r+0x1a8>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0c5      	beq.n	800410c <_svfiprintf_r+0x130>
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	e7c3      	b.n	800410c <_svfiprintf_r+0x130>
 8004184:	fb0c 2101 	mla	r1, ip, r1, r2
 8004188:	4604      	mov	r4, r0
 800418a:	2301      	movs	r3, #1
 800418c:	e7f0      	b.n	8004170 <_svfiprintf_r+0x194>
 800418e:	ab03      	add	r3, sp, #12
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	462a      	mov	r2, r5
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <_svfiprintf_r+0x1f8>)
 8004196:	a904      	add	r1, sp, #16
 8004198:	4638      	mov	r0, r7
 800419a:	f3af 8000 	nop.w
 800419e:	1c42      	adds	r2, r0, #1
 80041a0:	4606      	mov	r6, r0
 80041a2:	d1d6      	bne.n	8004152 <_svfiprintf_r+0x176>
 80041a4:	89ab      	ldrh	r3, [r5, #12]
 80041a6:	065b      	lsls	r3, r3, #25
 80041a8:	f53f af2c 	bmi.w	8004004 <_svfiprintf_r+0x28>
 80041ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ae:	b01d      	add	sp, #116	; 0x74
 80041b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041b4:	ab03      	add	r3, sp, #12
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4b06      	ldr	r3, [pc, #24]	; (80041d4 <_svfiprintf_r+0x1f8>)
 80041bc:	a904      	add	r1, sp, #16
 80041be:	4638      	mov	r0, r7
 80041c0:	f000 f87a 	bl	80042b8 <_printf_i>
 80041c4:	e7eb      	b.n	800419e <_svfiprintf_r+0x1c2>
 80041c6:	bf00      	nop
 80041c8:	0802b874 	.word	0x0802b874
 80041cc:	0802b87e 	.word	0x0802b87e
 80041d0:	00000000 	.word	0x00000000
 80041d4:	08003f25 	.word	0x08003f25
 80041d8:	0802b87a 	.word	0x0802b87a

080041dc <_printf_common>:
 80041dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041e0:	4616      	mov	r6, r2
 80041e2:	4699      	mov	r9, r3
 80041e4:	688a      	ldr	r2, [r1, #8]
 80041e6:	690b      	ldr	r3, [r1, #16]
 80041e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041ec:	4293      	cmp	r3, r2
 80041ee:	bfb8      	it	lt
 80041f0:	4613      	movlt	r3, r2
 80041f2:	6033      	str	r3, [r6, #0]
 80041f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041f8:	4607      	mov	r7, r0
 80041fa:	460c      	mov	r4, r1
 80041fc:	b10a      	cbz	r2, 8004202 <_printf_common+0x26>
 80041fe:	3301      	adds	r3, #1
 8004200:	6033      	str	r3, [r6, #0]
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	0699      	lsls	r1, r3, #26
 8004206:	bf42      	ittt	mi
 8004208:	6833      	ldrmi	r3, [r6, #0]
 800420a:	3302      	addmi	r3, #2
 800420c:	6033      	strmi	r3, [r6, #0]
 800420e:	6825      	ldr	r5, [r4, #0]
 8004210:	f015 0506 	ands.w	r5, r5, #6
 8004214:	d106      	bne.n	8004224 <_printf_common+0x48>
 8004216:	f104 0a19 	add.w	sl, r4, #25
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	6832      	ldr	r2, [r6, #0]
 800421e:	1a9b      	subs	r3, r3, r2
 8004220:	42ab      	cmp	r3, r5
 8004222:	dc26      	bgt.n	8004272 <_printf_common+0x96>
 8004224:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004228:	1e13      	subs	r3, r2, #0
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	bf18      	it	ne
 800422e:	2301      	movne	r3, #1
 8004230:	0692      	lsls	r2, r2, #26
 8004232:	d42b      	bmi.n	800428c <_printf_common+0xb0>
 8004234:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004238:	4649      	mov	r1, r9
 800423a:	4638      	mov	r0, r7
 800423c:	47c0      	blx	r8
 800423e:	3001      	adds	r0, #1
 8004240:	d01e      	beq.n	8004280 <_printf_common+0xa4>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	68e5      	ldr	r5, [r4, #12]
 8004246:	6832      	ldr	r2, [r6, #0]
 8004248:	f003 0306 	and.w	r3, r3, #6
 800424c:	2b04      	cmp	r3, #4
 800424e:	bf08      	it	eq
 8004250:	1aad      	subeq	r5, r5, r2
 8004252:	68a3      	ldr	r3, [r4, #8]
 8004254:	6922      	ldr	r2, [r4, #16]
 8004256:	bf0c      	ite	eq
 8004258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800425c:	2500      	movne	r5, #0
 800425e:	4293      	cmp	r3, r2
 8004260:	bfc4      	itt	gt
 8004262:	1a9b      	subgt	r3, r3, r2
 8004264:	18ed      	addgt	r5, r5, r3
 8004266:	2600      	movs	r6, #0
 8004268:	341a      	adds	r4, #26
 800426a:	42b5      	cmp	r5, r6
 800426c:	d11a      	bne.n	80042a4 <_printf_common+0xc8>
 800426e:	2000      	movs	r0, #0
 8004270:	e008      	b.n	8004284 <_printf_common+0xa8>
 8004272:	2301      	movs	r3, #1
 8004274:	4652      	mov	r2, sl
 8004276:	4649      	mov	r1, r9
 8004278:	4638      	mov	r0, r7
 800427a:	47c0      	blx	r8
 800427c:	3001      	adds	r0, #1
 800427e:	d103      	bne.n	8004288 <_printf_common+0xac>
 8004280:	f04f 30ff 	mov.w	r0, #4294967295
 8004284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004288:	3501      	adds	r5, #1
 800428a:	e7c6      	b.n	800421a <_printf_common+0x3e>
 800428c:	18e1      	adds	r1, r4, r3
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	2030      	movs	r0, #48	; 0x30
 8004292:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004296:	4422      	add	r2, r4
 8004298:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800429c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042a0:	3302      	adds	r3, #2
 80042a2:	e7c7      	b.n	8004234 <_printf_common+0x58>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4622      	mov	r2, r4
 80042a8:	4649      	mov	r1, r9
 80042aa:	4638      	mov	r0, r7
 80042ac:	47c0      	blx	r8
 80042ae:	3001      	adds	r0, #1
 80042b0:	d0e6      	beq.n	8004280 <_printf_common+0xa4>
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7d9      	b.n	800426a <_printf_common+0x8e>
	...

080042b8 <_printf_i>:
 80042b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042bc:	7e0f      	ldrb	r7, [r1, #24]
 80042be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80042c0:	2f78      	cmp	r7, #120	; 0x78
 80042c2:	4691      	mov	r9, r2
 80042c4:	4680      	mov	r8, r0
 80042c6:	460c      	mov	r4, r1
 80042c8:	469a      	mov	sl, r3
 80042ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80042ce:	d807      	bhi.n	80042e0 <_printf_i+0x28>
 80042d0:	2f62      	cmp	r7, #98	; 0x62
 80042d2:	d80a      	bhi.n	80042ea <_printf_i+0x32>
 80042d4:	2f00      	cmp	r7, #0
 80042d6:	f000 80d8 	beq.w	800448a <_printf_i+0x1d2>
 80042da:	2f58      	cmp	r7, #88	; 0x58
 80042dc:	f000 80a3 	beq.w	8004426 <_printf_i+0x16e>
 80042e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042e8:	e03a      	b.n	8004360 <_printf_i+0xa8>
 80042ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042ee:	2b15      	cmp	r3, #21
 80042f0:	d8f6      	bhi.n	80042e0 <_printf_i+0x28>
 80042f2:	a101      	add	r1, pc, #4	; (adr r1, 80042f8 <_printf_i+0x40>)
 80042f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042f8:	08004351 	.word	0x08004351
 80042fc:	08004365 	.word	0x08004365
 8004300:	080042e1 	.word	0x080042e1
 8004304:	080042e1 	.word	0x080042e1
 8004308:	080042e1 	.word	0x080042e1
 800430c:	080042e1 	.word	0x080042e1
 8004310:	08004365 	.word	0x08004365
 8004314:	080042e1 	.word	0x080042e1
 8004318:	080042e1 	.word	0x080042e1
 800431c:	080042e1 	.word	0x080042e1
 8004320:	080042e1 	.word	0x080042e1
 8004324:	08004471 	.word	0x08004471
 8004328:	08004395 	.word	0x08004395
 800432c:	08004453 	.word	0x08004453
 8004330:	080042e1 	.word	0x080042e1
 8004334:	080042e1 	.word	0x080042e1
 8004338:	08004493 	.word	0x08004493
 800433c:	080042e1 	.word	0x080042e1
 8004340:	08004395 	.word	0x08004395
 8004344:	080042e1 	.word	0x080042e1
 8004348:	080042e1 	.word	0x080042e1
 800434c:	0800445b 	.word	0x0800445b
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	1d1a      	adds	r2, r3, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	602a      	str	r2, [r5, #0]
 8004358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800435c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004360:	2301      	movs	r3, #1
 8004362:	e0a3      	b.n	80044ac <_printf_i+0x1f4>
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	6829      	ldr	r1, [r5, #0]
 8004368:	0606      	lsls	r6, r0, #24
 800436a:	f101 0304 	add.w	r3, r1, #4
 800436e:	d50a      	bpl.n	8004386 <_printf_i+0xce>
 8004370:	680e      	ldr	r6, [r1, #0]
 8004372:	602b      	str	r3, [r5, #0]
 8004374:	2e00      	cmp	r6, #0
 8004376:	da03      	bge.n	8004380 <_printf_i+0xc8>
 8004378:	232d      	movs	r3, #45	; 0x2d
 800437a:	4276      	negs	r6, r6
 800437c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004380:	485e      	ldr	r0, [pc, #376]	; (80044fc <_printf_i+0x244>)
 8004382:	230a      	movs	r3, #10
 8004384:	e019      	b.n	80043ba <_printf_i+0x102>
 8004386:	680e      	ldr	r6, [r1, #0]
 8004388:	602b      	str	r3, [r5, #0]
 800438a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800438e:	bf18      	it	ne
 8004390:	b236      	sxthne	r6, r6
 8004392:	e7ef      	b.n	8004374 <_printf_i+0xbc>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	6820      	ldr	r0, [r4, #0]
 8004398:	1d19      	adds	r1, r3, #4
 800439a:	6029      	str	r1, [r5, #0]
 800439c:	0601      	lsls	r1, r0, #24
 800439e:	d501      	bpl.n	80043a4 <_printf_i+0xec>
 80043a0:	681e      	ldr	r6, [r3, #0]
 80043a2:	e002      	b.n	80043aa <_printf_i+0xf2>
 80043a4:	0646      	lsls	r6, r0, #25
 80043a6:	d5fb      	bpl.n	80043a0 <_printf_i+0xe8>
 80043a8:	881e      	ldrh	r6, [r3, #0]
 80043aa:	4854      	ldr	r0, [pc, #336]	; (80044fc <_printf_i+0x244>)
 80043ac:	2f6f      	cmp	r7, #111	; 0x6f
 80043ae:	bf0c      	ite	eq
 80043b0:	2308      	moveq	r3, #8
 80043b2:	230a      	movne	r3, #10
 80043b4:	2100      	movs	r1, #0
 80043b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043ba:	6865      	ldr	r5, [r4, #4]
 80043bc:	60a5      	str	r5, [r4, #8]
 80043be:	2d00      	cmp	r5, #0
 80043c0:	bfa2      	ittt	ge
 80043c2:	6821      	ldrge	r1, [r4, #0]
 80043c4:	f021 0104 	bicge.w	r1, r1, #4
 80043c8:	6021      	strge	r1, [r4, #0]
 80043ca:	b90e      	cbnz	r6, 80043d0 <_printf_i+0x118>
 80043cc:	2d00      	cmp	r5, #0
 80043ce:	d04d      	beq.n	800446c <_printf_i+0x1b4>
 80043d0:	4615      	mov	r5, r2
 80043d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80043d6:	fb03 6711 	mls	r7, r3, r1, r6
 80043da:	5dc7      	ldrb	r7, [r0, r7]
 80043dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80043e0:	4637      	mov	r7, r6
 80043e2:	42bb      	cmp	r3, r7
 80043e4:	460e      	mov	r6, r1
 80043e6:	d9f4      	bls.n	80043d2 <_printf_i+0x11a>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d10b      	bne.n	8004404 <_printf_i+0x14c>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	07de      	lsls	r6, r3, #31
 80043f0:	d508      	bpl.n	8004404 <_printf_i+0x14c>
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	6861      	ldr	r1, [r4, #4]
 80043f6:	4299      	cmp	r1, r3
 80043f8:	bfde      	ittt	le
 80043fa:	2330      	movle	r3, #48	; 0x30
 80043fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004400:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004404:	1b52      	subs	r2, r2, r5
 8004406:	6122      	str	r2, [r4, #16]
 8004408:	f8cd a000 	str.w	sl, [sp]
 800440c:	464b      	mov	r3, r9
 800440e:	aa03      	add	r2, sp, #12
 8004410:	4621      	mov	r1, r4
 8004412:	4640      	mov	r0, r8
 8004414:	f7ff fee2 	bl	80041dc <_printf_common>
 8004418:	3001      	adds	r0, #1
 800441a:	d14c      	bne.n	80044b6 <_printf_i+0x1fe>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	b004      	add	sp, #16
 8004422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004426:	4835      	ldr	r0, [pc, #212]	; (80044fc <_printf_i+0x244>)
 8004428:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800442c:	6829      	ldr	r1, [r5, #0]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	f851 6b04 	ldr.w	r6, [r1], #4
 8004434:	6029      	str	r1, [r5, #0]
 8004436:	061d      	lsls	r5, r3, #24
 8004438:	d514      	bpl.n	8004464 <_printf_i+0x1ac>
 800443a:	07df      	lsls	r7, r3, #31
 800443c:	bf44      	itt	mi
 800443e:	f043 0320 	orrmi.w	r3, r3, #32
 8004442:	6023      	strmi	r3, [r4, #0]
 8004444:	b91e      	cbnz	r6, 800444e <_printf_i+0x196>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	f023 0320 	bic.w	r3, r3, #32
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	2310      	movs	r3, #16
 8004450:	e7b0      	b.n	80043b4 <_printf_i+0xfc>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	f043 0320 	orr.w	r3, r3, #32
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	2378      	movs	r3, #120	; 0x78
 800445c:	4828      	ldr	r0, [pc, #160]	; (8004500 <_printf_i+0x248>)
 800445e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004462:	e7e3      	b.n	800442c <_printf_i+0x174>
 8004464:	0659      	lsls	r1, r3, #25
 8004466:	bf48      	it	mi
 8004468:	b2b6      	uxthmi	r6, r6
 800446a:	e7e6      	b.n	800443a <_printf_i+0x182>
 800446c:	4615      	mov	r5, r2
 800446e:	e7bb      	b.n	80043e8 <_printf_i+0x130>
 8004470:	682b      	ldr	r3, [r5, #0]
 8004472:	6826      	ldr	r6, [r4, #0]
 8004474:	6961      	ldr	r1, [r4, #20]
 8004476:	1d18      	adds	r0, r3, #4
 8004478:	6028      	str	r0, [r5, #0]
 800447a:	0635      	lsls	r5, r6, #24
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	d501      	bpl.n	8004484 <_printf_i+0x1cc>
 8004480:	6019      	str	r1, [r3, #0]
 8004482:	e002      	b.n	800448a <_printf_i+0x1d2>
 8004484:	0670      	lsls	r0, r6, #25
 8004486:	d5fb      	bpl.n	8004480 <_printf_i+0x1c8>
 8004488:	8019      	strh	r1, [r3, #0]
 800448a:	2300      	movs	r3, #0
 800448c:	6123      	str	r3, [r4, #16]
 800448e:	4615      	mov	r5, r2
 8004490:	e7ba      	b.n	8004408 <_printf_i+0x150>
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	1d1a      	adds	r2, r3, #4
 8004496:	602a      	str	r2, [r5, #0]
 8004498:	681d      	ldr	r5, [r3, #0]
 800449a:	6862      	ldr	r2, [r4, #4]
 800449c:	2100      	movs	r1, #0
 800449e:	4628      	mov	r0, r5
 80044a0:	f7fb fe96 	bl	80001d0 <memchr>
 80044a4:	b108      	cbz	r0, 80044aa <_printf_i+0x1f2>
 80044a6:	1b40      	subs	r0, r0, r5
 80044a8:	6060      	str	r0, [r4, #4]
 80044aa:	6863      	ldr	r3, [r4, #4]
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	2300      	movs	r3, #0
 80044b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b4:	e7a8      	b.n	8004408 <_printf_i+0x150>
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	462a      	mov	r2, r5
 80044ba:	4649      	mov	r1, r9
 80044bc:	4640      	mov	r0, r8
 80044be:	47d0      	blx	sl
 80044c0:	3001      	adds	r0, #1
 80044c2:	d0ab      	beq.n	800441c <_printf_i+0x164>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	079b      	lsls	r3, r3, #30
 80044c8:	d413      	bmi.n	80044f2 <_printf_i+0x23a>
 80044ca:	68e0      	ldr	r0, [r4, #12]
 80044cc:	9b03      	ldr	r3, [sp, #12]
 80044ce:	4298      	cmp	r0, r3
 80044d0:	bfb8      	it	lt
 80044d2:	4618      	movlt	r0, r3
 80044d4:	e7a4      	b.n	8004420 <_printf_i+0x168>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4632      	mov	r2, r6
 80044da:	4649      	mov	r1, r9
 80044dc:	4640      	mov	r0, r8
 80044de:	47d0      	blx	sl
 80044e0:	3001      	adds	r0, #1
 80044e2:	d09b      	beq.n	800441c <_printf_i+0x164>
 80044e4:	3501      	adds	r5, #1
 80044e6:	68e3      	ldr	r3, [r4, #12]
 80044e8:	9903      	ldr	r1, [sp, #12]
 80044ea:	1a5b      	subs	r3, r3, r1
 80044ec:	42ab      	cmp	r3, r5
 80044ee:	dcf2      	bgt.n	80044d6 <_printf_i+0x21e>
 80044f0:	e7eb      	b.n	80044ca <_printf_i+0x212>
 80044f2:	2500      	movs	r5, #0
 80044f4:	f104 0619 	add.w	r6, r4, #25
 80044f8:	e7f5      	b.n	80044e6 <_printf_i+0x22e>
 80044fa:	bf00      	nop
 80044fc:	0802b885 	.word	0x0802b885
 8004500:	0802b896 	.word	0x0802b896

08004504 <memcpy>:
 8004504:	440a      	add	r2, r1
 8004506:	4291      	cmp	r1, r2
 8004508:	f100 33ff 	add.w	r3, r0, #4294967295
 800450c:	d100      	bne.n	8004510 <memcpy+0xc>
 800450e:	4770      	bx	lr
 8004510:	b510      	push	{r4, lr}
 8004512:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800451a:	4291      	cmp	r1, r2
 800451c:	d1f9      	bne.n	8004512 <memcpy+0xe>
 800451e:	bd10      	pop	{r4, pc}

08004520 <memmove>:
 8004520:	4288      	cmp	r0, r1
 8004522:	b510      	push	{r4, lr}
 8004524:	eb01 0402 	add.w	r4, r1, r2
 8004528:	d902      	bls.n	8004530 <memmove+0x10>
 800452a:	4284      	cmp	r4, r0
 800452c:	4623      	mov	r3, r4
 800452e:	d807      	bhi.n	8004540 <memmove+0x20>
 8004530:	1e43      	subs	r3, r0, #1
 8004532:	42a1      	cmp	r1, r4
 8004534:	d008      	beq.n	8004548 <memmove+0x28>
 8004536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800453a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800453e:	e7f8      	b.n	8004532 <memmove+0x12>
 8004540:	4402      	add	r2, r0
 8004542:	4601      	mov	r1, r0
 8004544:	428a      	cmp	r2, r1
 8004546:	d100      	bne.n	800454a <memmove+0x2a>
 8004548:	bd10      	pop	{r4, pc}
 800454a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800454e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004552:	e7f7      	b.n	8004544 <memmove+0x24>

08004554 <_free_r>:
 8004554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004556:	2900      	cmp	r1, #0
 8004558:	d044      	beq.n	80045e4 <_free_r+0x90>
 800455a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800455e:	9001      	str	r0, [sp, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	f1a1 0404 	sub.w	r4, r1, #4
 8004566:	bfb8      	it	lt
 8004568:	18e4      	addlt	r4, r4, r3
 800456a:	f000 f913 	bl	8004794 <__malloc_lock>
 800456e:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <_free_r+0x94>)
 8004570:	9801      	ldr	r0, [sp, #4]
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	b933      	cbnz	r3, 8004584 <_free_r+0x30>
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	6014      	str	r4, [r2, #0]
 800457a:	b003      	add	sp, #12
 800457c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004580:	f000 b90e 	b.w	80047a0 <__malloc_unlock>
 8004584:	42a3      	cmp	r3, r4
 8004586:	d908      	bls.n	800459a <_free_r+0x46>
 8004588:	6825      	ldr	r5, [r4, #0]
 800458a:	1961      	adds	r1, r4, r5
 800458c:	428b      	cmp	r3, r1
 800458e:	bf01      	itttt	eq
 8004590:	6819      	ldreq	r1, [r3, #0]
 8004592:	685b      	ldreq	r3, [r3, #4]
 8004594:	1949      	addeq	r1, r1, r5
 8004596:	6021      	streq	r1, [r4, #0]
 8004598:	e7ed      	b.n	8004576 <_free_r+0x22>
 800459a:	461a      	mov	r2, r3
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	b10b      	cbz	r3, 80045a4 <_free_r+0x50>
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d9fa      	bls.n	800459a <_free_r+0x46>
 80045a4:	6811      	ldr	r1, [r2, #0]
 80045a6:	1855      	adds	r5, r2, r1
 80045a8:	42a5      	cmp	r5, r4
 80045aa:	d10b      	bne.n	80045c4 <_free_r+0x70>
 80045ac:	6824      	ldr	r4, [r4, #0]
 80045ae:	4421      	add	r1, r4
 80045b0:	1854      	adds	r4, r2, r1
 80045b2:	42a3      	cmp	r3, r4
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	d1e0      	bne.n	800457a <_free_r+0x26>
 80045b8:	681c      	ldr	r4, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	6053      	str	r3, [r2, #4]
 80045be:	4421      	add	r1, r4
 80045c0:	6011      	str	r1, [r2, #0]
 80045c2:	e7da      	b.n	800457a <_free_r+0x26>
 80045c4:	d902      	bls.n	80045cc <_free_r+0x78>
 80045c6:	230c      	movs	r3, #12
 80045c8:	6003      	str	r3, [r0, #0]
 80045ca:	e7d6      	b.n	800457a <_free_r+0x26>
 80045cc:	6825      	ldr	r5, [r4, #0]
 80045ce:	1961      	adds	r1, r4, r5
 80045d0:	428b      	cmp	r3, r1
 80045d2:	bf04      	itt	eq
 80045d4:	6819      	ldreq	r1, [r3, #0]
 80045d6:	685b      	ldreq	r3, [r3, #4]
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	bf04      	itt	eq
 80045dc:	1949      	addeq	r1, r1, r5
 80045de:	6021      	streq	r1, [r4, #0]
 80045e0:	6054      	str	r4, [r2, #4]
 80045e2:	e7ca      	b.n	800457a <_free_r+0x26>
 80045e4:	b003      	add	sp, #12
 80045e6:	bd30      	pop	{r4, r5, pc}
 80045e8:	2000015c 	.word	0x2000015c

080045ec <sbrk_aligned>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4e0e      	ldr	r6, [pc, #56]	; (8004628 <sbrk_aligned+0x3c>)
 80045f0:	460c      	mov	r4, r1
 80045f2:	6831      	ldr	r1, [r6, #0]
 80045f4:	4605      	mov	r5, r0
 80045f6:	b911      	cbnz	r1, 80045fe <sbrk_aligned+0x12>
 80045f8:	f000 f8bc 	bl	8004774 <_sbrk_r>
 80045fc:	6030      	str	r0, [r6, #0]
 80045fe:	4621      	mov	r1, r4
 8004600:	4628      	mov	r0, r5
 8004602:	f000 f8b7 	bl	8004774 <_sbrk_r>
 8004606:	1c43      	adds	r3, r0, #1
 8004608:	d00a      	beq.n	8004620 <sbrk_aligned+0x34>
 800460a:	1cc4      	adds	r4, r0, #3
 800460c:	f024 0403 	bic.w	r4, r4, #3
 8004610:	42a0      	cmp	r0, r4
 8004612:	d007      	beq.n	8004624 <sbrk_aligned+0x38>
 8004614:	1a21      	subs	r1, r4, r0
 8004616:	4628      	mov	r0, r5
 8004618:	f000 f8ac 	bl	8004774 <_sbrk_r>
 800461c:	3001      	adds	r0, #1
 800461e:	d101      	bne.n	8004624 <sbrk_aligned+0x38>
 8004620:	f04f 34ff 	mov.w	r4, #4294967295
 8004624:	4620      	mov	r0, r4
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	20000160 	.word	0x20000160

0800462c <_malloc_r>:
 800462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004630:	1ccd      	adds	r5, r1, #3
 8004632:	f025 0503 	bic.w	r5, r5, #3
 8004636:	3508      	adds	r5, #8
 8004638:	2d0c      	cmp	r5, #12
 800463a:	bf38      	it	cc
 800463c:	250c      	movcc	r5, #12
 800463e:	2d00      	cmp	r5, #0
 8004640:	4607      	mov	r7, r0
 8004642:	db01      	blt.n	8004648 <_malloc_r+0x1c>
 8004644:	42a9      	cmp	r1, r5
 8004646:	d905      	bls.n	8004654 <_malloc_r+0x28>
 8004648:	230c      	movs	r3, #12
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	2600      	movs	r6, #0
 800464e:	4630      	mov	r0, r6
 8004650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004654:	4e2e      	ldr	r6, [pc, #184]	; (8004710 <_malloc_r+0xe4>)
 8004656:	f000 f89d 	bl	8004794 <__malloc_lock>
 800465a:	6833      	ldr	r3, [r6, #0]
 800465c:	461c      	mov	r4, r3
 800465e:	bb34      	cbnz	r4, 80046ae <_malloc_r+0x82>
 8004660:	4629      	mov	r1, r5
 8004662:	4638      	mov	r0, r7
 8004664:	f7ff ffc2 	bl	80045ec <sbrk_aligned>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	4604      	mov	r4, r0
 800466c:	d14d      	bne.n	800470a <_malloc_r+0xde>
 800466e:	6834      	ldr	r4, [r6, #0]
 8004670:	4626      	mov	r6, r4
 8004672:	2e00      	cmp	r6, #0
 8004674:	d140      	bne.n	80046f8 <_malloc_r+0xcc>
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	4631      	mov	r1, r6
 800467a:	4638      	mov	r0, r7
 800467c:	eb04 0803 	add.w	r8, r4, r3
 8004680:	f000 f878 	bl	8004774 <_sbrk_r>
 8004684:	4580      	cmp	r8, r0
 8004686:	d13a      	bne.n	80046fe <_malloc_r+0xd2>
 8004688:	6821      	ldr	r1, [r4, #0]
 800468a:	3503      	adds	r5, #3
 800468c:	1a6d      	subs	r5, r5, r1
 800468e:	f025 0503 	bic.w	r5, r5, #3
 8004692:	3508      	adds	r5, #8
 8004694:	2d0c      	cmp	r5, #12
 8004696:	bf38      	it	cc
 8004698:	250c      	movcc	r5, #12
 800469a:	4629      	mov	r1, r5
 800469c:	4638      	mov	r0, r7
 800469e:	f7ff ffa5 	bl	80045ec <sbrk_aligned>
 80046a2:	3001      	adds	r0, #1
 80046a4:	d02b      	beq.n	80046fe <_malloc_r+0xd2>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	442b      	add	r3, r5
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	e00e      	b.n	80046cc <_malloc_r+0xa0>
 80046ae:	6822      	ldr	r2, [r4, #0]
 80046b0:	1b52      	subs	r2, r2, r5
 80046b2:	d41e      	bmi.n	80046f2 <_malloc_r+0xc6>
 80046b4:	2a0b      	cmp	r2, #11
 80046b6:	d916      	bls.n	80046e6 <_malloc_r+0xba>
 80046b8:	1961      	adds	r1, r4, r5
 80046ba:	42a3      	cmp	r3, r4
 80046bc:	6025      	str	r5, [r4, #0]
 80046be:	bf18      	it	ne
 80046c0:	6059      	strne	r1, [r3, #4]
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	bf08      	it	eq
 80046c6:	6031      	streq	r1, [r6, #0]
 80046c8:	5162      	str	r2, [r4, r5]
 80046ca:	604b      	str	r3, [r1, #4]
 80046cc:	4638      	mov	r0, r7
 80046ce:	f104 060b 	add.w	r6, r4, #11
 80046d2:	f000 f865 	bl	80047a0 <__malloc_unlock>
 80046d6:	f026 0607 	bic.w	r6, r6, #7
 80046da:	1d23      	adds	r3, r4, #4
 80046dc:	1af2      	subs	r2, r6, r3
 80046de:	d0b6      	beq.n	800464e <_malloc_r+0x22>
 80046e0:	1b9b      	subs	r3, r3, r6
 80046e2:	50a3      	str	r3, [r4, r2]
 80046e4:	e7b3      	b.n	800464e <_malloc_r+0x22>
 80046e6:	6862      	ldr	r2, [r4, #4]
 80046e8:	42a3      	cmp	r3, r4
 80046ea:	bf0c      	ite	eq
 80046ec:	6032      	streq	r2, [r6, #0]
 80046ee:	605a      	strne	r2, [r3, #4]
 80046f0:	e7ec      	b.n	80046cc <_malloc_r+0xa0>
 80046f2:	4623      	mov	r3, r4
 80046f4:	6864      	ldr	r4, [r4, #4]
 80046f6:	e7b2      	b.n	800465e <_malloc_r+0x32>
 80046f8:	4634      	mov	r4, r6
 80046fa:	6876      	ldr	r6, [r6, #4]
 80046fc:	e7b9      	b.n	8004672 <_malloc_r+0x46>
 80046fe:	230c      	movs	r3, #12
 8004700:	603b      	str	r3, [r7, #0]
 8004702:	4638      	mov	r0, r7
 8004704:	f000 f84c 	bl	80047a0 <__malloc_unlock>
 8004708:	e7a1      	b.n	800464e <_malloc_r+0x22>
 800470a:	6025      	str	r5, [r4, #0]
 800470c:	e7de      	b.n	80046cc <_malloc_r+0xa0>
 800470e:	bf00      	nop
 8004710:	2000015c 	.word	0x2000015c

08004714 <_realloc_r>:
 8004714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004718:	4680      	mov	r8, r0
 800471a:	4614      	mov	r4, r2
 800471c:	460e      	mov	r6, r1
 800471e:	b921      	cbnz	r1, 800472a <_realloc_r+0x16>
 8004720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004724:	4611      	mov	r1, r2
 8004726:	f7ff bf81 	b.w	800462c <_malloc_r>
 800472a:	b92a      	cbnz	r2, 8004738 <_realloc_r+0x24>
 800472c:	f7ff ff12 	bl	8004554 <_free_r>
 8004730:	4625      	mov	r5, r4
 8004732:	4628      	mov	r0, r5
 8004734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004738:	f000 f838 	bl	80047ac <_malloc_usable_size_r>
 800473c:	4284      	cmp	r4, r0
 800473e:	4607      	mov	r7, r0
 8004740:	d802      	bhi.n	8004748 <_realloc_r+0x34>
 8004742:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004746:	d812      	bhi.n	800476e <_realloc_r+0x5a>
 8004748:	4621      	mov	r1, r4
 800474a:	4640      	mov	r0, r8
 800474c:	f7ff ff6e 	bl	800462c <_malloc_r>
 8004750:	4605      	mov	r5, r0
 8004752:	2800      	cmp	r0, #0
 8004754:	d0ed      	beq.n	8004732 <_realloc_r+0x1e>
 8004756:	42bc      	cmp	r4, r7
 8004758:	4622      	mov	r2, r4
 800475a:	4631      	mov	r1, r6
 800475c:	bf28      	it	cs
 800475e:	463a      	movcs	r2, r7
 8004760:	f7ff fed0 	bl	8004504 <memcpy>
 8004764:	4631      	mov	r1, r6
 8004766:	4640      	mov	r0, r8
 8004768:	f7ff fef4 	bl	8004554 <_free_r>
 800476c:	e7e1      	b.n	8004732 <_realloc_r+0x1e>
 800476e:	4635      	mov	r5, r6
 8004770:	e7df      	b.n	8004732 <_realloc_r+0x1e>
	...

08004774 <_sbrk_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d06      	ldr	r5, [pc, #24]	; (8004790 <_sbrk_r+0x1c>)
 8004778:	2300      	movs	r3, #0
 800477a:	4604      	mov	r4, r0
 800477c:	4608      	mov	r0, r1
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	f7fd fe58 	bl	8002434 <_sbrk>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_sbrk_r+0x1a>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_sbrk_r+0x1a>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	20000164 	.word	0x20000164

08004794 <__malloc_lock>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__malloc_lock+0x8>)
 8004796:	f000 b811 	b.w	80047bc <__retarget_lock_acquire_recursive>
 800479a:	bf00      	nop
 800479c:	20000168 	.word	0x20000168

080047a0 <__malloc_unlock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <__malloc_unlock+0x8>)
 80047a2:	f000 b80c 	b.w	80047be <__retarget_lock_release_recursive>
 80047a6:	bf00      	nop
 80047a8:	20000168 	.word	0x20000168

080047ac <_malloc_usable_size_r>:
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f18      	subs	r0, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbc      	itt	lt
 80047b6:	580b      	ldrlt	r3, [r1, r0]
 80047b8:	18c0      	addlt	r0, r0, r3
 80047ba:	4770      	bx	lr

080047bc <__retarget_lock_acquire_recursive>:
 80047bc:	4770      	bx	lr

080047be <__retarget_lock_release_recursive>:
 80047be:	4770      	bx	lr

080047c0 <pow>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	ed2d 8b02 	vpush	{d8}
 80047c6:	eeb0 8a40 	vmov.f32	s16, s0
 80047ca:	eef0 8a60 	vmov.f32	s17, s1
 80047ce:	ec55 4b11 	vmov	r4, r5, d1
 80047d2:	f000 f865 	bl	80048a0 <__ieee754_pow>
 80047d6:	4622      	mov	r2, r4
 80047d8:	462b      	mov	r3, r5
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	ec57 6b10 	vmov	r6, r7, d0
 80047e2:	f7fc f99b 	bl	8000b1c <__aeabi_dcmpun>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d13b      	bne.n	8004862 <pow+0xa2>
 80047ea:	ec51 0b18 	vmov	r0, r1, d8
 80047ee:	2200      	movs	r2, #0
 80047f0:	2300      	movs	r3, #0
 80047f2:	f7fc f961 	bl	8000ab8 <__aeabi_dcmpeq>
 80047f6:	b1b8      	cbz	r0, 8004828 <pow+0x68>
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	4620      	mov	r0, r4
 80047fe:	4629      	mov	r1, r5
 8004800:	f7fc f95a 	bl	8000ab8 <__aeabi_dcmpeq>
 8004804:	2800      	cmp	r0, #0
 8004806:	d146      	bne.n	8004896 <pow+0xd6>
 8004808:	ec45 4b10 	vmov	d0, r4, r5
 800480c:	f000 fe61 	bl	80054d2 <finite>
 8004810:	b338      	cbz	r0, 8004862 <pow+0xa2>
 8004812:	2200      	movs	r2, #0
 8004814:	2300      	movs	r3, #0
 8004816:	4620      	mov	r0, r4
 8004818:	4629      	mov	r1, r5
 800481a:	f7fc f957 	bl	8000acc <__aeabi_dcmplt>
 800481e:	b300      	cbz	r0, 8004862 <pow+0xa2>
 8004820:	f7ff fb2e 	bl	8003e80 <__errno>
 8004824:	2322      	movs	r3, #34	; 0x22
 8004826:	e01b      	b.n	8004860 <pow+0xa0>
 8004828:	ec47 6b10 	vmov	d0, r6, r7
 800482c:	f000 fe51 	bl	80054d2 <finite>
 8004830:	b9e0      	cbnz	r0, 800486c <pow+0xac>
 8004832:	eeb0 0a48 	vmov.f32	s0, s16
 8004836:	eef0 0a68 	vmov.f32	s1, s17
 800483a:	f000 fe4a 	bl	80054d2 <finite>
 800483e:	b1a8      	cbz	r0, 800486c <pow+0xac>
 8004840:	ec45 4b10 	vmov	d0, r4, r5
 8004844:	f000 fe45 	bl	80054d2 <finite>
 8004848:	b180      	cbz	r0, 800486c <pow+0xac>
 800484a:	4632      	mov	r2, r6
 800484c:	463b      	mov	r3, r7
 800484e:	4630      	mov	r0, r6
 8004850:	4639      	mov	r1, r7
 8004852:	f7fc f963 	bl	8000b1c <__aeabi_dcmpun>
 8004856:	2800      	cmp	r0, #0
 8004858:	d0e2      	beq.n	8004820 <pow+0x60>
 800485a:	f7ff fb11 	bl	8003e80 <__errno>
 800485e:	2321      	movs	r3, #33	; 0x21
 8004860:	6003      	str	r3, [r0, #0]
 8004862:	ecbd 8b02 	vpop	{d8}
 8004866:	ec47 6b10 	vmov	d0, r6, r7
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4630      	mov	r0, r6
 8004872:	4639      	mov	r1, r7
 8004874:	f7fc f920 	bl	8000ab8 <__aeabi_dcmpeq>
 8004878:	2800      	cmp	r0, #0
 800487a:	d0f2      	beq.n	8004862 <pow+0xa2>
 800487c:	eeb0 0a48 	vmov.f32	s0, s16
 8004880:	eef0 0a68 	vmov.f32	s1, s17
 8004884:	f000 fe25 	bl	80054d2 <finite>
 8004888:	2800      	cmp	r0, #0
 800488a:	d0ea      	beq.n	8004862 <pow+0xa2>
 800488c:	ec45 4b10 	vmov	d0, r4, r5
 8004890:	f000 fe1f 	bl	80054d2 <finite>
 8004894:	e7c3      	b.n	800481e <pow+0x5e>
 8004896:	4f01      	ldr	r7, [pc, #4]	; (800489c <pow+0xdc>)
 8004898:	2600      	movs	r6, #0
 800489a:	e7e2      	b.n	8004862 <pow+0xa2>
 800489c:	3ff00000 	.word	0x3ff00000

080048a0 <__ieee754_pow>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	ed2d 8b06 	vpush	{d8-d10}
 80048a8:	b089      	sub	sp, #36	; 0x24
 80048aa:	ed8d 1b00 	vstr	d1, [sp]
 80048ae:	e9dd 2900 	ldrd	r2, r9, [sp]
 80048b2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80048b6:	ea58 0102 	orrs.w	r1, r8, r2
 80048ba:	ec57 6b10 	vmov	r6, r7, d0
 80048be:	d115      	bne.n	80048ec <__ieee754_pow+0x4c>
 80048c0:	19b3      	adds	r3, r6, r6
 80048c2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80048c6:	4152      	adcs	r2, r2
 80048c8:	4299      	cmp	r1, r3
 80048ca:	4b89      	ldr	r3, [pc, #548]	; (8004af0 <__ieee754_pow+0x250>)
 80048cc:	4193      	sbcs	r3, r2
 80048ce:	f080 84d2 	bcs.w	8005276 <__ieee754_pow+0x9d6>
 80048d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80048d6:	4630      	mov	r0, r6
 80048d8:	4639      	mov	r1, r7
 80048da:	f7fb fccf 	bl	800027c <__adddf3>
 80048de:	ec41 0b10 	vmov	d0, r0, r1
 80048e2:	b009      	add	sp, #36	; 0x24
 80048e4:	ecbd 8b06 	vpop	{d8-d10}
 80048e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ec:	4b81      	ldr	r3, [pc, #516]	; (8004af4 <__ieee754_pow+0x254>)
 80048ee:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80048f2:	429c      	cmp	r4, r3
 80048f4:	ee10 aa10 	vmov	sl, s0
 80048f8:	463d      	mov	r5, r7
 80048fa:	dc06      	bgt.n	800490a <__ieee754_pow+0x6a>
 80048fc:	d101      	bne.n	8004902 <__ieee754_pow+0x62>
 80048fe:	2e00      	cmp	r6, #0
 8004900:	d1e7      	bne.n	80048d2 <__ieee754_pow+0x32>
 8004902:	4598      	cmp	r8, r3
 8004904:	dc01      	bgt.n	800490a <__ieee754_pow+0x6a>
 8004906:	d10f      	bne.n	8004928 <__ieee754_pow+0x88>
 8004908:	b172      	cbz	r2, 8004928 <__ieee754_pow+0x88>
 800490a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800490e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004912:	ea55 050a 	orrs.w	r5, r5, sl
 8004916:	d1dc      	bne.n	80048d2 <__ieee754_pow+0x32>
 8004918:	e9dd 3200 	ldrd	r3, r2, [sp]
 800491c:	18db      	adds	r3, r3, r3
 800491e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004922:	4152      	adcs	r2, r2
 8004924:	429d      	cmp	r5, r3
 8004926:	e7d0      	b.n	80048ca <__ieee754_pow+0x2a>
 8004928:	2d00      	cmp	r5, #0
 800492a:	da3b      	bge.n	80049a4 <__ieee754_pow+0x104>
 800492c:	4b72      	ldr	r3, [pc, #456]	; (8004af8 <__ieee754_pow+0x258>)
 800492e:	4598      	cmp	r8, r3
 8004930:	dc51      	bgt.n	80049d6 <__ieee754_pow+0x136>
 8004932:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004936:	4598      	cmp	r8, r3
 8004938:	f340 84ac 	ble.w	8005294 <__ieee754_pow+0x9f4>
 800493c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004944:	2b14      	cmp	r3, #20
 8004946:	dd0f      	ble.n	8004968 <__ieee754_pow+0xc8>
 8004948:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800494c:	fa22 f103 	lsr.w	r1, r2, r3
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	4293      	cmp	r3, r2
 8004956:	f040 849d 	bne.w	8005294 <__ieee754_pow+0x9f4>
 800495a:	f001 0101 	and.w	r1, r1, #1
 800495e:	f1c1 0302 	rsb	r3, r1, #2
 8004962:	9304      	str	r3, [sp, #16]
 8004964:	b182      	cbz	r2, 8004988 <__ieee754_pow+0xe8>
 8004966:	e05f      	b.n	8004a28 <__ieee754_pow+0x188>
 8004968:	2a00      	cmp	r2, #0
 800496a:	d15b      	bne.n	8004a24 <__ieee754_pow+0x184>
 800496c:	f1c3 0314 	rsb	r3, r3, #20
 8004970:	fa48 f103 	asr.w	r1, r8, r3
 8004974:	fa01 f303 	lsl.w	r3, r1, r3
 8004978:	4543      	cmp	r3, r8
 800497a:	f040 8488 	bne.w	800528e <__ieee754_pow+0x9ee>
 800497e:	f001 0101 	and.w	r1, r1, #1
 8004982:	f1c1 0302 	rsb	r3, r1, #2
 8004986:	9304      	str	r3, [sp, #16]
 8004988:	4b5c      	ldr	r3, [pc, #368]	; (8004afc <__ieee754_pow+0x25c>)
 800498a:	4598      	cmp	r8, r3
 800498c:	d132      	bne.n	80049f4 <__ieee754_pow+0x154>
 800498e:	f1b9 0f00 	cmp.w	r9, #0
 8004992:	f280 8478 	bge.w	8005286 <__ieee754_pow+0x9e6>
 8004996:	4959      	ldr	r1, [pc, #356]	; (8004afc <__ieee754_pow+0x25c>)
 8004998:	4632      	mov	r2, r6
 800499a:	463b      	mov	r3, r7
 800499c:	2000      	movs	r0, #0
 800499e:	f7fb ff4d 	bl	800083c <__aeabi_ddiv>
 80049a2:	e79c      	b.n	80048de <__ieee754_pow+0x3e>
 80049a4:	2300      	movs	r3, #0
 80049a6:	9304      	str	r3, [sp, #16]
 80049a8:	2a00      	cmp	r2, #0
 80049aa:	d13d      	bne.n	8004a28 <__ieee754_pow+0x188>
 80049ac:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <__ieee754_pow+0x254>)
 80049ae:	4598      	cmp	r8, r3
 80049b0:	d1ea      	bne.n	8004988 <__ieee754_pow+0xe8>
 80049b2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80049b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80049ba:	ea53 030a 	orrs.w	r3, r3, sl
 80049be:	f000 845a 	beq.w	8005276 <__ieee754_pow+0x9d6>
 80049c2:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <__ieee754_pow+0x260>)
 80049c4:	429c      	cmp	r4, r3
 80049c6:	dd08      	ble.n	80049da <__ieee754_pow+0x13a>
 80049c8:	f1b9 0f00 	cmp.w	r9, #0
 80049cc:	f2c0 8457 	blt.w	800527e <__ieee754_pow+0x9de>
 80049d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049d4:	e783      	b.n	80048de <__ieee754_pow+0x3e>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e7e5      	b.n	80049a6 <__ieee754_pow+0x106>
 80049da:	f1b9 0f00 	cmp.w	r9, #0
 80049de:	f04f 0000 	mov.w	r0, #0
 80049e2:	f04f 0100 	mov.w	r1, #0
 80049e6:	f6bf af7a 	bge.w	80048de <__ieee754_pow+0x3e>
 80049ea:	e9dd 0300 	ldrd	r0, r3, [sp]
 80049ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80049f2:	e774      	b.n	80048de <__ieee754_pow+0x3e>
 80049f4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80049f8:	d106      	bne.n	8004a08 <__ieee754_pow+0x168>
 80049fa:	4632      	mov	r2, r6
 80049fc:	463b      	mov	r3, r7
 80049fe:	4630      	mov	r0, r6
 8004a00:	4639      	mov	r1, r7
 8004a02:	f7fb fdf1 	bl	80005e8 <__aeabi_dmul>
 8004a06:	e76a      	b.n	80048de <__ieee754_pow+0x3e>
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <__ieee754_pow+0x264>)
 8004a0a:	4599      	cmp	r9, r3
 8004a0c:	d10c      	bne.n	8004a28 <__ieee754_pow+0x188>
 8004a0e:	2d00      	cmp	r5, #0
 8004a10:	db0a      	blt.n	8004a28 <__ieee754_pow+0x188>
 8004a12:	ec47 6b10 	vmov	d0, r6, r7
 8004a16:	b009      	add	sp, #36	; 0x24
 8004a18:	ecbd 8b06 	vpop	{d8-d10}
 8004a1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	f000 bc6c 	b.w	80052fc <__ieee754_sqrt>
 8004a24:	2300      	movs	r3, #0
 8004a26:	9304      	str	r3, [sp, #16]
 8004a28:	ec47 6b10 	vmov	d0, r6, r7
 8004a2c:	f000 fd48 	bl	80054c0 <fabs>
 8004a30:	ec51 0b10 	vmov	r0, r1, d0
 8004a34:	f1ba 0f00 	cmp.w	sl, #0
 8004a38:	d129      	bne.n	8004a8e <__ieee754_pow+0x1ee>
 8004a3a:	b124      	cbz	r4, 8004a46 <__ieee754_pow+0x1a6>
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <__ieee754_pow+0x25c>)
 8004a3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d123      	bne.n	8004a8e <__ieee754_pow+0x1ee>
 8004a46:	f1b9 0f00 	cmp.w	r9, #0
 8004a4a:	da05      	bge.n	8004a58 <__ieee754_pow+0x1b8>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	2000      	movs	r0, #0
 8004a52:	492a      	ldr	r1, [pc, #168]	; (8004afc <__ieee754_pow+0x25c>)
 8004a54:	f7fb fef2 	bl	800083c <__aeabi_ddiv>
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	f6bf af40 	bge.w	80048de <__ieee754_pow+0x3e>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004a64:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004a68:	4323      	orrs	r3, r4
 8004a6a:	d108      	bne.n	8004a7e <__ieee754_pow+0x1de>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4610      	mov	r0, r2
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fb fc00 	bl	8000278 <__aeabi_dsub>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	e78f      	b.n	800499e <__ieee754_pow+0xfe>
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	f47f af2c 	bne.w	80048de <__ieee754_pow+0x3e>
 8004a86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	e727      	b.n	80048de <__ieee754_pow+0x3e>
 8004a8e:	0feb      	lsrs	r3, r5, #31
 8004a90:	3b01      	subs	r3, #1
 8004a92:	9306      	str	r3, [sp, #24]
 8004a94:	9a06      	ldr	r2, [sp, #24]
 8004a96:	9b04      	ldr	r3, [sp, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	d102      	bne.n	8004aa2 <__ieee754_pow+0x202>
 8004a9c:	4632      	mov	r2, r6
 8004a9e:	463b      	mov	r3, r7
 8004aa0:	e7e6      	b.n	8004a70 <__ieee754_pow+0x1d0>
 8004aa2:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <__ieee754_pow+0x268>)
 8004aa4:	4598      	cmp	r8, r3
 8004aa6:	f340 80fb 	ble.w	8004ca0 <__ieee754_pow+0x400>
 8004aaa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004aae:	4598      	cmp	r8, r3
 8004ab0:	4b13      	ldr	r3, [pc, #76]	; (8004b00 <__ieee754_pow+0x260>)
 8004ab2:	dd0c      	ble.n	8004ace <__ieee754_pow+0x22e>
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	dc0f      	bgt.n	8004ad8 <__ieee754_pow+0x238>
 8004ab8:	f1b9 0f00 	cmp.w	r9, #0
 8004abc:	da0f      	bge.n	8004ade <__ieee754_pow+0x23e>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	b009      	add	sp, #36	; 0x24
 8004ac2:	ecbd 8b06 	vpop	{d8-d10}
 8004ac6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aca:	f000 bcf0 	b.w	80054ae <__math_oflow>
 8004ace:	429c      	cmp	r4, r3
 8004ad0:	dbf2      	blt.n	8004ab8 <__ieee754_pow+0x218>
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <__ieee754_pow+0x25c>)
 8004ad4:	429c      	cmp	r4, r3
 8004ad6:	dd19      	ble.n	8004b0c <__ieee754_pow+0x26c>
 8004ad8:	f1b9 0f00 	cmp.w	r9, #0
 8004adc:	dcef      	bgt.n	8004abe <__ieee754_pow+0x21e>
 8004ade:	2000      	movs	r0, #0
 8004ae0:	b009      	add	sp, #36	; 0x24
 8004ae2:	ecbd 8b06 	vpop	{d8-d10}
 8004ae6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aea:	f000 bcd7 	b.w	800549c <__math_uflow>
 8004aee:	bf00      	nop
 8004af0:	fff00000 	.word	0xfff00000
 8004af4:	7ff00000 	.word	0x7ff00000
 8004af8:	433fffff 	.word	0x433fffff
 8004afc:	3ff00000 	.word	0x3ff00000
 8004b00:	3fefffff 	.word	0x3fefffff
 8004b04:	3fe00000 	.word	0x3fe00000
 8004b08:	41e00000 	.word	0x41e00000
 8004b0c:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <__ieee754_pow+0x3f0>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f7fb fbb2 	bl	8000278 <__aeabi_dsub>
 8004b14:	a354      	add	r3, pc, #336	; (adr r3, 8004c68 <__ieee754_pow+0x3c8>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	460d      	mov	r5, r1
 8004b1e:	f7fb fd63 	bl	80005e8 <__aeabi_dmul>
 8004b22:	a353      	add	r3, pc, #332	; (adr r3, 8004c70 <__ieee754_pow+0x3d0>)
 8004b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b28:	4606      	mov	r6, r0
 8004b2a:	460f      	mov	r7, r1
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	4629      	mov	r1, r5
 8004b30:	f7fb fd5a 	bl	80005e8 <__aeabi_dmul>
 8004b34:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <__ieee754_pow+0x3f4>)
 8004b36:	4682      	mov	sl, r0
 8004b38:	468b      	mov	fp, r1
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4629      	mov	r1, r5
 8004b40:	f7fb fd52 	bl	80005e8 <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	a14b      	add	r1, pc, #300	; (adr r1, 8004c78 <__ieee754_pow+0x3d8>)
 8004b4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b4e:	f7fb fb93 	bl	8000278 <__aeabi_dsub>
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	f7fb fd47 	bl	80005e8 <__aeabi_dmul>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	2000      	movs	r0, #0
 8004b60:	494d      	ldr	r1, [pc, #308]	; (8004c98 <__ieee754_pow+0x3f8>)
 8004b62:	f7fb fb89 	bl	8000278 <__aeabi_dsub>
 8004b66:	4622      	mov	r2, r4
 8004b68:	4680      	mov	r8, r0
 8004b6a:	4689      	mov	r9, r1
 8004b6c:	462b      	mov	r3, r5
 8004b6e:	4620      	mov	r0, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	f7fb fd39 	bl	80005e8 <__aeabi_dmul>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4640      	mov	r0, r8
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	f7fb fd33 	bl	80005e8 <__aeabi_dmul>
 8004b82:	a33f      	add	r3, pc, #252	; (adr r3, 8004c80 <__ieee754_pow+0x3e0>)
 8004b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b88:	f7fb fd2e 	bl	80005e8 <__aeabi_dmul>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4650      	mov	r0, sl
 8004b92:	4659      	mov	r1, fp
 8004b94:	f7fb fb70 	bl	8000278 <__aeabi_dsub>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4680      	mov	r8, r0
 8004b9e:	4689      	mov	r9, r1
 8004ba0:	4630      	mov	r0, r6
 8004ba2:	4639      	mov	r1, r7
 8004ba4:	f7fb fb6a 	bl	800027c <__adddf3>
 8004ba8:	2000      	movs	r0, #0
 8004baa:	4632      	mov	r2, r6
 8004bac:	463b      	mov	r3, r7
 8004bae:	4604      	mov	r4, r0
 8004bb0:	460d      	mov	r5, r1
 8004bb2:	f7fb fb61 	bl	8000278 <__aeabi_dsub>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	460b      	mov	r3, r1
 8004bba:	4640      	mov	r0, r8
 8004bbc:	4649      	mov	r1, r9
 8004bbe:	f7fb fb5b 	bl	8000278 <__aeabi_dsub>
 8004bc2:	9b04      	ldr	r3, [sp, #16]
 8004bc4:	9a06      	ldr	r2, [sp, #24]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	4682      	mov	sl, r0
 8004bcc:	468b      	mov	fp, r1
 8004bce:	f040 81e7 	bne.w	8004fa0 <__ieee754_pow+0x700>
 8004bd2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8004c88 <__ieee754_pow+0x3e8>
 8004bd6:	eeb0 8a47 	vmov.f32	s16, s14
 8004bda:	eef0 8a67 	vmov.f32	s17, s15
 8004bde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004be2:	2600      	movs	r6, #0
 8004be4:	4632      	mov	r2, r6
 8004be6:	463b      	mov	r3, r7
 8004be8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004bec:	f7fb fb44 	bl	8000278 <__aeabi_dsub>
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	462b      	mov	r3, r5
 8004bf4:	f7fb fcf8 	bl	80005e8 <__aeabi_dmul>
 8004bf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004bfc:	4680      	mov	r8, r0
 8004bfe:	4689      	mov	r9, r1
 8004c00:	4650      	mov	r0, sl
 8004c02:	4659      	mov	r1, fp
 8004c04:	f7fb fcf0 	bl	80005e8 <__aeabi_dmul>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	4649      	mov	r1, r9
 8004c10:	f7fb fb34 	bl	800027c <__adddf3>
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	4680      	mov	r8, r0
 8004c1a:	4689      	mov	r9, r1
 8004c1c:	4620      	mov	r0, r4
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f7fb fce2 	bl	80005e8 <__aeabi_dmul>
 8004c24:	460b      	mov	r3, r1
 8004c26:	4604      	mov	r4, r0
 8004c28:	460d      	mov	r5, r1
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	4649      	mov	r1, r9
 8004c2e:	4640      	mov	r0, r8
 8004c30:	f7fb fb24 	bl	800027c <__adddf3>
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <__ieee754_pow+0x3fc>)
 8004c36:	4299      	cmp	r1, r3
 8004c38:	ec45 4b19 	vmov	d9, r4, r5
 8004c3c:	4606      	mov	r6, r0
 8004c3e:	460f      	mov	r7, r1
 8004c40:	468b      	mov	fp, r1
 8004c42:	f340 82f1 	ble.w	8005228 <__ieee754_pow+0x988>
 8004c46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8004c4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8004c4e:	4303      	orrs	r3, r0
 8004c50:	f000 81e4 	beq.w	800501c <__ieee754_pow+0x77c>
 8004c54:	ec51 0b18 	vmov	r0, r1, d8
 8004c58:	2200      	movs	r2, #0
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f7fb ff36 	bl	8000acc <__aeabi_dcmplt>
 8004c60:	3800      	subs	r0, #0
 8004c62:	bf18      	it	ne
 8004c64:	2001      	movne	r0, #1
 8004c66:	e72b      	b.n	8004ac0 <__ieee754_pow+0x220>
 8004c68:	60000000 	.word	0x60000000
 8004c6c:	3ff71547 	.word	0x3ff71547
 8004c70:	f85ddf44 	.word	0xf85ddf44
 8004c74:	3e54ae0b 	.word	0x3e54ae0b
 8004c78:	55555555 	.word	0x55555555
 8004c7c:	3fd55555 	.word	0x3fd55555
 8004c80:	652b82fe 	.word	0x652b82fe
 8004c84:	3ff71547 	.word	0x3ff71547
 8004c88:	00000000 	.word	0x00000000
 8004c8c:	bff00000 	.word	0xbff00000
 8004c90:	3ff00000 	.word	0x3ff00000
 8004c94:	3fd00000 	.word	0x3fd00000
 8004c98:	3fe00000 	.word	0x3fe00000
 8004c9c:	408fffff 	.word	0x408fffff
 8004ca0:	4bd5      	ldr	r3, [pc, #852]	; (8004ff8 <__ieee754_pow+0x758>)
 8004ca2:	402b      	ands	r3, r5
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	b92b      	cbnz	r3, 8004cb4 <__ieee754_pow+0x414>
 8004ca8:	4bd4      	ldr	r3, [pc, #848]	; (8004ffc <__ieee754_pow+0x75c>)
 8004caa:	f7fb fc9d 	bl	80005e8 <__aeabi_dmul>
 8004cae:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	1523      	asrs	r3, r4, #20
 8004cb6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004cba:	4413      	add	r3, r2
 8004cbc:	9305      	str	r3, [sp, #20]
 8004cbe:	4bd0      	ldr	r3, [pc, #832]	; (8005000 <__ieee754_pow+0x760>)
 8004cc0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004cc4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004cce:	dd08      	ble.n	8004ce2 <__ieee754_pow+0x442>
 8004cd0:	4bcc      	ldr	r3, [pc, #816]	; (8005004 <__ieee754_pow+0x764>)
 8004cd2:	429c      	cmp	r4, r3
 8004cd4:	f340 8162 	ble.w	8004f9c <__ieee754_pow+0x6fc>
 8004cd8:	9b05      	ldr	r3, [sp, #20]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	9305      	str	r3, [sp, #20]
 8004cde:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004ce2:	2400      	movs	r4, #0
 8004ce4:	00e3      	lsls	r3, r4, #3
 8004ce6:	9307      	str	r3, [sp, #28]
 8004ce8:	4bc7      	ldr	r3, [pc, #796]	; (8005008 <__ieee754_pow+0x768>)
 8004cea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004cee:	ed93 7b00 	vldr	d7, [r3]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	ec53 2b17 	vmov	r2, r3, d7
 8004cf8:	eeb0 9a47 	vmov.f32	s18, s14
 8004cfc:	eef0 9a67 	vmov.f32	s19, s15
 8004d00:	4682      	mov	sl, r0
 8004d02:	f7fb fab9 	bl	8000278 <__aeabi_dsub>
 8004d06:	4652      	mov	r2, sl
 8004d08:	4606      	mov	r6, r0
 8004d0a:	460f      	mov	r7, r1
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	ec51 0b19 	vmov	r0, r1, d9
 8004d12:	f7fb fab3 	bl	800027c <__adddf3>
 8004d16:	4602      	mov	r2, r0
 8004d18:	460b      	mov	r3, r1
 8004d1a:	2000      	movs	r0, #0
 8004d1c:	49bb      	ldr	r1, [pc, #748]	; (800500c <__ieee754_pow+0x76c>)
 8004d1e:	f7fb fd8d 	bl	800083c <__aeabi_ddiv>
 8004d22:	ec41 0b1a 	vmov	d10, r0, r1
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4630      	mov	r0, r6
 8004d2c:	4639      	mov	r1, r7
 8004d2e:	f7fb fc5b 	bl	80005e8 <__aeabi_dmul>
 8004d32:	2300      	movs	r3, #0
 8004d34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004d3e:	46ab      	mov	fp, r5
 8004d40:	106d      	asrs	r5, r5, #1
 8004d42:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004d46:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004d4a:	ec41 0b18 	vmov	d8, r0, r1
 8004d4e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8004d52:	2200      	movs	r2, #0
 8004d54:	4640      	mov	r0, r8
 8004d56:	4649      	mov	r1, r9
 8004d58:	4614      	mov	r4, r2
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	f7fb fc44 	bl	80005e8 <__aeabi_dmul>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4630      	mov	r0, r6
 8004d66:	4639      	mov	r1, r7
 8004d68:	f7fb fa86 	bl	8000278 <__aeabi_dsub>
 8004d6c:	ec53 2b19 	vmov	r2, r3, d9
 8004d70:	4606      	mov	r6, r0
 8004d72:	460f      	mov	r7, r1
 8004d74:	4620      	mov	r0, r4
 8004d76:	4629      	mov	r1, r5
 8004d78:	f7fb fa7e 	bl	8000278 <__aeabi_dsub>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	4650      	mov	r0, sl
 8004d82:	4659      	mov	r1, fp
 8004d84:	f7fb fa78 	bl	8000278 <__aeabi_dsub>
 8004d88:	4642      	mov	r2, r8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	f7fb fc2c 	bl	80005e8 <__aeabi_dmul>
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4630      	mov	r0, r6
 8004d96:	4639      	mov	r1, r7
 8004d98:	f7fb fa6e 	bl	8000278 <__aeabi_dsub>
 8004d9c:	ec53 2b1a 	vmov	r2, r3, d10
 8004da0:	f7fb fc22 	bl	80005e8 <__aeabi_dmul>
 8004da4:	ec53 2b18 	vmov	r2, r3, d8
 8004da8:	ec41 0b19 	vmov	d9, r0, r1
 8004dac:	ec51 0b18 	vmov	r0, r1, d8
 8004db0:	f7fb fc1a 	bl	80005e8 <__aeabi_dmul>
 8004db4:	a37c      	add	r3, pc, #496	; (adr r3, 8004fa8 <__ieee754_pow+0x708>)
 8004db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dba:	4604      	mov	r4, r0
 8004dbc:	460d      	mov	r5, r1
 8004dbe:	f7fb fc13 	bl	80005e8 <__aeabi_dmul>
 8004dc2:	a37b      	add	r3, pc, #492	; (adr r3, 8004fb0 <__ieee754_pow+0x710>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fa58 	bl	800027c <__adddf3>
 8004dcc:	4622      	mov	r2, r4
 8004dce:	462b      	mov	r3, r5
 8004dd0:	f7fb fc0a 	bl	80005e8 <__aeabi_dmul>
 8004dd4:	a378      	add	r3, pc, #480	; (adr r3, 8004fb8 <__ieee754_pow+0x718>)
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f7fb fa4f 	bl	800027c <__adddf3>
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	f7fb fc01 	bl	80005e8 <__aeabi_dmul>
 8004de6:	a376      	add	r3, pc, #472	; (adr r3, 8004fc0 <__ieee754_pow+0x720>)
 8004de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dec:	f7fb fa46 	bl	800027c <__adddf3>
 8004df0:	4622      	mov	r2, r4
 8004df2:	462b      	mov	r3, r5
 8004df4:	f7fb fbf8 	bl	80005e8 <__aeabi_dmul>
 8004df8:	a373      	add	r3, pc, #460	; (adr r3, 8004fc8 <__ieee754_pow+0x728>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fa3d 	bl	800027c <__adddf3>
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	f7fb fbef 	bl	80005e8 <__aeabi_dmul>
 8004e0a:	a371      	add	r3, pc, #452	; (adr r3, 8004fd0 <__ieee754_pow+0x730>)
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb fa34 	bl	800027c <__adddf3>
 8004e14:	4622      	mov	r2, r4
 8004e16:	4606      	mov	r6, r0
 8004e18:	460f      	mov	r7, r1
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fbe2 	bl	80005e8 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb fbdc 	bl	80005e8 <__aeabi_dmul>
 8004e30:	4642      	mov	r2, r8
 8004e32:	4604      	mov	r4, r0
 8004e34:	460d      	mov	r5, r1
 8004e36:	464b      	mov	r3, r9
 8004e38:	ec51 0b18 	vmov	r0, r1, d8
 8004e3c:	f7fb fa1e 	bl	800027c <__adddf3>
 8004e40:	ec53 2b19 	vmov	r2, r3, d9
 8004e44:	f7fb fbd0 	bl	80005e8 <__aeabi_dmul>
 8004e48:	4622      	mov	r2, r4
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	f7fb fa16 	bl	800027c <__adddf3>
 8004e50:	4642      	mov	r2, r8
 8004e52:	4682      	mov	sl, r0
 8004e54:	468b      	mov	fp, r1
 8004e56:	464b      	mov	r3, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fbc4 	bl	80005e8 <__aeabi_dmul>
 8004e60:	4b6b      	ldr	r3, [pc, #428]	; (8005010 <__ieee754_pow+0x770>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	4606      	mov	r6, r0
 8004e66:	460f      	mov	r7, r1
 8004e68:	f7fb fa08 	bl	800027c <__adddf3>
 8004e6c:	4652      	mov	r2, sl
 8004e6e:	465b      	mov	r3, fp
 8004e70:	f7fb fa04 	bl	800027c <__adddf3>
 8004e74:	2000      	movs	r0, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	460d      	mov	r5, r1
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4640      	mov	r0, r8
 8004e80:	4649      	mov	r1, r9
 8004e82:	f7fb fbb1 	bl	80005e8 <__aeabi_dmul>
 8004e86:	4b62      	ldr	r3, [pc, #392]	; (8005010 <__ieee754_pow+0x770>)
 8004e88:	4680      	mov	r8, r0
 8004e8a:	4689      	mov	r9, r1
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	f7fb f9f1 	bl	8000278 <__aeabi_dsub>
 8004e96:	4632      	mov	r2, r6
 8004e98:	463b      	mov	r3, r7
 8004e9a:	f7fb f9ed 	bl	8000278 <__aeabi_dsub>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4650      	mov	r0, sl
 8004ea4:	4659      	mov	r1, fp
 8004ea6:	f7fb f9e7 	bl	8000278 <__aeabi_dsub>
 8004eaa:	ec53 2b18 	vmov	r2, r3, d8
 8004eae:	f7fb fb9b 	bl	80005e8 <__aeabi_dmul>
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	460f      	mov	r7, r1
 8004eb8:	462b      	mov	r3, r5
 8004eba:	ec51 0b19 	vmov	r0, r1, d9
 8004ebe:	f7fb fb93 	bl	80005e8 <__aeabi_dmul>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	4639      	mov	r1, r7
 8004eca:	f7fb f9d7 	bl	800027c <__adddf3>
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460f      	mov	r7, r1
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4640      	mov	r0, r8
 8004ed8:	4649      	mov	r1, r9
 8004eda:	f7fb f9cf 	bl	800027c <__adddf3>
 8004ede:	a33e      	add	r3, pc, #248	; (adr r3, 8004fd8 <__ieee754_pow+0x738>)
 8004ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	460d      	mov	r5, r1
 8004eea:	f7fb fb7d 	bl	80005e8 <__aeabi_dmul>
 8004eee:	4642      	mov	r2, r8
 8004ef0:	ec41 0b18 	vmov	d8, r0, r1
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f7fb f9bd 	bl	8000278 <__aeabi_dsub>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4630      	mov	r0, r6
 8004f04:	4639      	mov	r1, r7
 8004f06:	f7fb f9b7 	bl	8000278 <__aeabi_dsub>
 8004f0a:	a335      	add	r3, pc, #212	; (adr r3, 8004fe0 <__ieee754_pow+0x740>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f7fb fb6a 	bl	80005e8 <__aeabi_dmul>
 8004f14:	a334      	add	r3, pc, #208	; (adr r3, 8004fe8 <__ieee754_pow+0x748>)
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	460f      	mov	r7, r1
 8004f1e:	4620      	mov	r0, r4
 8004f20:	4629      	mov	r1, r5
 8004f22:	f7fb fb61 	bl	80005e8 <__aeabi_dmul>
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	f7fb f9a5 	bl	800027c <__adddf3>
 8004f32:	9a07      	ldr	r2, [sp, #28]
 8004f34:	4b37      	ldr	r3, [pc, #220]	; (8005014 <__ieee754_pow+0x774>)
 8004f36:	4413      	add	r3, r2
 8004f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3c:	f7fb f99e 	bl	800027c <__adddf3>
 8004f40:	4682      	mov	sl, r0
 8004f42:	9805      	ldr	r0, [sp, #20]
 8004f44:	468b      	mov	fp, r1
 8004f46:	f7fb fae5 	bl	8000514 <__aeabi_i2d>
 8004f4a:	9a07      	ldr	r2, [sp, #28]
 8004f4c:	4b32      	ldr	r3, [pc, #200]	; (8005018 <__ieee754_pow+0x778>)
 8004f4e:	4413      	add	r3, r2
 8004f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f54:	4606      	mov	r6, r0
 8004f56:	460f      	mov	r7, r1
 8004f58:	4652      	mov	r2, sl
 8004f5a:	465b      	mov	r3, fp
 8004f5c:	ec51 0b18 	vmov	r0, r1, d8
 8004f60:	f7fb f98c 	bl	800027c <__adddf3>
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	f7fb f988 	bl	800027c <__adddf3>
 8004f6c:	4632      	mov	r2, r6
 8004f6e:	463b      	mov	r3, r7
 8004f70:	f7fb f984 	bl	800027c <__adddf3>
 8004f74:	2000      	movs	r0, #0
 8004f76:	4632      	mov	r2, r6
 8004f78:	463b      	mov	r3, r7
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	f7fb f97b 	bl	8000278 <__aeabi_dsub>
 8004f82:	4642      	mov	r2, r8
 8004f84:	464b      	mov	r3, r9
 8004f86:	f7fb f977 	bl	8000278 <__aeabi_dsub>
 8004f8a:	ec53 2b18 	vmov	r2, r3, d8
 8004f8e:	f7fb f973 	bl	8000278 <__aeabi_dsub>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4650      	mov	r0, sl
 8004f98:	4659      	mov	r1, fp
 8004f9a:	e610      	b.n	8004bbe <__ieee754_pow+0x31e>
 8004f9c:	2401      	movs	r4, #1
 8004f9e:	e6a1      	b.n	8004ce4 <__ieee754_pow+0x444>
 8004fa0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8004ff0 <__ieee754_pow+0x750>
 8004fa4:	e617      	b.n	8004bd6 <__ieee754_pow+0x336>
 8004fa6:	bf00      	nop
 8004fa8:	4a454eef 	.word	0x4a454eef
 8004fac:	3fca7e28 	.word	0x3fca7e28
 8004fb0:	93c9db65 	.word	0x93c9db65
 8004fb4:	3fcd864a 	.word	0x3fcd864a
 8004fb8:	a91d4101 	.word	0xa91d4101
 8004fbc:	3fd17460 	.word	0x3fd17460
 8004fc0:	518f264d 	.word	0x518f264d
 8004fc4:	3fd55555 	.word	0x3fd55555
 8004fc8:	db6fabff 	.word	0xdb6fabff
 8004fcc:	3fdb6db6 	.word	0x3fdb6db6
 8004fd0:	33333303 	.word	0x33333303
 8004fd4:	3fe33333 	.word	0x3fe33333
 8004fd8:	e0000000 	.word	0xe0000000
 8004fdc:	3feec709 	.word	0x3feec709
 8004fe0:	dc3a03fd 	.word	0xdc3a03fd
 8004fe4:	3feec709 	.word	0x3feec709
 8004fe8:	145b01f5 	.word	0x145b01f5
 8004fec:	be3e2fe0 	.word	0xbe3e2fe0
 8004ff0:	00000000 	.word	0x00000000
 8004ff4:	3ff00000 	.word	0x3ff00000
 8004ff8:	7ff00000 	.word	0x7ff00000
 8004ffc:	43400000 	.word	0x43400000
 8005000:	0003988e 	.word	0x0003988e
 8005004:	000bb679 	.word	0x000bb679
 8005008:	0802b8a8 	.word	0x0802b8a8
 800500c:	3ff00000 	.word	0x3ff00000
 8005010:	40080000 	.word	0x40080000
 8005014:	0802b8c8 	.word	0x0802b8c8
 8005018:	0802b8b8 	.word	0x0802b8b8
 800501c:	a3b5      	add	r3, pc, #724	; (adr r3, 80052f4 <__ieee754_pow+0xa54>)
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	4640      	mov	r0, r8
 8005024:	4649      	mov	r1, r9
 8005026:	f7fb f929 	bl	800027c <__adddf3>
 800502a:	4622      	mov	r2, r4
 800502c:	ec41 0b1a 	vmov	d10, r0, r1
 8005030:	462b      	mov	r3, r5
 8005032:	4630      	mov	r0, r6
 8005034:	4639      	mov	r1, r7
 8005036:	f7fb f91f 	bl	8000278 <__aeabi_dsub>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	ec51 0b1a 	vmov	r0, r1, d10
 8005042:	f7fb fd61 	bl	8000b08 <__aeabi_dcmpgt>
 8005046:	2800      	cmp	r0, #0
 8005048:	f47f ae04 	bne.w	8004c54 <__ieee754_pow+0x3b4>
 800504c:	4aa4      	ldr	r2, [pc, #656]	; (80052e0 <__ieee754_pow+0xa40>)
 800504e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005052:	4293      	cmp	r3, r2
 8005054:	f340 8108 	ble.w	8005268 <__ieee754_pow+0x9c8>
 8005058:	151b      	asrs	r3, r3, #20
 800505a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800505e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005062:	fa4a f303 	asr.w	r3, sl, r3
 8005066:	445b      	add	r3, fp
 8005068:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800506c:	4e9d      	ldr	r6, [pc, #628]	; (80052e4 <__ieee754_pow+0xa44>)
 800506e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005072:	4116      	asrs	r6, r2
 8005074:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005078:	2000      	movs	r0, #0
 800507a:	ea23 0106 	bic.w	r1, r3, r6
 800507e:	f1c2 0214 	rsb	r2, r2, #20
 8005082:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005086:	fa4a fa02 	asr.w	sl, sl, r2
 800508a:	f1bb 0f00 	cmp.w	fp, #0
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	bfb8      	it	lt
 8005098:	f1ca 0a00 	rsblt	sl, sl, #0
 800509c:	f7fb f8ec 	bl	8000278 <__aeabi_dsub>
 80050a0:	ec41 0b19 	vmov	d9, r0, r1
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	ec51 0b19 	vmov	r0, r1, d9
 80050ac:	f7fb f8e6 	bl	800027c <__adddf3>
 80050b0:	a37b      	add	r3, pc, #492	; (adr r3, 80052a0 <__ieee754_pow+0xa00>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	2000      	movs	r0, #0
 80050b8:	4604      	mov	r4, r0
 80050ba:	460d      	mov	r5, r1
 80050bc:	f7fb fa94 	bl	80005e8 <__aeabi_dmul>
 80050c0:	ec53 2b19 	vmov	r2, r3, d9
 80050c4:	4606      	mov	r6, r0
 80050c6:	460f      	mov	r7, r1
 80050c8:	4620      	mov	r0, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	f7fb f8d4 	bl	8000278 <__aeabi_dsub>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb f8ce 	bl	8000278 <__aeabi_dsub>
 80050dc:	a372      	add	r3, pc, #456	; (adr r3, 80052a8 <__ieee754_pow+0xa08>)
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb fa81 	bl	80005e8 <__aeabi_dmul>
 80050e6:	a372      	add	r3, pc, #456	; (adr r3, 80052b0 <__ieee754_pow+0xa10>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	4680      	mov	r8, r0
 80050ee:	4689      	mov	r9, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb fa78 	bl	80005e8 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4640      	mov	r0, r8
 80050fe:	4649      	mov	r1, r9
 8005100:	f7fb f8bc 	bl	800027c <__adddf3>
 8005104:	4604      	mov	r4, r0
 8005106:	460d      	mov	r5, r1
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4630      	mov	r0, r6
 800510e:	4639      	mov	r1, r7
 8005110:	f7fb f8b4 	bl	800027c <__adddf3>
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	4680      	mov	r8, r0
 800511a:	4689      	mov	r9, r1
 800511c:	f7fb f8ac 	bl	8000278 <__aeabi_dsub>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4620      	mov	r0, r4
 8005126:	4629      	mov	r1, r5
 8005128:	f7fb f8a6 	bl	8000278 <__aeabi_dsub>
 800512c:	4642      	mov	r2, r8
 800512e:	4606      	mov	r6, r0
 8005130:	460f      	mov	r7, r1
 8005132:	464b      	mov	r3, r9
 8005134:	4640      	mov	r0, r8
 8005136:	4649      	mov	r1, r9
 8005138:	f7fb fa56 	bl	80005e8 <__aeabi_dmul>
 800513c:	a35e      	add	r3, pc, #376	; (adr r3, 80052b8 <__ieee754_pow+0xa18>)
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	4604      	mov	r4, r0
 8005144:	460d      	mov	r5, r1
 8005146:	f7fb fa4f 	bl	80005e8 <__aeabi_dmul>
 800514a:	a35d      	add	r3, pc, #372	; (adr r3, 80052c0 <__ieee754_pow+0xa20>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	f7fb f892 	bl	8000278 <__aeabi_dsub>
 8005154:	4622      	mov	r2, r4
 8005156:	462b      	mov	r3, r5
 8005158:	f7fb fa46 	bl	80005e8 <__aeabi_dmul>
 800515c:	a35a      	add	r3, pc, #360	; (adr r3, 80052c8 <__ieee754_pow+0xa28>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fb f88b 	bl	800027c <__adddf3>
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	f7fb fa3d 	bl	80005e8 <__aeabi_dmul>
 800516e:	a358      	add	r3, pc, #352	; (adr r3, 80052d0 <__ieee754_pow+0xa30>)
 8005170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005174:	f7fb f880 	bl	8000278 <__aeabi_dsub>
 8005178:	4622      	mov	r2, r4
 800517a:	462b      	mov	r3, r5
 800517c:	f7fb fa34 	bl	80005e8 <__aeabi_dmul>
 8005180:	a355      	add	r3, pc, #340	; (adr r3, 80052d8 <__ieee754_pow+0xa38>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb f879 	bl	800027c <__adddf3>
 800518a:	4622      	mov	r2, r4
 800518c:	462b      	mov	r3, r5
 800518e:	f7fb fa2b 	bl	80005e8 <__aeabi_dmul>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	f7fb f86d 	bl	8000278 <__aeabi_dsub>
 800519e:	4604      	mov	r4, r0
 80051a0:	460d      	mov	r5, r1
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4640      	mov	r0, r8
 80051a8:	4649      	mov	r1, r9
 80051aa:	f7fb fa1d 	bl	80005e8 <__aeabi_dmul>
 80051ae:	2200      	movs	r2, #0
 80051b0:	ec41 0b19 	vmov	d9, r0, r1
 80051b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f85c 	bl	8000278 <__aeabi_dsub>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	ec51 0b19 	vmov	r0, r1, d9
 80051c8:	f7fb fb38 	bl	800083c <__aeabi_ddiv>
 80051cc:	4632      	mov	r2, r6
 80051ce:	4604      	mov	r4, r0
 80051d0:	460d      	mov	r5, r1
 80051d2:	463b      	mov	r3, r7
 80051d4:	4640      	mov	r0, r8
 80051d6:	4649      	mov	r1, r9
 80051d8:	f7fb fa06 	bl	80005e8 <__aeabi_dmul>
 80051dc:	4632      	mov	r2, r6
 80051de:	463b      	mov	r3, r7
 80051e0:	f7fb f84c 	bl	800027c <__adddf3>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4620      	mov	r0, r4
 80051ea:	4629      	mov	r1, r5
 80051ec:	f7fb f844 	bl	8000278 <__aeabi_dsub>
 80051f0:	4642      	mov	r2, r8
 80051f2:	464b      	mov	r3, r9
 80051f4:	f7fb f840 	bl	8000278 <__aeabi_dsub>
 80051f8:	460b      	mov	r3, r1
 80051fa:	4602      	mov	r2, r0
 80051fc:	493a      	ldr	r1, [pc, #232]	; (80052e8 <__ieee754_pow+0xa48>)
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fb f83a 	bl	8000278 <__aeabi_dsub>
 8005204:	ec41 0b10 	vmov	d0, r0, r1
 8005208:	ee10 3a90 	vmov	r3, s1
 800520c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005214:	da2b      	bge.n	800526e <__ieee754_pow+0x9ce>
 8005216:	4650      	mov	r0, sl
 8005218:	f000 f966 	bl	80054e8 <scalbn>
 800521c:	ec51 0b10 	vmov	r0, r1, d0
 8005220:	ec53 2b18 	vmov	r2, r3, d8
 8005224:	f7ff bbed 	b.w	8004a02 <__ieee754_pow+0x162>
 8005228:	4b30      	ldr	r3, [pc, #192]	; (80052ec <__ieee754_pow+0xa4c>)
 800522a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800522e:	429e      	cmp	r6, r3
 8005230:	f77f af0c 	ble.w	800504c <__ieee754_pow+0x7ac>
 8005234:	4b2e      	ldr	r3, [pc, #184]	; (80052f0 <__ieee754_pow+0xa50>)
 8005236:	440b      	add	r3, r1
 8005238:	4303      	orrs	r3, r0
 800523a:	d009      	beq.n	8005250 <__ieee754_pow+0x9b0>
 800523c:	ec51 0b18 	vmov	r0, r1, d8
 8005240:	2200      	movs	r2, #0
 8005242:	2300      	movs	r3, #0
 8005244:	f7fb fc42 	bl	8000acc <__aeabi_dcmplt>
 8005248:	3800      	subs	r0, #0
 800524a:	bf18      	it	ne
 800524c:	2001      	movne	r0, #1
 800524e:	e447      	b.n	8004ae0 <__ieee754_pow+0x240>
 8005250:	4622      	mov	r2, r4
 8005252:	462b      	mov	r3, r5
 8005254:	f7fb f810 	bl	8000278 <__aeabi_dsub>
 8005258:	4642      	mov	r2, r8
 800525a:	464b      	mov	r3, r9
 800525c:	f7fb fc4a 	bl	8000af4 <__aeabi_dcmpge>
 8005260:	2800      	cmp	r0, #0
 8005262:	f43f aef3 	beq.w	800504c <__ieee754_pow+0x7ac>
 8005266:	e7e9      	b.n	800523c <__ieee754_pow+0x99c>
 8005268:	f04f 0a00 	mov.w	sl, #0
 800526c:	e71a      	b.n	80050a4 <__ieee754_pow+0x804>
 800526e:	ec51 0b10 	vmov	r0, r1, d0
 8005272:	4619      	mov	r1, r3
 8005274:	e7d4      	b.n	8005220 <__ieee754_pow+0x980>
 8005276:	491c      	ldr	r1, [pc, #112]	; (80052e8 <__ieee754_pow+0xa48>)
 8005278:	2000      	movs	r0, #0
 800527a:	f7ff bb30 	b.w	80048de <__ieee754_pow+0x3e>
 800527e:	2000      	movs	r0, #0
 8005280:	2100      	movs	r1, #0
 8005282:	f7ff bb2c 	b.w	80048de <__ieee754_pow+0x3e>
 8005286:	4630      	mov	r0, r6
 8005288:	4639      	mov	r1, r7
 800528a:	f7ff bb28 	b.w	80048de <__ieee754_pow+0x3e>
 800528e:	9204      	str	r2, [sp, #16]
 8005290:	f7ff bb7a 	b.w	8004988 <__ieee754_pow+0xe8>
 8005294:	2300      	movs	r3, #0
 8005296:	f7ff bb64 	b.w	8004962 <__ieee754_pow+0xc2>
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w
 80052a0:	00000000 	.word	0x00000000
 80052a4:	3fe62e43 	.word	0x3fe62e43
 80052a8:	fefa39ef 	.word	0xfefa39ef
 80052ac:	3fe62e42 	.word	0x3fe62e42
 80052b0:	0ca86c39 	.word	0x0ca86c39
 80052b4:	be205c61 	.word	0xbe205c61
 80052b8:	72bea4d0 	.word	0x72bea4d0
 80052bc:	3e663769 	.word	0x3e663769
 80052c0:	c5d26bf1 	.word	0xc5d26bf1
 80052c4:	3ebbbd41 	.word	0x3ebbbd41
 80052c8:	af25de2c 	.word	0xaf25de2c
 80052cc:	3f11566a 	.word	0x3f11566a
 80052d0:	16bebd93 	.word	0x16bebd93
 80052d4:	3f66c16c 	.word	0x3f66c16c
 80052d8:	5555553e 	.word	0x5555553e
 80052dc:	3fc55555 	.word	0x3fc55555
 80052e0:	3fe00000 	.word	0x3fe00000
 80052e4:	000fffff 	.word	0x000fffff
 80052e8:	3ff00000 	.word	0x3ff00000
 80052ec:	4090cbff 	.word	0x4090cbff
 80052f0:	3f6f3400 	.word	0x3f6f3400
 80052f4:	652b82fe 	.word	0x652b82fe
 80052f8:	3c971547 	.word	0x3c971547

080052fc <__ieee754_sqrt>:
 80052fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005300:	ec55 4b10 	vmov	r4, r5, d0
 8005304:	4e55      	ldr	r6, [pc, #340]	; (800545c <__ieee754_sqrt+0x160>)
 8005306:	43ae      	bics	r6, r5
 8005308:	ee10 0a10 	vmov	r0, s0
 800530c:	ee10 3a10 	vmov	r3, s0
 8005310:	462a      	mov	r2, r5
 8005312:	4629      	mov	r1, r5
 8005314:	d110      	bne.n	8005338 <__ieee754_sqrt+0x3c>
 8005316:	ee10 2a10 	vmov	r2, s0
 800531a:	462b      	mov	r3, r5
 800531c:	f7fb f964 	bl	80005e8 <__aeabi_dmul>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4620      	mov	r0, r4
 8005326:	4629      	mov	r1, r5
 8005328:	f7fa ffa8 	bl	800027c <__adddf3>
 800532c:	4604      	mov	r4, r0
 800532e:	460d      	mov	r5, r1
 8005330:	ec45 4b10 	vmov	d0, r4, r5
 8005334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005338:	2d00      	cmp	r5, #0
 800533a:	dc10      	bgt.n	800535e <__ieee754_sqrt+0x62>
 800533c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005340:	4330      	orrs	r0, r6
 8005342:	d0f5      	beq.n	8005330 <__ieee754_sqrt+0x34>
 8005344:	b15d      	cbz	r5, 800535e <__ieee754_sqrt+0x62>
 8005346:	ee10 2a10 	vmov	r2, s0
 800534a:	462b      	mov	r3, r5
 800534c:	ee10 0a10 	vmov	r0, s0
 8005350:	f7fa ff92 	bl	8000278 <__aeabi_dsub>
 8005354:	4602      	mov	r2, r0
 8005356:	460b      	mov	r3, r1
 8005358:	f7fb fa70 	bl	800083c <__aeabi_ddiv>
 800535c:	e7e6      	b.n	800532c <__ieee754_sqrt+0x30>
 800535e:	1512      	asrs	r2, r2, #20
 8005360:	d074      	beq.n	800544c <__ieee754_sqrt+0x150>
 8005362:	07d4      	lsls	r4, r2, #31
 8005364:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005368:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800536c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005370:	bf5e      	ittt	pl
 8005372:	0fda      	lsrpl	r2, r3, #31
 8005374:	005b      	lslpl	r3, r3, #1
 8005376:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800537a:	2400      	movs	r4, #0
 800537c:	0fda      	lsrs	r2, r3, #31
 800537e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005382:	107f      	asrs	r7, r7, #1
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2516      	movs	r5, #22
 8005388:	4620      	mov	r0, r4
 800538a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800538e:	1886      	adds	r6, r0, r2
 8005390:	428e      	cmp	r6, r1
 8005392:	bfde      	ittt	le
 8005394:	1b89      	suble	r1, r1, r6
 8005396:	18b0      	addle	r0, r6, r2
 8005398:	18a4      	addle	r4, r4, r2
 800539a:	0049      	lsls	r1, r1, #1
 800539c:	3d01      	subs	r5, #1
 800539e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80053a2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80053a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053aa:	d1f0      	bne.n	800538e <__ieee754_sqrt+0x92>
 80053ac:	462a      	mov	r2, r5
 80053ae:	f04f 0e20 	mov.w	lr, #32
 80053b2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80053b6:	4281      	cmp	r1, r0
 80053b8:	eb06 0c05 	add.w	ip, r6, r5
 80053bc:	dc02      	bgt.n	80053c4 <__ieee754_sqrt+0xc8>
 80053be:	d113      	bne.n	80053e8 <__ieee754_sqrt+0xec>
 80053c0:	459c      	cmp	ip, r3
 80053c2:	d811      	bhi.n	80053e8 <__ieee754_sqrt+0xec>
 80053c4:	f1bc 0f00 	cmp.w	ip, #0
 80053c8:	eb0c 0506 	add.w	r5, ip, r6
 80053cc:	da43      	bge.n	8005456 <__ieee754_sqrt+0x15a>
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	db41      	blt.n	8005456 <__ieee754_sqrt+0x15a>
 80053d2:	f100 0801 	add.w	r8, r0, #1
 80053d6:	1a09      	subs	r1, r1, r0
 80053d8:	459c      	cmp	ip, r3
 80053da:	bf88      	it	hi
 80053dc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80053e0:	eba3 030c 	sub.w	r3, r3, ip
 80053e4:	4432      	add	r2, r6
 80053e6:	4640      	mov	r0, r8
 80053e8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80053ec:	f1be 0e01 	subs.w	lr, lr, #1
 80053f0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80053f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80053f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80053fc:	d1db      	bne.n	80053b6 <__ieee754_sqrt+0xba>
 80053fe:	430b      	orrs	r3, r1
 8005400:	d006      	beq.n	8005410 <__ieee754_sqrt+0x114>
 8005402:	1c50      	adds	r0, r2, #1
 8005404:	bf13      	iteet	ne
 8005406:	3201      	addne	r2, #1
 8005408:	3401      	addeq	r4, #1
 800540a:	4672      	moveq	r2, lr
 800540c:	f022 0201 	bicne.w	r2, r2, #1
 8005410:	1063      	asrs	r3, r4, #1
 8005412:	0852      	lsrs	r2, r2, #1
 8005414:	07e1      	lsls	r1, r4, #31
 8005416:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800541a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800541e:	bf48      	it	mi
 8005420:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005424:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005428:	4614      	mov	r4, r2
 800542a:	e781      	b.n	8005330 <__ieee754_sqrt+0x34>
 800542c:	0ad9      	lsrs	r1, r3, #11
 800542e:	3815      	subs	r0, #21
 8005430:	055b      	lsls	r3, r3, #21
 8005432:	2900      	cmp	r1, #0
 8005434:	d0fa      	beq.n	800542c <__ieee754_sqrt+0x130>
 8005436:	02cd      	lsls	r5, r1, #11
 8005438:	d50a      	bpl.n	8005450 <__ieee754_sqrt+0x154>
 800543a:	f1c2 0420 	rsb	r4, r2, #32
 800543e:	fa23 f404 	lsr.w	r4, r3, r4
 8005442:	1e55      	subs	r5, r2, #1
 8005444:	4093      	lsls	r3, r2
 8005446:	4321      	orrs	r1, r4
 8005448:	1b42      	subs	r2, r0, r5
 800544a:	e78a      	b.n	8005362 <__ieee754_sqrt+0x66>
 800544c:	4610      	mov	r0, r2
 800544e:	e7f0      	b.n	8005432 <__ieee754_sqrt+0x136>
 8005450:	0049      	lsls	r1, r1, #1
 8005452:	3201      	adds	r2, #1
 8005454:	e7ef      	b.n	8005436 <__ieee754_sqrt+0x13a>
 8005456:	4680      	mov	r8, r0
 8005458:	e7bd      	b.n	80053d6 <__ieee754_sqrt+0xda>
 800545a:	bf00      	nop
 800545c:	7ff00000 	.word	0x7ff00000

08005460 <with_errno>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4604      	mov	r4, r0
 8005464:	460d      	mov	r5, r1
 8005466:	4616      	mov	r6, r2
 8005468:	f7fe fd0a 	bl	8003e80 <__errno>
 800546c:	4629      	mov	r1, r5
 800546e:	6006      	str	r6, [r0, #0]
 8005470:	4620      	mov	r0, r4
 8005472:	bd70      	pop	{r4, r5, r6, pc}

08005474 <xflow>:
 8005474:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005476:	4614      	mov	r4, r2
 8005478:	461d      	mov	r5, r3
 800547a:	b108      	cbz	r0, 8005480 <xflow+0xc>
 800547c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005480:	e9cd 2300 	strd	r2, r3, [sp]
 8005484:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005488:	4620      	mov	r0, r4
 800548a:	4629      	mov	r1, r5
 800548c:	f7fb f8ac 	bl	80005e8 <__aeabi_dmul>
 8005490:	2222      	movs	r2, #34	; 0x22
 8005492:	b003      	add	sp, #12
 8005494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005498:	f7ff bfe2 	b.w	8005460 <with_errno>

0800549c <__math_uflow>:
 800549c:	b508      	push	{r3, lr}
 800549e:	2200      	movs	r2, #0
 80054a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054a4:	f7ff ffe6 	bl	8005474 <xflow>
 80054a8:	ec41 0b10 	vmov	d0, r0, r1
 80054ac:	bd08      	pop	{r3, pc}

080054ae <__math_oflow>:
 80054ae:	b508      	push	{r3, lr}
 80054b0:	2200      	movs	r2, #0
 80054b2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80054b6:	f7ff ffdd 	bl	8005474 <xflow>
 80054ba:	ec41 0b10 	vmov	d0, r0, r1
 80054be:	bd08      	pop	{r3, pc}

080054c0 <fabs>:
 80054c0:	ec51 0b10 	vmov	r0, r1, d0
 80054c4:	ee10 2a10 	vmov	r2, s0
 80054c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80054cc:	ec43 2b10 	vmov	d0, r2, r3
 80054d0:	4770      	bx	lr

080054d2 <finite>:
 80054d2:	b082      	sub	sp, #8
 80054d4:	ed8d 0b00 	vstr	d0, [sp]
 80054d8:	9801      	ldr	r0, [sp, #4]
 80054da:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80054de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80054e2:	0fc0      	lsrs	r0, r0, #31
 80054e4:	b002      	add	sp, #8
 80054e6:	4770      	bx	lr

080054e8 <scalbn>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	ec55 4b10 	vmov	r4, r5, d0
 80054ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80054f2:	4606      	mov	r6, r0
 80054f4:	462b      	mov	r3, r5
 80054f6:	b99a      	cbnz	r2, 8005520 <scalbn+0x38>
 80054f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054fc:	4323      	orrs	r3, r4
 80054fe:	d036      	beq.n	800556e <scalbn+0x86>
 8005500:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <scalbn+0x100>)
 8005502:	4629      	mov	r1, r5
 8005504:	ee10 0a10 	vmov	r0, s0
 8005508:	2200      	movs	r2, #0
 800550a:	f7fb f86d 	bl	80005e8 <__aeabi_dmul>
 800550e:	4b37      	ldr	r3, [pc, #220]	; (80055ec <scalbn+0x104>)
 8005510:	429e      	cmp	r6, r3
 8005512:	4604      	mov	r4, r0
 8005514:	460d      	mov	r5, r1
 8005516:	da10      	bge.n	800553a <scalbn+0x52>
 8005518:	a32b      	add	r3, pc, #172	; (adr r3, 80055c8 <scalbn+0xe0>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	e03a      	b.n	8005596 <scalbn+0xae>
 8005520:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005524:	428a      	cmp	r2, r1
 8005526:	d10c      	bne.n	8005542 <scalbn+0x5a>
 8005528:	ee10 2a10 	vmov	r2, s0
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fa fea4 	bl	800027c <__adddf3>
 8005534:	4604      	mov	r4, r0
 8005536:	460d      	mov	r5, r1
 8005538:	e019      	b.n	800556e <scalbn+0x86>
 800553a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800553e:	460b      	mov	r3, r1
 8005540:	3a36      	subs	r2, #54	; 0x36
 8005542:	4432      	add	r2, r6
 8005544:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005548:	428a      	cmp	r2, r1
 800554a:	dd08      	ble.n	800555e <scalbn+0x76>
 800554c:	2d00      	cmp	r5, #0
 800554e:	a120      	add	r1, pc, #128	; (adr r1, 80055d0 <scalbn+0xe8>)
 8005550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005554:	da1c      	bge.n	8005590 <scalbn+0xa8>
 8005556:	a120      	add	r1, pc, #128	; (adr r1, 80055d8 <scalbn+0xf0>)
 8005558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800555c:	e018      	b.n	8005590 <scalbn+0xa8>
 800555e:	2a00      	cmp	r2, #0
 8005560:	dd08      	ble.n	8005574 <scalbn+0x8c>
 8005562:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005566:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800556a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800556e:	ec45 4b10 	vmov	d0, r4, r5
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005578:	da19      	bge.n	80055ae <scalbn+0xc6>
 800557a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800557e:	429e      	cmp	r6, r3
 8005580:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005584:	dd0a      	ble.n	800559c <scalbn+0xb4>
 8005586:	a112      	add	r1, pc, #72	; (adr r1, 80055d0 <scalbn+0xe8>)
 8005588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e2      	bne.n	8005556 <scalbn+0x6e>
 8005590:	a30f      	add	r3, pc, #60	; (adr r3, 80055d0 <scalbn+0xe8>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	f7fb f827 	bl	80005e8 <__aeabi_dmul>
 800559a:	e7cb      	b.n	8005534 <scalbn+0x4c>
 800559c:	a10a      	add	r1, pc, #40	; (adr r1, 80055c8 <scalbn+0xe0>)
 800559e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0b8      	beq.n	8005518 <scalbn+0x30>
 80055a6:	a10e      	add	r1, pc, #56	; (adr r1, 80055e0 <scalbn+0xf8>)
 80055a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055ac:	e7b4      	b.n	8005518 <scalbn+0x30>
 80055ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80055b2:	3236      	adds	r2, #54	; 0x36
 80055b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80055bc:	4620      	mov	r0, r4
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <scalbn+0x108>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	e7e8      	b.n	8005596 <scalbn+0xae>
 80055c4:	f3af 8000 	nop.w
 80055c8:	c2f8f359 	.word	0xc2f8f359
 80055cc:	01a56e1f 	.word	0x01a56e1f
 80055d0:	8800759c 	.word	0x8800759c
 80055d4:	7e37e43c 	.word	0x7e37e43c
 80055d8:	8800759c 	.word	0x8800759c
 80055dc:	fe37e43c 	.word	0xfe37e43c
 80055e0:	c2f8f359 	.word	0xc2f8f359
 80055e4:	81a56e1f 	.word	0x81a56e1f
 80055e8:	43500000 	.word	0x43500000
 80055ec:	ffff3cb0 	.word	0xffff3cb0
 80055f0:	3c900000 	.word	0x3c900000

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
