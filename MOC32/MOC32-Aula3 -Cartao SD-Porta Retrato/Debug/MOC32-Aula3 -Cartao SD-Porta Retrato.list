
MOC32-Aula3 -Cartao SD-Porta Retrato.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001088  080086b4  080086b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800973c  0800973c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800973c  0800973c  0001973c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009744  08009744  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009744  08009744  00019744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800974c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          000034a4  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003530  20003530  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c53  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d4c  00000000  00000000  00033d0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  00036a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  00037b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fd3  00000000  00000000  00038a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bff  00000000  00000000  0005da43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da865  00000000  00000000  00074642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014eea7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000485c  00000000  00000000  0014eef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800869c 	.word	0x0800869c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	0800869c 	.word	0x0800869c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <SELECT>:
#define SD_CS_GPIO_Port GPIOD
#define SD_CS_Pin GPIO_PIN_11

/* SPI Chip Select */
static void SELECT(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057e:	4802      	ldr	r0, [pc, #8]	; (8000588 <SELECT+0x14>)
 8000580:	f002 fe8e 	bl	80032a0 <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020c00 	.word	0x40020c00

0800058c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000596:	4802      	ldr	r0, [pc, #8]	; (80005a0 <DESELECT+0x14>)
 8000598:	f002 fe82 	bl	80032a0 <HAL_GPIO_WritePin>
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020c00 	.word	0x40020c00

080005a4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005ae:	bf00      	nop
 80005b0:	4808      	ldr	r0, [pc, #32]	; (80005d4 <SPI_TxByte+0x30>)
 80005b2:	f003 fe8e 	bl	80042d2 <HAL_SPI_GetState>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d1f9      	bne.n	80005b0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80005bc:	1df9      	adds	r1, r7, #7
 80005be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c2:	2201      	movs	r2, #1
 80005c4:	4803      	ldr	r0, [pc, #12]	; (80005d4 <SPI_TxByte+0x30>)
 80005c6:	f003 fba6 	bl	8003d16 <HAL_SPI_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000114 	.word	0x20000114

080005d8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80005de:	23ff      	movs	r3, #255	; 0xff
 80005e0:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80005e6:	bf00      	nop
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <SPI_RxByte+0x38>)
 80005ea:	f003 fe72 	bl	80042d2 <HAL_SPI_GetState>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d1f9      	bne.n	80005e8 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80005f4:	1dba      	adds	r2, r7, #6
 80005f6:	1df9      	adds	r1, r7, #7
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2301      	movs	r3, #1
 8000600:	4803      	ldr	r0, [pc, #12]	; (8000610 <SPI_RxByte+0x38>)
 8000602:	f003 fcc4 	bl	8003f8e <HAL_SPI_TransmitReceive>

  return data;
 8000606:	79bb      	ldrb	r3, [r7, #6]
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000114 	.word	0x20000114

08000614 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800061c:	f7ff ffdc 	bl	80005d8 <SPI_RxByte>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <SD_ReadyWait+0x34>)
 8000638:	2232      	movs	r2, #50	; 0x32
 800063a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 800063c:	f7ff ffcc 	bl	80005d8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000640:	f7ff ffca 	bl	80005d8 <SPI_RxByte>
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2bff      	cmp	r3, #255	; 0xff
 800064c:	d004      	beq.n	8000658 <SD_ReadyWait+0x28>
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <SD_ReadyWait+0x34>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f3      	bne.n	8000640 <SD_ReadyWait+0x10>

  return res;
 8000658:	79fb      	ldrb	r3, [r7, #7]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200032da 	.word	0x200032da

08000668 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800066e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000672:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000674:	f7ff ff8a 	bl	800058c <DESELECT>

  for(int i = 0; i < 10; i++)
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	e005      	b.n	800068a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800067e:	20ff      	movs	r0, #255	; 0xff
 8000680:	f7ff ff90 	bl	80005a4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	3301      	adds	r3, #1
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	2b09      	cmp	r3, #9
 800068e:	ddf6      	ble.n	800067e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000690:	f7ff ff70 	bl	8000574 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000694:	2340      	movs	r3, #64	; 0x40
 8000696:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80006a8:	2395      	movs	r3, #149	; 0x95
 80006aa:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e009      	b.n	80006c6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80006b2:	1d3a      	adds	r2, r7, #4
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff72 	bl	80005a4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	3301      	adds	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2b05      	cmp	r3, #5
 80006ca:	ddf2      	ble.n	80006b2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80006cc:	e002      	b.n	80006d4 <SD_PowerOn+0x6c>
  {
    Count--;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80006d4:	f7ff ff80 	bl	80005d8 <SPI_RxByte>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d002      	beq.n	80006e4 <SD_PowerOn+0x7c>
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f4      	bne.n	80006ce <SD_PowerOn+0x66>
  }

  DESELECT();
 80006e4:	f7ff ff52 	bl	800058c <DESELECT>
  SPI_TxByte(0XFF);
 80006e8:	20ff      	movs	r0, #255	; 0xff
 80006ea:	f7ff ff5b 	bl	80005a4 <SPI_TxByte>

  PowerFlag = 1;
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SD_PowerOn+0x94>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	200000a9 	.word	0x200000a9

08000700 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <SD_PowerOff+0x14>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	200000a9 	.word	0x200000a9

08000718 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <SD_CheckPower+0x14>)
 800071e:	781b      	ldrb	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	200000a9 	.word	0x200000a9

08000730 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SD_RxDataBlock+0x68>)
 800073c:	220a      	movs	r2, #10
 800073e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000740:	f7ff ff4a 	bl	80005d8 <SPI_RxByte>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2bff      	cmp	r3, #255	; 0xff
 800074c:	d104      	bne.n	8000758 <SD_RxDataBlock+0x28>
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SD_RxDataBlock+0x68>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d1f3      	bne.n	8000740 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2bfe      	cmp	r3, #254	; 0xfe
 800075c:	d001      	beq.n	8000762 <SD_RxDataBlock+0x32>
    return FALSE;
 800075e:	2300      	movs	r3, #0
 8000760:	e016      	b.n	8000790 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1c5a      	adds	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff53 	bl	8000614 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff4d 	bl	8000614 <SPI_RxBytePtr>
  } while(btr -= 2);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3b02      	subs	r3, #2
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1ed      	bne.n	8000762 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000786:	f7ff ff27 	bl	80005d8 <SPI_RxByte>
  SPI_RxByte();
 800078a:	f7ff ff25 	bl	80005d8 <SPI_RxByte>

  return TRUE;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200032d9 	.word	0x200032d9

0800079c <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	460b      	mov	r3, r1
 80007a6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80007ac:	f7ff ff40 	bl	8000630 <SD_ReadyWait>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2bff      	cmp	r3, #255	; 0xff
 80007b4:	d001      	beq.n	80007ba <SD_TxDataBlock+0x1e>
    return FALSE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e040      	b.n	800083c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 80007ba:	78fb      	ldrb	r3, [r7, #3]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fef1 	bl	80005a4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	2bfd      	cmp	r3, #253	; 0xfd
 80007c6:	d031      	beq.n	800082c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	607a      	str	r2, [r7, #4]
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fee5 	bl	80005a4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fede 	bl	80005a4 <SPI_TxByte>
    } while (--wc);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	73bb      	strb	r3, [r7, #14]
 80007ee:	7bbb      	ldrb	r3, [r7, #14]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1eb      	bne.n	80007cc <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80007f4:	f7ff fef0 	bl	80005d8 <SPI_RxByte>
    SPI_RxByte();
 80007f8:	f7ff feee 	bl	80005d8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80007fc:	e00b      	b.n	8000816 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80007fe:	f7ff feeb 	bl	80005d8 <SPI_RxByte>
 8000802:	4603      	mov	r3, r0
 8000804:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	f003 031f 	and.w	r3, r3, #31
 800080c:	2b05      	cmp	r3, #5
 800080e:	d006      	beq.n	800081e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000810:	7b7b      	ldrb	r3, [r7, #13]
 8000812:	3301      	adds	r3, #1
 8000814:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000816:	7b7b      	ldrb	r3, [r7, #13]
 8000818:	2b40      	cmp	r3, #64	; 0x40
 800081a:	d9f0      	bls.n	80007fe <SD_TxDataBlock+0x62>
 800081c:	e000      	b.n	8000820 <SD_TxDataBlock+0x84>
        break;
 800081e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000820:	bf00      	nop
 8000822:	f7ff fed9 	bl	80005d8 <SPI_RxByte>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0fa      	beq.n	8000822 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 800082c:	7bfb      	ldrb	r3, [r7, #15]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b05      	cmp	r3, #5
 8000834:	d101      	bne.n	800083a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000836:	2301      	movs	r3, #1
 8000838:	e000      	b.n	800083c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000850:	f7ff feee 	bl	8000630 <SD_ReadyWait>
 8000854:	4603      	mov	r3, r0
 8000856:	2bff      	cmp	r3, #255	; 0xff
 8000858:	d001      	beq.n	800085e <SD_SendCmd+0x1a>
    return 0xFF;
 800085a:	23ff      	movs	r3, #255	; 0xff
 800085c:	e040      	b.n	80008e0 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fe9f 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	0e1b      	lsrs	r3, r3, #24
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe99 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe93 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe8d 	bl	80005a4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fe88 	bl	80005a4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b40      	cmp	r3, #64	; 0x40
 800089c:	d101      	bne.n	80008a2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800089e:	2395      	movs	r3, #149	; 0x95
 80008a0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b48      	cmp	r3, #72	; 0x48
 80008a6:	d101      	bne.n	80008ac <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80008a8:	2387      	movs	r3, #135	; 0x87
 80008aa:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe78 	bl	80005a4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	2b4c      	cmp	r3, #76	; 0x4c
 80008b8:	d101      	bne.n	80008be <SD_SendCmd+0x7a>
    SPI_RxByte();
 80008ba:	f7ff fe8d 	bl	80005d8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 80008be:	230a      	movs	r3, #10
 80008c0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80008c2:	f7ff fe89 	bl	80005d8 <SPI_RxByte>
 80008c6:	4603      	mov	r3, r0
 80008c8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008ca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	da05      	bge.n	80008de <SD_SendCmd+0x9a>
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	73bb      	strb	r3, [r7, #14]
 80008d8:	7bbb      	ldrb	r3, [r7, #14]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f1      	bne.n	80008c2 <SD_SendCmd+0x7e>

  return res;
 80008de:	7b7b      	ldrb	r3, [r7, #13]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SD_disk_initialize+0x14>
    return STA_NOINIT;
 80008f8:	2301      	movs	r3, #1
 80008fa:	e0d5      	b.n	8000aa8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80008fc:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <SD_disk_initialize+0x2a>
    return Stat;
 800090a:	4b69      	ldr	r3, [pc, #420]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	e0ca      	b.n	8000aa8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000912:	f7ff fea9 	bl	8000668 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000916:	f7ff fe2d 	bl	8000574 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 800091e:	2100      	movs	r1, #0
 8000920:	2040      	movs	r0, #64	; 0x40
 8000922:	f7ff ff8f 	bl	8000844 <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 80a5 	bne.w	8000a78 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000930:	2264      	movs	r2, #100	; 0x64
 8000932:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000938:	2048      	movs	r0, #72	; 0x48
 800093a:	f7ff ff83 	bl	8000844 <SD_SendCmd>
 800093e:	4603      	mov	r3, r0
 8000940:	2b01      	cmp	r3, #1
 8000942:	d158      	bne.n	80009f6 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e00c      	b.n	8000964 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800094a:	7bfc      	ldrb	r4, [r7, #15]
 800094c:	f7ff fe44 	bl	80005d8 <SPI_RxByte>
 8000950:	4603      	mov	r3, r0
 8000952:	461a      	mov	r2, r3
 8000954:	f104 0310 	add.w	r3, r4, #16
 8000958:	443b      	add	r3, r7
 800095a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	2b03      	cmp	r3, #3
 8000968:	d9ef      	bls.n	800094a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800096a:	7abb      	ldrb	r3, [r7, #10]
 800096c:	2b01      	cmp	r3, #1
 800096e:	f040 8083 	bne.w	8000a78 <SD_disk_initialize+0x190>
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2baa      	cmp	r3, #170	; 0xaa
 8000976:	d17f      	bne.n	8000a78 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000978:	2100      	movs	r1, #0
 800097a:	2077      	movs	r0, #119	; 0x77
 800097c:	f7ff ff62 	bl	8000844 <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d807      	bhi.n	8000996 <SD_disk_initialize+0xae>
 8000986:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800098a:	2069      	movs	r0, #105	; 0x69
 800098c:	f7ff ff5a 	bl	8000844 <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d005      	beq.n	80009a2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000996:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2b00      	cmp	r3, #0
 800099e:	d1eb      	bne.n	8000978 <SD_disk_initialize+0x90>
 80009a0:	e000      	b.n	80009a4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80009a2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d064      	beq.n	8000a78 <SD_disk_initialize+0x190>
 80009ae:	2100      	movs	r1, #0
 80009b0:	207a      	movs	r0, #122	; 0x7a
 80009b2:	f7ff ff47 	bl	8000844 <SD_SendCmd>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d15d      	bne.n	8000a78 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009bc:	2300      	movs	r3, #0
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e00c      	b.n	80009dc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80009c2:	7bfc      	ldrb	r4, [r7, #15]
 80009c4:	f7ff fe08 	bl	80005d8 <SPI_RxByte>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	f104 0310 	add.w	r3, r4, #16
 80009d0:	443b      	add	r3, r7
 80009d2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	3301      	adds	r3, #1
 80009da:	73fb      	strb	r3, [r7, #15]
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d9ef      	bls.n	80009c2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <SD_disk_initialize+0x108>
 80009ec:	2306      	movs	r3, #6
 80009ee:	e000      	b.n	80009f2 <SD_disk_initialize+0x10a>
 80009f0:	2302      	movs	r3, #2
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	e040      	b.n	8000a78 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009f6:	2100      	movs	r1, #0
 80009f8:	2077      	movs	r0, #119	; 0x77
 80009fa:	f7ff ff23 	bl	8000844 <SD_SendCmd>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d808      	bhi.n	8000a16 <SD_disk_initialize+0x12e>
 8000a04:	2100      	movs	r1, #0
 8000a06:	2069      	movs	r0, #105	; 0x69
 8000a08:	f7ff ff1c 	bl	8000844 <SD_SendCmd>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d801      	bhi.n	8000a16 <SD_disk_initialize+0x12e>
 8000a12:	2302      	movs	r3, #2
 8000a14:	e000      	b.n	8000a18 <SD_disk_initialize+0x130>
 8000a16:	2301      	movs	r3, #1
 8000a18:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d10e      	bne.n	8000a3e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	; 0x77
 8000a24:	f7ff ff0e 	bl	8000844 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d80e      	bhi.n	8000a4c <SD_disk_initialize+0x164>
 8000a2e:	2100      	movs	r1, #0
 8000a30:	2069      	movs	r0, #105	; 0x69
 8000a32:	f7ff ff07 	bl	8000844 <SD_SendCmd>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8000a3c:	e00d      	b.n	8000a5a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2041      	movs	r0, #65	; 0x41
 8000a42:	f7ff feff 	bl	8000844 <SD_SendCmd>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d005      	beq.n	8000a58 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1e1      	bne.n	8000a1a <SD_disk_initialize+0x132>
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8000a58:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <SD_disk_initialize+0x1cc>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b2db      	uxtb	r3, r3
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d007      	beq.n	8000a74 <SD_disk_initialize+0x18c>
 8000a64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a68:	2050      	movs	r0, #80	; 0x50
 8000a6a:	f7ff feeb 	bl	8000844 <SD_SendCmd>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8000a78:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <SD_disk_initialize+0x1d0>)
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8000a7e:	f7ff fd85 	bl	800058c <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8000a82:	f7ff fda9 	bl	80005d8 <SPI_RxByte>

  if (type)
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	f023 0301 	bic.w	r3, r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e001      	b.n	8000aa2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a9e:	f7ff fe2f 	bl	8000700 <SD_PowerOff>
  }

  return Stat;
 8000aa2:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <SD_disk_initialize+0x1c8>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2db      	uxtb	r3, r3
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	20000000 	.word	0x20000000
 8000ab4:	200032d9 	.word	0x200032d9
 8000ab8:	200000a8 	.word	0x200000a8

08000abc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SD_disk_status+0x14>
    return STA_NOINIT;
 8000acc:	2301      	movs	r3, #1
 8000ace:	e002      	b.n	8000ad6 <SD_disk_status+0x1a>

  return Stat;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SD_disk_status+0x28>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000

08000ae8 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d102      	bne.n	8000b04 <SD_disk_read+0x1c>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <SD_disk_read+0x20>
    return RES_PARERR;
 8000b04:	2304      	movs	r3, #4
 8000b06:	e051      	b.n	8000bac <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <SD_disk_read+0xcc>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8000b16:	2303      	movs	r3, #3
 8000b18:	e048      	b.n	8000bac <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8000b1a:	4b27      	ldr	r3, [pc, #156]	; (8000bb8 <SD_disk_read+0xd0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d102      	bne.n	8000b2c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b2c:	f7ff fd22 	bl	8000574 <SELECT>

  if (count == 1)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d111      	bne.n	8000b5a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2051      	movs	r0, #81	; 0x51
 8000b3a:	f7ff fe83 	bl	8000844 <SD_SendCmd>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d129      	bne.n	8000b98 <SD_disk_read+0xb0>
 8000b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b48:	68b8      	ldr	r0, [r7, #8]
 8000b4a:	f7ff fdf1 	bl	8000730 <SD_RxDataBlock>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d021      	beq.n	8000b98 <SD_disk_read+0xb0>
      count = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	e01e      	b.n	8000b98 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	2052      	movs	r0, #82	; 0x52
 8000b5e:	f7ff fe71 	bl	8000844 <SD_SendCmd>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d117      	bne.n	8000b98 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	68b8      	ldr	r0, [r7, #8]
 8000b6e:	f7ff fddf 	bl	8000730 <SD_RxDataBlock>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d00a      	beq.n	8000b8e <SD_disk_read+0xa6>
          break;

        buff += 512;
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b7e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1ed      	bne.n	8000b68 <SD_disk_read+0x80>
 8000b8c:	e000      	b.n	8000b90 <SD_disk_read+0xa8>
          break;
 8000b8e:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8000b90:	2100      	movs	r1, #0
 8000b92:	204c      	movs	r0, #76	; 0x4c
 8000b94:	f7ff fe56 	bl	8000844 <SD_SendCmd>
    }
  }

  DESELECT();
 8000b98:	f7ff fcf8 	bl	800058c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8000b9c:	f7ff fd1c 	bl	80005d8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf14      	ite	ne
 8000ba6:	2301      	movne	r3, #1
 8000ba8:	2300      	moveq	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3710      	adds	r7, #16
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	200000a8 	.word	0x200000a8

08000bbc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4603      	mov	r3, r0
 8000bca:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8000bcc:	7bfb      	ldrb	r3, [r7, #15]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d102      	bne.n	8000bd8 <SD_disk_write+0x1c>
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <SD_disk_write+0x20>
    return RES_PARERR;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	e06b      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8000bdc:	4b37      	ldr	r3, [pc, #220]	; (8000cbc <SD_disk_write+0x100>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SD_disk_write+0x32>
    return RES_NOTRDY;
 8000bea:	2303      	movs	r3, #3
 8000bec:	e062      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <SD_disk_write+0x100>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SD_disk_write+0x44>
    return RES_WRPRT;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	e059      	b.n	8000cb4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8000c00:	4b2f      	ldr	r3, [pc, #188]	; (8000cc0 <SD_disk_write+0x104>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	025b      	lsls	r3, r3, #9
 8000c10:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c12:	f7ff fcaf 	bl	8000574 <SELECT>

  if (count == 1)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d110      	bne.n	8000c3e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	2058      	movs	r0, #88	; 0x58
 8000c20:	f7ff fe10 	bl	8000844 <SD_SendCmd>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d13a      	bne.n	8000ca0 <SD_disk_write+0xe4>
 8000c2a:	21fe      	movs	r1, #254	; 0xfe
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f7ff fdb5 	bl	800079c <SD_TxDataBlock>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d033      	beq.n	8000ca0 <SD_disk_write+0xe4>
      count = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	e030      	b.n	8000ca0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <SD_disk_write+0x104>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d007      	beq.n	8000c5a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2077      	movs	r0, #119	; 0x77
 8000c4e:	f7ff fdf9 	bl	8000844 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c52:	6839      	ldr	r1, [r7, #0]
 8000c54:	2057      	movs	r0, #87	; 0x57
 8000c56:	f7ff fdf5 	bl	8000844 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2059      	movs	r0, #89	; 0x59
 8000c5e:	f7ff fdf1 	bl	8000844 <SD_SendCmd>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d11b      	bne.n	8000ca0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8000c68:	21fc      	movs	r1, #252	; 0xfc
 8000c6a:	68b8      	ldr	r0, [r7, #8]
 8000c6c:	f7ff fd96 	bl	800079c <SD_TxDataBlock>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d00a      	beq.n	8000c8c <SD_disk_write+0xd0>
          break;

        buff += 512;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c7c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1ee      	bne.n	8000c68 <SD_disk_write+0xac>
 8000c8a:	e000      	b.n	8000c8e <SD_disk_write+0xd2>
          break;
 8000c8c:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8000c8e:	21fd      	movs	r1, #253	; 0xfd
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff fd83 	bl	800079c <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d101      	bne.n	8000ca0 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8000ca0:	f7ff fc74 	bl	800058c <DESELECT>
  SPI_RxByte();
 8000ca4:	f7ff fc98 	bl	80005d8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	bf14      	ite	ne
 8000cae:	2301      	movne	r3, #1
 8000cb0:	2300      	moveq	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	200000a8 	.word	0x200000a8

08000cc4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b08b      	sub	sp, #44	; 0x2c
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e11b      	b.n	8000f1a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8000ce8:	79bb      	ldrb	r3, [r7, #6]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d129      	bne.n	8000d42 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d017      	beq.n	8000d26 <SD_disk_ioctl+0x62>
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	dc1f      	bgt.n	8000d3a <SD_disk_ioctl+0x76>
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <SD_disk_ioctl+0x40>
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00b      	beq.n	8000d1a <SD_disk_ioctl+0x56>
 8000d02:	e01a      	b.n	8000d3a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8000d04:	f7ff fd08 	bl	8000718 <SD_CheckPower>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8000d0e:	f7ff fcf7 	bl	8000700 <SD_PowerOff>
      res = RES_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d18:	e0fd      	b.n	8000f16 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8000d1a:	f7ff fca5 	bl	8000668 <SD_PowerOn>
      res = RES_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d24:	e0f7      	b.n	8000f16 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8000d26:	6a3b      	ldr	r3, [r7, #32]
 8000d28:	1c5c      	adds	r4, r3, #1
 8000d2a:	f7ff fcf5 	bl	8000718 <SD_CheckPower>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000d38:	e0ed      	b.n	8000f16 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d40:	e0e9      	b.n	8000f16 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8000d42:	4b78      	ldr	r3, [pc, #480]	; (8000f24 <SD_disk_ioctl+0x260>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e0e2      	b.n	8000f1a <SD_disk_ioctl+0x256>

    SELECT();
 8000d54:	f7ff fc0e 	bl	8000574 <SELECT>

    switch (ctrl)
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b0d      	cmp	r3, #13
 8000d5c:	f200 80cc 	bhi.w	8000ef8 <SD_disk_ioctl+0x234>
 8000d60:	a201      	add	r2, pc, #4	; (adr r2, 8000d68 <SD_disk_ioctl+0xa4>)
 8000d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d66:	bf00      	nop
 8000d68:	08000e63 	.word	0x08000e63
 8000d6c:	08000da1 	.word	0x08000da1
 8000d70:	08000e53 	.word	0x08000e53
 8000d74:	08000ef9 	.word	0x08000ef9
 8000d78:	08000ef9 	.word	0x08000ef9
 8000d7c:	08000ef9 	.word	0x08000ef9
 8000d80:	08000ef9 	.word	0x08000ef9
 8000d84:	08000ef9 	.word	0x08000ef9
 8000d88:	08000ef9 	.word	0x08000ef9
 8000d8c:	08000ef9 	.word	0x08000ef9
 8000d90:	08000ef9 	.word	0x08000ef9
 8000d94:	08000e75 	.word	0x08000e75
 8000d98:	08000e99 	.word	0x08000e99
 8000d9c:	08000ebd 	.word	0x08000ebd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000da0:	2100      	movs	r1, #0
 8000da2:	2049      	movs	r0, #73	; 0x49
 8000da4:	f7ff fd4e 	bl	8000844 <SD_SendCmd>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 80a8 	bne.w	8000f00 <SD_disk_ioctl+0x23c>
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2110      	movs	r1, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fcba 	bl	8000730 <SD_RxDataBlock>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 809e 	beq.w	8000f00 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 8000dc4:	7b3b      	ldrb	r3, [r7, #12]
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d10e      	bne.n	8000dec <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dce:	7d7b      	ldrb	r3, [r7, #21]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	7d3b      	ldrb	r3, [r7, #20]
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	3301      	adds	r3, #1
 8000de0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000de2:	8bfb      	ldrh	r3, [r7, #30]
 8000de4:	029a      	lsls	r2, r3, #10
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e02e      	b.n	8000e4a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dec:	7c7b      	ldrb	r3, [r7, #17]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	7dbb      	ldrb	r3, [r7, #22]
 8000df6:	09db      	lsrs	r3, r3, #7
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	7d7b      	ldrb	r3, [r7, #21]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f003 0306 	and.w	r3, r3, #6
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	4413      	add	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	3302      	adds	r3, #2
 8000e10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e14:	7d3b      	ldrb	r3, [r7, #20]
 8000e16:	099b      	lsrs	r3, r3, #6
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	4413      	add	r3, r2
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	7cbb      	ldrb	r3, [r7, #18]
 8000e2a:	029b      	lsls	r3, r3, #10
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	3301      	adds	r3, #1
 8000e3a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e3c:	8bfa      	ldrh	r2, [r7, #30]
 8000e3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e42:	3b09      	subs	r3, #9
 8000e44:	409a      	lsls	r2, r3
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8000e50:	e056      	b.n	8000f00 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e58:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e60:	e055      	b.n	8000f0e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8000e62:	f7ff fbe5 	bl	8000630 <SD_ReadyWait>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2bff      	cmp	r3, #255	; 0xff
 8000e6a:	d14b      	bne.n	8000f04 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e72:	e047      	b.n	8000f04 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e74:	2100      	movs	r1, #0
 8000e76:	2049      	movs	r0, #73	; 0x49
 8000e78:	f7ff fce4 	bl	8000844 <SD_SendCmd>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d142      	bne.n	8000f08 <SD_disk_ioctl+0x244>
 8000e82:	2110      	movs	r1, #16
 8000e84:	6a38      	ldr	r0, [r7, #32]
 8000e86:	f7ff fc53 	bl	8000730 <SD_RxDataBlock>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d03b      	beq.n	8000f08 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000e96:	e037      	b.n	8000f08 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8000e98:	2100      	movs	r1, #0
 8000e9a:	204a      	movs	r0, #74	; 0x4a
 8000e9c:	f7ff fcd2 	bl	8000844 <SD_SendCmd>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d132      	bne.n	8000f0c <SD_disk_ioctl+0x248>
 8000ea6:	2110      	movs	r1, #16
 8000ea8:	6a38      	ldr	r0, [r7, #32]
 8000eaa:	f7ff fc41 	bl	8000730 <SD_RxDataBlock>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d02b      	beq.n	8000f0c <SD_disk_ioctl+0x248>
        res = RES_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000eba:	e027      	b.n	8000f0c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	207a      	movs	r0, #122	; 0x7a
 8000ec0:	f7ff fcc0 	bl	8000844 <SD_SendCmd>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000ed0:	e00b      	b.n	8000eea <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8000ed2:	6a3c      	ldr	r4, [r7, #32]
 8000ed4:	1c63      	adds	r3, r4, #1
 8000ed6:	623b      	str	r3, [r7, #32]
 8000ed8:	f7ff fb7e 	bl	80005d8 <SPI_RxByte>
 8000edc:	4603      	mov	r3, r0
 8000ede:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000eea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9ef      	bls.n	8000ed2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8000ef8:	2304      	movs	r3, #4
 8000efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000efe:	e006      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f00:	bf00      	nop
 8000f02:	e004      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f04:	bf00      	nop
 8000f06:	e002      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f08:	bf00      	nop
 8000f0a:	e000      	b.n	8000f0e <SD_disk_ioctl+0x24a>
      break;
 8000f0c:	bf00      	nop
    }

    DESELECT();
 8000f0e:	f7ff fb3d 	bl	800058c <DESELECT>
    SPI_RxByte();
 8000f12:	f7ff fb61 	bl	80005d8 <SPI_RxByte>
  }

  return res;
 8000f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000000 	.word	0x20000000

08000f28 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8000f2e:	4b52      	ldr	r3, [pc, #328]	; (8001078 <ili9341_Init+0x150>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d115      	bne.n	8000f66 <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <ili9341_Init+0x150>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <ili9341_Init+0x150>)
 8000f46:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <ili9341_Init+0x150>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <ili9341_Init+0x30>
      LCD_IO_Init();
 8000f54:	f000 fd7c 	bl	8001a50 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8000f58:	4b47      	ldr	r3, [pc, #284]	; (8001078 <ili9341_Init+0x150>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4b45      	ldr	r3, [pc, #276]	; (8001078 <ili9341_Init+0x150>)
 8000f64:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f000 fd66 	bl	8001a38 <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f000 fd99 	bl	8001aa4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8000f72:	200a      	movs	r0, #10
 8000f74:	f000 fd60 	bl	8001a38 <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4940      	ldr	r1, [pc, #256]	; (800107c <ili9341_Init+0x154>)
 8000f7c:	20ef      	movs	r0, #239	; 0xef
 8000f7e:	f000 fdef 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 8000f82:	2203      	movs	r2, #3
 8000f84:	493e      	ldr	r1, [pc, #248]	; (8001080 <ili9341_Init+0x158>)
 8000f86:	20cf      	movs	r0, #207	; 0xcf
 8000f88:	f000 fdea 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8000f8c:	2204      	movs	r2, #4
 8000f8e:	493d      	ldr	r1, [pc, #244]	; (8001084 <ili9341_Init+0x15c>)
 8000f90:	20ed      	movs	r0, #237	; 0xed
 8000f92:	f000 fde5 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 8000f96:	2203      	movs	r2, #3
 8000f98:	493b      	ldr	r1, [pc, #236]	; (8001088 <ili9341_Init+0x160>)
 8000f9a:	20e8      	movs	r0, #232	; 0xe8
 8000f9c:	f000 fde0 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	493a      	ldr	r1, [pc, #232]	; (800108c <ili9341_Init+0x164>)
 8000fa4:	20cb      	movs	r0, #203	; 0xcb
 8000fa6:	f000 fddb 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	4938      	ldr	r1, [pc, #224]	; (8001090 <ili9341_Init+0x168>)
 8000fae:	20f7      	movs	r0, #247	; 0xf7
 8000fb0:	f000 fdd6 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4937      	ldr	r1, [pc, #220]	; (8001094 <ili9341_Init+0x16c>)
 8000fb8:	20ea      	movs	r0, #234	; 0xea
 8000fba:	f000 fdd1 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4935      	ldr	r1, [pc, #212]	; (8001098 <ili9341_Init+0x170>)
 8000fc2:	20c0      	movs	r0, #192	; 0xc0
 8000fc4:	f000 fdcc 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4934      	ldr	r1, [pc, #208]	; (800109c <ili9341_Init+0x174>)
 8000fcc:	20c1      	movs	r0, #193	; 0xc1
 8000fce:	f000 fdc7 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	4932      	ldr	r1, [pc, #200]	; (80010a0 <ili9341_Init+0x178>)
 8000fd6:	20c5      	movs	r0, #197	; 0xc5
 8000fd8:	f000 fdc2 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4931      	ldr	r1, [pc, #196]	; (80010a4 <ili9341_Init+0x17c>)
 8000fe0:	20c7      	movs	r0, #199	; 0xc7
 8000fe2:	f000 fdbd 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	492f      	ldr	r1, [pc, #188]	; (80010a8 <ili9341_Init+0x180>)
 8000fea:	2037      	movs	r0, #55	; 0x37
 8000fec:	f000 fdb8 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	492e      	ldr	r1, [pc, #184]	; (80010ac <ili9341_Init+0x184>)
 8000ff4:	203a      	movs	r0, #58	; 0x3a
 8000ff6:	f000 fdb3 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	492c      	ldr	r1, [pc, #176]	; (80010b0 <ili9341_Init+0x188>)
 8000ffe:	20b1      	movs	r0, #177	; 0xb1
 8001000:	f000 fdae 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 8001004:	2203      	movs	r2, #3
 8001006:	492b      	ldr	r1, [pc, #172]	; (80010b4 <ili9341_Init+0x18c>)
 8001008:	20b6      	movs	r0, #182	; 0xb6
 800100a:	f000 fda9 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 800100e:	2201      	movs	r2, #1
 8001010:	4925      	ldr	r1, [pc, #148]	; (80010a8 <ili9341_Init+0x180>)
 8001012:	20f2      	movs	r0, #242	; 0xf2
 8001014:	f000 fda4 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 8001018:	2201      	movs	r2, #1
 800101a:	4927      	ldr	r1, [pc, #156]	; (80010b8 <ili9341_Init+0x190>)
 800101c:	2026      	movs	r0, #38	; 0x26
 800101e:	f000 fd9f 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 8001022:	220f      	movs	r2, #15
 8001024:	4925      	ldr	r1, [pc, #148]	; (80010bc <ili9341_Init+0x194>)
 8001026:	20e0      	movs	r0, #224	; 0xe0
 8001028:	f000 fd9a 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 800102c:	220f      	movs	r2, #15
 800102e:	4924      	ldr	r1, [pc, #144]	; (80010c0 <ili9341_Init+0x198>)
 8001030:	20e1      	movs	r0, #225	; 0xe1
 8001032:	f000 fd95 	bl	8001b60 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8001036:	2036      	movs	r0, #54	; 0x36
 8001038:	f000 fd34 	bl	8001aa4 <LCD_IO_WriteCmd8>
 800103c:	2028      	movs	r0, #40	; 0x28
 800103e:	f000 fd41 	bl	8001ac4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8001042:	2011      	movs	r0, #17
 8001044:	f000 fd2e 	bl	8001aa4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8001048:	200a      	movs	r0, #10
 800104a:	f000 fcf5 	bl	8001a38 <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, COLOR_BLUE);
 800104e:	231f      	movs	r3, #31
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	23f0      	movs	r3, #240	; 0xf0
 8001054:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001058:	2100      	movs	r1, #0
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f8e4 	bl	8001228 <ili9341_FillRect>
  LCD_Delay(10);
 8001060:	200a      	movs	r0, #10
 8001062:	f000 fce9 	bl	8001a38 <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8001066:	2029      	movs	r0, #41	; 0x29
 8001068:	f000 fd1c 	bl	8001aa4 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800106c:	200a      	movs	r0, #10
 800106e:	f000 fce3 	bl	8001a38 <LCD_Delay>
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000b2 	.word	0x200000b2
 800107c:	080086b4 	.word	0x080086b4
 8001080:	080086b8 	.word	0x080086b8
 8001084:	080086bc 	.word	0x080086bc
 8001088:	080086c4 	.word	0x080086c4
 800108c:	080086c8 	.word	0x080086c8
 8001090:	080086d0 	.word	0x080086d0
 8001094:	080086d4 	.word	0x080086d4
 8001098:	080086d8 	.word	0x080086d8
 800109c:	080086dc 	.word	0x080086dc
 80010a0:	080086e0 	.word	0x080086e0
 80010a4:	080086e4 	.word	0x080086e4
 80010a8:	080086e8 	.word	0x080086e8
 80010ac:	080086ec 	.word	0x080086ec
 80010b0:	080086f0 	.word	0x080086f0
 80010b4:	080086f4 	.word	0x080086f4
 80010b8:	080086f8 	.word	0x080086f8
 80010bc:	080086fc 	.word	0x080086fc
 80010c0:	0800870c 	.word	0x0800870c

080010c4 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
 80010ce:	460b      	mov	r3, r1
 80010d0:	80bb      	strh	r3, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 80010d6:	202a      	movs	r0, #42	; 0x2a
 80010d8:	f000 fce4 	bl	8001aa4 <LCD_IO_WriteCmd8>
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 fced 	bl	8001ac4 <LCD_IO_WriteData8>
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fce8 	bl	8001ac4 <LCD_IO_WriteData8>
 80010f4:	88fb      	ldrh	r3, [r7, #6]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fce1 	bl	8001ac4 <LCD_IO_WriteData8>
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fcdc 	bl	8001ac4 <LCD_IO_WriteData8>
 800110c:	202b      	movs	r0, #43	; 0x2b
 800110e:	f000 fcc9 	bl	8001aa4 <LCD_IO_WriteCmd8>
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b29b      	uxth	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 fcd2 	bl	8001ac4 <LCD_IO_WriteData8>
 8001120:	88bb      	ldrh	r3, [r7, #4]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fccd 	bl	8001ac4 <LCD_IO_WriteData8>
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	b29b      	uxth	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 fcc6 	bl	8001ac4 <LCD_IO_WriteData8>
 8001138:	88bb      	ldrh	r3, [r7, #4]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fcc1 	bl	8001ac4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8001142:	202c      	movs	r0, #44	; 0x2c
 8001144:	f000 fcae 	bl	8001aa4 <LCD_IO_WriteCmd8>
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 fcca 	bl	8001ae4 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4604      	mov	r4, r0
 8001160:	4608      	mov	r0, r1
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	4623      	mov	r3, r4
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4603      	mov	r3, r0
 800116c:	80bb      	strh	r3, [r7, #4]
 800116e:	460b      	mov	r3, r1
 8001170:	807b      	strh	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <ili9341_SetDisplayWindow+0xc8>)
 8001178:	88bb      	ldrh	r3, [r7, #4]
 800117a:	8013      	strh	r3, [r2, #0]
 800117c:	88ba      	ldrh	r2, [r7, #4]
 800117e:	883b      	ldrh	r3, [r7, #0]
 8001180:	4413      	add	r3, r2
 8001182:	b29b      	uxth	r3, r3
 8001184:	3b01      	subs	r3, #1
 8001186:	b29a      	uxth	r2, r3
 8001188:	4b26      	ldr	r3, [pc, #152]	; (8001224 <ili9341_SetDisplayWindow+0xcc>)
 800118a:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 800118c:	202a      	movs	r0, #42	; 0x2a
 800118e:	f000 fc89 	bl	8001aa4 <LCD_IO_WriteCmd8>
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fc92 	bl	8001ac4 <LCD_IO_WriteData8>
 80011a0:	88fb      	ldrh	r3, [r7, #6]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fc8d 	bl	8001ac4 <LCD_IO_WriteData8>
 80011aa:	88fa      	ldrh	r2, [r7, #6]
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	4413      	add	r3, r2
 80011b0:	3b01      	subs	r3, #1
 80011b2:	121b      	asrs	r3, r3, #8
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fc84 	bl	8001ac4 <LCD_IO_WriteData8>
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	887b      	ldrh	r3, [r7, #2]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4413      	add	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	3b01      	subs	r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 fc79 	bl	8001ac4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 80011d2:	202b      	movs	r0, #43	; 0x2b
 80011d4:	f000 fc66 	bl	8001aa4 <LCD_IO_WriteCmd8>
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fc6f 	bl	8001ac4 <LCD_IO_WriteData8>
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 fc6a 	bl	8001ac4 <LCD_IO_WriteData8>
 80011f0:	88ba      	ldrh	r2, [r7, #4]
 80011f2:	883b      	ldrh	r3, [r7, #0]
 80011f4:	4413      	add	r3, r2
 80011f6:	3b01      	subs	r3, #1
 80011f8:	121b      	asrs	r3, r3, #8
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 fc61 	bl	8001ac4 <LCD_IO_WriteData8>
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	883b      	ldrh	r3, [r7, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	4413      	add	r3, r2
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3b01      	subs	r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fc56 	bl	8001ac4 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	bd90      	pop	{r4, r7, pc}
 8001220:	200000b4 	.word	0x200000b4
 8001224:	200000b6 	.word	0x200000b6

08001228 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	4623      	mov	r3, r4
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	4603      	mov	r3, r0
 800123c:	80bb      	strh	r3, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
 8001242:	4613      	mov	r3, r2
 8001244:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8001246:	202a      	movs	r0, #42	; 0x2a
 8001248:	f000 fc2c 	bl	8001aa4 <LCD_IO_WriteCmd8>
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	f000 fc35 	bl	8001ac4 <LCD_IO_WriteData8>
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fc30 	bl	8001ac4 <LCD_IO_WriteData8>
 8001264:	88fa      	ldrh	r2, [r7, #6]
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	4413      	add	r3, r2
 800126a:	3b01      	subs	r3, #1
 800126c:	121b      	asrs	r3, r3, #8
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fc27 	bl	8001ac4 <LCD_IO_WriteData8>
 8001276:	88fb      	ldrh	r3, [r7, #6]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	b2db      	uxtb	r3, r3
 8001282:	3b01      	subs	r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fc1c 	bl	8001ac4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800128c:	202b      	movs	r0, #43	; 0x2b
 800128e:	f000 fc09 	bl	8001aa4 <LCD_IO_WriteCmd8>
 8001292:	88bb      	ldrh	r3, [r7, #4]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	b29b      	uxth	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fc12 	bl	8001ac4 <LCD_IO_WriteData8>
 80012a0:	88bb      	ldrh	r3, [r7, #4]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 fc0d 	bl	8001ac4 <LCD_IO_WriteData8>
 80012aa:	88ba      	ldrh	r2, [r7, #4]
 80012ac:	883b      	ldrh	r3, [r7, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	3b01      	subs	r3, #1
 80012b2:	121b      	asrs	r3, r3, #8
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fc04 	bl	8001ac4 <LCD_IO_WriteData8>
 80012bc:	88bb      	ldrh	r3, [r7, #4]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	883b      	ldrh	r3, [r7, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	4413      	add	r3, r2
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	3b01      	subs	r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fbf9 	bl	8001ac4 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	883a      	ldrh	r2, [r7, #0]
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	8b3b      	ldrh	r3, [r7, #24]
 80012de:	4619      	mov	r1, r3
 80012e0:	202c      	movs	r0, #44	; 0x2c
 80012e2:	f000 fc17 	bl	8001b14 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
	...

080012f0 <setCursor>:
  *Y = ty;
}
#endif // #if ILI9341_TOUCH == 1

void setCursor(int16_t x, int16_t y)
{ cursor_x = x; cursor_y = y; }
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80bb      	strh	r3, [r7, #4]
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2da      	uxtb	r2, r3
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <setCursor+0x2c>)
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <setCursor+0x30>)
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	200000b1 	.word	0x200000b1
 8001320:	200000b0 	.word	0x200000b0

08001324 <drawChar>:

void drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08b      	sub	sp, #44	; 0x2c
 8001328:	af02      	add	r7, sp, #8
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4623      	mov	r3, r4
 8001334:	80fb      	strh	r3, [r7, #6]
 8001336:	4603      	mov	r3, r0
 8001338:	80bb      	strh	r3, [r7, #4]
 800133a:	460b      	mov	r3, r1
 800133c:	70fb      	strb	r3, [r7, #3]
 800133e:	4613      	mov	r3, r2
 8001340:	803b      	strh	r3, [r7, #0]

        // Character is assumed previously filtered by write() to eliminate
        // newlines, returns, non-printable characters, etc.  Calling
        // drawChar() directly with 'bad' characters of font may cause mayhem!

        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 8001342:	4b54      	ldr	r3, [pc, #336]	; (8001494 <drawChar+0x170>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	3308      	adds	r3, #8
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	78fa      	ldrb	r2, [r7, #3]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	70fb      	strb	r3, [r7, #3]
        GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	00da      	lsls	r2, r3, #3
 8001354:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <drawChar+0x170>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3304      	adds	r3, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4413      	add	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 8001360:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <drawChar+0x170>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	60fb      	str	r3, [r7, #12]

        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	83fb      	strh	r3, [r7, #30]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	789b      	ldrb	r3, [r3, #2]
 8001372:	72fb      	strb	r3, [r7, #11]
                 h  = pgm_read_byte(&glyph->height);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	72bb      	strb	r3, [r7, #10]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	3305      	adds	r3, #5
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	727b      	strb	r3, [r7, #9]
                 yo = pgm_read_byte(&glyph->yOffset);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	3306      	adds	r3, #6
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	723b      	strb	r3, [r7, #8]
        uint8_t  xx, yy, bits = 0, bit = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	76fb      	strb	r3, [r7, #27]
 800138e:	2300      	movs	r3, #0
 8001390:	76bb      	strb	r3, [r7, #26]
        int16_t  xo16 = 0, yo16 = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	833b      	strh	r3, [r7, #24]
 8001396:	2300      	movs	r3, #0
 8001398:	82fb      	strh	r3, [r7, #22]

        if(size > 1) {
 800139a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d905      	bls.n	80013ae <drawChar+0x8a>
            xo16 = xo;
 80013a2:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80013a6:	833b      	strh	r3, [r7, #24]
            yo16 = yo;
 80013a8:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80013ac:	82fb      	strh	r3, [r7, #22]
        }

        for(yy=0; yy<h; yy++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	773b      	strb	r3, [r7, #28]
 80013b2:	e066      	b.n	8001482 <drawChar+0x15e>
            for(xx=0; xx<w; xx++) {
 80013b4:	2300      	movs	r3, #0
 80013b6:	777b      	strb	r3, [r7, #29]
 80013b8:	e05c      	b.n	8001474 <drawChar+0x150>
                if(!(bit++ & 7)) {
 80013ba:	7ebb      	ldrb	r3, [r7, #26]
 80013bc:	1c5a      	adds	r2, r3, #1
 80013be:	76ba      	strb	r2, [r7, #26]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d107      	bne.n	80013d8 <drawChar+0xb4>
                    bits = pgm_read_byte(&bitmap[bo++]);
 80013c8:	8bfb      	ldrh	r3, [r7, #30]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	83fa      	strh	r2, [r7, #30]
 80013ce:	461a      	mov	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	76fb      	strb	r3, [r7, #27]
                }
                if(bits & 0x80) {
 80013d8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da43      	bge.n	8001468 <drawChar+0x144>
                    if(size == 1) {
 80013e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d118      	bne.n	800141a <drawChar+0xf6>
                        ili9341_WritePixel(x+xo+xx, y+yo+yy, color);
 80013e8:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4413      	add	r3, r2
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	7f7b      	ldrb	r3, [r7, #29]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	b298      	uxth	r0, r3
 80013fc:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001400:	b29a      	uxth	r2, r3
 8001402:	88bb      	ldrh	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	b29a      	uxth	r2, r3
 8001408:	7f3b      	ldrb	r3, [r7, #28]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4413      	add	r3, r2
 800140e:	b29b      	uxth	r3, r3
 8001410:	883a      	ldrh	r2, [r7, #0]
 8001412:	4619      	mov	r1, r3
 8001414:	f7ff fe56 	bl	80010c4 <ili9341_WritePixel>
 8001418:	e026      	b.n	8001468 <drawChar+0x144>
                    } else {
                    	ili9341_FillRect(x+(xo16+xx)*size, y+(yo16+yy)*size,
 800141a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800141e:	7f7b      	ldrb	r3, [r7, #29]
 8001420:	4413      	add	r3, r2
 8001422:	b29a      	uxth	r2, r3
 8001424:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001428:	b29b      	uxth	r3, r3
 800142a:	fb12 f303 	smulbb	r3, r2, r3
 800142e:	b29a      	uxth	r2, r3
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4413      	add	r3, r2
 8001434:	b298      	uxth	r0, r3
 8001436:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800143a:	7f3b      	ldrb	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	b29a      	uxth	r2, r3
 8001440:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001444:	b29b      	uxth	r3, r3
 8001446:	fb12 f303 	smulbb	r3, r2, r3
 800144a:	b29a      	uxth	r2, r3
 800144c:	88bb      	ldrh	r3, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	b299      	uxth	r1, r3
 8001452:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001456:	b29a      	uxth	r2, r3
 8001458:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800145c:	b29c      	uxth	r4, r3
 800145e:	883b      	ldrh	r3, [r7, #0]
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	f7ff fee0 	bl	8001228 <ili9341_FillRect>
                          size, size, color);
                    }
                }
                bits <<= 1;
 8001468:	7efb      	ldrb	r3, [r7, #27]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	76fb      	strb	r3, [r7, #27]
            for(xx=0; xx<w; xx++) {
 800146e:	7f7b      	ldrb	r3, [r7, #29]
 8001470:	3301      	adds	r3, #1
 8001472:	777b      	strb	r3, [r7, #29]
 8001474:	7f7a      	ldrb	r2, [r7, #29]
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	429a      	cmp	r2, r3
 800147a:	d39e      	bcc.n	80013ba <drawChar+0x96>
        for(yy=0; yy<h; yy++) {
 800147c:	7f3b      	ldrb	r3, [r7, #28]
 800147e:	3301      	adds	r3, #1
 8001480:	773b      	strb	r3, [r7, #28]
 8001482:	7f3a      	ldrb	r2, [r7, #28]
 8001484:	7abb      	ldrb	r3, [r7, #10]
 8001486:	429a      	cmp	r2, r3
 8001488:	d394      	bcc.n	80013b4 <drawChar+0x90>
            }
        }

    } // End classic vs custom font
}
 800148a:	bf00      	nop
 800148c:	bf00      	nop
 800148e:	3724      	adds	r7, #36	; 0x24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	200000ac 	.word	0x200000ac

08001498 <write>:
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t write(uint8_t c)
{
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af02      	add	r7, sp, #8
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
	{

        if(c == '\n') {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	d112      	bne.n	80014ce <write+0x36>
            cursor_x  = 0;
 80014a8:	4b45      	ldr	r3, [pc, #276]	; (80015c0 <write+0x128>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80014ae:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <write+0x12c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	330a      	adds	r3, #10
 80014b4:	781a      	ldrb	r2, [r3, #0]
            cursor_y += (int16_t)textsize *
 80014b6:	4b44      	ldr	r3, [pc, #272]	; (80015c8 <write+0x130>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	fb12 f303 	smulbb	r3, r2, r3
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <write+0x134>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <write+0x134>)
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	e073      	b.n	80015b6 <write+0x11e>
        } else if(c != '\r') {
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b0d      	cmp	r3, #13
 80014d2:	d070      	beq.n	80015b6 <write+0x11e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 80014d4:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <write+0x12c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	7a1b      	ldrb	r3, [r3, #8]
 80014da:	75fb      	strb	r3, [r7, #23]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	7dfb      	ldrb	r3, [r7, #23]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d368      	bcc.n	80015b6 <write+0x11e>
 80014e4:	4b37      	ldr	r3, [pc, #220]	; (80015c4 <write+0x12c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	3309      	adds	r3, #9
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d861      	bhi.n	80015b6 <write+0x11e>
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
                  &gfxFont->glyph))[c - first]);
 80014f2:	79fa      	ldrb	r2, [r7, #7]
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	00da      	lsls	r2, r3, #3
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 80014fa:	4b32      	ldr	r3, [pc, #200]	; (80015c4 <write+0x12c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	3304      	adds	r3, #4
                  &gfxFont->glyph))[c - first]);
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
                GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(
 8001504:	613b      	str	r3, [r7, #16]
                uint8_t   w     = pgm_read_byte(&glyph->width),
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	789b      	ldrb	r3, [r3, #2]
 800150a:	73fb      	strb	r3, [r7, #15]
                          h     = pgm_read_byte(&glyph->height);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	78db      	ldrb	r3, [r3, #3]
 8001510:	73bb      	strb	r3, [r7, #14]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d040      	beq.n	800159a <write+0x102>
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d03d      	beq.n	800159a <write+0x102>
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	3305      	adds	r3, #5
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b25b      	sxtb	r3, r3
 8001526:	81bb      	strh	r3, [r7, #12]
                    if(wrap && ((cursor_x + textsize * (xo + w)) > ILI9341_SIZE_X)) {
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <write+0x138>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d021      	beq.n	8001574 <write+0xdc>
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <write+0x128>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <write+0x130>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001540:	7bfb      	ldrb	r3, [r7, #15]
 8001542:	4413      	add	r3, r2
 8001544:	fb00 f303 	mul.w	r3, r0, r3
 8001548:	440b      	add	r3, r1
 800154a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800154e:	dd11      	ble.n	8001574 <write+0xdc>
                        cursor_x  = 0;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <write+0x128>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 8001556:	4b1b      	ldr	r3, [pc, #108]	; (80015c4 <write+0x12c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	330a      	adds	r3, #10
 800155c:	781a      	ldrb	r2, [r3, #0]
                        cursor_y += (int16_t)textsize *
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <write+0x130>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	fb12 f303 	smulbb	r3, r2, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <write+0x134>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	b2da      	uxtb	r2, r3
 8001570:	4b16      	ldr	r3, [pc, #88]	; (80015cc <write+0x134>)
 8001572:	701a      	strb	r2, [r3, #0]
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <write+0x128>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b218      	sxth	r0, r3
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <write+0x134>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b219      	sxth	r1, r3
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <write+0x13c>)
 8001582:	881d      	ldrh	r5, [r3, #0]
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <write+0x140>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <write+0x130>)
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	79fc      	ldrb	r4, [r7, #7]
 800158e:	9201      	str	r2, [sp, #4]
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	462b      	mov	r3, r5
 8001594:	4622      	mov	r2, r4
 8001596:	f7ff fec5 	bl	8001324 <drawChar>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	3304      	adds	r3, #4
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <write+0x130>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	fb12 f303 	smulbb	r3, r2, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <write+0x128>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4b03      	ldr	r3, [pc, #12]	; (80015c0 <write+0x128>)
 80015b4:	701a      	strb	r2, [r3, #0]
            }
        }

    }
    return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bdb0      	pop	{r4, r5, r7, pc}
 80015c0:	200000b1 	.word	0x200000b1
 80015c4:	200000ac 	.word	0x200000ac
 80015c8:	20000001 	.word	0x20000001
 80015cc:	200000b0 	.word	0x200000b0
 80015d0:	20000006 	.word	0x20000006
 80015d4:	20000002 	.word	0x20000002
 80015d8:	20000004 	.word	0x20000004

080015dc <setFont>:
/*!
    @brief Set the font to display when print()ing, either custom or default
    @param  f  The GFXfont object, if NULL use built in 6x8 font
*/
/**************************************************************************/
void setFont(const GFXfont *f) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    if(f) {            // Font struct pointer passed in?
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00a      	beq.n	8001600 <setFont+0x24>
        if(!gfxFont) { // And no current font struct?
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <setFont+0x4c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d110      	bne.n	8001614 <setFont+0x38>
            // Switching from classic to new font behavior.
            // Move cursor pos down 6 pixels so it's on baseline.
            cursor_y += 6;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <setFont+0x50>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3306      	adds	r3, #6
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <setFont+0x50>)
 80015fc:	701a      	strb	r2, [r3, #0]
 80015fe:	e009      	b.n	8001614 <setFont+0x38>
        }
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <setFont+0x4c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <setFont+0x38>
        // Switching from new to classic font behavior.
        // Move cursor pos up 6 pixels so it's at top-left of char.
        cursor_y -= 6;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <setFont+0x50>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3b06      	subs	r3, #6
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <setFont+0x50>)
 8001612:	701a      	strb	r2, [r3, #0]
    }
    gfxFont = (GFXfont *)f;
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <setFont+0x4c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	200000ac 	.word	0x200000ac
 800162c:	200000b0 	.word	0x200000b0

08001630 <ili9341_Printnewtstr>:
    @param	txtsize	The size of de text
    @param	str	A point to the string
*/
/**************************************************************************/
void ili9341_Printnewtstr (int row, uint16_t txtcolor, const GFXfont *f, uint8_t txtsize, uint8_t *str)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	461a      	mov	r2, r3
 800163c:	460b      	mov	r3, r1
 800163e:	817b      	strh	r3, [r7, #10]
 8001640:	4613      	mov	r3, r2
 8001642:	727b      	strb	r3, [r7, #9]
	setFont(f);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffc9 	bl	80015dc <setFont>
	textcolor = txtcolor;
 800164a:	4a11      	ldr	r2, [pc, #68]	; (8001690 <ili9341_Printnewtstr+0x60>)
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	8013      	strh	r3, [r2, #0]
	textsize = (txtsize > 0) ? txtsize : 1;
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <ili9341_Printnewtstr+0x2a>
 8001656:	7a7b      	ldrb	r3, [r7, #9]
 8001658:	e000      	b.n	800165c <ili9341_Printnewtstr+0x2c>
 800165a:	2301      	movs	r3, #1
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <ili9341_Printnewtstr+0x64>)
 800165e:	7013      	strb	r3, [r2, #0]
	setCursor(0, row);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	2000      	movs	r0, #0
 8001668:	f7ff fe42 	bl	80012f0 <setCursor>
	//while (*str) write (*str++);
	while (*str) write(*str++);
 800166c:	e006      	b.n	800167c <ili9341_Printnewtstr+0x4c>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	61ba      	str	r2, [r7, #24]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff0e 	bl	8001498 <write>
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f4      	bne.n	800166e <ili9341_Printnewtstr+0x3e>
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000002 	.word	0x20000002
 8001694:	20000001 	.word	0x20000001

08001698 <desenhaPixel>:
}

/****************** Integração com câmera ***********************/
//Testado com LCF TFT ILI9340
void desenhaPixel(uint16_t pixel)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	80fb      	strh	r3, [r7, #6]
	LCD_IO_WriteData16(pixel);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fa1d 	bl	8001ae4 <LCD_IO_WriteData16>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <inicioDados>:


void inicioDados(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0
	//CS_ACTIVE;
	LCD_IO_WriteCmd8(0x2C);
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f000 f9f4 	bl	8001aa4 <LCD_IO_WriteCmd8>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <fimDados>:


void fimDados(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
	//CS_IDLE;
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <LCD_TxBMP>:

void LCD_TxBMP(unsigned char *data, unsigned int BitmapStart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08e      	sub	sp, #56	; 0x38
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
    static unsigned int tamanho = 0;
    static unsigned char sobrou[3] = {0, 0, 0};
    unsigned int i = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
    unsigned int setor = 512;
 80016de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    unsigned short int cor;
    unsigned char tam[11];
    // Leandro (22/09/2020) - Ajuste para ler imagens com dimensões maiores que um byte (320x240)
    //  unsigned char altura, x = 0, y = 127, bits_por_pixel;
    unsigned char bits_por_pixel;
    unsigned int altura, x = 0, y = 239; // Formato "paisagem"
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e8:	23ef      	movs	r3, #239	; 0xef
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
    //unsigned int altura, x = 0, y = 319; //Formato "retrato"
    const unsigned int lim_altura = 240, lim_largura = 320; // Formato "paisagem" - enviar comando setRotation(1);
 80016ec:	23f0      	movs	r3, #240	; 0xf0
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016f4:	61fb      	str	r3, [r7, #28]
    //const unsigned int lim_altura = 320, lim_largura = 240; //Formato "retrato" - enviar comando setRotation(0);
    // static unsigned char largura = 0, erro_bits = 0, bytes_extras = 0, pixels_por_linha = 0;
    static unsigned int largura = 0, pixels_por_linha = 0;
    static unsigned char erro_bits = 0, bytes_extras = 0;
    // Se é o primeiro setor do arquivo, possui o cabeçalho
    if (BitmapStart)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d07f      	beq.n	80017fc <LCD_TxBMP+0x12c>
    {
        BitmapStart = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	603b      	str	r3, [r7, #0]
        // Reseta variável estática
        pixels_por_linha = 0;
 8001700:	4b8e      	ldr	r3, [pc, #568]	; (800193c <LCD_TxBMP+0x26c>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
        // Pula o cabeçalho
        i = 54;
 8001706:	2336      	movs	r3, #54	; 0x36
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
        // Lê o tamanho da área de dados do arquivo em bytes
        tamanho = data[0x22] + (unsigned int)(data[0x23] << 8) + (unsigned int)(data[0x24] << 16) + (unsigned int)(data[0x25] << 24);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3322      	adds	r3, #34	; 0x22
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3323      	adds	r3, #35	; 0x23
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	4413      	add	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	3224      	adds	r2, #36	; 0x24
 8001720:	7812      	ldrb	r2, [r2, #0]
 8001722:	0412      	lsls	r2, r2, #16
 8001724:	4413      	add	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	3225      	adds	r2, #37	; 0x25
 800172a:	7812      	ldrb	r2, [r2, #0]
 800172c:	0612      	lsls	r2, r2, #24
 800172e:	4413      	add	r3, r2
 8001730:	4a83      	ldr	r2, [pc, #524]	; (8001940 <LCD_TxBMP+0x270>)
 8001732:	6013      	str	r3, [r2, #0]
        // Leandro (22/09/2020) - Ajuste para ler imagens com dimensões maiores que um byte (320x240)
        //  //Leandro (01/09/2019) - Lê a largura e a altura da imagem para definir o tamanho da janela
        //  largura = data[18];
        //  altura = data[22];
        largura = data[18] + (unsigned int)(data[19] << 8);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3312      	adds	r3, #18
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3313      	adds	r3, #19
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4413      	add	r3, r2
 8001746:	4a7f      	ldr	r2, [pc, #508]	; (8001944 <LCD_TxBMP+0x274>)
 8001748:	6013      	str	r3, [r2, #0]
        altura = data[22] + (unsigned int)(data[23] << 8);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3316      	adds	r3, #22
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3317      	adds	r3, #23
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	4413      	add	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        // Configura a janela
        //setAddrWindow(x, y - altura + 1, x + largura - 1, y);
        ili9341_SetDisplayWindow(x, y - altura + 1, x + largura - 1, y);
 800175e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001760:	b298      	uxth	r0, r3
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	b29a      	uxth	r2, r3
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	b29b      	uxth	r3, r3
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b29b      	uxth	r3, r3
 800176e:	3301      	adds	r3, #1
 8001770:	b299      	uxth	r1, r3
 8001772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001774:	b29a      	uxth	r2, r3
 8001776:	4b73      	ldr	r3, [pc, #460]	; (8001944 <LCD_TxBMP+0x274>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	b29b      	uxth	r3, r3
 8001788:	f7ff fce6 	bl	8001158 <ili9341_SetDisplayWindow>
        // Envia para o LCD sinalização de início de envio de dados
        inicioDados();
 800178c:	f7ff ff91 	bl	80016b2 <inicioDados>
        // Verifica se existirão bytes extras no arquivo em função da largura da imagem
        // Obervação: Existe uma restrição de que cada linha deva ter N bytes, sendo N um número
        // divisível por 4. Caso contrário, o BMP deve ser preenchido com bytes não válidos. Por
        // exemplo, se a imagem tem 1 x 100 pixels em 24 bits/pixel, o BMP teria 3 bytes válidos em
        // cada linha e mais 1 byte que não tem qualquer significado.
        switch ((largura * 3) % 4)
 8001790:	4b6c      	ldr	r3, [pc, #432]	; (8001944 <LCD_TxBMP+0x274>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d00e      	beq.n	80017c0 <LCD_TxBMP+0xf0>
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d810      	bhi.n	80017c8 <LCD_TxBMP+0xf8>
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d002      	beq.n	80017b0 <LCD_TxBMP+0xe0>
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d004      	beq.n	80017b8 <LCD_TxBMP+0xe8>
 80017ae:	e00b      	b.n	80017c8 <LCD_TxBMP+0xf8>
        {
        case 1:
            bytes_extras = 3;
 80017b0:	4b65      	ldr	r3, [pc, #404]	; (8001948 <LCD_TxBMP+0x278>)
 80017b2:	2203      	movs	r2, #3
 80017b4:	701a      	strb	r2, [r3, #0]
            break;
 80017b6:	e00b      	b.n	80017d0 <LCD_TxBMP+0x100>
        case 2:
            bytes_extras = 2;
 80017b8:	4b63      	ldr	r3, [pc, #396]	; (8001948 <LCD_TxBMP+0x278>)
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
            break;
 80017be:	e007      	b.n	80017d0 <LCD_TxBMP+0x100>
        case 3:
            bytes_extras = 1;
 80017c0:	4b61      	ldr	r3, [pc, #388]	; (8001948 <LCD_TxBMP+0x278>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	701a      	strb	r2, [r3, #0]
            break;
 80017c6:	e003      	b.n	80017d0 <LCD_TxBMP+0x100>
        default:
            bytes_extras = 0;
 80017c8:	4b5f      	ldr	r3, [pc, #380]	; (8001948 <LCD_TxBMP+0x278>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
            break;
 80017ce:	bf00      	nop
        }
        // Lê a quantidade de bits por pixel (neste caso é aceito apenas 24 bits por pixel)
        bits_por_pixel = data[28];
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7f1b      	ldrb	r3, [r3, #28]
 80017d4:	75fb      	strb	r3, [r7, #23]
        // Testa a quatidade de bits
        // Leandro (22/09/2020) - Ajuste para ler imagens com dimensões maiores que um byte (320x240)
        //  if((bits_por_pixel != 24) || (largura > 128) || (altura > 128))
        if ((bits_por_pixel != 24) || (largura > lim_largura) || (altura > lim_altura))
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b18      	cmp	r3, #24
 80017da:	d108      	bne.n	80017ee <LCD_TxBMP+0x11e>
 80017dc:	4b59      	ldr	r3, [pc, #356]	; (8001944 <LCD_TxBMP+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d303      	bcc.n	80017ee <LCD_TxBMP+0x11e>
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d903      	bls.n	80017f6 <LCD_TxBMP+0x126>
            erro_bits = 1;
 80017ee:	4b57      	ldr	r3, [pc, #348]	; (800194c <LCD_TxBMP+0x27c>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
 80017f4:	e002      	b.n	80017fc <LCD_TxBMP+0x12c>
        else
            erro_bits = 0;
 80017f6:	4b55      	ldr	r3, [pc, #340]	; (800194c <LCD_TxBMP+0x27c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
    }
    // Se houver erro na quantidade de bits retorna e não envia para o LCD
    if (erro_bits)
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <LCD_TxBMP+0x27c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	f040 810f 	bne.w	8001a24 <LCD_TxBMP+0x354>
    {
        return;
    }
    // Envia os pixels enquanto não acabar o setor ou o Bitmap
    while ((i <= (512 - 3)) && (tamanho >= 3)) // 24 bits por pixels
 8001806:	e0e3      	b.n	80019d0 <LCD_TxBMP+0x300>
    {
        // Se completou uma linha
        if (pixels_por_linha == largura)
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <LCD_TxBMP+0x26c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <LCD_TxBMP+0x274>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d138      	bne.n	8001886 <LCD_TxBMP+0x1b6>
        {
            // Zera o contador
            pixels_por_linha = 0;
 8001814:	4b49      	ldr	r3, [pc, #292]	; (800193c <LCD_TxBMP+0x26c>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
            // Verifica se tem bytes nulos para ignorar
            if (bytes_extras >= sobrou[0])
 800181a:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <LCD_TxBMP+0x280>)
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <LCD_TxBMP+0x278>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d822      	bhi.n	800186c <LCD_TxBMP+0x19c>
            {
                // Desconta os bytes_extras-sobrou[0] do tamanho do setor
                tamanho -= (bytes_extras - sobrou[0]);
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <LCD_TxBMP+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <LCD_TxBMP+0x278>)
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	4611      	mov	r1, r2
 8001830:	4a47      	ldr	r2, [pc, #284]	; (8001950 <LCD_TxBMP+0x280>)
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	1a8a      	subs	r2, r1, r2
 8001836:	1a9b      	subs	r3, r3, r2
 8001838:	4a41      	ldr	r2, [pc, #260]	; (8001940 <LCD_TxBMP+0x270>)
 800183a:	6013      	str	r3, [r2, #0]
                // Incrementa a posição do byte a ser lido do setor
                i += (bytes_extras - sobrou[0]);
 800183c:	4b42      	ldr	r3, [pc, #264]	; (8001948 <LCD_TxBMP+0x278>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4b43      	ldr	r3, [pc, #268]	; (8001950 <LCD_TxBMP+0x280>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	461a      	mov	r2, r3
 800184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184c:	4413      	add	r3, r2
 800184e:	637b      	str	r3, [r7, #52]	; 0x34
                // Atualiza o valor da sobra
                sobrou[0] = 0;
 8001850:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <LCD_TxBMP+0x280>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
                // Verifica se não cabe mais nenhum pixel, encerra o loop
                if ((i > (512 - 3)) || (tamanho < 3))
 8001856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001858:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 800185c:	f080 80c3 	bcs.w	80019e6 <LCD_TxBMP+0x316>
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <LCD_TxBMP+0x270>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b02      	cmp	r3, #2
 8001866:	f240 80be 	bls.w	80019e6 <LCD_TxBMP+0x316>
 800186a:	e007      	b.n	800187c <LCD_TxBMP+0x1ac>
                    break;
            }
            else
            {
                // Atualiza o valor da sobra
                sobrou[0] -= bytes_extras;
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <LCD_TxBMP+0x280>)
 800186e:	781a      	ldrb	r2, [r3, #0]
 8001870:	4b35      	ldr	r3, [pc, #212]	; (8001948 <LCD_TxBMP+0x278>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	b2da      	uxtb	r2, r3
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <LCD_TxBMP+0x280>)
 800187a:	701a      	strb	r2, [r3, #0]
            }
            // break;
            if (tamanho < 3)
 800187c:	4b30      	ldr	r3, [pc, #192]	; (8001940 <LCD_TxBMP+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b02      	cmp	r3, #2
 8001882:	f240 80af 	bls.w	80019e4 <LCD_TxBMP+0x314>
                break;
        }
        if (sobrou[0] == 0) // Tamanho -= 3
 8001886:	4b32      	ldr	r3, [pc, #200]	; (8001950 <LCD_TxBMP+0x280>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d12a      	bne.n	80018e4 <LCD_TxBMP+0x214>
        {
            //((r & 0xF8) << 8) | ((g & 0xFC) << 3) | (b >> 3);
            // Seguencia BGR (24 bits) --> RGB (565)
            cor = (data[i] >> 3) | ((data[i + 1] & 0xFC) << 3) | ((data[i + 2] & 0xF8) << 8);
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	08db      	lsrs	r3, r3, #3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	b21a      	sxth	r2, r3
 800189c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800189e:	3301      	adds	r3, #1
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	440b      	add	r3, r1
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80018ae:	b21b      	sxth	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b6:	3302      	adds	r3, #2
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	440b      	add	r3, r1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018c6:	f023 0307 	bic.w	r3, r3, #7
 80018ca:	b21b      	sxth	r3, r3
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	867b      	strh	r3, [r7, #50]	; 0x32
            i += 3;
 80018d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018d4:	3303      	adds	r3, #3
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
            tamanho -= 3;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <LCD_TxBMP+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	3b03      	subs	r3, #3
 80018de:	4a18      	ldr	r2, [pc, #96]	; (8001940 <LCD_TxBMP+0x270>)
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e069      	b.n	80019b8 <LCD_TxBMP+0x2e8>
        }
        else if (sobrou[0] == 1) // Tamanho -= 2
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <LCD_TxBMP+0x280>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d133      	bne.n	8001954 <LCD_TxBMP+0x284>
        {
            // Sobrou a cor Azul
            cor = (sobrou[2] >> 3) | ((data[i] & 0xFC) << 3) | ((data[i + 1] & 0xF8) << 8);
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <LCD_TxBMP+0x280>)
 80018ee:	789b      	ldrb	r3, [r3, #2]
 80018f0:	08db      	lsrs	r3, r3, #3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	440b      	add	r3, r1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	b21b      	sxth	r3, r3
 8001902:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190e:	3301      	adds	r3, #1
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	440b      	add	r3, r1
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	b21b      	sxth	r3, r3
 800191a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800191e:	f023 0307 	bic.w	r3, r3, #7
 8001922:	b21b      	sxth	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b21b      	sxth	r3, r3
 8001928:	867b      	strh	r3, [r7, #50]	; 0x32
            i += 2;
 800192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192c:	3302      	adds	r3, #2
 800192e:	637b      	str	r3, [r7, #52]	; 0x34
            tamanho -= 2;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <LCD_TxBMP+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b02      	subs	r3, #2
 8001936:	4a02      	ldr	r2, [pc, #8]	; (8001940 <LCD_TxBMP+0x270>)
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	e03d      	b.n	80019b8 <LCD_TxBMP+0x2e8>
 800193c:	200000b8 	.word	0x200000b8
 8001940:	200000bc 	.word	0x200000bc
 8001944:	200000c0 	.word	0x200000c0
 8001948:	200000c4 	.word	0x200000c4
 800194c:	200000c5 	.word	0x200000c5
 8001950:	200000c8 	.word	0x200000c8
        }
        else if (sobrou[0] == 2) // Tamanho -= 1
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <LCD_TxBMP+0x35c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d124      	bne.n	80019a6 <LCD_TxBMP+0x2d6>
        {
            // Sobrou a cor Azul e Verde
            cor = (sobrou[1] >> 3) | ((sobrou[2] & 0xFC) << 3) | ((data[i] & 0xF8) << 8);
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <LCD_TxBMP+0x35c>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <LCD_TxBMP+0x35c>)
 8001968:	789b      	ldrb	r3, [r3, #2]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	b21b      	sxth	r3, r3
 800196e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8001972:	b21b      	sxth	r3, r3
 8001974:	4313      	orrs	r3, r2
 8001976:	b21a      	sxth	r2, r3
 8001978:	6879      	ldr	r1, [r7, #4]
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	440b      	add	r3, r1
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	021b      	lsls	r3, r3, #8
 8001982:	b21b      	sxth	r3, r3
 8001984:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001988:	f023 0307 	bic.w	r3, r3, #7
 800198c:	b21b      	sxth	r3, r3
 800198e:	4313      	orrs	r3, r2
 8001990:	b21b      	sxth	r3, r3
 8001992:	867b      	strh	r3, [r7, #50]	; 0x32
            i += 1;
 8001994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001996:	3301      	adds	r3, #1
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
            tamanho -= 1;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <LCD_TxBMP+0x360>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	4a23      	ldr	r2, [pc, #140]	; (8001a30 <LCD_TxBMP+0x360>)
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e008      	b.n	80019b8 <LCD_TxBMP+0x2e8>
        }
        else
        {
            i = 512;
 80019a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019aa:	637b      	str	r3, [r7, #52]	; 0x34
            setor = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            tamanho = 0;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <LCD_TxBMP+0x360>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
            break;
 80019b6:	e016      	b.n	80019e6 <LCD_TxBMP+0x316>
        }
        // Envia pixel 565 para o LCD
        desenhaPixel(cor);
 80019b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe6c 	bl	8001698 <desenhaPixel>
        sobrou[0] = 0; // Sobra algum byte apenas no final do setor (i>= 510)
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <LCD_TxBMP+0x35c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
        // Incrementa o número de pixels enviados por linha e testa
        pixels_por_linha++;
 80019c6:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <LCD_TxBMP+0x364>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	4a19      	ldr	r2, [pc, #100]	; (8001a34 <LCD_TxBMP+0x364>)
 80019ce:	6013      	str	r3, [r2, #0]
    while ((i <= (512 - 3)) && (tamanho >= 3)) // 24 bits por pixels
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 80019d6:	d206      	bcs.n	80019e6 <LCD_TxBMP+0x316>
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <LCD_TxBMP+0x360>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	f63f af13 	bhi.w	8001808 <LCD_TxBMP+0x138>
 80019e2:	e000      	b.n	80019e6 <LCD_TxBMP+0x316>
                break;
 80019e4:	bf00      	nop
    }
    // Se ainda não acabou o arquivo
    if (tamanho >= 3)
 80019e6:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <LCD_TxBMP+0x360>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d917      	bls.n	8001a1e <LCD_TxBMP+0x34e>
    {
        // Salva o número de bytes que sobraram para formar um pixel
        sobrou[0] = 512 - i;
 80019ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	425b      	negs	r3, r3
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <LCD_TxBMP+0x35c>)
 80019f8:	701a      	strb	r2, [r3, #0]
        // Completa os 512 bytes do setor
        tamanho -= sobrou[0];
 80019fa:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <LCD_TxBMP+0x360>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <LCD_TxBMP+0x35c>)
 8001a00:	7812      	ldrb	r2, [r2, #0]
 8001a02:	1a9b      	subs	r3, r3, r2
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <LCD_TxBMP+0x360>)
 8001a06:	6013      	str	r3, [r2, #0]
        // Salva o penúltimo byte
        sobrou[1] = data[510];
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 21fe 	ldrb.w	r2, [r3, #510]	; 0x1fe
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <LCD_TxBMP+0x35c>)
 8001a10:	705a      	strb	r2, [r3, #1]
        // Salva o último byte
        sobrou[2] = data[511];
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 21ff 	ldrb.w	r2, [r3, #511]	; 0x1ff
 8001a18:	4b04      	ldr	r3, [pc, #16]	; (8001a2c <LCD_TxBMP+0x35c>)
 8001a1a:	709a      	strb	r2, [r3, #2]
 8001a1c:	e003      	b.n	8001a26 <LCD_TxBMP+0x356>
    }
    else
    {
        // Envia para o LCD sinalização de fim de envio de dados
        fimDados();
 8001a1e:	f7ff fe4f 	bl	80016c0 <fimDados>
 8001a22:	e000      	b.n	8001a26 <LCD_TxBMP+0x356>
        return;
 8001a24:	bf00      	nop
    }
}
 8001a26:	3738      	adds	r7, #56	; 0x38
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200000c8 	.word	0x200000c8
 8001a30:	200000bc 	.word	0x200000bc
 8001a34:	200000b8 	.word	0x200000b8

08001a38 <LCD_Delay>:
}
#endif

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 ff25 	bl	8002890 <HAL_Delay>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <LCD_IO_Init>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RST);
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <LCD_IO_Init+0x48>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <LCD_IO_Init+0x48>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <LCD_IO_Init+0x4c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <LCD_IO_Init+0x4c>)
 8001a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a6e:	6013      	str	r3, [r2, #0]
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <LCD_IO_Init+0x50>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
  #endif

  /* Reset the LCD */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  LCD_Delay(1);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff ffde 	bl	8001a38 <LCD_Delay>
  LCD_RST_ON;
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <LCD_IO_Init+0x50>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
  LCD_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff ffd8 	bl	8001a38 <LCD_Delay>
  LCD_RST_OFF;
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <LCD_IO_Init+0x50>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f7ff ffd2 	bl	8001a38 <LCD_Delay>
  BinarySemDmaHandle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA), configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA));
  osSemaphoreWait(BinarySemDmaHandle, 1);
  #endif
}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	4241828c 	.word	0x4241828c

08001aa4 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  *(uint8_t *)LCD_ADDR_BASE = Cmd;
 8001aae:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	7013      	strb	r3, [r2, #0]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = RD(Cmd);
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  *(volatile uint8_t *)LCD_ADDR_DATA = Data;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <LCD_IO_WriteData8+0x1c>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	7013      	strb	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	600ffffe 	.word	0x600ffffe

08001ae4 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
  *(volatile uint16_t *)LCD_ADDR_DATA = RD(Data);
 8001aee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af2:	81fb      	strh	r3, [r7, #14]
  \return               Reversed value
 */
__STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
  return (int16_t)__builtin_bswap16(value);
 8001af4:	89fb      	ldrh	r3, [r7, #14]
 8001af6:	ba5b      	rev16	r3, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <LCD_IO_WriteData16+0x2c>)
 8001afe:	b292      	uxth	r2, r2
 8001b00:	801a      	strh	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	600ffffe 	.word	0x600ffffe

08001b14 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	603a      	str	r2, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	460b      	mov	r3, r1
 8001b22:	80bb      	strh	r3, [r7, #4]
  uint16_t d = RD(Data);
 8001b24:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b28:	81bb      	strh	r3, [r7, #12]
 8001b2a:	89bb      	ldrh	r3, [r7, #12]
 8001b2c:	ba5b      	rev16	r3, r3
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	81fb      	strh	r3, [r7, #14]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8001b34:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8001b3c:	e002      	b.n	8001b44 <LCD_IO_WriteCmd8DataFill16+0x30>
    *(volatile uint16_t *)LCD_ADDR_DATA = d;
 8001b3e:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001b40:	89fb      	ldrh	r3, [r7, #14]
 8001b42:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	603a      	str	r2, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f7      	bne.n	8001b3e <LCD_IO_WriteCmd8DataFill16+0x2a>

  #else
  LCD_FSMC_DMA(&d, LCD_ADDR_DATA, 0, 0, Size, 1);
  #endif
}
 8001b4e:	bf00      	nop
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	600ffffe 	.word	0x600ffffe

08001b60 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	73fb      	strb	r3, [r7, #15]
  *(volatile uint8_t *)LCD_ADDR_BASE = Cmd;
 8001b6e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	7013      	strb	r3, [r2, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8001b76:	e006      	b.n	8001b86 <LCD_IO_WriteCmd8MultipleData8+0x26>
  {
    *(volatile uint8_t *)LCD_ADDR_DATA =*pData;
 8001b78:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	7013      	strb	r3, [r2, #0]
    pData++;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3301      	adds	r3, #1
 8001b84:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	1e5a      	subs	r2, r3, #1
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f3      	bne.n	8001b78 <LCD_IO_WriteCmd8MultipleData8+0x18>
  }

  #else
  LCD_FSMC_DMA(pData, LCD_ADDR_DATA, 1, 0, Size, 0);
  #endif
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	600ffffe 	.word	0x600ffffe

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b5b0      	push	{r4, r5, r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba8:	f000 fe00 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bac:	f000 f89e 	bl	8001cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb0:	f000 f9c8 	bl	8001f44 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001bb4:	f000 f904 	bl	8001dc0 <MX_ADC1_Init>
  MX_FSMC_Init();
 8001bb8:	f000 fa32 	bl	8002020 <MX_FSMC_Init>
  MX_SPI1_Init();
 8001bbc:	f000 f962 	bl	8001e84 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001bc0:	f003 f942 	bl	8004e48 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8001bc4:	f000 f994 	bl	8001ef0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ili9341_Init();
 8001bc8:	f7ff f9ae 	bl	8000f28 <ili9341_Init>
  sd_mount();
 8001bcc:	f000 fa88 	bl	80020e0 <sd_mount>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  strcpy(nome, "imagens/golfinho1.bmp");
 8001bd0:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <main+0x128>)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <main+0x12c>)
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	461d      	mov	r5, r3
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be0:	6020      	str	r0, [r4, #0]
 8001be2:	3404      	adds	r4, #4
 8001be4:	8021      	strh	r1, [r4, #0]
	  sd_to_tft(nome);
 8001be6:	4839      	ldr	r0, [pc, #228]	; (8001ccc <main+0x128>)
 8001be8:	f000 fad6 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001bec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bf0:	f000 fe4e 	bl	8002890 <HAL_Delay>

	  strcpy(nome, "imagens/golfinho2.bmp");
 8001bf4:	4a35      	ldr	r2, [pc, #212]	; (8001ccc <main+0x128>)
 8001bf6:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <main+0x130>)
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c04:	6020      	str	r0, [r4, #0]
 8001c06:	3404      	adds	r4, #4
 8001c08:	8021      	strh	r1, [r4, #0]
	  sd_to_tft(nome);
 8001c0a:	4830      	ldr	r0, [pc, #192]	; (8001ccc <main+0x128>)
 8001c0c:	f000 fac4 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001c10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c14:	f000 fe3c 	bl	8002890 <HAL_Delay>

	  strcpy(nome, "imagens/golfinho3.bmp");
 8001c18:	4a2c      	ldr	r2, [pc, #176]	; (8001ccc <main+0x128>)
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <main+0x134>)
 8001c1c:	4614      	mov	r4, r2
 8001c1e:	461d      	mov	r5, r3
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c28:	6020      	str	r0, [r4, #0]
 8001c2a:	3404      	adds	r4, #4
 8001c2c:	8021      	strh	r1, [r4, #0]
	  sd_to_tft(nome);
 8001c2e:	4827      	ldr	r0, [pc, #156]	; (8001ccc <main+0x128>)
 8001c30:	f000 fab2 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c38:	f000 fe2a 	bl	8002890 <HAL_Delay>

	  strcpy(nome, "imagens/golfinho4.bmp");
 8001c3c:	4a23      	ldr	r2, [pc, #140]	; (8001ccc <main+0x128>)
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <main+0x138>)
 8001c40:	4614      	mov	r4, r2
 8001c42:	461d      	mov	r5, r3
 8001c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c4c:	6020      	str	r0, [r4, #0]
 8001c4e:	3404      	adds	r4, #4
 8001c50:	8021      	strh	r1, [r4, #0]
	  sd_to_tft(nome);
 8001c52:	481e      	ldr	r0, [pc, #120]	; (8001ccc <main+0x128>)
 8001c54:	f000 faa0 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001c58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c5c:	f000 fe18 	bl	8002890 <HAL_Delay>

	  strcpy(nome, "imagens/golfinho5.bmp");
 8001c60:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <main+0x128>)
 8001c62:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <main+0x13c>)
 8001c64:	4614      	mov	r4, r2
 8001c66:	461d      	mov	r5, r3
 8001c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c70:	6020      	str	r0, [r4, #0]
 8001c72:	3404      	adds	r4, #4
 8001c74:	8021      	strh	r1, [r4, #0]
	  sd_to_tft(nome);
 8001c76:	4815      	ldr	r0, [pc, #84]	; (8001ccc <main+0x128>)
 8001c78:	f000 fa8e 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001c7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c80:	f000 fe06 	bl	8002890 <HAL_Delay>

	  strcpy(nome, "imagens/golfinho6-1.bmp");
 8001c84:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <main+0x128>)
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <main+0x140>)
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c90:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c94:	e884 0003 	stmia.w	r4, {r0, r1}
	  sd_to_tft(nome);
 8001c98:	480c      	ldr	r0, [pc, #48]	; (8001ccc <main+0x128>)
 8001c9a:	f000 fa7d 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001c9e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001ca2:	f000 fdf5 	bl	8002890 <HAL_Delay>

	  strcpy(nome, "imagens/golfinho7-1.bmp");
 8001ca6:	4a09      	ldr	r2, [pc, #36]	; (8001ccc <main+0x128>)
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <main+0x144>)
 8001caa:	4614      	mov	r4, r2
 8001cac:	461d      	mov	r5, r3
 8001cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cb6:	e884 0003 	stmia.w	r4, {r0, r1}
	  sd_to_tft(nome);
 8001cba:	4804      	ldr	r0, [pc, #16]	; (8001ccc <main+0x128>)
 8001cbc:	f000 fa6c 	bl	8002198 <sd_to_tft>
	  HAL_Delay(2000);
 8001cc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cc4:	f000 fde4 	bl	8002890 <HAL_Delay>
	  strcpy(nome, "imagens/golfinho1.bmp");
 8001cc8:	e782      	b.n	8001bd0 <main+0x2c>
 8001cca:	bf00      	nop
 8001ccc:	200032ac 	.word	0x200032ac
 8001cd0:	08008720 	.word	0x08008720
 8001cd4:	08008738 	.word	0x08008738
 8001cd8:	08008750 	.word	0x08008750
 8001cdc:	08008768 	.word	0x08008768
 8001ce0:	08008780 	.word	0x08008780
 8001ce4:	08008798 	.word	0x08008798
 8001ce8:	080087b0 	.word	0x080087b0

08001cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b094      	sub	sp, #80	; 0x50
 8001cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cf2:	f107 0320 	add.w	r3, r7, #32
 8001cf6:	2230      	movs	r2, #48	; 0x30
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 f858 	bl	8007db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <SystemClock_Config+0xcc>)
 8001d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d18:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <SystemClock_Config+0xcc>)
 8001d1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <SystemClock_Config+0xcc>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <SystemClock_Config+0xd0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <SystemClock_Config+0xd0>)
 8001d36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <SystemClock_Config+0xd0>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d50:	2310      	movs	r3, #16
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d54:	2302      	movs	r3, #2
 8001d56:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d60:	23a8      	movs	r3, #168	; 0xa8
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d64:	2302      	movs	r3, #2
 8001d66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4618      	mov	r0, r3
 8001d72:	f001 faaf 	bl	80032d4 <HAL_RCC_OscConfig>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d7c:	f000 face 	bl	800231c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d80:	230f      	movs	r3, #15
 8001d82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d84:	2302      	movs	r3, #2
 8001d86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d98:	f107 030c 	add.w	r3, r7, #12
 8001d9c:	2105      	movs	r1, #5
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fd10 	bl	80037c4 <HAL_RCC_ClockConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001daa:	f000 fab7 	bl	800231c <Error_Handler>
  }
}
 8001dae:	bf00      	nop
 8001db0:	3750      	adds	r7, #80	; 0x50
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40007000 	.word	0x40007000

08001dc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001dd4:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <MX_ADC1_Init+0xbc>)
 8001dd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dd8:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001dde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001de0:	4b25      	ldr	r3, [pc, #148]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001de2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e04:	4a1e      	ldr	r2, [pc, #120]	; (8001e80 <MX_ADC1_Init+0xc0>)
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e10:	2202      	movs	r2, #2
 8001e12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e1c:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e22:	4815      	ldr	r0, [pc, #84]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e24:	f000 fd58 	bl	80028d8 <HAL_ADC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001e2e:	f000 fa75 	bl	800231c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e36:	2301      	movs	r3, #1
 8001e38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e3e:	463b      	mov	r3, r7
 8001e40:	4619      	mov	r1, r3
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e44:	f000 fd8c 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001e4e:	f000 fa65 	bl	800231c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001e52:	230b      	movs	r3, #11
 8001e54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001e56:	2302      	movs	r3, #2
 8001e58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e5a:	463b      	mov	r3, r7
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4806      	ldr	r0, [pc, #24]	; (8001e78 <MX_ADC1_Init+0xb8>)
 8001e60:	f000 fd7e 	bl	8002960 <HAL_ADC_ConfigChannel>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001e6a:	f000 fa57 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200000cc 	.word	0x200000cc
 8001e7c:	40012000 	.word	0x40012000
 8001e80:	0f000001 	.word	0x0f000001

08001e84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e88:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e8a:	4a18      	ldr	r2, [pc, #96]	; (8001eec <MX_SPI1_Init+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001eb6:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eb8:	2210      	movs	r2, #16
 8001eba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ebc:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ec2:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec8:	4b07      	ldr	r3, [pc, #28]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed0:	220a      	movs	r2, #10
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	; (8001ee8 <MX_SPI1_Init+0x64>)
 8001ed6:	f001 fe95 	bl	8003c04 <HAL_SPI_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ee0:	f000 fa1c 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000114 	.word	0x20000114
 8001eec:	40013000 	.word	0x40013000

08001ef0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_USART2_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART2_UART_Init+0x4c>)
 8001f28:	f002 faf4 	bl	8004514 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 f9f3 	bl	800231c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000016c 	.word	0x2000016c
 8001f40:	40004400 	.word	0x40004400

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	4a2d      	ldr	r2, [pc, #180]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f68:	6313      	str	r3, [r2, #48]	; 0x30
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b27      	ldr	r3, [pc, #156]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	6313      	str	r3, [r2, #48]	; 0x30
 8001f86:	4b24      	ldr	r3, [pc, #144]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	f003 0304 	and.w	r3, r3, #4
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b20      	ldr	r3, [pc, #128]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fb8:	f043 0310 	orr.w	r3, r3, #16
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_GPIO_Init+0xd4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <MX_GPIO_Init+0xd8>)
 8001fee:	f001 f957 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001ff2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002000:	2301      	movs	r3, #1
 8002002:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_GPIO_Init+0xd8>)
 800200c:	f000 ffac 	bl	8002f68 <HAL_GPIO_Init>

}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40023800 	.word	0x40023800
 800201c:	40020c00 	.word	0x40020c00

08002020 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	615a      	str	r2, [r3, #20]
 8002036:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002038:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <MX_FSMC_Init+0xb8>)
 800203a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800203e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002042:	4a26      	ldr	r2, [pc, #152]	; (80020dc <MX_FSMC_Init+0xbc>)
 8002044:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002048:	2200      	movs	r2, #0
 800204a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <MX_FSMC_Init+0xb8>)
 800204e:	2200      	movs	r2, #0
 8002050:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002052:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <MX_FSMC_Init+0xb8>)
 800205a:	2200      	movs	r2, #0
 800205c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <MX_FSMC_Init+0xb8>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002070:	4b19      	ldr	r3, [pc, #100]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002076:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002078:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002080:	2200      	movs	r2, #0
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002084:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002086:	2200      	movs	r2, #0
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800208a:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <MX_FSMC_Init+0xb8>)
 800208c:	2200      	movs	r2, #0
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002092:	2200      	movs	r2, #0
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_FSMC_Init+0xb8>)
 8002098:	2200      	movs	r2, #0
 800209a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 800209c:	2306      	movs	r3, #6
 800209e:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80020a0:	230f      	movs	r3, #15
 80020a2:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 6;
 80020a4:	2306      	movs	r3, #6
 80020a6:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80020a8:	230f      	movs	r3, #15
 80020aa:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80020ac:	2310      	movs	r3, #16
 80020ae:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80020b0:	2311      	movs	r3, #17
 80020b2:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80020b8:	1d3b      	adds	r3, r7, #4
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_FSMC_Init+0xb8>)
 80020c0:	f002 f9e0 	bl	8004484 <HAL_SRAM_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80020ca:	f000 f927 	bl	800231c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	200001b0 	.word	0x200001b0
 80020dc:	a0000104 	.word	0xa0000104

080020e0 <sd_mount>:

/* USER CODE BEGIN 4 */
void sd_mount()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af02      	add	r7, sp, #8
    // Mensagem de texto
	ili9341_Printnewtstr(20, COLOR_YELLOW, &mono12x7bold, 1, (uint8_t *)"Teste SD Card");
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <sd_mount+0x8c>)
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2301      	movs	r3, #1
 80020ec:	4a20      	ldr	r2, [pc, #128]	; (8002170 <sd_mount+0x90>)
 80020ee:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80020f2:	2014      	movs	r0, #20
 80020f4:	f7ff fa9c 	bl	8001630 <ili9341_Printnewtstr>
    //=================================================================
    // Exemplo de LEITURA de BITMAP e escrita no LCD====================
    //=================================================================
    size = sprintf(texto, "Exemplo de LEITURA de BITMAP e escrita no LCD\r\n");
 80020f8:	491e      	ldr	r1, [pc, #120]	; (8002174 <sd_mount+0x94>)
 80020fa:	481f      	ldr	r0, [pc, #124]	; (8002178 <sd_mount+0x98>)
 80020fc:	f005 fe60 	bl	8007dc0 <siprintf>
 8002100:	4603      	mov	r3, r0
 8002102:	4a1e      	ldr	r2, [pc, #120]	; (800217c <sd_mount+0x9c>)
 8002104:	6013      	str	r3, [r2, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8002106:	4b1d      	ldr	r3, [pc, #116]	; (800217c <sd_mount+0x9c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2364      	movs	r3, #100	; 0x64
 800210e:	491a      	ldr	r1, [pc, #104]	; (8002178 <sd_mount+0x98>)
 8002110:	481b      	ldr	r0, [pc, #108]	; (8002180 <sd_mount+0xa0>)
 8002112:	f002 fa4c 	bl	80045ae <HAL_UART_Transmit>
    // Prepara a área de trabalho para o FatFs
    fr = f_mount(&fs0, "", 0);
 8002116:	2200      	movs	r2, #0
 8002118:	491a      	ldr	r1, [pc, #104]	; (8002184 <sd_mount+0xa4>)
 800211a:	481b      	ldr	r0, [pc, #108]	; (8002188 <sd_mount+0xa8>)
 800211c:	f005 f8e2 	bl	80072e4 <f_mount>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <sd_mount+0xac>)
 8002126:	701a      	strb	r2, [r3, #0]
    if (fr != FR_OK)
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <sd_mount+0xac>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01a      	beq.n	8002166 <sd_mount+0x86>
    {
        size = sprintf(texto, "f_mount error: %d\r\n", (int)fr);
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <sd_mount+0xac>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4916      	ldr	r1, [pc, #88]	; (8002190 <sd_mount+0xb0>)
 8002138:	480f      	ldr	r0, [pc, #60]	; (8002178 <sd_mount+0x98>)
 800213a:	f005 fe41 	bl	8007dc0 <siprintf>
 800213e:	4603      	mov	r3, r0
 8002140:	4a0e      	ldr	r2, [pc, #56]	; (800217c <sd_mount+0x9c>)
 8002142:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <sd_mount+0x9c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29a      	uxth	r2, r3
 800214a:	2364      	movs	r3, #100	; 0x64
 800214c:	490a      	ldr	r1, [pc, #40]	; (8002178 <sd_mount+0x98>)
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <sd_mount+0xa0>)
 8002150:	f002 fa2d 	bl	80045ae <HAL_UART_Transmit>
        ili9341_Printnewtstr(100, COLOR_RED, &mono12x7bold, 1, (uint8_t *)"Falha!!!");
 8002154:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <sd_mount+0xb4>)
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2301      	movs	r3, #1
 800215a:	4a05      	ldr	r2, [pc, #20]	; (8002170 <sd_mount+0x90>)
 800215c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002160:	2064      	movs	r0, #100	; 0x64
 8002162:	f7ff fa65 	bl	8001630 <ili9341_Printnewtstr>
        //return 1;
    }
}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	080087c8 	.word	0x080087c8
 8002170:	080092a4 	.word	0x080092a4
 8002174:	080087d8 	.word	0x080087d8
 8002178:	20003278 	.word	0x20003278
 800217c:	20003274 	.word	0x20003274
 8002180:	2000016c 	.word	0x2000016c
 8002184:	08008808 	.word	0x08008808
 8002188:	20000200 	.word	0x20000200
 800218c:	20003268 	.word	0x20003268
 8002190:	0800880c 	.word	0x0800880c
 8002194:	08008820 	.word	0x08008820

08002198 <sd_to_tft>:

void sd_to_tft(char *filename)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
    // Primeiro bloco de dados, onde está o cabeçalho do BMP
    first = 1;
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <sd_to_tft+0x148>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
    //"Limpa" o buffer
    buffer[0] = 0;
 80021a6:	4b4f      	ldr	r3, [pc, #316]	; (80022e4 <sd_to_tft+0x14c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
    // Define o nome do arquivo BMP 24 bits a ser aberto
    //strcpy(nome, "Imagens/Homer2in.bmp");
    // strcpy(buffer, "Imagens/Lisa.bmp");
    // Abre o arquivo como leitura
    fr = f_open(&fsrc, filename, FA_READ);
 80021ac:	2201      	movs	r2, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	484d      	ldr	r0, [pc, #308]	; (80022e8 <sd_to_tft+0x150>)
 80021b2:	f005 f8dd 	bl	8007370 <f_open>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b4c      	ldr	r3, [pc, #304]	; (80022ec <sd_to_tft+0x154>)
 80021bc:	701a      	strb	r2, [r3, #0]
    // Se teve sucesso
    if (fr == FR_OK)
 80021be:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <sd_to_tft+0x154>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d14d      	bne.n	8002262 <sd_to_tft+0xca>
    {
        // Loop de leitura de setores (512 bytes), lê até acabar o arquivo
        do
        {
            // Lê um setor do arquivo e armazena no buffer temporário
            fr = f_read(&fsrc,        /* [IN] File object */
 80021c6:	4b4a      	ldr	r3, [pc, #296]	; (80022f0 <sd_to_tft+0x158>)
 80021c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021cc:	4945      	ldr	r1, [pc, #276]	; (80022e4 <sd_to_tft+0x14c>)
 80021ce:	4846      	ldr	r0, [pc, #280]	; (80022e8 <sd_to_tft+0x150>)
 80021d0:	f005 fa9a 	bl	8007708 <f_read>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	4b44      	ldr	r3, [pc, #272]	; (80022ec <sd_to_tft+0x154>)
 80021da:	701a      	strb	r2, [r3, #0]
                        buffer,       /* [OUT] Buffer to store read data */
                        512,          /* [IN] Number of bytes to read */
                        (UINT *)&br); /* [OUT] Number of bytes read */
            // Se ocorrer algum erro mostra na UART e aborta
            if (fr != FR_OK)
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <sd_to_tft+0x154>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d011      	beq.n	8002208 <sd_to_tft+0x70>
            {
                size = sprintf(texto, "f_mount error: %d\r\n", (int)fr);
 80021e4:	4b41      	ldr	r3, [pc, #260]	; (80022ec <sd_to_tft+0x154>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4942      	ldr	r1, [pc, #264]	; (80022f4 <sd_to_tft+0x15c>)
 80021ec:	4842      	ldr	r0, [pc, #264]	; (80022f8 <sd_to_tft+0x160>)
 80021ee:	f005 fde7 	bl	8007dc0 <siprintf>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a41      	ldr	r2, [pc, #260]	; (80022fc <sd_to_tft+0x164>)
 80021f6:	6013      	str	r3, [r2, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 80021f8:	4b40      	ldr	r3, [pc, #256]	; (80022fc <sd_to_tft+0x164>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	2364      	movs	r3, #100	; 0x64
 8002200:	493d      	ldr	r1, [pc, #244]	; (80022f8 <sd_to_tft+0x160>)
 8002202:	483f      	ldr	r0, [pc, #252]	; (8002300 <sd_to_tft+0x168>)
 8002204:	f002 f9d3 	bl	80045ae <HAL_UART_Transmit>
            }
            // Termina o bloco lido com um caractere nulo (sem efeito para o LCD)
            buffer[br] = 0;
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <sd_to_tft+0x158>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a35      	ldr	r2, [pc, #212]	; (80022e4 <sd_to_tft+0x14c>)
 800220e:	2100      	movs	r1, #0
 8002210:	54d1      	strb	r1, [r2, r3]
            //  {
            //  size = sprintf(texto, "%02X ",buffer[i]);
            //  HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 1000);
            //  }
            // Envia o setor para o LCD
            LCD_TxBMP((unsigned char *)buffer, first);
 8002212:	4b33      	ldr	r3, [pc, #204]	; (80022e0 <sd_to_tft+0x148>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	4832      	ldr	r0, [pc, #200]	; (80022e4 <sd_to_tft+0x14c>)
 800221a:	f7ff fa59 	bl	80016d0 <LCD_TxBMP>
            // Limpa a flag de primeiro setor (cabeçalho nos primeiros 54 bytes)
            first = 0;
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <sd_to_tft+0x148>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
        } while (br == 512);
 8002224:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <sd_to_tft+0x158>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800222c:	d0cb      	beq.n	80021c6 <sd_to_tft+0x2e>
        // Repete até a quantidade lida for menor que o buffer, indicação que acabou o arquivo (último pacote)
        // Fecha o arquivo (não é necessário para leitura, mas recomendado para compatibilidade futura)
        fr = f_close(&fsrc);
 800222e:	482e      	ldr	r0, [pc, #184]	; (80022e8 <sd_to_tft+0x150>)
 8002230:	f005 fc47 	bl	8007ac2 <f_close>
 8002234:	4603      	mov	r3, r0
 8002236:	461a      	mov	r2, r3
 8002238:	4b2c      	ldr	r3, [pc, #176]	; (80022ec <sd_to_tft+0x154>)
 800223a:	701a      	strb	r2, [r3, #0]
        // Se teve sucesso
        if (fr == FR_OK)
 800223c:	4b2b      	ldr	r3, [pc, #172]	; (80022ec <sd_to_tft+0x154>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10e      	bne.n	8002262 <sd_to_tft+0xca>
        {
            size = sprintf(texto, "\r\nArquivo fechado com sucesso\r\n");
 8002244:	492f      	ldr	r1, [pc, #188]	; (8002304 <sd_to_tft+0x16c>)
 8002246:	482c      	ldr	r0, [pc, #176]	; (80022f8 <sd_to_tft+0x160>)
 8002248:	f005 fdba 	bl	8007dc0 <siprintf>
 800224c:	4603      	mov	r3, r0
 800224e:	4a2b      	ldr	r2, [pc, #172]	; (80022fc <sd_to_tft+0x164>)
 8002250:	6013      	str	r3, [r2, #0]
            HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <sd_to_tft+0x164>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b29a      	uxth	r2, r3
 8002258:	2364      	movs	r3, #100	; 0x64
 800225a:	4927      	ldr	r1, [pc, #156]	; (80022f8 <sd_to_tft+0x160>)
 800225c:	4828      	ldr	r0, [pc, #160]	; (8002300 <sd_to_tft+0x168>)
 800225e:	f002 f9a6 	bl	80045ae <HAL_UART_Transmit>
        }
    }
    if (fr == FR_OK)
 8002262:	4b22      	ldr	r3, [pc, #136]	; (80022ec <sd_to_tft+0x154>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <sd_to_tft+0xf0>
    {
        size = sprintf(texto, "\r\nArquivo 2 lido com sucesso\r\n");
 800226a:	4927      	ldr	r1, [pc, #156]	; (8002308 <sd_to_tft+0x170>)
 800226c:	4822      	ldr	r0, [pc, #136]	; (80022f8 <sd_to_tft+0x160>)
 800226e:	f005 fda7 	bl	8007dc0 <siprintf>
 8002272:	4603      	mov	r3, r0
 8002274:	4a21      	ldr	r2, [pc, #132]	; (80022fc <sd_to_tft+0x164>)
 8002276:	6013      	str	r3, [r2, #0]
        HAL_UART_Transmit(&huart2, (uint8_t *)texto, size, 100);
 8002278:	4b20      	ldr	r3, [pc, #128]	; (80022fc <sd_to_tft+0x164>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	b29a      	uxth	r2, r3
 800227e:	2364      	movs	r3, #100	; 0x64
 8002280:	491d      	ldr	r1, [pc, #116]	; (80022f8 <sd_to_tft+0x160>)
 8002282:	481f      	ldr	r0, [pc, #124]	; (8002300 <sd_to_tft+0x168>)
 8002284:	f002 f993 	bl	80045ae <HAL_UART_Transmit>
    }
    HAL_Delay(3000);
 8002288:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800228c:	f000 fb00 	bl	8002890 <HAL_Delay>
    ili9341_Printnewtstr(200, COLOR_YELLOW, &mono12x7bold, 1,(uint8_t *)" Escrita no LCD ");
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <sd_to_tft+0x174>)
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2301      	movs	r3, #1
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <sd_to_tft+0x178>)
 8002298:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800229c:	20c8      	movs	r0, #200	; 0xc8
 800229e:	f7ff f9c7 	bl	8001630 <ili9341_Printnewtstr>
    ili9341_Printnewtstr(220, COLOR_YELLOW, &mono12x7bold, 1,(uint8_t *)" apos acesso ao ");
 80022a2:	4b1c      	ldr	r3, [pc, #112]	; (8002314 <sd_to_tft+0x17c>)
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	4a19      	ldr	r2, [pc, #100]	; (8002310 <sd_to_tft+0x178>)
 80022aa:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80022ae:	20dc      	movs	r0, #220	; 0xdc
 80022b0:	f7ff f9be 	bl	8001630 <ili9341_Printnewtstr>
    ili9341_Printnewtstr(240, COLOR_YELLOW, &mono12x7bold, 1,(uint8_t *)" SD Card ");
 80022b4:	4b18      	ldr	r3, [pc, #96]	; (8002318 <sd_to_tft+0x180>)
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	2301      	movs	r3, #1
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <sd_to_tft+0x178>)
 80022bc:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80022c0:	20f0      	movs	r0, #240	; 0xf0
 80022c2:	f7ff f9b5 	bl	8001630 <ili9341_Printnewtstr>
    HAL_Delay(2000);
 80022c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022ca:	f000 fae1 	bl	8002890 <HAL_Delay>
    //ili9341_FillScreen(COLOR_BLACK);
    HAL_Delay(2000);
 80022ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80022d2:	f000 fadd 	bl	8002890 <HAL_Delay>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20003270 	.word	0x20003270
 80022e4:	20002268 	.word	0x20002268
 80022e8:	20001238 	.word	0x20001238
 80022ec:	20003268 	.word	0x20003268
 80022f0:	2000326c 	.word	0x2000326c
 80022f4:	0800880c 	.word	0x0800880c
 80022f8:	20003278 	.word	0x20003278
 80022fc:	20003274 	.word	0x20003274
 8002300:	2000016c 	.word	0x2000016c
 8002304:	0800882c 	.word	0x0800882c
 8002308:	0800884c 	.word	0x0800884c
 800230c:	0800886c 	.word	0x0800886c
 8002310:	080092a4 	.word	0x080092a4
 8002314:	08008880 	.word	0x08008880
 8002318:	08008894 	.word	0x08008894

0800231c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002320:	b672      	cpsid	i
}
 8002322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002324:	e7fe      	b.n	8002324 <Error_Handler+0x8>
	...

08002328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <HAL_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <HAL_MspInit+0x4c>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	6453      	str	r3, [r2, #68]	; 0x44
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_MspInit+0x4c>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_MspInit+0x4c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_MspInit+0x4c>)
 8002354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002358:	6413      	str	r3, [r2, #64]	; 0x40
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_MspInit+0x4c>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a24      	ldr	r2, [pc, #144]	; (8002428 <HAL_ADC_MspInit+0xb0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d141      	bne.n	800241e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b23      	ldr	r3, [pc, #140]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a22      	ldr	r2, [pc, #136]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b20      	ldr	r3, [pc, #128]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b19      	ldr	r3, [pc, #100]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a14      	ldr	r2, [pc, #80]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_ADC_MspInit+0xb4>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023ee:	2302      	movs	r3, #2
 80023f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023f2:	2303      	movs	r3, #3
 80023f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	480b      	ldr	r0, [pc, #44]	; (8002430 <HAL_ADC_MspInit+0xb8>)
 8002402:	f000 fdb1 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002406:	2302      	movs	r3, #2
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800240a:	2303      	movs	r3, #3
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4806      	ldr	r0, [pc, #24]	; (8002434 <HAL_ADC_MspInit+0xbc>)
 800241a:	f000 fda5 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800241e:	bf00      	nop
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40012000 	.word	0x40012000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020800 	.word	0x40020800
 8002434:	40020000 	.word	0x40020000

08002438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	; 0x28
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	609a      	str	r2, [r3, #8]
 800244c:	60da      	str	r2, [r3, #12]
 800244e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_SPI_MspInit+0x84>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d12b      	bne.n	80024b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002462:	4a17      	ldr	r2, [pc, #92]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002468:	6453      	str	r3, [r2, #68]	; 0x44
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	6313      	str	r3, [r2, #48]	; 0x30
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <HAL_SPI_MspInit+0x88>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002492:	23e0      	movs	r3, #224	; 0xe0
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024a2:	2305      	movs	r3, #5
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <HAL_SPI_MspInit+0x8c>)
 80024ae:	f000 fd5b 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	; 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40013000 	.word	0x40013000
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40020000 	.word	0x40020000

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	; 0x28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a19      	ldr	r2, [pc, #100]	; (800254c <HAL_UART_MspInit+0x84>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12b      	bne.n	8002542 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_UART_MspInit+0x88>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_UART_MspInit+0x88>)
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_UART_MspInit+0x88>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <HAL_UART_MspInit+0x88>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_UART_MspInit+0x88>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6313      	str	r3, [r2, #48]	; 0x30
 8002516:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_UART_MspInit+0x88>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002522:	230c      	movs	r3, #12
 8002524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002526:	2302      	movs	r3, #2
 8002528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800252e:	2303      	movs	r3, #3
 8002530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002532:	2307      	movs	r3, #7
 8002534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002536:	f107 0314 	add.w	r3, r7, #20
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <HAL_UART_MspInit+0x8c>)
 800253e:	f000 fd13 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3728      	adds	r7, #40	; 0x28
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40004400 	.word	0x40004400
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000

08002558 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_FSMC_MspInit+0x88>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d131      	bne.n	80025d8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_FSMC_MspInit+0x88>)
 8002576:	2201      	movs	r2, #1
 8002578:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_FSMC_MspInit+0x8c>)
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_FSMC_MspInit+0x8c>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6393      	str	r3, [r2, #56]	; 0x38
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_FSMC_MspInit+0x8c>)
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002596:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800259a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a4:	2303      	movs	r3, #3
 80025a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80025a8:	230c      	movs	r3, #12
 80025aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	4619      	mov	r1, r3
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <HAL_FSMC_MspInit+0x90>)
 80025b2:	f000 fcd9 	bl	8002f68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80025b6:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 80025ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80025c8:	230c      	movs	r3, #12
 80025ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <HAL_FSMC_MspInit+0x94>)
 80025d2:	f000 fcc9 	bl	8002f68 <HAL_GPIO_Init>
 80025d6:	e000      	b.n	80025da <HAL_FSMC_MspInit+0x82>
    return;
 80025d8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	200032d4 	.word	0x200032d4
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40020c00 	.word	0x40020c00

080025f0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80025f8:	f7ff ffae 	bl	8002558 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <SDTimer_Handler>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;
void SDTimer_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
	if(Timer1 > 0) Timer1--;
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <SDTimer_Handler+0x40>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <SDTimer_Handler+0x1c>
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <SDTimer_Handler+0x40>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <SDTimer_Handler+0x40>)
 800261e:	701a      	strb	r2, [r3, #0]
	if(Timer2 > 0) Timer2--;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <SDTimer_Handler+0x44>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <SDTimer_Handler+0x34>
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <SDTimer_Handler+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	3b01      	subs	r3, #1
 8002632:	b2da      	uxtb	r2, r3
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <SDTimer_Handler+0x44>)
 8002636:	701a      	strb	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	200032d9 	.word	0x200032d9
 8002648:	200032da 	.word	0x200032da

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <NMI_Handler+0x4>

08002652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <MemManage_Handler+0x4>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <UsageFault_Handler+0x4>

0800266a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <SysTick_Handler+0x30>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <SysTick_Handler+0x30>)
 80026a4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <SysTick_Handler+0x30>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b09      	cmp	r3, #9
 80026ae:	d904      	bls.n	80026ba <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Handler+0x30>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80026b6:	f7ff ffa5 	bl	8002604 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026ba:	f000 f8c9 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200032d8 	.word	0x200032d8

080026c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026d0:	4a14      	ldr	r2, [pc, #80]	; (8002724 <_sbrk+0x5c>)
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <_sbrk+0x60>)
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026dc:	4b13      	ldr	r3, [pc, #76]	; (800272c <_sbrk+0x64>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <_sbrk+0x64>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <_sbrk+0x68>)
 80026e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <_sbrk+0x64>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4413      	add	r3, r2
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d207      	bcs.n	8002708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f8:	f005 fb30 	bl	8007d5c <__errno>
 80026fc:	4603      	mov	r3, r0
 80026fe:	220c      	movs	r2, #12
 8002700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	e009      	b.n	800271c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <_sbrk+0x64>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <_sbrk+0x64>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <_sbrk+0x64>)
 8002718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800271a:	68fb      	ldr	r3, [r7, #12]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20020000 	.word	0x20020000
 8002728:	00000400 	.word	0x00000400
 800272c:	200032dc 	.word	0x200032dc
 8002730:	20003530 	.word	0x20003530

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002782:	f7ff ffd7 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002786:	f005 faef 	bl	8007d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7ff fa0b 	bl	8001ba4 <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800279c:	0800974c 	.word	0x0800974c
  ldr r2, =_sbss
 80027a0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80027a4:	20003530 	.word	0x20003530

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 fb93 	bl	8002f00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	200f      	movs	r0, #15
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fda2 	bl	8002328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fb9d 	bl	8002f4e <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295
 800282c:	f000 fb73 	bl	8002f16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000008 	.word	0x20000008
 8002848:	20000010 	.word	0x20000010
 800284c:	2000000c 	.word	0x2000000c

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000010 	.word	0x20000010
 8002874:	200032e0 	.word	0x200032e0

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	200032e0 	.word	0x200032e0

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000010 	.word	0x20000010

080028d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e033      	b.n	8002956 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fd3e 	bl	8002378 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f93a 	bl	8002ba4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
 8002946:	e001      	b.n	800294c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1c>
 8002978:	2302      	movs	r3, #2
 800297a:	e105      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x228>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b09      	cmp	r3, #9
 800298a:	d925      	bls.n	80029d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68d9      	ldr	r1, [r3, #12]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	b29b      	uxth	r3, r3
 8002998:	461a      	mov	r2, r3
 800299a:	4613      	mov	r3, r2
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	4413      	add	r3, r2
 80029a0:	3b1e      	subs	r3, #30
 80029a2:	2207      	movs	r2, #7
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43da      	mvns	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	400a      	ands	r2, r1
 80029b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68d9      	ldr	r1, [r3, #12]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	4603      	mov	r3, r0
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	4403      	add	r3, r0
 80029ca:	3b1e      	subs	r3, #30
 80029cc:	409a      	lsls	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	e022      	b.n	8002a1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6919      	ldr	r1, [r3, #16]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	2207      	movs	r2, #7
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	400a      	ands	r2, r1
 80029fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6919      	ldr	r1, [r3, #16]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4403      	add	r3, r0
 8002a14:	409a      	lsls	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d824      	bhi.n	8002a70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3b05      	subs	r3, #5
 8002a38:	221f      	movs	r2, #31
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	400a      	ands	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	4618      	mov	r0, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b05      	subs	r3, #5
 8002a62:	fa00 f203 	lsl.w	r2, r0, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6e:	e04c      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b0c      	cmp	r3, #12
 8002a76:	d824      	bhi.n	8002ac2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4413      	add	r3, r2
 8002a88:	3b23      	subs	r3, #35	; 0x23
 8002a8a:	221f      	movs	r2, #31
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43da      	mvns	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	400a      	ands	r2, r1
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b23      	subs	r3, #35	; 0x23
 8002ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	631a      	str	r2, [r3, #48]	; 0x30
 8002ac0:	e023      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	3b41      	subs	r3, #65	; 0x41
 8002ad4:	221f      	movs	r2, #31
 8002ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ada:	43da      	mvns	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b41      	subs	r3, #65	; 0x41
 8002afe:	fa00 f203 	lsl.w	r2, r0, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_ADC_ConfigChannel+0x234>)
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <HAL_ADC_ConfigChannel+0x238>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d109      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x1cc>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b12      	cmp	r3, #18
 8002b1e:	d105      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a19      	ldr	r2, [pc, #100]	; (8002b98 <HAL_ADC_ConfigChannel+0x238>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d123      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x21e>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d003      	beq.n	8002b46 <HAL_ADC_ConfigChannel+0x1e6>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b11      	cmp	r3, #17
 8002b44:	d11b      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b10      	cmp	r3, #16
 8002b58:	d111      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_ADC_ConfigChannel+0x23c>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a10      	ldr	r2, [pc, #64]	; (8002ba0 <HAL_ADC_ConfigChannel+0x240>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	0c9a      	lsrs	r2, r3, #18
 8002b66:	4613      	mov	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b70:	e002      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3b01      	subs	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f9      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3714      	adds	r7, #20
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40012300 	.word	0x40012300
 8002b98:	40012000 	.word	0x40012000
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	431bde83 	.word	0x431bde83

08002ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bac:	4b79      	ldr	r3, [pc, #484]	; (8002d94 <ADC_Init+0x1f0>)
 8002bae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	021a      	lsls	r2, r3, #8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6859      	ldr	r1, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6899      	ldr	r1, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c36:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <ADC_Init+0x1f4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d022      	beq.n	8002c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6899      	ldr	r1, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	e00f      	b.n	8002ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0202 	bic.w	r2, r2, #2
 8002cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7e1b      	ldrb	r3, [r3, #24]
 8002cbc:	005a      	lsls	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01b      	beq.n	8002d08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	035a      	lsls	r2, r3, #13
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	e007      	b.n	8002d18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	051a      	lsls	r2, r3, #20
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d5a:	025a      	lsls	r2, r3, #9
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	029a      	lsls	r2, r3, #10
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	3714      	adds	r7, #20
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40012300 	.word	0x40012300
 8002d98:	0f000001 	.word	0x0f000001

08002d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002db8:	4013      	ands	r3, r2
 8002dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dce:	4a04      	ldr	r2, [pc, #16]	; (8002de0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	60d3      	str	r3, [r2, #12]
}
 8002dd4:	bf00      	nop
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <__NVIC_GetPriorityGrouping+0x18>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	f003 0307 	and.w	r3, r3, #7
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	e000ed00 	.word	0xe000ed00

08002e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	6039      	str	r1, [r7, #0]
 8002e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	db0a      	blt.n	8002e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	490c      	ldr	r1, [pc, #48]	; (8002e4c <__NVIC_SetPriority+0x4c>)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	0112      	lsls	r2, r2, #4
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	440b      	add	r3, r1
 8002e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e28:	e00a      	b.n	8002e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4908      	ldr	r1, [pc, #32]	; (8002e50 <__NVIC_SetPriority+0x50>)
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	3b04      	subs	r3, #4
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f1c3 0307 	rsb	r3, r3, #7
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	bf28      	it	cs
 8002e72:	2304      	movcs	r3, #4
 8002e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d902      	bls.n	8002e84 <NVIC_EncodePriority+0x30>
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3b03      	subs	r3, #3
 8002e82:	e000      	b.n	8002e86 <NVIC_EncodePriority+0x32>
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43da      	mvns	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	401a      	ands	r2, r3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ea6:	43d9      	mvns	r1, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	4313      	orrs	r3, r2
         );
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
	...

08002ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ecc:	d301      	bcc.n	8002ed2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e00f      	b.n	8002ef2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed2:	4a0a      	ldr	r2, [pc, #40]	; (8002efc <SysTick_Config+0x40>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002eda:	210f      	movs	r1, #15
 8002edc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ee0:	f7ff ff8e 	bl	8002e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x40>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x40>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff47 	bl	8002d9c <__NVIC_SetPriorityGrouping>
}
 8002f0e:	bf00      	nop
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f28:	f7ff ff5c 	bl	8002de4 <__NVIC_GetPriorityGrouping>
 8002f2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f7ff ff8e 	bl	8002e54 <NVIC_EncodePriority>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff5d 	bl	8002e00 <__NVIC_SetPriority>
}
 8002f46:	bf00      	nop
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffb0 	bl	8002ebc <SysTick_Config>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	; 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e16b      	b.n	800325c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 815a 	bne.w	8003256 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d005      	beq.n	8002fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d130      	bne.n	800301c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 0201 	and.w	r2, r3, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b03      	cmp	r3, #3
 8003026:	d017      	beq.n	8003058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d123      	bne.n	80030ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3208      	adds	r2, #8
 800306c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	220f      	movs	r2, #15
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	08da      	lsrs	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3208      	adds	r2, #8
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80b4 	beq.w	8003256 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b60      	ldr	r3, [pc, #384]	; (8003274 <HAL_GPIO_Init+0x30c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f6:	4a5f      	ldr	r2, [pc, #380]	; (8003274 <HAL_GPIO_Init+0x30c>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	; 0x44
 80030fe:	4b5d      	ldr	r3, [pc, #372]	; (8003274 <HAL_GPIO_Init+0x30c>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310a:	4a5b      	ldr	r2, [pc, #364]	; (8003278 <HAL_GPIO_Init+0x310>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_GPIO_Init+0x314>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02b      	beq.n	800318e <HAL_GPIO_Init+0x226>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a51      	ldr	r2, [pc, #324]	; (8003280 <HAL_GPIO_Init+0x318>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d025      	beq.n	800318a <HAL_GPIO_Init+0x222>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a50      	ldr	r2, [pc, #320]	; (8003284 <HAL_GPIO_Init+0x31c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d01f      	beq.n	8003186 <HAL_GPIO_Init+0x21e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a4f      	ldr	r2, [pc, #316]	; (8003288 <HAL_GPIO_Init+0x320>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d019      	beq.n	8003182 <HAL_GPIO_Init+0x21a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a4e      	ldr	r2, [pc, #312]	; (800328c <HAL_GPIO_Init+0x324>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d013      	beq.n	800317e <HAL_GPIO_Init+0x216>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4d      	ldr	r2, [pc, #308]	; (8003290 <HAL_GPIO_Init+0x328>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d00d      	beq.n	800317a <HAL_GPIO_Init+0x212>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4c      	ldr	r2, [pc, #304]	; (8003294 <HAL_GPIO_Init+0x32c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d007      	beq.n	8003176 <HAL_GPIO_Init+0x20e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a4b      	ldr	r2, [pc, #300]	; (8003298 <HAL_GPIO_Init+0x330>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d101      	bne.n	8003172 <HAL_GPIO_Init+0x20a>
 800316e:	2307      	movs	r3, #7
 8003170:	e00e      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003172:	2308      	movs	r3, #8
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003176:	2306      	movs	r3, #6
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x228>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x228>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4935      	ldr	r1, [pc, #212]	; (8003278 <HAL_GPIO_Init+0x310>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_GPIO_Init+0x334>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031d2:	4a32      	ldr	r2, [pc, #200]	; (800329c <HAL_GPIO_Init+0x334>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031d8:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_GPIO_Init+0x334>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031fc:	4a27      	ldr	r2, [pc, #156]	; (800329c <HAL_GPIO_Init+0x334>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_GPIO_Init+0x334>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003226:	4a1d      	ldr	r2, [pc, #116]	; (800329c <HAL_GPIO_Init+0x334>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_GPIO_Init+0x334>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <HAL_GPIO_Init+0x334>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae90 	bls.w	8002f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40013800 	.word	0x40013800
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	40020800 	.word	0x40020800
 8003288:	40020c00 	.word	0x40020c00
 800328c:	40021000 	.word	0x40021000
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800
 8003298:	40021c00 	.word	0x40021c00
 800329c:	40013c00 	.word	0x40013c00

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032bc:	e003      	b.n	80032c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032be:	887b      	ldrh	r3, [r7, #2]
 80032c0:	041a      	lsls	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	619a      	str	r2, [r3, #24]
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
	...

080032d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e267      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d075      	beq.n	80033de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032f2:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d00c      	beq.n	8003318 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fe:	4b85      	ldr	r3, [pc, #532]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003306:	2b08      	cmp	r3, #8
 8003308:	d112      	bne.n	8003330 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330a:	4b82      	ldr	r3, [pc, #520]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003316:	d10b      	bne.n	8003330 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003318:	4b7e      	ldr	r3, [pc, #504]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d05b      	beq.n	80033dc <HAL_RCC_OscConfig+0x108>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d157      	bne.n	80033dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e242      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x74>
 800333a:	4b76      	ldr	r3, [pc, #472]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a75      	ldr	r2, [pc, #468]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e01d      	b.n	8003384 <HAL_RCC_OscConfig+0xb0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003350:	d10c      	bne.n	800336c <HAL_RCC_OscConfig+0x98>
 8003352:	4b70      	ldr	r3, [pc, #448]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a6f      	ldr	r2, [pc, #444]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	4b6d      	ldr	r3, [pc, #436]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a6c      	ldr	r2, [pc, #432]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	e00b      	b.n	8003384 <HAL_RCC_OscConfig+0xb0>
 800336c:	4b69      	ldr	r3, [pc, #420]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a68      	ldr	r2, [pc, #416]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003376:	6013      	str	r3, [r2, #0]
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a65      	ldr	r2, [pc, #404]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 800337e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7ff fa74 	bl	8002878 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7ff fa70 	bl	8002878 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b64      	cmp	r3, #100	; 0x64
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e207      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a6:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f0      	beq.n	8003394 <HAL_RCC_OscConfig+0xc0>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7ff fa60 	bl	8002878 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033bc:	f7ff fa5c 	bl	8002878 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e1f3      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ce:	4b51      	ldr	r3, [pc, #324]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f0      	bne.n	80033bc <HAL_RCC_OscConfig+0xe8>
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d063      	beq.n	80034b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ea:	4b4a      	ldr	r3, [pc, #296]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f6:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d11c      	bne.n	800343c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003402:	4b44      	ldr	r3, [pc, #272]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d116      	bne.n	800343c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d005      	beq.n	8003426 <HAL_RCC_OscConfig+0x152>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e1c7      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	4b3b      	ldr	r3, [pc, #236]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4937      	ldr	r1, [pc, #220]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343a:	e03a      	b.n	80034b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d020      	beq.n	8003486 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003444:	4b34      	ldr	r3, [pc, #208]	; (8003518 <HAL_RCC_OscConfig+0x244>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344a:	f7ff fa15 	bl	8002878 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003452:	f7ff fa11 	bl	8002878 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e1a8      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003470:	4b28      	ldr	r3, [pc, #160]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4925      	ldr	r1, [pc, #148]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 8003480:	4313      	orrs	r3, r2
 8003482:	600b      	str	r3, [r1, #0]
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x244>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7ff f9f4 	bl	8002878 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003494:	f7ff f9f0 	bl	8002878 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e187      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d036      	beq.n	800352c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d016      	beq.n	80034f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <HAL_RCC_OscConfig+0x248>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034cc:	f7ff f9d4 	bl	8002878 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034d4:	f7ff f9d0 	bl	8002878 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e167      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e6:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_OscConfig+0x240>)
 80034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x200>
 80034f2:	e01b      	b.n	800352c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCC_OscConfig+0x248>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034fa:	f7ff f9bd 	bl	8002878 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003500:	e00e      	b.n	8003520 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003502:	f7ff f9b9 	bl	8002878 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d907      	bls.n	8003520 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e150      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
 8003514:	40023800 	.word	0x40023800
 8003518:	42470000 	.word	0x42470000
 800351c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003520:	4b88      	ldr	r3, [pc, #544]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1ea      	bne.n	8003502 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8097 	beq.w	8003668 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800353a:	2300      	movs	r3, #0
 800353c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800353e:	4b81      	ldr	r3, [pc, #516]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10f      	bne.n	800356a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	60bb      	str	r3, [r7, #8]
 800354e:	4b7d      	ldr	r3, [pc, #500]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a7c      	ldr	r2, [pc, #496]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b7a      	ldr	r3, [pc, #488]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	60bb      	str	r3, [r7, #8]
 8003564:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	4b77      	ldr	r3, [pc, #476]	; (8003748 <HAL_RCC_OscConfig+0x474>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d118      	bne.n	80035a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003576:	4b74      	ldr	r3, [pc, #464]	; (8003748 <HAL_RCC_OscConfig+0x474>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a73      	ldr	r2, [pc, #460]	; (8003748 <HAL_RCC_OscConfig+0x474>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003582:	f7ff f979 	bl	8002878 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800358a:	f7ff f975 	bl	8002878 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e10c      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_OscConfig+0x474>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <HAL_RCC_OscConfig+0x2ea>
 80035b0:	4b64      	ldr	r3, [pc, #400]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	4a63      	ldr	r2, [pc, #396]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035b6:	f043 0301 	orr.w	r3, r3, #1
 80035ba:	6713      	str	r3, [r2, #112]	; 0x70
 80035bc:	e01c      	b.n	80035f8 <HAL_RCC_OscConfig+0x324>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCC_OscConfig+0x30c>
 80035c6:	4b5f      	ldr	r3, [pc, #380]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ca:	4a5e      	ldr	r2, [pc, #376]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6713      	str	r3, [r2, #112]	; 0x70
 80035d2:	4b5c      	ldr	r3, [pc, #368]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a5b      	ldr	r2, [pc, #364]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	e00b      	b.n	80035f8 <HAL_RCC_OscConfig+0x324>
 80035e0:	4b58      	ldr	r3, [pc, #352]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	4a57      	ldr	r2, [pc, #348]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6713      	str	r3, [r2, #112]	; 0x70
 80035ec:	4b55      	ldr	r3, [pc, #340]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	4a54      	ldr	r2, [pc, #336]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80035f2:	f023 0304 	bic.w	r3, r3, #4
 80035f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d015      	beq.n	800362c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003600:	f7ff f93a 	bl	8002878 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003606:	e00a      	b.n	800361e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003608:	f7ff f936 	bl	8002878 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	f241 3288 	movw	r2, #5000	; 0x1388
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e0cb      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361e:	4b49      	ldr	r3, [pc, #292]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0ee      	beq.n	8003608 <HAL_RCC_OscConfig+0x334>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362c:	f7ff f924 	bl	8002878 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003632:	e00a      	b.n	800364a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003634:	f7ff f920 	bl	8002878 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0b5      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800364a:	4b3e      	ldr	r3, [pc, #248]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1ee      	bne.n	8003634 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b39      	ldr	r3, [pc, #228]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	4a38      	ldr	r2, [pc, #224]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003666:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a1 	beq.w	80037b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003672:	4b34      	ldr	r3, [pc, #208]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
 800367a:	2b08      	cmp	r3, #8
 800367c:	d05c      	beq.n	8003738 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d141      	bne.n	800370a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCC_OscConfig+0x478>)
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368c:	f7ff f8f4 	bl	8002878 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003694:	f7ff f8f0 	bl	8002878 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e087      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f0      	bne.n	8003694 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69da      	ldr	r2, [r3, #28]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	019b      	lsls	r3, r3, #6
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	085b      	lsrs	r3, r3, #1
 80036ca:	3b01      	subs	r3, #1
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	061b      	lsls	r3, r3, #24
 80036d6:	491b      	ldr	r1, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x478>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e2:	f7ff f8c9 	bl	8002878 <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ea:	f7ff f8c5 	bl	8002878 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e05c      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fc:	4b11      	ldr	r3, [pc, #68]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x416>
 8003708:	e054      	b.n	80037b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <HAL_RCC_OscConfig+0x478>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7ff f8b2 	bl	8002878 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003718:	f7ff f8ae 	bl	8002878 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e045      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCC_OscConfig+0x470>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x444>
 8003736:	e03d      	b.n	80037b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d107      	bne.n	8003750 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e038      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
 8003744:	40023800 	.word	0x40023800
 8003748:	40007000 	.word	0x40007000
 800374c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x4ec>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d028      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d121      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d11a      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003780:	4013      	ands	r3, r2
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003786:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003788:	4293      	cmp	r3, r2
 800378a:	d111      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003796:	085b      	lsrs	r3, r3, #1
 8003798:	3b01      	subs	r3, #1
 800379a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d107      	bne.n	80037b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d001      	beq.n	80037b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40023800 	.word	0x40023800

080037c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0cc      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d90c      	bls.n	8003800 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	b2d2      	uxtb	r2, r2
 80037ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b63      	ldr	r3, [pc, #396]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b8      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d020      	beq.n	800384e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	4a58      	ldr	r2, [pc, #352]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800381e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003822:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003830:	4b53      	ldr	r3, [pc, #332]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003836:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	4b50      	ldr	r3, [pc, #320]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	494d      	ldr	r1, [pc, #308]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d044      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b47      	ldr	r3, [pc, #284]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d119      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e07f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d003      	beq.n	8003882 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387e:	2b03      	cmp	r3, #3
 8003880:	d107      	bne.n	8003892 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003882:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e06f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	4b3b      	ldr	r3, [pc, #236]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e067      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038a2:	4b37      	ldr	r3, [pc, #220]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f023 0203 	bic.w	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4934      	ldr	r1, [pc, #208]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038b4:	f7fe ffe0 	bl	8002878 <HAL_GetTick>
 80038b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	e00a      	b.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038bc:	f7fe ffdc 	bl	8002878 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e04f      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 020c 	and.w	r2, r3, #12
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d1eb      	bne.n	80038bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d20c      	bcs.n	800390c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fa:	4b20      	ldr	r3, [pc, #128]	; (800397c <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e032      	b.n	8003972 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	4916      	ldr	r1, [pc, #88]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003936:	4b12      	ldr	r3, [pc, #72]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	490e      	ldr	r1, [pc, #56]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800394a:	f000 f821 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800394e:	4602      	mov	r2, r0
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	490a      	ldr	r1, [pc, #40]	; (8003984 <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	5ccb      	ldrb	r3, [r1, r3]
 800395e:	fa22 f303 	lsr.w	r3, r2, r3
 8003962:	4a09      	ldr	r2, [pc, #36]	; (8003988 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe ff40 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	40023c00 	.word	0x40023c00
 8003980:	40023800 	.word	0x40023800
 8003984:	080092b0 	.word	0x080092b0
 8003988:	20000008 	.word	0x20000008
 800398c:	2000000c 	.word	0x2000000c

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003994:	b094      	sub	sp, #80	; 0x50
 8003996:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003998:	2300      	movs	r3, #0
 800399a:	647b      	str	r3, [r7, #68]	; 0x44
 800399c:	2300      	movs	r3, #0
 800399e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a0:	2300      	movs	r3, #0
 80039a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039a8:	4b79      	ldr	r3, [pc, #484]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d00d      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x40>
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	f200 80e1 	bhi.w	8003b7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d003      	beq.n	80039ca <HAL_RCC_GetSysClockFreq+0x3a>
 80039c2:	e0db      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c4:	4b73      	ldr	r3, [pc, #460]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x204>)
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80039c8:	e0db      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ca:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x208>)
 80039cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ce:	e0d8      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039da:	4b6d      	ldr	r3, [pc, #436]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d063      	beq.n	8003aae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b6a      	ldr	r3, [pc, #424]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	2200      	movs	r2, #0
 80039ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a02:	4622      	mov	r2, r4
 8003a04:	462b      	mov	r3, r5
 8003a06:	f04f 0000 	mov.w	r0, #0
 8003a0a:	f04f 0100 	mov.w	r1, #0
 8003a0e:	0159      	lsls	r1, r3, #5
 8003a10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a14:	0150      	lsls	r0, r2, #5
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4621      	mov	r1, r4
 8003a1c:	1a51      	subs	r1, r2, r1
 8003a1e:	6139      	str	r1, [r7, #16]
 8003a20:	4629      	mov	r1, r5
 8003a22:	eb63 0301 	sbc.w	r3, r3, r1
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a34:	4659      	mov	r1, fp
 8003a36:	018b      	lsls	r3, r1, #6
 8003a38:	4651      	mov	r1, sl
 8003a3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a3e:	4651      	mov	r1, sl
 8003a40:	018a      	lsls	r2, r1, #6
 8003a42:	4651      	mov	r1, sl
 8003a44:	ebb2 0801 	subs.w	r8, r2, r1
 8003a48:	4659      	mov	r1, fp
 8003a4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a62:	4690      	mov	r8, r2
 8003a64:	4699      	mov	r9, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	eb18 0303 	adds.w	r3, r8, r3
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	462b      	mov	r3, r5
 8003a70:	eb49 0303 	adc.w	r3, r9, r3
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a82:	4629      	mov	r1, r5
 8003a84:	024b      	lsls	r3, r1, #9
 8003a86:	4621      	mov	r1, r4
 8003a88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	024a      	lsls	r2, r1, #9
 8003a90:	4610      	mov	r0, r2
 8003a92:	4619      	mov	r1, r3
 8003a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a96:	2200      	movs	r2, #0
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa0:	f7fc fbe6 	bl	8000270 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aac:	e058      	b.n	8003b60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	099b      	lsrs	r3, r3, #6
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	4611      	mov	r1, r2
 8003aba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003abe:	623b      	str	r3, [r7, #32]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	f04f 0000 	mov.w	r0, #0
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	0159      	lsls	r1, r3, #5
 8003ad6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ada:	0150      	lsls	r0, r2, #5
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ae6:	4649      	mov	r1, r9
 8003ae8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003af8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003afc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b00:	ebb2 040a 	subs.w	r4, r2, sl
 8003b04:	eb63 050b 	sbc.w	r5, r3, fp
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	00eb      	lsls	r3, r5, #3
 8003b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b16:	00e2      	lsls	r2, r4, #3
 8003b18:	4614      	mov	r4, r2
 8003b1a:	461d      	mov	r5, r3
 8003b1c:	4643      	mov	r3, r8
 8003b1e:	18e3      	adds	r3, r4, r3
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	464b      	mov	r3, r9
 8003b24:	eb45 0303 	adc.w	r3, r5, r3
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b36:	4629      	mov	r1, r5
 8003b38:	028b      	lsls	r3, r1, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b40:	4621      	mov	r1, r4
 8003b42:	028a      	lsls	r2, r1, #10
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	61fa      	str	r2, [r7, #28]
 8003b50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b54:	f7fc fb8c 	bl	8000270 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	0c1b      	lsrs	r3, r3, #16
 8003b66:	f003 0303 	and.w	r3, r3, #3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7a:	e002      	b.n	8003b82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3750      	adds	r7, #80	; 0x50
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	00f42400 	.word	0x00f42400
 8003b98:	007a1200 	.word	0x007a1200

08003b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bb8:	f7ff fff0 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	0a9b      	lsrs	r3, r3, #10
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	4903      	ldr	r1, [pc, #12]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	080092c0 	.word	0x080092c0

08003bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003be0:	f7ff ffdc 	bl	8003b9c <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0b5b      	lsrs	r3, r3, #13
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	080092c0 	.word	0x080092c0

08003c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e07b      	b.n	8003d0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d108      	bne.n	8003c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c26:	d009      	beq.n	8003c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
 8003c2e:	e005      	b.n	8003c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d106      	bne.n	8003c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fe fbee 	bl	8002438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	ea42 0103 	orr.w	r1, r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	f003 0104 	and.w	r1, r3, #4
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	f003 0210 	and.w	r2, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b088      	sub	sp, #32
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	603b      	str	r3, [r7, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_SPI_Transmit+0x22>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e126      	b.n	8003f86 <HAL_SPI_Transmit+0x270>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d40:	f7fe fd9a 	bl	8002878 <HAL_GetTick>
 8003d44:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d46:	88fb      	ldrh	r3, [r7, #6]
 8003d48:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d56:	2302      	movs	r3, #2
 8003d58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d5a:	e10b      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_SPI_Transmit+0x52>
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d6c:	e102      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2203      	movs	r2, #3
 8003d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db4:	d10f      	bne.n	8003dd6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de0:	2b40      	cmp	r3, #64	; 0x40
 8003de2:	d007      	beq.n	8003df4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d14b      	bne.n	8003e96 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0xf6>
 8003e06:	8afb      	ldrh	r3, [r7, #22]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d13e      	bne.n	8003e8a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	881a      	ldrh	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e30:	e02b      	b.n	8003e8a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d112      	bne.n	8003e66 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	881a      	ldrh	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	1c9a      	adds	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e64:	e011      	b.n	8003e8a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e66:	f7fe fd07 	bl	8002878 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d803      	bhi.n	8003e7e <HAL_SPI_Transmit+0x168>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d102      	bne.n	8003e84 <HAL_SPI_Transmit+0x16e>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d102      	bne.n	8003e8a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e88:	e074      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ce      	bne.n	8003e32 <HAL_SPI_Transmit+0x11c>
 8003e94:	e04c      	b.n	8003f30 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d002      	beq.n	8003ea4 <HAL_SPI_Transmit+0x18e>
 8003e9e:	8afb      	ldrh	r3, [r7, #22]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d140      	bne.n	8003f26 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	7812      	ldrb	r2, [r2, #0]
 8003eb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003eca:	e02c      	b.n	8003f26 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d113      	bne.n	8003f02 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	330c      	adds	r3, #12
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f00:	e011      	b.n	8003f26 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f02:	f7fe fcb9 	bl	8002878 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d803      	bhi.n	8003f1a <HAL_SPI_Transmit+0x204>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d102      	bne.n	8003f20 <HAL_SPI_Transmit+0x20a>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f24:	e026      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1cd      	bne.n	8003ecc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	6839      	ldr	r1, [r7, #0]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fa63 	bl	8004400 <SPI_EndRxTxTransaction>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d002      	beq.n	8003f72 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e000      	b.n	8003f74 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08c      	sub	sp, #48	; 0x30
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	607a      	str	r2, [r7, #4]
 8003f9a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x26>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e18a      	b.n	80042ca <HAL_SPI_TransmitReceive+0x33c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fbc:	f7fe fc5c 	bl	8002878 <HAL_GetTick>
 8003fc0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fd2:	887b      	ldrh	r3, [r7, #2]
 8003fd4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d00f      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x70>
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe4:	d107      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d103      	bne.n	8003ff6 <HAL_SPI_TransmitReceive+0x68>
 8003fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003ffc:	e15b      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x82>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_TransmitReceive+0x82>
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d103      	bne.n	8004018 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004016:	e14e      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800401e:	b2db      	uxtb	r3, r3
 8004020:	2b04      	cmp	r3, #4
 8004022:	d003      	beq.n	800402c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2205      	movs	r2, #5
 8004028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	887a      	ldrh	r2, [r7, #2]
 800404e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	887a      	ldrh	r2, [r7, #2]
 8004054:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d007      	beq.n	8004080 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800407e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004088:	d178      	bne.n	800417c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x10a>
 8004092:	8b7b      	ldrh	r3, [r7, #26]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d166      	bne.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	881a      	ldrh	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a8:	1c9a      	adds	r2, r3, #2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040bc:	e053      	b.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d11b      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x176>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x176>
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d113      	bne.n	8004104 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	881a      	ldrh	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d119      	bne.n	8004146 <HAL_SPI_TransmitReceive+0x1b8>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d014      	beq.n	8004146 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68da      	ldr	r2, [r3, #12]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	b292      	uxth	r2, r2
 8004128:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412e:	1c9a      	adds	r2, r3, #2
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	3b01      	subs	r3, #1
 800413c:	b29a      	uxth	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004142:	2301      	movs	r3, #1
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004146:	f7fe fb97 	bl	8002878 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004152:	429a      	cmp	r2, r3
 8004154:	d807      	bhi.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
 8004156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d003      	beq.n	8004166 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004164:	e0a7      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1a6      	bne.n	80040be <HAL_SPI_TransmitReceive+0x130>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1a1      	bne.n	80040be <HAL_SPI_TransmitReceive+0x130>
 800417a:	e07c      	b.n	8004276 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_TransmitReceive+0x1fc>
 8004184:	8b7b      	ldrh	r3, [r7, #26]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d16b      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	330c      	adds	r3, #12
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b0:	e057      	b.n	8004262 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d11c      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x26c>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d017      	beq.n	80041fa <HAL_SPI_TransmitReceive+0x26c>
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d114      	bne.n	80041fa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	330c      	adds	r3, #12
 80041da:	7812      	ldrb	r2, [r2, #0]
 80041dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	3b01      	subs	r3, #1
 80041f0:	b29a      	uxth	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d119      	bne.n	800423c <HAL_SPI_TransmitReceive+0x2ae>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d014      	beq.n	800423c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004238:	2301      	movs	r3, #1
 800423a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800423c:	f7fe fb1c 	bl	8002878 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004248:	429a      	cmp	r2, r3
 800424a:	d803      	bhi.n	8004254 <HAL_SPI_TransmitReceive+0x2c6>
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004252:	d102      	bne.n	800425a <HAL_SPI_TransmitReceive+0x2cc>
 8004254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004260:	e029      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1a2      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x224>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d19d      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8c0 	bl	8004400 <SPI_EndRxTxTransaction>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d006      	beq.n	8004294 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004292:	e010      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	e000      	b.n	80042b6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3730      	adds	r7, #48	; 0x30
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e0:	b2db      	uxtb	r3, r3
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004300:	f7fe faba 	bl	8002878 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004310:	f7fe fab2 	bl	8002878 <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	0d1b      	lsrs	r3, r3, #20
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004326:	e054      	b.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d050      	beq.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004330:	f7fe faa2 	bl	8002878 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d902      	bls.n	8004346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13d      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435e:	d111      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004368:	d004      	beq.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004372:	d107      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438c:	d10f      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e017      	b.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d19b      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000008 	.word	0x20000008

08004400 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <SPI_EndRxTxTransaction+0x7c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a1b      	ldr	r2, [pc, #108]	; (8004480 <SPI_EndRxTxTransaction+0x80>)
 8004412:	fba2 2303 	umull	r2, r3, r2, r3
 8004416:	0d5b      	lsrs	r3, r3, #21
 8004418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800441c:	fb02 f303 	mul.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442a:	d112      	bne.n	8004452 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	2200      	movs	r2, #0
 8004434:	2180      	movs	r1, #128	; 0x80
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f7ff ff5a 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d016      	beq.n	8004470 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004446:	f043 0220 	orr.w	r2, r3, #32
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e00f      	b.n	8004472 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	3b01      	subs	r3, #1
 800445c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b80      	cmp	r3, #128	; 0x80
 800446a:	d0f2      	beq.n	8004452 <SPI_EndRxTxTransaction+0x52>
 800446c:	e000      	b.n	8004470 <SPI_EndRxTxTransaction+0x70>
        break;
 800446e:	bf00      	nop
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	20000008 	.word	0x20000008
 8004480:	165e9f81 	.word	0x165e9f81

08004484 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e038      	b.n	800450c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7fe f89e 	bl	80025f0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3308      	adds	r3, #8
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f000 fbea 	bl	8004c98 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	461a      	mov	r2, r3
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	f000 fc4c 	bl	8004d6c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6858      	ldr	r0, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	f000 fc79 	bl	8004dd8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	6892      	ldr	r2, [r2, #8]
 80044ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	f041 0101 	orr.w	r1, r1, #1
 80044fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e03f      	b.n	80045a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7fd ffc4 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2224      	movs	r2, #36	; 0x24
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004556:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f929 	bl	80047b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800456c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	695a      	ldr	r2, [r3, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800457c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800458c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2220      	movs	r2, #32
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	d17c      	bne.n	80046c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_UART_Transmit+0x2c>
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e075      	b.n	80046ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_UART_Transmit+0x3e>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e06e      	b.n	80046ca <HAL_UART_Transmit+0x11c>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2221      	movs	r2, #33	; 0x21
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004602:	f7fe f939 	bl	8002878 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	88fa      	ldrh	r2, [r7, #6]
 800460c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	88fa      	ldrh	r2, [r7, #6]
 8004612:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0x82>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004640:	e02a      	b.n	8004698 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2200      	movs	r2, #0
 800464a:	2180      	movs	r1, #128	; 0x80
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f840 	bl	80046d2 <UART_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e036      	b.n	80046ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e007      	b.n	800468a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29a      	uxth	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1cf      	bne.n	8004642 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2140      	movs	r1, #64	; 0x40
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f810 	bl	80046d2 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e006      	b.n	80046ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	e000      	b.n	80046ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046c8:	2302      	movs	r3, #2
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b090      	sub	sp, #64	; 0x40
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60f8      	str	r0, [r7, #12]
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e2:	e050      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d04c      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <UART_WaitOnFlagUntilTimeout+0x30>
 80046f2:	f7fe f8c1 	bl	8002878 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046fe:	429a      	cmp	r2, r3
 8004700:	d241      	bcs.n	8004786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	330c      	adds	r3, #12
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004722:	637a      	str	r2, [r7, #52]	; 0x34
 8004724:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3314      	adds	r3, #20
 800473c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	e853 3f00 	ldrex	r3, [r3]
 8004744:	613b      	str	r3, [r7, #16]
   return(result);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	63bb      	str	r3, [r7, #56]	; 0x38
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3314      	adds	r3, #20
 8004754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004756:	623a      	str	r2, [r7, #32]
 8004758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	69f9      	ldr	r1, [r7, #28]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	e841 2300 	strex	r3, r2, [r1]
 8004762:	61bb      	str	r3, [r7, #24]
   return(result);
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1e5      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e00f      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d09f      	beq.n	80046e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3740      	adds	r7, #64	; 0x40
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b0c0      	sub	sp, #256	; 0x100
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	68d9      	ldr	r1, [r3, #12]
 80047ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	ea40 0301 	orr.w	r3, r0, r1
 80047d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004808:	f021 010c 	bic.w	r1, r1, #12
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004816:	430b      	orrs	r3, r1
 8004818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482a:	6999      	ldr	r1, [r3, #24]
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	ea40 0301 	orr.w	r3, r0, r1
 8004836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b8f      	ldr	r3, [pc, #572]	; (8004a7c <UART_SetConfig+0x2cc>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d005      	beq.n	8004850 <UART_SetConfig+0xa0>
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8d      	ldr	r3, [pc, #564]	; (8004a80 <UART_SetConfig+0x2d0>)
 800484c:	429a      	cmp	r2, r3
 800484e:	d104      	bne.n	800485a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7ff f9c4 	bl	8003bdc <HAL_RCC_GetPCLK2Freq>
 8004854:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004858:	e003      	b.n	8004862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485a:	f7ff f9ab 	bl	8003bb4 <HAL_RCC_GetPCLK1Freq>
 800485e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486c:	f040 810c 	bne.w	8004a88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004874:	2200      	movs	r2, #0
 8004876:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800487a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800487e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004882:	4622      	mov	r2, r4
 8004884:	462b      	mov	r3, r5
 8004886:	1891      	adds	r1, r2, r2
 8004888:	65b9      	str	r1, [r7, #88]	; 0x58
 800488a:	415b      	adcs	r3, r3
 800488c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004892:	4621      	mov	r1, r4
 8004894:	eb12 0801 	adds.w	r8, r2, r1
 8004898:	4629      	mov	r1, r5
 800489a:	eb43 0901 	adc.w	r9, r3, r1
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b2:	4690      	mov	r8, r2
 80048b4:	4699      	mov	r9, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	eb18 0303 	adds.w	r3, r8, r3
 80048bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c0:	462b      	mov	r3, r5
 80048c2:	eb49 0303 	adc.w	r3, r9, r3
 80048c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048de:	460b      	mov	r3, r1
 80048e0:	18db      	adds	r3, r3, r3
 80048e2:	653b      	str	r3, [r7, #80]	; 0x50
 80048e4:	4613      	mov	r3, r2
 80048e6:	eb42 0303 	adc.w	r3, r2, r3
 80048ea:	657b      	str	r3, [r7, #84]	; 0x54
 80048ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f4:	f7fb fcbc 	bl	8000270 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4b61      	ldr	r3, [pc, #388]	; (8004a84 <UART_SetConfig+0x2d4>)
 80048fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	011c      	lsls	r4, r3, #4
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004910:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004920:	415b      	adcs	r3, r3
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004928:	4641      	mov	r1, r8
 800492a:	eb12 0a01 	adds.w	sl, r2, r1
 800492e:	4649      	mov	r1, r9
 8004930:	eb43 0b01 	adc.w	fp, r3, r1
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004948:	4692      	mov	sl, r2
 800494a:	469b      	mov	fp, r3
 800494c:	4643      	mov	r3, r8
 800494e:	eb1a 0303 	adds.w	r3, sl, r3
 8004952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004956:	464b      	mov	r3, r9
 8004958:	eb4b 0303 	adc.w	r3, fp, r3
 800495c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800496c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004974:	460b      	mov	r3, r1
 8004976:	18db      	adds	r3, r3, r3
 8004978:	643b      	str	r3, [r7, #64]	; 0x40
 800497a:	4613      	mov	r3, r2
 800497c:	eb42 0303 	adc.w	r3, r2, r3
 8004980:	647b      	str	r3, [r7, #68]	; 0x44
 8004982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800498a:	f7fb fc71 	bl	8000270 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4611      	mov	r1, r2
 8004994:	4b3b      	ldr	r3, [pc, #236]	; (8004a84 <UART_SetConfig+0x2d4>)
 8004996:	fba3 2301 	umull	r2, r3, r3, r1
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2264      	movs	r2, #100	; 0x64
 800499e:	fb02 f303 	mul.w	r3, r2, r3
 80049a2:	1acb      	subs	r3, r1, r3
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049aa:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <UART_SetConfig+0x2d4>)
 80049ac:	fba3 2302 	umull	r2, r3, r3, r2
 80049b0:	095b      	lsrs	r3, r3, #5
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049b8:	441c      	add	r4, r3
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d4:	415b      	adcs	r3, r3
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049dc:	4641      	mov	r1, r8
 80049de:	1851      	adds	r1, r2, r1
 80049e0:	6339      	str	r1, [r7, #48]	; 0x30
 80049e2:	4649      	mov	r1, r9
 80049e4:	414b      	adcs	r3, r1
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049f4:	4659      	mov	r1, fp
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	4651      	mov	r1, sl
 80049fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fe:	4651      	mov	r1, sl
 8004a00:	00ca      	lsls	r2, r1, #3
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a10:	464b      	mov	r3, r9
 8004a12:	460a      	mov	r2, r1
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a30:	460b      	mov	r3, r1
 8004a32:	18db      	adds	r3, r3, r3
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a36:	4613      	mov	r3, r2
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a46:	f7fb fc13 	bl	8000270 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <UART_SetConfig+0x2d4>)
 8004a50:	fba3 1302 	umull	r1, r3, r3, r2
 8004a54:	095b      	lsrs	r3, r3, #5
 8004a56:	2164      	movs	r1, #100	; 0x64
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3332      	adds	r3, #50	; 0x32
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <UART_SetConfig+0x2d4>)
 8004a64:	fba2 2303 	umull	r2, r3, r2, r3
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	f003 0207 	and.w	r2, r3, #7
 8004a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4422      	add	r2, r4
 8004a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a78:	e105      	b.n	8004c86 <UART_SetConfig+0x4d6>
 8004a7a:	bf00      	nop
 8004a7c:	40011000 	.word	0x40011000
 8004a80:	40011400 	.word	0x40011400
 8004a84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a9a:	4642      	mov	r2, r8
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	6239      	str	r1, [r7, #32]
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aaa:	4641      	mov	r1, r8
 8004aac:	1854      	adds	r4, r2, r1
 8004aae:	4649      	mov	r1, r9
 8004ab0:	eb43 0501 	adc.w	r5, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	eb45 0303 	adc.w	r3, r5, r3
 8004ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ae6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004af6:	4629      	mov	r1, r5
 8004af8:	008b      	lsls	r3, r1, #2
 8004afa:	4621      	mov	r1, r4
 8004afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b00:	4621      	mov	r1, r4
 8004b02:	008a      	lsls	r2, r1, #2
 8004b04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b08:	f7fb fbb2 	bl	8000270 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b60      	ldr	r3, [pc, #384]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	61b9      	str	r1, [r7, #24]
 8004b34:	415b      	adcs	r3, r3
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6139      	str	r1, [r7, #16]
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b94:	4649      	mov	r1, r9
 8004b96:	008b      	lsls	r3, r1, #2
 8004b98:	4641      	mov	r1, r8
 8004b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b9e:	4641      	mov	r1, r8
 8004ba0:	008a      	lsls	r2, r1, #2
 8004ba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ba6:	f7fb fb63 	bl	8000270 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4b39      	ldr	r3, [pc, #228]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb4:	095b      	lsrs	r3, r3, #5
 8004bb6:	2164      	movs	r1, #100	; 0x64
 8004bb8:	fb01 f303 	mul.w	r3, r1, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	3332      	adds	r3, #50	; 0x32
 8004bc2:	4a34      	ldr	r2, [pc, #208]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc8:	095b      	lsrs	r3, r3, #5
 8004bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bce:	441c      	add	r4, r3
 8004bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bd8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bde:	4642      	mov	r2, r8
 8004be0:	464b      	mov	r3, r9
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	415b      	adcs	r3, r3
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bee:	4641      	mov	r1, r8
 8004bf0:	1851      	adds	r1, r2, r1
 8004bf2:	6039      	str	r1, [r7, #0]
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	414b      	adcs	r3, r1
 8004bf8:	607b      	str	r3, [r7, #4]
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c06:	4659      	mov	r1, fp
 8004c08:	00cb      	lsls	r3, r1, #3
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c10:	4651      	mov	r1, sl
 8004c12:	00ca      	lsls	r2, r1, #3
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	189b      	adds	r3, r3, r2
 8004c1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c20:	464b      	mov	r3, r9
 8004c22:	460a      	mov	r2, r1
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	663b      	str	r3, [r7, #96]	; 0x60
 8004c34:	667a      	str	r2, [r7, #100]	; 0x64
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c42:	4649      	mov	r1, r9
 8004c44:	008b      	lsls	r3, r1, #2
 8004c46:	4641      	mov	r1, r8
 8004c48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	008a      	lsls	r2, r1, #2
 8004c50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c54:	f7fb fb0c 	bl	8000270 <__aeabi_uldivmod>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004c5e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c62:	095b      	lsrs	r3, r3, #5
 8004c64:	2164      	movs	r1, #100	; 0x64
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	3332      	adds	r3, #50	; 0x32
 8004c70:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <UART_SetConfig+0x4e4>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	f003 020f 	and.w	r2, r3, #15
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4422      	add	r2, r4
 8004c84:	609a      	str	r2, [r3, #8]
}
 8004c86:	bf00      	nop
 8004c88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c92:	bf00      	nop
 8004c94:	51eb851f 	.word	0x51eb851f

08004c98 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f023 0101 	bic.w	r1, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d102      	bne.n	8004cc8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004cc2:	2340      	movs	r3, #64	; 0x40
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	e001      	b.n	8004ccc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8004cd8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8004cde:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8004ce4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8004cea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8004cf0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8004cf6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8004cfc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004d02:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004d08:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8004d26:	4b10      	ldr	r3, [pc, #64]	; (8004d68 <FSMC_NORSRAM_Init+0xd0>)
 8004d28:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d30:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004d38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	ea02 0103 	and.w	r1, r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4319      	orrs	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	0008fb7f 	.word	0x0008fb7f

08004d6c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d82:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	021b      	lsls	r3, r3, #8
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	431a      	orrs	r2, r3
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	051b      	lsls	r3, r3, #20
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	3b02      	subs	r3, #2
 8004db2:	061b      	lsls	r3, r3, #24
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	3201      	adds	r2, #1
 8004dc0:	4319      	orrs	r1, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dec:	d11d      	bne.n	8004e2a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004df6:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8004df8:	4013      	ands	r3, r2
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	6852      	ldr	r2, [r2, #4]
 8004e02:	0112      	lsls	r2, r2, #4
 8004e04:	4311      	orrs	r1, r2
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	6892      	ldr	r2, [r2, #8]
 8004e0a:	0212      	lsls	r2, r2, #8
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	6992      	ldr	r2, [r2, #24]
 8004e12:	4311      	orrs	r1, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	68d2      	ldr	r2, [r2, #12]
 8004e18:	0412      	lsls	r2, r2, #16
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	ea43 0102 	orr.w	r1, r3, r2
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e28:	e005      	b.n	8004e36 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8004e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	cff00000 	.word	0xcff00000

08004e48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004e4c:	4904      	ldr	r1, [pc, #16]	; (8004e60 <MX_FATFS_Init+0x18>)
 8004e4e:	4805      	ldr	r0, [pc, #20]	; (8004e64 <MX_FATFS_Init+0x1c>)
 8004e50:	f002 feae 	bl	8007bb0 <FATFS_LinkDriver>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <MX_FATFS_Init+0x20>)
 8004e5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e5c:	bf00      	nop
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	200032e8 	.word	0x200032e8
 8004e64:	20000014 	.word	0x20000014
 8004e68:	200032e4 	.word	0x200032e4

08004e6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fb fd2d 	bl	80008e8 <SD_disk_initialize>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_status(pdrv);
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb fe08 	bl	8000abc <SD_disk_status>
 8004eac:	4603      	mov	r3, r0
 8004eae:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	607a      	str	r2, [r7, #4]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8004ec8:	7bf8      	ldrb	r0, [r7, #15]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68b9      	ldr	r1, [r7, #8]
 8004ed0:	f7fb fe0a 	bl	8000ae8 <SD_disk_read>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	4603      	mov	r3, r0
 8004eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8004ef0:	7bf8      	ldrb	r0, [r7, #15]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	f7fb fe60 	bl	8000bbc <SD_disk_write>
 8004efc:	4603      	mov	r3, r0
 8004efe:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3710      	adds	r7, #16
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	603a      	str	r2, [r7, #0]
 8004f12:	71fb      	strb	r3, [r7, #7]
 8004f14:	460b      	mov	r3, r1
 8004f16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	79b9      	ldrb	r1, [r7, #6]
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fb fed0 	bl	8000cc4 <SD_disk_ioctl>
 8004f24:	4603      	mov	r3, r0
 8004f26:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3708      	adds	r7, #8
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004f3a:	79fb      	ldrb	r3, [r7, #7]
 8004f3c:	4a08      	ldr	r2, [pc, #32]	; (8004f60 <disk_status+0x30>)
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	79fa      	ldrb	r2, [r7, #7]
 8004f48:	4905      	ldr	r1, [pc, #20]	; (8004f60 <disk_status+0x30>)
 8004f4a:	440a      	add	r2, r1
 8004f4c:	7a12      	ldrb	r2, [r2, #8]
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4798      	blx	r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	20003514 	.word	0x20003514

08004f64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004f72:	79fb      	ldrb	r3, [r7, #7]
 8004f74:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <disk_initialize+0x48>)
 8004f76:	5cd3      	ldrb	r3, [r2, r3]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d111      	bne.n	8004fa0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004f7c:	79fb      	ldrb	r3, [r7, #7]
 8004f7e:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <disk_initialize+0x48>)
 8004f80:	2101      	movs	r1, #1
 8004f82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	4a09      	ldr	r2, [pc, #36]	; (8004fac <disk_initialize+0x48>)
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	79fa      	ldrb	r2, [r7, #7]
 8004f92:	4906      	ldr	r1, [pc, #24]	; (8004fac <disk_initialize+0x48>)
 8004f94:	440a      	add	r2, r1
 8004f96:	7a12      	ldrb	r2, [r2, #8]
 8004f98:	4610      	mov	r0, r2
 8004f9a:	4798      	blx	r3
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20003514 	.word	0x20003514

08004fb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60b9      	str	r1, [r7, #8]
 8004fb8:	607a      	str	r2, [r7, #4]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	4a0a      	ldr	r2, [pc, #40]	; (8004fec <disk_read+0x3c>)
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	689c      	ldr	r4, [r3, #8]
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
 8004fce:	4a07      	ldr	r2, [pc, #28]	; (8004fec <disk_read+0x3c>)
 8004fd0:	4413      	add	r3, r2
 8004fd2:	7a18      	ldrb	r0, [r3, #8]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	47a0      	blx	r4
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]
  return res;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	371c      	adds	r7, #28
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20003514 	.word	0x20003514

08004ff0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004ff0:	b590      	push	{r4, r7, lr}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <disk_write+0x3c>)
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	68dc      	ldr	r4, [r3, #12]
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	4a07      	ldr	r2, [pc, #28]	; (800502c <disk_write+0x3c>)
 8005010:	4413      	add	r3, r2
 8005012:	7a18      	ldrb	r0, [r3, #8]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	68b9      	ldr	r1, [r7, #8]
 800501a:	47a0      	blx	r4
 800501c:	4603      	mov	r3, r0
 800501e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005020:	7dfb      	ldrb	r3, [r7, #23]
}
 8005022:	4618      	mov	r0, r3
 8005024:	371c      	adds	r7, #28
 8005026:	46bd      	mov	sp, r7
 8005028:	bd90      	pop	{r4, r7, pc}
 800502a:	bf00      	nop
 800502c:	20003514 	.word	0x20003514

08005030 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	603a      	str	r2, [r7, #0]
 800503a:	71fb      	strb	r3, [r7, #7]
 800503c:	460b      	mov	r3, r1
 800503e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	4a09      	ldr	r2, [pc, #36]	; (8005068 <disk_ioctl+0x38>)
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	79fa      	ldrb	r2, [r7, #7]
 800504e:	4906      	ldr	r1, [pc, #24]	; (8005068 <disk_ioctl+0x38>)
 8005050:	440a      	add	r2, r1
 8005052:	7a10      	ldrb	r0, [r2, #8]
 8005054:	79b9      	ldrb	r1, [r7, #6]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	4798      	blx	r3
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]
  return res;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20003514 	.word	0x20003514

0800506c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3301      	adds	r3, #1
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800507c:	89fb      	ldrh	r3, [r7, #14]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	b21a      	sxth	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	b21b      	sxth	r3, r3
 8005088:	4313      	orrs	r3, r2
 800508a:	b21b      	sxth	r3, r3
 800508c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800508e:	89fb      	ldrh	r3, [r7, #14]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3303      	adds	r3, #3
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	021b      	lsls	r3, r3, #8
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	3202      	adds	r2, #2
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	3201      	adds	r2, #1
 80050c2:	7812      	ldrb	r2, [r2, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	021b      	lsls	r3, r3, #8
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80050d4:	68fb      	ldr	r3, [r7, #12]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	887a      	ldrh	r2, [r7, #2]
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	887b      	ldrh	r3, [r7, #2]
 80050fc:	0a1b      	lsrs	r3, r3, #8
 80050fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	887a      	ldrh	r2, [r7, #2]
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	701a      	strb	r2, [r3, #0]
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	0a1b      	lsrs	r3, r3, #8
 8005132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	607a      	str	r2, [r7, #4]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	607a      	str	r2, [r7, #4]
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	0a1b      	lsrs	r3, r3, #8
 8005156:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005170:	b480      	push	{r7}
 8005172:	b087      	sub	sp, #28
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	1c53      	adds	r3, r2, #1
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	6179      	str	r1, [r7, #20]
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3b01      	subs	r3, #1
 800519e:	607b      	str	r3, [r7, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f1      	bne.n	800518a <mem_cpy+0x1a>
	}
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80051b2:	b480      	push	{r7}
 80051b4:	b087      	sub	sp, #28
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	1c5a      	adds	r2, r3, #1
 80051c6:	617a      	str	r2, [r7, #20]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	b2d2      	uxtb	r2, r2
 80051cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3b01      	subs	r3, #1
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f3      	bne.n	80051c2 <mem_set+0x10>
}
 80051da:	bf00      	nop
 80051dc:	bf00      	nop
 80051de:	371c      	adds	r7, #28
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80051e8:	b480      	push	{r7}
 80051ea:	b089      	sub	sp, #36	; 0x24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	4619      	mov	r1, r3
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	1c5a      	adds	r2, r3, #1
 800520e:	61ba      	str	r2, [r7, #24]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	1acb      	subs	r3, r1, r3
 8005214:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3b01      	subs	r3, #1
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <mem_cmp+0x40>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0eb      	beq.n	8005200 <mem_cmp+0x18>

	return r;
 8005228:	697b      	ldr	r3, [r7, #20]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3724      	adds	r7, #36	; 0x24
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005240:	e002      	b.n	8005248 <chk_chr+0x12>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	3301      	adds	r3, #1
 8005246:	607b      	str	r3, [r7, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <chk_chr+0x26>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	4293      	cmp	r3, r2
 800525a:	d1f2      	bne.n	8005242 <chk_chr+0xc>
	return *str;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	781b      	ldrb	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e029      	b.n	80052d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005280:	4a27      	ldr	r2, [pc, #156]	; (8005320 <chk_lock+0xb4>)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	4413      	add	r3, r2
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01d      	beq.n	80052ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800528e:	4a24      	ldr	r2, [pc, #144]	; (8005320 <chk_lock+0xb4>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	4413      	add	r3, r2
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	429a      	cmp	r2, r3
 800529e:	d116      	bne.n	80052ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <chk_lock+0xb4>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	011b      	lsls	r3, r3, #4
 80052a6:	4413      	add	r3, r2
 80052a8:	3304      	adds	r3, #4
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d10c      	bne.n	80052ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80052b4:	4a1a      	ldr	r2, [pc, #104]	; (8005320 <chk_lock+0xb4>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	4413      	add	r3, r2
 80052bc:	3308      	adds	r3, #8
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d102      	bne.n	80052ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80052c8:	e007      	b.n	80052da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	3301      	adds	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d9d2      	bls.n	8005280 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d109      	bne.n	80052f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <chk_lock+0x80>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d101      	bne.n	80052f0 <chk_lock+0x84>
 80052ec:	2300      	movs	r3, #0
 80052ee:	e010      	b.n	8005312 <chk_lock+0xa6>
 80052f0:	2312      	movs	r3, #18
 80052f2:	e00e      	b.n	8005312 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d108      	bne.n	800530c <chk_lock+0xa0>
 80052fa:	4a09      	ldr	r2, [pc, #36]	; (8005320 <chk_lock+0xb4>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	4413      	add	r3, r2
 8005302:	330c      	adds	r3, #12
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800530a:	d101      	bne.n	8005310 <chk_lock+0xa4>
 800530c:	2310      	movs	r3, #16
 800530e:	e000      	b.n	8005312 <chk_lock+0xa6>
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	200032f4 	.word	0x200032f4

08005324 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
 800532e:	e002      	b.n	8005336 <enq_lock+0x12>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3301      	adds	r3, #1
 8005334:	607b      	str	r3, [r7, #4]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d806      	bhi.n	800534a <enq_lock+0x26>
 800533c:	4a09      	ldr	r2, [pc, #36]	; (8005364 <enq_lock+0x40>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	4413      	add	r3, r2
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1f2      	bne.n	8005330 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b02      	cmp	r3, #2
 800534e:	bf14      	ite	ne
 8005350:	2301      	movne	r3, #1
 8005352:	2300      	moveq	r3, #0
 8005354:	b2db      	uxtb	r3, r3
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	200032f4 	.word	0x200032f4

08005368 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e01f      	b.n	80053b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005378:	4a41      	ldr	r2, [pc, #260]	; (8005480 <inc_lock+0x118>)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	4413      	add	r3, r2
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d113      	bne.n	80053b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800538a:	4a3d      	ldr	r2, [pc, #244]	; (8005480 <inc_lock+0x118>)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	4413      	add	r3, r2
 8005392:	3304      	adds	r3, #4
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800539a:	429a      	cmp	r2, r3
 800539c:	d109      	bne.n	80053b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800539e:	4a38      	ldr	r2, [pc, #224]	; (8005480 <inc_lock+0x118>)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	4413      	add	r3, r2
 80053a6:	3308      	adds	r3, #8
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d006      	beq.n	80053c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d9dc      	bls.n	8005378 <inc_lock+0x10>
 80053be:	e000      	b.n	80053c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80053c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d132      	bne.n	800542e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	e002      	b.n	80053d4 <inc_lock+0x6c>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	3301      	adds	r3, #1
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d806      	bhi.n	80053e8 <inc_lock+0x80>
 80053da:	4a29      	ldr	r2, [pc, #164]	; (8005480 <inc_lock+0x118>)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1f2      	bne.n	80053ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d101      	bne.n	80053f2 <inc_lock+0x8a>
 80053ee:	2300      	movs	r3, #0
 80053f0:	e040      	b.n	8005474 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4922      	ldr	r1, [pc, #136]	; (8005480 <inc_lock+0x118>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	440b      	add	r3, r1
 80053fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	491e      	ldr	r1, [pc, #120]	; (8005480 <inc_lock+0x118>)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	440b      	add	r3, r1
 800540c:	3304      	adds	r3, #4
 800540e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	491a      	ldr	r1, [pc, #104]	; (8005480 <inc_lock+0x118>)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	440b      	add	r3, r1
 800541c:	3308      	adds	r3, #8
 800541e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <inc_lock+0x118>)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	4413      	add	r3, r2
 8005428:	330c      	adds	r3, #12
 800542a:	2200      	movs	r2, #0
 800542c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d009      	beq.n	8005448 <inc_lock+0xe0>
 8005434:	4a12      	ldr	r2, [pc, #72]	; (8005480 <inc_lock+0x118>)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4413      	add	r3, r2
 800543c:	330c      	adds	r3, #12
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <inc_lock+0xe0>
 8005444:	2300      	movs	r3, #0
 8005446:	e015      	b.n	8005474 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d108      	bne.n	8005460 <inc_lock+0xf8>
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <inc_lock+0x118>)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	4413      	add	r3, r2
 8005456:	330c      	adds	r3, #12
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	e001      	b.n	8005464 <inc_lock+0xfc>
 8005460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005464:	4906      	ldr	r1, [pc, #24]	; (8005480 <inc_lock+0x118>)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	440b      	add	r3, r1
 800546c:	330c      	adds	r3, #12
 800546e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3301      	adds	r3, #1
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	200032f4 	.word	0x200032f4

08005484 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3b01      	subs	r3, #1
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d825      	bhi.n	80054e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8005498:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <dec_lock+0x74>)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	330c      	adds	r3, #12
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80054a6:	89fb      	ldrh	r3, [r7, #14]
 80054a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ac:	d101      	bne.n	80054b2 <dec_lock+0x2e>
 80054ae:	2300      	movs	r3, #0
 80054b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80054b2:	89fb      	ldrh	r3, [r7, #14]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <dec_lock+0x3a>
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80054be:	4a0e      	ldr	r2, [pc, #56]	; (80054f8 <dec_lock+0x74>)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	4413      	add	r3, r2
 80054c6:	330c      	adds	r3, #12
 80054c8:	89fa      	ldrh	r2, [r7, #14]
 80054ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80054cc:	89fb      	ldrh	r3, [r7, #14]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <dec_lock+0x5a>
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <dec_lock+0x74>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	4413      	add	r3, r2
 80054da:	2200      	movs	r2, #0
 80054dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	737b      	strb	r3, [r7, #13]
 80054e2:	e001      	b.n	80054e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80054e4:	2302      	movs	r3, #2
 80054e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80054e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	200032f4 	.word	0x200032f4

080054fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005504:	2300      	movs	r3, #0
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	e010      	b.n	800552c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800550a:	4a0d      	ldr	r2, [pc, #52]	; (8005540 <clear_lock+0x44>)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	4413      	add	r3, r2
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d105      	bne.n	8005526 <clear_lock+0x2a>
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <clear_lock+0x44>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	4413      	add	r3, r2
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d9eb      	bls.n	800550a <clear_lock+0xe>
	}
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	200032f4 	.word	0x200032f4

08005544 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800554c:	2300      	movs	r3, #0
 800554e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	78db      	ldrb	r3, [r3, #3]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d034      	beq.n	80055c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	7858      	ldrb	r0, [r3, #1]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005568:	2301      	movs	r3, #1
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	f7ff fd40 	bl	8004ff0 <disk_write>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
 800557a:	e022      	b.n	80055c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	429a      	cmp	r2, r3
 8005590:	d217      	bcs.n	80055c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	789b      	ldrb	r3, [r3, #2]
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e010      	b.n	80055bc <sync_window+0x78>
					wsect += fs->fsize;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7858      	ldrb	r0, [r3, #1]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055ae:	2301      	movs	r3, #1
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	f7ff fd1d 	bl	8004ff0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3b01      	subs	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d8eb      	bhi.n	800559a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d01b      	beq.n	800561c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ffad 	bl	8005544 <sync_window>
 80055ea:	4603      	mov	r3, r0
 80055ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d113      	bne.n	800561c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	7858      	ldrb	r0, [r3, #1]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055fe:	2301      	movs	r3, #1
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	f7ff fcd5 	bl	8004fb0 <disk_read>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800560c:	f04f 33ff 	mov.w	r3, #4294967295
 8005610:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005612:	2301      	movs	r3, #1
 8005614:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff ff87 	bl	8005544 <sync_window>
 8005636:	4603      	mov	r3, r0
 8005638:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d159      	bne.n	80056f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d149      	bne.n	80056dc <sync_fs+0xb4>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	791b      	ldrb	r3, [r3, #4]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d145      	bne.n	80056dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	899b      	ldrh	r3, [r3, #12]
 800565a:	461a      	mov	r2, r3
 800565c:	2100      	movs	r1, #0
 800565e:	f7ff fda8 	bl	80051b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3338      	adds	r3, #56	; 0x38
 8005666:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800566a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fd37 	bl	80050e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3338      	adds	r3, #56	; 0x38
 8005678:	4921      	ldr	r1, [pc, #132]	; (8005700 <sync_fs+0xd8>)
 800567a:	4618      	mov	r0, r3
 800567c:	f7ff fd4c 	bl	8005118 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3338      	adds	r3, #56	; 0x38
 8005684:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005688:	491e      	ldr	r1, [pc, #120]	; (8005704 <sync_fs+0xdc>)
 800568a:	4618      	mov	r0, r3
 800568c:	f7ff fd44 	bl	8005118 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3338      	adds	r3, #56	; 0x38
 8005694:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	4619      	mov	r1, r3
 800569e:	4610      	mov	r0, r2
 80056a0:	f7ff fd3a 	bl	8005118 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3338      	adds	r3, #56	; 0x38
 80056a8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7ff fd30 	bl	8005118 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	7858      	ldrb	r0, [r3, #1]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d0:	2301      	movs	r3, #1
 80056d2:	f7ff fc8d 	bl	8004ff0 <disk_write>
			fs->fsi_flag = 0;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	785b      	ldrb	r3, [r3, #1]
 80056e0:	2200      	movs	r2, #0
 80056e2:	2100      	movs	r1, #0
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7ff fca3 	bl	8005030 <disk_ioctl>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <sync_fs+0xcc>
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	41615252 	.word	0x41615252
 8005704:	61417272 	.word	0x61417272

08005708 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	3b02      	subs	r3, #2
 8005716:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	3b02      	subs	r3, #2
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d301      	bcc.n	8005728 <clust2sect+0x20>
 8005724:	2300      	movs	r3, #0
 8005726:	e008      	b.n	800573a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	895b      	ldrh	r3, [r3, #10]
 800572c:	461a      	mov	r2, r3
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	fb03 f202 	mul.w	r2, r3, r2
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	4413      	add	r3, r2
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d904      	bls.n	8005766 <get_fat+0x20>
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	683a      	ldr	r2, [r7, #0]
 8005762:	429a      	cmp	r2, r3
 8005764:	d302      	bcc.n	800576c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005766:	2301      	movs	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e0bb      	b.n	80058e4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800576c:	f04f 33ff 	mov.w	r3, #4294967295
 8005770:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b03      	cmp	r3, #3
 8005778:	f000 8083 	beq.w	8005882 <get_fat+0x13c>
 800577c:	2b03      	cmp	r3, #3
 800577e:	f300 80a7 	bgt.w	80058d0 <get_fat+0x18a>
 8005782:	2b01      	cmp	r3, #1
 8005784:	d002      	beq.n	800578c <get_fat+0x46>
 8005786:	2b02      	cmp	r3, #2
 8005788:	d056      	beq.n	8005838 <get_fat+0xf2>
 800578a:	e0a1      	b.n	80058d0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4413      	add	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	899b      	ldrh	r3, [r3, #12]
 80057a2:	4619      	mov	r1, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057aa:	4413      	add	r3, r2
 80057ac:	4619      	mov	r1, r3
 80057ae:	6938      	ldr	r0, [r7, #16]
 80057b0:	f7ff ff0c 	bl	80055cc <move_window>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f040 808d 	bne.w	80058d6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	60fa      	str	r2, [r7, #12]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	8992      	ldrh	r2, [r2, #12]
 80057c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80057ca:	fb01 f202 	mul.w	r2, r1, r2
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4413      	add	r3, r2
 80057d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	899b      	ldrh	r3, [r3, #12]
 80057e2:	4619      	mov	r1, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ea:	4413      	add	r3, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	6938      	ldr	r0, [r7, #16]
 80057f0:	f7ff feec 	bl	80055cc <move_window>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d16f      	bne.n	80058da <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	899b      	ldrh	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	fbb3 f1f2 	udiv	r1, r3, r2
 8005806:	fb01 f202 	mul.w	r2, r1, r2
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4413      	add	r3, r2
 8005810:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	461a      	mov	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d002      	beq.n	800582e <get_fat+0xe8>
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	091b      	lsrs	r3, r3, #4
 800582c:	e002      	b.n	8005834 <get_fat+0xee>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005834:	617b      	str	r3, [r7, #20]
			break;
 8005836:	e055      	b.n	80058e4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	899b      	ldrh	r3, [r3, #12]
 8005840:	085b      	lsrs	r3, r3, #1
 8005842:	b29b      	uxth	r3, r3
 8005844:	4619      	mov	r1, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	fbb3 f3f1 	udiv	r3, r3, r1
 800584c:	4413      	add	r3, r2
 800584e:	4619      	mov	r1, r3
 8005850:	6938      	ldr	r0, [r7, #16]
 8005852:	f7ff febb 	bl	80055cc <move_window>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d140      	bne.n	80058de <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	8992      	ldrh	r2, [r2, #12]
 800586a:	fbb3 f0f2 	udiv	r0, r3, r2
 800586e:	fb00 f202 	mul.w	r2, r0, r2
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	440b      	add	r3, r1
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fbf8 	bl	800506c <ld_word>
 800587c:	4603      	mov	r3, r0
 800587e:	617b      	str	r3, [r7, #20]
			break;
 8005880:	e030      	b.n	80058e4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	899b      	ldrh	r3, [r3, #12]
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	b29b      	uxth	r3, r3
 800588e:	4619      	mov	r1, r3
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	fbb3 f3f1 	udiv	r3, r3, r1
 8005896:	4413      	add	r3, r2
 8005898:	4619      	mov	r1, r3
 800589a:	6938      	ldr	r0, [r7, #16]
 800589c:	f7ff fe96 	bl	80055cc <move_window>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11d      	bne.n	80058e2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	8992      	ldrh	r2, [r2, #12]
 80058b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80058b8:	fb00 f202 	mul.w	r2, r0, r2
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	440b      	add	r3, r1
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fbeb 	bl	800509c <ld_dword>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80058cc:	617b      	str	r3, [r7, #20]
			break;
 80058ce:	e009      	b.n	80058e4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80058d0:	2301      	movs	r3, #1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e006      	b.n	80058e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058d6:	bf00      	nop
 80058d8:	e004      	b.n	80058e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058da:	bf00      	nop
 80058dc:	e002      	b.n	80058e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80058de:	bf00      	nop
 80058e0:	e000      	b.n	80058e4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80058e2:	bf00      	nop
		}
	}

	return val;
 80058e4:	697b      	ldr	r3, [r7, #20]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80058ee:	b590      	push	{r4, r7, lr}
 80058f0:	b089      	sub	sp, #36	; 0x24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80058fa:	2302      	movs	r3, #2
 80058fc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	2b01      	cmp	r3, #1
 8005902:	f240 8102 	bls.w	8005b0a <put_fat+0x21c>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	429a      	cmp	r2, r3
 800590e:	f080 80fc 	bcs.w	8005b0a <put_fat+0x21c>
		switch (fs->fs_type) {
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b03      	cmp	r3, #3
 8005918:	f000 80b6 	beq.w	8005a88 <put_fat+0x19a>
 800591c:	2b03      	cmp	r3, #3
 800591e:	f300 80fd 	bgt.w	8005b1c <put_fat+0x22e>
 8005922:	2b01      	cmp	r3, #1
 8005924:	d003      	beq.n	800592e <put_fat+0x40>
 8005926:	2b02      	cmp	r3, #2
 8005928:	f000 8083 	beq.w	8005a32 <put_fat+0x144>
 800592c:	e0f6      	b.n	8005b1c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	4413      	add	r3, r2
 800593a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	899b      	ldrh	r3, [r3, #12]
 8005944:	4619      	mov	r1, r3
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	fbb3 f3f1 	udiv	r3, r3, r1
 800594c:	4413      	add	r3, r2
 800594e:	4619      	mov	r1, r3
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff fe3b 	bl	80055cc <move_window>
 8005956:	4603      	mov	r3, r0
 8005958:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800595a:	7ffb      	ldrb	r3, [r7, #31]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 80d6 	bne.w	8005b0e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	61ba      	str	r2, [r7, #24]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	8992      	ldrh	r2, [r2, #12]
 8005972:	fbb3 f0f2 	udiv	r0, r3, r2
 8005976:	fb00 f202 	mul.w	r2, r0, r2
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	440b      	add	r3, r1
 800597e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00d      	beq.n	80059a6 <put_fat+0xb8>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	b25b      	sxtb	r3, r3
 8005990:	f003 030f 	and.w	r3, r3, #15
 8005994:	b25a      	sxtb	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	011b      	lsls	r3, r3, #4
 800599c:	b25b      	sxtb	r3, r3
 800599e:	4313      	orrs	r3, r2
 80059a0:	b25b      	sxtb	r3, r3
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e001      	b.n	80059aa <put_fat+0xbc>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	899b      	ldrh	r3, [r3, #12]
 80059bc:	4619      	mov	r1, r3
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c4:	4413      	add	r3, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fdff 	bl	80055cc <move_window>
 80059ce:	4603      	mov	r3, r0
 80059d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059d2:	7ffb      	ldrb	r3, [r7, #31]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f040 809c 	bne.w	8005b12 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	899b      	ldrh	r3, [r3, #12]
 80059e4:	461a      	mov	r2, r3
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80059ec:	fb00 f202 	mul.w	r2, r0, r2
 80059f0:	1a9b      	subs	r3, r3, r2
 80059f2:	440b      	add	r3, r1
 80059f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <put_fat+0x11a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	091b      	lsrs	r3, r3, #4
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e00e      	b.n	8005a26 <put_fat+0x138>
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	b25b      	sxtb	r3, r3
 8005a0e:	f023 030f 	bic.w	r3, r3, #15
 8005a12:	b25a      	sxtb	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	b25b      	sxtb	r3, r3
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	70da      	strb	r2, [r3, #3]
			break;
 8005a30:	e074      	b.n	8005b1c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	899b      	ldrh	r3, [r3, #12]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	4619      	mov	r1, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a46:	4413      	add	r3, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fdbe 	bl	80055cc <move_window>
 8005a50:	4603      	mov	r3, r0
 8005a52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005a54:	7ffb      	ldrb	r3, [r7, #31]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d15d      	bne.n	8005b16 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	8992      	ldrh	r2, [r2, #12]
 8005a68:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a6c:	fb00 f202 	mul.w	r2, r0, r2
 8005a70:	1a9b      	subs	r3, r3, r2
 8005a72:	440b      	add	r3, r1
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	b292      	uxth	r2, r2
 8005a78:	4611      	mov	r1, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7ff fb31 	bl	80050e2 <st_word>
			fs->wflag = 1;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	70da      	strb	r2, [r3, #3]
			break;
 8005a86:	e049      	b.n	8005b1c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	899b      	ldrh	r3, [r3, #12]
 8005a90:	089b      	lsrs	r3, r3, #2
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff fd93 	bl	80055cc <move_window>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d134      	bne.n	8005b1a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	8992      	ldrh	r2, [r2, #12]
 8005ac4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ac8:	fb00 f202 	mul.w	r2, r0, r2
 8005acc:	1a9b      	subs	r3, r3, r2
 8005ace:	440b      	add	r3, r1
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fae3 	bl	800509c <ld_dword>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005adc:	4323      	orrs	r3, r4
 8005ade:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	8992      	ldrh	r2, [r2, #12]
 8005aee:	fbb3 f0f2 	udiv	r0, r3, r2
 8005af2:	fb00 f202 	mul.w	r2, r0, r2
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	440b      	add	r3, r1
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fb0b 	bl	8005118 <st_dword>
			fs->wflag = 1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	70da      	strb	r2, [r3, #3]
			break;
 8005b08:	e008      	b.n	8005b1c <put_fat+0x22e>
		}
	}
 8005b0a:	bf00      	nop
 8005b0c:	e006      	b.n	8005b1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005b0e:	bf00      	nop
 8005b10:	e004      	b.n	8005b1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005b1a:	bf00      	nop
	return res;
 8005b1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3724      	adds	r7, #36	; 0x24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd90      	pop	{r4, r7, pc}

08005b26 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b088      	sub	sp, #32
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d904      	bls.n	8005b4c <remove_chain+0x26>
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d301      	bcc.n	8005b50 <remove_chain+0x2a>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e04b      	b.n	8005be8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00c      	beq.n	8005b70 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b56:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	69b8      	ldr	r0, [r7, #24]
 8005b5e:	f7ff fec6 	bl	80058ee <put_fat>
 8005b62:	4603      	mov	r3, r0
 8005b64:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005b66:	7ffb      	ldrb	r3, [r7, #31]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <remove_chain+0x4a>
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
 8005b6e:	e03b      	b.n	8005be8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f7ff fde7 	bl	8005746 <get_fat>
 8005b78:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d031      	beq.n	8005be4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d101      	bne.n	8005b8a <remove_chain+0x64>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e02e      	b.n	8005be8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b90:	d101      	bne.n	8005b96 <remove_chain+0x70>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e028      	b.n	8005be8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005b96:	2200      	movs	r2, #0
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	69b8      	ldr	r0, [r7, #24]
 8005b9c:	f7ff fea7 	bl	80058ee <put_fat>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ba4:	7ffb      	ldrb	r3, [r7, #31]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <remove_chain+0x88>
 8005baa:	7ffb      	ldrb	r3, [r7, #31]
 8005bac:	e01c      	b.n	8005be8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	3b02      	subs	r3, #2
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20b      	bcs.n	8005bd4 <remove_chain+0xae>
			fs->free_clst++;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	791b      	ldrb	r3, [r3, #4]
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	68ba      	ldr	r2, [r7, #8]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d3c6      	bcc.n	8005b70 <remove_chain+0x4a>
 8005be2:	e000      	b.n	8005be6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005be4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3720      	adds	r7, #32
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10d      	bne.n	8005c22 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <create_chain+0x2c>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d31b      	bcc.n	8005c54 <create_chain+0x64>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	61bb      	str	r3, [r7, #24]
 8005c20:	e018      	b.n	8005c54 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fd8e 	bl	8005746 <get_fat>
 8005c2a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d801      	bhi.n	8005c36 <create_chain+0x46>
 8005c32:	2301      	movs	r3, #1
 8005c34:	e070      	b.n	8005d18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d101      	bne.n	8005c42 <create_chain+0x52>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	e06a      	b.n	8005d18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d201      	bcs.n	8005c50 <create_chain+0x60>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	e063      	b.n	8005d18 <create_chain+0x128>
		scl = clst;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d307      	bcc.n	8005c78 <create_chain+0x88>
				ncl = 2;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d901      	bls.n	8005c78 <create_chain+0x88>
 8005c74:	2300      	movs	r3, #0
 8005c76:	e04f      	b.n	8005d18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005c78:	69f9      	ldr	r1, [r7, #28]
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7ff fd63 	bl	8005746 <get_fat>
 8005c80:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d003      	beq.n	8005c96 <create_chain+0xa6>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c94:	d101      	bne.n	8005c9a <create_chain+0xaa>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	e03e      	b.n	8005d18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d1da      	bne.n	8005c58 <create_chain+0x68>
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e038      	b.n	8005d18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005ca6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cac:	69f9      	ldr	r1, [r7, #28]
 8005cae:	6938      	ldr	r0, [r7, #16]
 8005cb0:	f7ff fe1d 	bl	80058ee <put_fat>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <create_chain+0xe2>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d006      	beq.n	8005cd2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6938      	ldr	r0, [r7, #16]
 8005cca:	f7ff fe10 	bl	80058ee <put_fat>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d116      	bne.n	8005d06 <create_chain+0x116>
		fs->last_clst = ncl;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	699a      	ldr	r2, [r3, #24]
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	3b02      	subs	r3, #2
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d804      	bhi.n	8005cf6 <create_chain+0x106>
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	1e5a      	subs	r2, r3, #1
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	791b      	ldrb	r3, [r3, #4]
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	711a      	strb	r2, [r3, #4]
 8005d04:	e007      	b.n	8005d16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005d06:	7dfb      	ldrb	r3, [r7, #23]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d102      	bne.n	8005d12 <create_chain+0x122>
 8005d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d10:	e000      	b.n	8005d14 <create_chain+0x124>
 8005d12:	2301      	movs	r3, #1
 8005d14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	3304      	adds	r3, #4
 8005d36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	899b      	ldrh	r3, [r3, #12]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	8952      	ldrh	r2, [r2, #10]
 8005d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1d1a      	adds	r2, r3, #4
 8005d52:	613a      	str	r2, [r7, #16]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <clmt_clust+0x42>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e010      	b.n	8005d84 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d307      	bcc.n	8005d7a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	3304      	adds	r3, #4
 8005d76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005d78:	e7e9      	b.n	8005d4e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005d7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4413      	add	r3, r2
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005da6:	d204      	bcs.n	8005db2 <dir_sdi+0x22>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005db2:	2302      	movs	r3, #2
 8005db4:	e071      	b.n	8005e9a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <dir_sdi+0x46>
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d902      	bls.n	8005dd6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10c      	bne.n	8005df6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	8912      	ldrh	r2, [r2, #8]
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d301      	bcc.n	8005dec <dir_sdi+0x5c>
 8005de8:	2302      	movs	r3, #2
 8005dea:	e056      	b.n	8005e9a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	61da      	str	r2, [r3, #28]
 8005df4:	e02d      	b.n	8005e52 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	895b      	ldrh	r3, [r3, #10]
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	899b      	ldrh	r3, [r3, #12]
 8005e00:	fb02 f303 	mul.w	r3, r2, r3
 8005e04:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e06:	e019      	b.n	8005e3c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6979      	ldr	r1, [r7, #20]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff fc9a 	bl	8005746 <get_fat>
 8005e12:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1a:	d101      	bne.n	8005e20 <dir_sdi+0x90>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e03c      	b.n	8005e9a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d904      	bls.n	8005e30 <dir_sdi+0xa0>
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d301      	bcc.n	8005e34 <dir_sdi+0xa4>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e032      	b.n	8005e9a <dir_sdi+0x10a>
			ofs -= csz;
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d2e1      	bcs.n	8005e08 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005e44:	6979      	ldr	r1, [r7, #20]
 8005e46:	6938      	ldr	r0, [r7, #16]
 8005e48:	f7ff fc5e 	bl	8005708 <clust2sect>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	69db      	ldr	r3, [r3, #28]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d101      	bne.n	8005e64 <dir_sdi+0xd4>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e01a      	b.n	8005e9a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	899b      	ldrh	r3, [r3, #12]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e74:	441a      	add	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	899b      	ldrh	r3, [r3, #12]
 8005e84:	461a      	mov	r2, r3
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8005e8c:	fb00 f202 	mul.w	r2, r0, r2
 8005e90:	1a9b      	subs	r3, r3, r2
 8005e92:	18ca      	adds	r2, r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b086      	sub	sp, #24
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	3320      	adds	r3, #32
 8005eb8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <dir_next+0x28>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec8:	d301      	bcc.n	8005ece <dir_next+0x2c>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	e0bb      	b.n	8006046 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	899b      	ldrh	r3, [r3, #12]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005eda:	fb01 f202 	mul.w	r2, r1, r2
 8005ede:	1a9b      	subs	r3, r3, r2
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 809d 	bne.w	8006020 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	8912      	ldrh	r2, [r2, #8]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	f0c0 808d 	bcc.w	8006020 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	61da      	str	r2, [r3, #28]
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	e09a      	b.n	8006046 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	899b      	ldrh	r3, [r3, #12]
 8005f14:	461a      	mov	r2, r3
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	8952      	ldrh	r2, [r2, #10]
 8005f20:	3a01      	subs	r2, #1
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d17b      	bne.n	8006020 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7ff fc08 	bl	8005746 <get_fat>
 8005f36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d801      	bhi.n	8005f42 <dir_next+0xa0>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e081      	b.n	8006046 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f48:	d101      	bne.n	8005f4e <dir_next+0xac>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e07b      	b.n	8006046 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d359      	bcc.n	800600c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d104      	bne.n	8005f68 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	61da      	str	r2, [r3, #28]
 8005f64:	2304      	movs	r3, #4
 8005f66:	e06e      	b.n	8006046 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f7ff fe3d 	bl	8005bf0 <create_chain>
 8005f76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <dir_next+0xe0>
 8005f7e:	2307      	movs	r3, #7
 8005f80:	e061      	b.n	8006046 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d101      	bne.n	8005f8c <dir_next+0xea>
 8005f88:	2302      	movs	r3, #2
 8005f8a:	e05c      	b.n	8006046 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f92:	d101      	bne.n	8005f98 <dir_next+0xf6>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e056      	b.n	8006046 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff fad3 	bl	8005544 <sync_window>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <dir_next+0x106>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e04e      	b.n	8006046 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	899b      	ldrh	r3, [r3, #12]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f7ff f8fc 	bl	80051b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	6979      	ldr	r1, [r7, #20]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f7ff fba1 	bl	8005708 <clust2sect>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	635a      	str	r2, [r3, #52]	; 0x34
 8005fcc:	e012      	b.n	8005ff4 <dir_next+0x152>
						fs->wflag = 1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fab5 	bl	8005544 <sync_window>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <dir_next+0x142>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e030      	b.n	8006046 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	613b      	str	r3, [r7, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	635a      	str	r2, [r3, #52]	; 0x34
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	895b      	ldrh	r3, [r3, #10]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d3e6      	bcc.n	8005fce <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad2      	subs	r2, r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006012:	6979      	ldr	r1, [r7, #20]
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fb77 	bl	8005708 <clust2sect>
 800601a:	4602      	mov	r2, r0
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	899b      	ldrh	r3, [r3, #12]
 8006030:	461a      	mov	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	fbb3 f0f2 	udiv	r0, r3, r2
 8006038:	fb00 f202 	mul.w	r2, r0, r2
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	18ca      	adds	r2, r1, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800605e:	2100      	movs	r1, #0
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fe95 	bl	8005d90 <dir_sdi>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d12b      	bne.n	80060c8 <dir_alloc+0x7a>
		n = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	4619      	mov	r1, r3
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff faa6 	bl	80055cc <move_window>
 8006080:	4603      	mov	r3, r0
 8006082:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006084:	7dfb      	ldrb	r3, [r7, #23]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d11d      	bne.n	80060c6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	2be5      	cmp	r3, #229	; 0xe5
 8006092:	d004      	beq.n	800609e <dir_alloc+0x50>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	3301      	adds	r3, #1
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d102      	bne.n	80060b2 <dir_alloc+0x64>
 80060ac:	e00c      	b.n	80060c8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80060ae:	2300      	movs	r3, #0
 80060b0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80060b2:	2101      	movs	r1, #1
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7ff fef4 	bl	8005ea2 <dir_next>
 80060ba:	4603      	mov	r3, r0
 80060bc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d0d7      	beq.n	8006074 <dir_alloc+0x26>
 80060c4:	e000      	b.n	80060c8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80060c6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d101      	bne.n	80060d2 <dir_alloc+0x84>
 80060ce:	2307      	movs	r3, #7
 80060d0:	75fb      	strb	r3, [r7, #23]
	return res;
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	331a      	adds	r3, #26
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe ffbe 	bl	800506c <ld_word>
 80060f0:	4603      	mov	r3, r0
 80060f2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	2b03      	cmp	r3, #3
 80060fa:	d109      	bne.n	8006110 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe ffb3 	bl	800506c <ld_word>
 8006106:	4603      	mov	r3, r0
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006110:	68fb      	ldr	r3, [r7, #12]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	331a      	adds	r3, #26
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	b292      	uxth	r2, r2
 800612e:	4611      	mov	r1, r2
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe ffd6 	bl	80050e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b03      	cmp	r3, #3
 800613c:	d109      	bne.n	8006152 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f103 0214 	add.w	r2, r3, #20
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0c1b      	lsrs	r3, r3, #16
 8006148:	b29b      	uxth	r3, r3
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe ffc8 	bl	80050e2 <st_word>
	}
}
 8006152:	bf00      	nop
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	331a      	adds	r3, #26
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe ff7e 	bl	800506c <ld_word>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d001      	beq.n	800617a <cmp_lfn+0x1e>
 8006176:	2300      	movs	r3, #0
 8006178:	e059      	b.n	800622e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006182:	1e5a      	subs	r2, r3, #1
 8006184:	4613      	mov	r3, r2
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006190:	2301      	movs	r3, #1
 8006192:	81fb      	strh	r3, [r7, #14]
 8006194:	2300      	movs	r3, #0
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	e033      	b.n	8006202 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800619a:	4a27      	ldr	r2, [pc, #156]	; (8006238 <cmp_lfn+0xdc>)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	4413      	add	r3, r2
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	4413      	add	r3, r2
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe ff5f 	bl	800506c <ld_word>
 80061ae:	4603      	mov	r3, r0
 80061b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80061b2:	89fb      	ldrh	r3, [r7, #14]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01a      	beq.n	80061ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2bfe      	cmp	r3, #254	; 0xfe
 80061bc:	d812      	bhi.n	80061e4 <cmp_lfn+0x88>
 80061be:	89bb      	ldrh	r3, [r7, #12]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f001 fd41 	bl	8007c48 <ff_wtoupper>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461c      	mov	r4, r3
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	617a      	str	r2, [r7, #20]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fd35 	bl	8007c48 <ff_wtoupper>
 80061de:	4603      	mov	r3, r0
 80061e0:	429c      	cmp	r4, r3
 80061e2:	d001      	beq.n	80061e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80061e4:	2300      	movs	r3, #0
 80061e6:	e022      	b.n	800622e <cmp_lfn+0xd2>
			}
			wc = uc;
 80061e8:	89bb      	ldrh	r3, [r7, #12]
 80061ea:	81fb      	strh	r3, [r7, #14]
 80061ec:	e006      	b.n	80061fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80061ee:	89bb      	ldrh	r3, [r7, #12]
 80061f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d001      	beq.n	80061fc <cmp_lfn+0xa0>
 80061f8:	2300      	movs	r3, #0
 80061fa:	e018      	b.n	800622e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3301      	adds	r3, #1
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b0c      	cmp	r3, #12
 8006206:	d9c8      	bls.n	800619a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00b      	beq.n	800622c <cmp_lfn+0xd0>
 8006214:	89fb      	ldrh	r3, [r7, #14]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d008      	beq.n	800622c <cmp_lfn+0xd0>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	4413      	add	r3, r2
 8006222:	881b      	ldrh	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <cmp_lfn+0xd0>
 8006228:	2300      	movs	r3, #0
 800622a:	e000      	b.n	800622e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800622c:	2301      	movs	r3, #1
}
 800622e:	4618      	mov	r0, r3
 8006230:	371c      	adds	r7, #28
 8006232:	46bd      	mov	sp, r7
 8006234:	bd90      	pop	{r4, r7, pc}
 8006236:	bf00      	nop
 8006238:	08009348 	.word	0x08009348

0800623c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	4611      	mov	r1, r2
 8006248:	461a      	mov	r2, r3
 800624a:	460b      	mov	r3, r1
 800624c:	71fb      	strb	r3, [r7, #7]
 800624e:	4613      	mov	r3, r2
 8006250:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	330d      	adds	r3, #13
 8006256:	79ba      	ldrb	r2, [r7, #6]
 8006258:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	330b      	adds	r3, #11
 800625e:	220f      	movs	r2, #15
 8006260:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	330c      	adds	r3, #12
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	331a      	adds	r3, #26
 800626e:	2100      	movs	r1, #0
 8006270:	4618      	mov	r0, r3
 8006272:	f7fe ff36 	bl	80050e2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	1e5a      	subs	r2, r3, #1
 800627a:	4613      	mov	r3, r2
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	82fb      	strh	r3, [r7, #22]
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800628e:	8afb      	ldrh	r3, [r7, #22]
 8006290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <put_lfn+0x6c>
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	1c5a      	adds	r2, r3, #1
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	68fa      	ldr	r2, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80062a8:	4a17      	ldr	r2, [pc, #92]	; (8006308 <put_lfn+0xcc>)
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	4413      	add	r3, r2
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	8afa      	ldrh	r2, [r7, #22]
 80062b8:	4611      	mov	r1, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe ff11 	bl	80050e2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80062c0:	8afb      	ldrh	r3, [r7, #22]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <put_lfn+0x90>
 80062c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80062ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	3301      	adds	r3, #1
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	2b0c      	cmp	r3, #12
 80062d6:	d9da      	bls.n	800628e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80062d8:	8afb      	ldrh	r3, [r7, #22]
 80062da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062de:	4293      	cmp	r3, r2
 80062e0:	d006      	beq.n	80062f0 <put_lfn+0xb4>
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <put_lfn+0xbc>
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	701a      	strb	r2, [r3, #0]
}
 80062fe:	bf00      	nop
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	08009348 	.word	0x08009348

0800630c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b08c      	sub	sp, #48	; 0x30
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800631a:	220b      	movs	r2, #11
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f7fe ff26 	bl	8005170 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b05      	cmp	r3, #5
 8006328:	d92b      	bls.n	8006382 <gen_numname+0x76>
		sr = seq;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800632e:	e022      	b.n	8006376 <gen_numname+0x6a>
			wc = *lfn++;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	607a      	str	r2, [r7, #4]
 8006336:	881b      	ldrh	r3, [r3, #0]
 8006338:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800633a:	2300      	movs	r3, #0
 800633c:	62bb      	str	r3, [r7, #40]	; 0x28
 800633e:	e017      	b.n	8006370 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	005a      	lsls	r2, r3, #1
 8006344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800634e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006350:	085b      	lsrs	r3, r3, #1
 8006352:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d005      	beq.n	800636a <gen_numname+0x5e>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006364:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006368:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	3301      	adds	r3, #1
 800636e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	2b0f      	cmp	r3, #15
 8006374:	d9e4      	bls.n	8006340 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1d8      	bne.n	8006330 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006382:	2307      	movs	r3, #7
 8006384:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	b2db      	uxtb	r3, r3
 8006390:	3330      	adds	r3, #48	; 0x30
 8006392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800639a:	2b39      	cmp	r3, #57	; 0x39
 800639c:	d904      	bls.n	80063a8 <gen_numname+0x9c>
 800639e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80063a2:	3307      	adds	r3, #7
 80063a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	1e5a      	subs	r2, r3, #1
 80063ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80063ae:	3330      	adds	r3, #48	; 0x30
 80063b0:	443b      	add	r3, r7
 80063b2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80063b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1df      	bne.n	8006386 <gen_numname+0x7a>
	ns[i] = '~';
 80063c6:	f107 0214 	add.w	r2, r7, #20
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	4413      	add	r3, r2
 80063ce:	227e      	movs	r2, #126	; 0x7e
 80063d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80063d2:	2300      	movs	r3, #0
 80063d4:	627b      	str	r3, [r7, #36]	; 0x24
 80063d6:	e002      	b.n	80063de <gen_numname+0xd2>
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	3301      	adds	r3, #1
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24
 80063de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d205      	bcs.n	80063f2 <gen_numname+0xe6>
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	4413      	add	r3, r2
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d1f2      	bne.n	80063d8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80063f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f4:	2b07      	cmp	r3, #7
 80063f6:	d807      	bhi.n	8006408 <gen_numname+0xfc>
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	62ba      	str	r2, [r7, #40]	; 0x28
 80063fe:	3330      	adds	r3, #48	; 0x30
 8006400:	443b      	add	r3, r7
 8006402:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006406:	e000      	b.n	800640a <gen_numname+0xfe>
 8006408:	2120      	movs	r1, #32
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	627a      	str	r2, [r7, #36]	; 0x24
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	460a      	mov	r2, r1
 8006416:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641a:	2b07      	cmp	r3, #7
 800641c:	d9e9      	bls.n	80063f2 <gen_numname+0xe6>
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	3730      	adds	r7, #48	; 0x30
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006434:	230b      	movs	r3, #11
 8006436:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	0852      	lsrs	r2, r2, #1
 800643e:	01db      	lsls	r3, r3, #7
 8006440:	4313      	orrs	r3, r2
 8006442:	b2da      	uxtb	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	1c59      	adds	r1, r3, #1
 8006448:	6079      	str	r1, [r7, #4]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	4413      	add	r3, r2
 800644e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	3b01      	subs	r3, #1
 8006454:	60bb      	str	r3, [r7, #8]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1ed      	bne.n	8006438 <sum_sfn+0x10>
	return sum;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006478:	2100      	movs	r1, #0
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fc88 	bl	8005d90 <dir_sdi>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <dir_find+0x24>
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	e0a9      	b.n	80065e2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800648e:	23ff      	movs	r3, #255	; 0xff
 8006490:	753b      	strb	r3, [r7, #20]
 8006492:	7d3b      	ldrb	r3, [r7, #20]
 8006494:	757b      	strb	r3, [r7, #21]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	4619      	mov	r1, r3
 80064a4:	6938      	ldr	r0, [r7, #16]
 80064a6:	f7ff f891 	bl	80055cc <move_window>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f040 8090 	bne.w	80065d6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80064be:	7dbb      	ldrb	r3, [r7, #22]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <dir_find+0x60>
 80064c4:	2304      	movs	r3, #4
 80064c6:	75fb      	strb	r3, [r7, #23]
 80064c8:	e08a      	b.n	80065e0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	330b      	adds	r3, #11
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d6:	73fb      	strb	r3, [r7, #15]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	7bfa      	ldrb	r2, [r7, #15]
 80064dc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80064de:	7dbb      	ldrb	r3, [r7, #22]
 80064e0:	2be5      	cmp	r3, #229	; 0xe5
 80064e2:	d007      	beq.n	80064f4 <dir_find+0x8a>
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <dir_find+0x98>
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	2b0f      	cmp	r3, #15
 80064f2:	d006      	beq.n	8006502 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064f4:	23ff      	movs	r3, #255	; 0xff
 80064f6:	757b      	strb	r3, [r7, #21]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295
 80064fe:	631a      	str	r2, [r3, #48]	; 0x30
 8006500:	e05e      	b.n	80065c0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b0f      	cmp	r3, #15
 8006506:	d136      	bne.n	8006576 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d154      	bne.n	80065c0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006516:	7dbb      	ldrb	r3, [r7, #22]
 8006518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00d      	beq.n	800653c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	7b5b      	ldrb	r3, [r3, #13]
 8006526:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006528:	7dbb      	ldrb	r3, [r7, #22]
 800652a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800652e:	75bb      	strb	r3, [r7, #22]
 8006530:	7dbb      	ldrb	r3, [r7, #22]
 8006532:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695a      	ldr	r2, [r3, #20]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800653c:	7dba      	ldrb	r2, [r7, #22]
 800653e:	7d7b      	ldrb	r3, [r7, #21]
 8006540:	429a      	cmp	r2, r3
 8006542:	d115      	bne.n	8006570 <dir_find+0x106>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	330d      	adds	r3, #13
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	7d3a      	ldrb	r2, [r7, #20]
 800654e:	429a      	cmp	r2, r3
 8006550:	d10e      	bne.n	8006570 <dir_find+0x106>
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7ff fdfd 	bl	800615c <cmp_lfn>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <dir_find+0x106>
 8006568:	7d7b      	ldrb	r3, [r7, #21]
 800656a:	3b01      	subs	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	e000      	b.n	8006572 <dir_find+0x108>
 8006570:	23ff      	movs	r3, #255	; 0xff
 8006572:	757b      	strb	r3, [r7, #21]
 8006574:	e024      	b.n	80065c0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006576:	7d7b      	ldrb	r3, [r7, #21]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <dir_find+0x126>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff ff51 	bl	8006428 <sum_sfn>
 8006586:	4603      	mov	r3, r0
 8006588:	461a      	mov	r2, r3
 800658a:	7d3b      	ldrb	r3, [r7, #20]
 800658c:	4293      	cmp	r3, r2
 800658e:	d024      	beq.n	80065da <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <dir_find+0x14a>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a18      	ldr	r0, [r3, #32]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3324      	adds	r3, #36	; 0x24
 80065a6:	220b      	movs	r2, #11
 80065a8:	4619      	mov	r1, r3
 80065aa:	f7fe fe1d 	bl	80051e8 <mem_cmp>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d014      	beq.n	80065de <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80065b4:	23ff      	movs	r3, #255	; 0xff
 80065b6:	757b      	strb	r3, [r7, #21]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f04f 32ff 	mov.w	r2, #4294967295
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80065c0:	2100      	movs	r1, #0
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff fc6d 	bl	8005ea2 <dir_next>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80065cc:	7dfb      	ldrb	r3, [r7, #23]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f43f af65 	beq.w	800649e <dir_find+0x34>
 80065d4:	e004      	b.n	80065e0 <dir_find+0x176>
		if (res != FR_OK) break;
 80065d6:	bf00      	nop
 80065d8:	e002      	b.n	80065e0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80065de:	bf00      	nop

	return res;
 80065e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08c      	sub	sp, #48	; 0x30
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006600:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <dir_register+0x20>
 8006608:	2306      	movs	r3, #6
 800660a:	e0e0      	b.n	80067ce <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800660c:	2300      	movs	r3, #0
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
 8006610:	e002      	b.n	8006618 <dir_register+0x2c>
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	3301      	adds	r3, #1
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1f4      	bne.n	8006612 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800662e:	f107 030c 	add.w	r3, r7, #12
 8006632:	220c      	movs	r2, #12
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe fd9b 	bl	8005170 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	d032      	beq.n	80066aa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2240      	movs	r2, #64	; 0x40
 8006648:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800664c:	2301      	movs	r3, #1
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006650:	e016      	b.n	8006680 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	f107 010c 	add.w	r1, r7, #12
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f7ff fe53 	bl	800630c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff feff 	bl	800646a <dir_find>
 800666c:	4603      	mov	r3, r0
 800666e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006672:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	3301      	adds	r3, #1
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006682:	2b63      	cmp	r3, #99	; 0x63
 8006684:	d9e5      	bls.n	8006652 <dir_register+0x66>
 8006686:	e000      	b.n	800668a <dir_register+0x9e>
			if (res != FR_OK) break;
 8006688:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	2b64      	cmp	r3, #100	; 0x64
 800668e:	d101      	bne.n	8006694 <dir_register+0xa8>
 8006690:	2307      	movs	r3, #7
 8006692:	e09c      	b.n	80067ce <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006698:	2b04      	cmp	r3, #4
 800669a:	d002      	beq.n	80066a2 <dir_register+0xb6>
 800669c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a0:	e095      	b.n	80067ce <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80066a2:	7dfa      	ldrb	r2, [r7, #23]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80066aa:	7dfb      	ldrb	r3, [r7, #23]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <dir_register+0xd8>
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	330c      	adds	r3, #12
 80066b8:	4a47      	ldr	r2, [pc, #284]	; (80067d8 <dir_register+0x1ec>)
 80066ba:	fba2 2303 	umull	r2, r3, r2, r3
 80066be:	089b      	lsrs	r3, r3, #2
 80066c0:	3301      	adds	r3, #1
 80066c2:	e000      	b.n	80066c6 <dir_register+0xda>
 80066c4:	2301      	movs	r3, #1
 80066c6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80066c8:	6a39      	ldr	r1, [r7, #32]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fcbf 	bl	800604e <dir_alloc>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80066d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d148      	bne.n	8006770 <dir_register+0x184>
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	623b      	str	r3, [r7, #32]
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d042      	beq.n	8006770 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695a      	ldr	r2, [r3, #20]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	015b      	lsls	r3, r3, #5
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7ff fb4a 	bl	8005d90 <dir_sdi>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006706:	2b00      	cmp	r3, #0
 8006708:	d132      	bne.n	8006770 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	3324      	adds	r3, #36	; 0x24
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff fe8a 	bl	8006428 <sum_sfn>
 8006714:	4603      	mov	r3, r0
 8006716:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	4619      	mov	r1, r3
 800671e:	69f8      	ldr	r0, [r7, #28]
 8006720:	f7fe ff54 	bl	80055cc <move_window>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800672a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d11d      	bne.n	800676e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	6918      	ldr	r0, [r3, #16]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a19      	ldr	r1, [r3, #32]
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	b2da      	uxtb	r2, r3
 800673e:	7efb      	ldrb	r3, [r7, #27]
 8006740:	f7ff fd7c 	bl	800623c <put_lfn>
				fs->wflag = 1;
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	2201      	movs	r2, #1
 8006748:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fba8 	bl	8005ea2 <dir_next>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <dir_register+0x184>
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	3b01      	subs	r3, #1
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1d5      	bne.n	8006718 <dir_register+0x12c>
 800676c:	e000      	b.n	8006770 <dir_register+0x184>
				if (res != FR_OK) break;
 800676e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006770:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006774:	2b00      	cmp	r3, #0
 8006776:	d128      	bne.n	80067ca <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4619      	mov	r1, r3
 800677e:	69f8      	ldr	r0, [r7, #28]
 8006780:	f7fe ff24 	bl	80055cc <move_window>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800678a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800678e:	2b00      	cmp	r3, #0
 8006790:	d11b      	bne.n	80067ca <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	2220      	movs	r2, #32
 8006798:	2100      	movs	r1, #0
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fd09 	bl	80051b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a18      	ldr	r0, [r3, #32]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3324      	adds	r3, #36	; 0x24
 80067a8:	220b      	movs	r2, #11
 80067aa:	4619      	mov	r1, r3
 80067ac:	f7fe fce0 	bl	8005170 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	330c      	adds	r3, #12
 80067bc:	f002 0218 	and.w	r2, r2, #24
 80067c0:	b2d2      	uxtb	r2, r2
 80067c2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2201      	movs	r2, #1
 80067c8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80067ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3730      	adds	r7, #48	; 0x30
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	4ec4ec4f 	.word	0x4ec4ec4f

080067dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	61ba      	str	r2, [r7, #24]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4413      	add	r3, r2
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800680a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800680c:	2b1f      	cmp	r3, #31
 800680e:	d940      	bls.n	8006892 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006812:	2b2f      	cmp	r3, #47	; 0x2f
 8006814:	d006      	beq.n	8006824 <create_name+0x48>
 8006816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006818:	2b5c      	cmp	r3, #92	; 0x5c
 800681a:	d110      	bne.n	800683e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800681c:	e002      	b.n	8006824 <create_name+0x48>
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3301      	adds	r3, #1
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	4413      	add	r3, r2
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b2f      	cmp	r3, #47	; 0x2f
 800682e:	d0f6      	beq.n	800681e <create_name+0x42>
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	4413      	add	r3, r2
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	2b5c      	cmp	r3, #92	; 0x5c
 800683a:	d0f0      	beq.n	800681e <create_name+0x42>
			break;
 800683c:	e02a      	b.n	8006894 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2bfe      	cmp	r3, #254	; 0xfe
 8006842:	d901      	bls.n	8006848 <create_name+0x6c>
 8006844:	2306      	movs	r3, #6
 8006846:	e17d      	b.n	8006b44 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800684a:	b2db      	uxtb	r3, r3
 800684c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800684e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f9bc 	bl	8007bd0 <ff_convert>
 8006858:	4603      	mov	r3, r0
 800685a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800685c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <create_name+0x8a>
 8006862:	2306      	movs	r3, #6
 8006864:	e16e      	b.n	8006b44 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006868:	2b7f      	cmp	r3, #127	; 0x7f
 800686a:	d809      	bhi.n	8006880 <create_name+0xa4>
 800686c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800686e:	4619      	mov	r1, r3
 8006870:	488d      	ldr	r0, [pc, #564]	; (8006aa8 <create_name+0x2cc>)
 8006872:	f7fe fce0 	bl	8005236 <chk_chr>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <create_name+0xa4>
 800687c:	2306      	movs	r3, #6
 800687e:	e161      	b.n	8006b44 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	617a      	str	r2, [r7, #20]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4413      	add	r3, r2
 800688c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800688e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006890:	e7b4      	b.n	80067fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006892:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	441a      	add	r2, r3
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800689e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a0:	2b1f      	cmp	r3, #31
 80068a2:	d801      	bhi.n	80068a8 <create_name+0xcc>
 80068a4:	2304      	movs	r3, #4
 80068a6:	e000      	b.n	80068aa <create_name+0xce>
 80068a8:	2300      	movs	r3, #0
 80068aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80068ae:	e011      	b.n	80068d4 <create_name+0xf8>
		w = lfn[di - 1];
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80068b6:	3b01      	subs	r3, #1
 80068b8:	005b      	lsls	r3, r3, #1
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80068c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d002      	beq.n	80068ce <create_name+0xf2>
 80068c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068ca:	2b2e      	cmp	r3, #46	; 0x2e
 80068cc:	d106      	bne.n	80068dc <create_name+0x100>
		di--;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	3b01      	subs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1ea      	bne.n	80068b0 <create_name+0xd4>
 80068da:	e000      	b.n	80068de <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80068dc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	2200      	movs	r2, #0
 80068e8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <create_name+0x118>
 80068f0:	2306      	movs	r3, #6
 80068f2:	e127      	b.n	8006b44 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	3324      	adds	r3, #36	; 0x24
 80068f8:	220b      	movs	r2, #11
 80068fa:	2120      	movs	r1, #32
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fc58 	bl	80051b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006902:	2300      	movs	r3, #0
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e002      	b.n	800690e <create_name+0x132>
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3301      	adds	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	2b20      	cmp	r3, #32
 800691a:	d0f5      	beq.n	8006908 <create_name+0x12c>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	881b      	ldrh	r3, [r3, #0]
 8006926:	2b2e      	cmp	r3, #46	; 0x2e
 8006928:	d0ee      	beq.n	8006908 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d009      	beq.n	8006944 <create_name+0x168>
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006934:	f043 0303 	orr.w	r3, r3, #3
 8006938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800693c:	e002      	b.n	8006944 <create_name+0x168>
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	3b01      	subs	r3, #1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <create_name+0x182>
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006950:	3b01      	subs	r3, #1
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	68fa      	ldr	r2, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	881b      	ldrh	r3, [r3, #0]
 800695a:	2b2e      	cmp	r3, #46	; 0x2e
 800695c:	d1ef      	bne.n	800693e <create_name+0x162>

	i = b = 0; ni = 8;
 800695e:	2300      	movs	r3, #0
 8006960:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006964:	2300      	movs	r3, #0
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	2308      	movs	r3, #8
 800696a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	1c5a      	adds	r2, r3, #1
 8006970:	61ba      	str	r2, [r7, #24]
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800697c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8090 	beq.w	8006aa4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006986:	2b20      	cmp	r3, #32
 8006988:	d006      	beq.n	8006998 <create_name+0x1bc>
 800698a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800698c:	2b2e      	cmp	r3, #46	; 0x2e
 800698e:	d10a      	bne.n	80069a6 <create_name+0x1ca>
 8006990:	69ba      	ldr	r2, [r7, #24]
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	429a      	cmp	r2, r3
 8006996:	d006      	beq.n	80069a6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006998:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800699c:	f043 0303 	orr.w	r3, r3, #3
 80069a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069a4:	e07d      	b.n	8006aa2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80069a6:	6a3a      	ldr	r2, [r7, #32]
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d203      	bcs.n	80069b6 <create_name+0x1da>
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d123      	bne.n	80069fe <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	2b0b      	cmp	r3, #11
 80069ba:	d106      	bne.n	80069ca <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80069bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c0:	f043 0303 	orr.w	r3, r3, #3
 80069c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069c8:	e075      	b.n	8006ab6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d005      	beq.n	80069de <create_name+0x202>
 80069d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069d6:	f043 0303 	orr.w	r3, r3, #3
 80069da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d866      	bhi.n	8006ab4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	2308      	movs	r3, #8
 80069ec:	623b      	str	r3, [r7, #32]
 80069ee:	230b      	movs	r3, #11
 80069f0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80069f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069fc:	e051      	b.n	8006aa2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80069fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a00:	2b7f      	cmp	r3, #127	; 0x7f
 8006a02:	d914      	bls.n	8006a2e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006a04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f8e1 	bl	8007bd0 <ff_convert>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d004      	beq.n	8006a22 <create_name+0x246>
 8006a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a1a:	3b80      	subs	r3, #128	; 0x80
 8006a1c:	4a23      	ldr	r2, [pc, #140]	; (8006aac <create_name+0x2d0>)
 8006a1e:	5cd3      	ldrb	r3, [r2, r3]
 8006a20:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a26:	f043 0302 	orr.w	r3, r3, #2
 8006a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006a2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <create_name+0x268>
 8006a34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a36:	4619      	mov	r1, r3
 8006a38:	481d      	ldr	r0, [pc, #116]	; (8006ab0 <create_name+0x2d4>)
 8006a3a:	f7fe fbfc 	bl	8005236 <chk_chr>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d008      	beq.n	8006a56 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006a44:	235f      	movs	r3, #95	; 0x5f
 8006a46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a4c:	f043 0303 	orr.w	r3, r3, #3
 8006a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006a54:	e01b      	b.n	8006a8e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006a56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d909      	bls.n	8006a70 <create_name+0x294>
 8006a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a5e:	2b5a      	cmp	r3, #90	; 0x5a
 8006a60:	d806      	bhi.n	8006a70 <create_name+0x294>
					b |= 2;
 8006a62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a6e:	e00e      	b.n	8006a8e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006a70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a72:	2b60      	cmp	r3, #96	; 0x60
 8006a74:	d90b      	bls.n	8006a8e <create_name+0x2b2>
 8006a76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a78:	2b7a      	cmp	r3, #122	; 0x7a
 8006a7a:	d808      	bhi.n	8006a8e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a80:	f043 0301 	orr.w	r3, r3, #1
 8006a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006a88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a8a:	3b20      	subs	r3, #32
 8006a8c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	623a      	str	r2, [r7, #32]
 8006a94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a96:	b2d1      	uxtb	r1, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006aa2:	e763      	b.n	800696c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006aa4:	bf00      	nop
 8006aa6:	e006      	b.n	8006ab6 <create_name+0x2da>
 8006aa8:	080088a0 	.word	0x080088a0
 8006aac:	080092c8 	.word	0x080092c8
 8006ab0:	080088ac 	.word	0x080088ac
			if (si > di) break;			/* No extension */
 8006ab4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006abc:	2be5      	cmp	r3, #229	; 0xe5
 8006abe:	d103      	bne.n	8006ac8 <create_name+0x2ec>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2205      	movs	r2, #5
 8006ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	2b08      	cmp	r3, #8
 8006acc:	d104      	bne.n	8006ad8 <create_name+0x2fc>
 8006ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	2b0c      	cmp	r3, #12
 8006ae2:	d005      	beq.n	8006af0 <create_name+0x314>
 8006ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	2b03      	cmp	r3, #3
 8006aee:	d105      	bne.n	8006afc <create_name+0x320>
 8006af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d117      	bne.n	8006b38 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d105      	bne.n	8006b20 <create_name+0x344>
 8006b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b18:	f043 0310 	orr.w	r3, r3, #16
 8006b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006b20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b24:	f003 030c 	and.w	r3, r3, #12
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d105      	bne.n	8006b38 <create_name+0x35c>
 8006b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b30:	f043 0308 	orr.w	r3, r3, #8
 8006b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006b3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006b42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3728      	adds	r7, #40	; 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006b60:	e002      	b.n	8006b68 <follow_path+0x1c>
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b2f      	cmp	r3, #47	; 0x2f
 8006b6e:	d0f8      	beq.n	8006b62 <follow_path+0x16>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b5c      	cmp	r3, #92	; 0x5c
 8006b76:	d0f4      	beq.n	8006b62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b1f      	cmp	r3, #31
 8006b84:	d80a      	bhi.n	8006b9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2280      	movs	r2, #128	; 0x80
 8006b8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006b8e:	2100      	movs	r1, #0
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff f8fd 	bl	8005d90 <dir_sdi>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
 8006b9a:	e048      	b.n	8006c2e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b9c:	463b      	mov	r3, r7
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fe1b 	bl	80067dc <create_name>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d139      	bne.n	8006c24 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fc5a 	bl	800646a <dir_find>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bc0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d12c      	bne.n	8006c28 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d127      	bne.n	8006c28 <follow_path+0xdc>
 8006bd8:	2305      	movs	r3, #5
 8006bda:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006bdc:	e024      	b.n	8006c28 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bde:	7afb      	ldrb	r3, [r7, #11]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d121      	bne.n	8006c2c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	799b      	ldrb	r3, [r3, #6]
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d102      	bne.n	8006bfa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006bf4:	2305      	movs	r3, #5
 8006bf6:	75fb      	strb	r3, [r7, #23]
 8006bf8:	e019      	b.n	8006c2e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	8992      	ldrh	r2, [r2, #12]
 8006c08:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c0c:	fb00 f202 	mul.w	r2, r0, r2
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	440b      	add	r3, r1
 8006c14:	4619      	mov	r1, r3
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff fa60 	bl	80060dc <ld_clust>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c22:	e7bb      	b.n	8006b9c <follow_path+0x50>
			if (res != FR_OK) break;
 8006c24:	bf00      	nop
 8006c26:	e002      	b.n	8006c2e <follow_path+0xe2>
				break;
 8006c28:	bf00      	nop
 8006c2a:	e000      	b.n	8006c2e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c2c:	bf00      	nop
			}
		}
	}

	return res;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295
 8006c44:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d031      	beq.n	8006cb2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e002      	b.n	8006c5c <get_ldnumber+0x24>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b1f      	cmp	r3, #31
 8006c62:	d903      	bls.n	8006c6c <get_ldnumber+0x34>
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b3a      	cmp	r3, #58	; 0x3a
 8006c6a:	d1f4      	bne.n	8006c56 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	2b3a      	cmp	r3, #58	; 0x3a
 8006c72:	d11c      	bne.n	8006cae <get_ldnumber+0x76>
			tp = *path;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	60fa      	str	r2, [r7, #12]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	3b30      	subs	r3, #48	; 0x30
 8006c84:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2b09      	cmp	r3, #9
 8006c8a:	d80e      	bhi.n	8006caa <get_ldnumber+0x72>
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d10a      	bne.n	8006caa <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d107      	bne.n	8006caa <get_ldnumber+0x72>
					vol = (int)i;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	e002      	b.n	8006cb4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006cb2:	693b      	ldr	r3, [r7, #16]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	70da      	strb	r2, [r3, #3]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fe fc76 	bl	80055cc <move_window>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <check_fs+0x2a>
 8006ce6:	2304      	movs	r3, #4
 8006ce8:	e038      	b.n	8006d5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3338      	adds	r3, #56	; 0x38
 8006cee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe f9ba 	bl	800506c <ld_word>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <check_fs+0x48>
 8006d04:	2303      	movs	r3, #3
 8006d06:	e029      	b.n	8006d5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d0e:	2be9      	cmp	r3, #233	; 0xe9
 8006d10:	d009      	beq.n	8006d26 <check_fs+0x66>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d18:	2beb      	cmp	r3, #235	; 0xeb
 8006d1a:	d11e      	bne.n	8006d5a <check_fs+0x9a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d22:	2b90      	cmp	r3, #144	; 0x90
 8006d24:	d119      	bne.n	8006d5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3338      	adds	r3, #56	; 0x38
 8006d2a:	3336      	adds	r3, #54	; 0x36
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe f9b5 	bl	800509c <ld_dword>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d38:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <check_fs+0xa4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d101      	bne.n	8006d42 <check_fs+0x82>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e00c      	b.n	8006d5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3338      	adds	r3, #56	; 0x38
 8006d46:	3352      	adds	r3, #82	; 0x52
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe f9a7 	bl	800509c <ld_dword>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <check_fs+0xa8>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d101      	bne.n	8006d5a <check_fs+0x9a>
 8006d56:	2300      	movs	r3, #0
 8006d58:	e000      	b.n	8006d5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d5a:	2302      	movs	r3, #2
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3708      	adds	r7, #8
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	00544146 	.word	0x00544146
 8006d68:	33544146 	.word	0x33544146

08006d6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b096      	sub	sp, #88	; 0x58
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f7ff ff59 	bl	8006c38 <get_ldnumber>
 8006d86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da01      	bge.n	8006d92 <find_volume+0x26>
 8006d8e:	230b      	movs	r3, #11
 8006d90:	e265      	b.n	800725e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d92:	4a9f      	ldr	r2, [pc, #636]	; (8007010 <find_volume+0x2a4>)
 8006d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <find_volume+0x3a>
 8006da2:	230c      	movs	r3, #12
 8006da4:	e25b      	b.n	800725e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006daa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01a      	beq.n	8006df2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe f8b5 	bl	8004f30 <disk_status>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10c      	bne.n	8006df2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <find_volume+0x82>
 8006dde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006dea:	230a      	movs	r3, #10
 8006dec:	e237      	b.n	800725e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8006dee:	2300      	movs	r3, #0
 8006df0:	e235      	b.n	800725e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df4:	2200      	movs	r2, #0
 8006df6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dfa:	b2da      	uxtb	r2, r3
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fe f8ad 	bl	8004f64 <disk_initialize>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e21e      	b.n	800725e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <find_volume+0xca>
 8006e26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e32:	230a      	movs	r3, #10
 8006e34:	e213      	b.n	800725e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	7858      	ldrb	r0, [r3, #1]
 8006e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2102      	movs	r1, #2
 8006e42:	f7fe f8f5 	bl	8005030 <disk_ioctl>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d001      	beq.n	8006e50 <find_volume+0xe4>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e206      	b.n	800725e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	899b      	ldrh	r3, [r3, #12]
 8006e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e58:	d80d      	bhi.n	8006e76 <find_volume+0x10a>
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	899b      	ldrh	r3, [r3, #12]
 8006e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e62:	d308      	bcc.n	8006e76 <find_volume+0x10a>
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	899b      	ldrh	r3, [r3, #12]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	899b      	ldrh	r3, [r3, #12]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d001      	beq.n	8006e7a <find_volume+0x10e>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e1f1      	b.n	800725e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e7e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e82:	f7ff ff1d 	bl	8006cc0 <check_fs>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d149      	bne.n	8006f28 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e94:	2300      	movs	r3, #0
 8006e96:	643b      	str	r3, [r7, #64]	; 0x40
 8006e98:	e01e      	b.n	8006ed8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006ea8:	4413      	add	r3, r2
 8006eaa:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	3304      	adds	r3, #4
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d006      	beq.n	8006ec4 <find_volume+0x158>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	3308      	adds	r3, #8
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe f8ee 	bl	800509c <ld_dword>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	e000      	b.n	8006ec6 <find_volume+0x15a>
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	3358      	adds	r3, #88	; 0x58
 8006ecc:	443b      	add	r3, r7
 8006ece:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d9dd      	bls.n	8006e9a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006ede:	2300      	movs	r3, #0
 8006ee0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <find_volume+0x182>
 8006ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eea:	3b01      	subs	r3, #1
 8006eec:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	3358      	adds	r3, #88	; 0x58
 8006ef4:	443b      	add	r3, r7
 8006ef6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006efa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d005      	beq.n	8006f0e <find_volume+0x1a2>
 8006f02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f06:	f7ff fedb 	bl	8006cc0 <check_fs>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	e000      	b.n	8006f10 <find_volume+0x1a4>
 8006f0e:	2303      	movs	r3, #3
 8006f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d905      	bls.n	8006f28 <find_volume+0x1bc>
 8006f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f1e:	3301      	adds	r3, #1
 8006f20:	643b      	str	r3, [r7, #64]	; 0x40
 8006f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d9e2      	bls.n	8006eee <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006f28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d101      	bne.n	8006f34 <find_volume+0x1c8>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e194      	b.n	800725e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006f34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d901      	bls.n	8006f40 <find_volume+0x1d4>
 8006f3c:	230d      	movs	r3, #13
 8006f3e:	e18e      	b.n	800725e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	3338      	adds	r3, #56	; 0x38
 8006f44:	330b      	adds	r3, #11
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe f890 	bl	800506c <ld_word>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f52:	899b      	ldrh	r3, [r3, #12]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d001      	beq.n	8006f5c <find_volume+0x1f0>
 8006f58:	230d      	movs	r3, #13
 8006f5a:	e180      	b.n	800725e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5e:	3338      	adds	r3, #56	; 0x38
 8006f60:	3316      	adds	r3, #22
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe f882 	bl	800506c <ld_word>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d106      	bne.n	8006f80 <find_volume+0x214>
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	3338      	adds	r3, #56	; 0x38
 8006f76:	3324      	adds	r3, #36	; 0x24
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe f88f 	bl	800509c <ld_dword>
 8006f7e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f84:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	789b      	ldrb	r3, [r3, #2]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d005      	beq.n	8006fa4 <find_volume+0x238>
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	789b      	ldrb	r3, [r3, #2]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d001      	beq.n	8006fa4 <find_volume+0x238>
 8006fa0:	230d      	movs	r3, #13
 8006fa2:	e15c      	b.n	800725e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa6:	789b      	ldrb	r3, [r3, #2]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc0:	895b      	ldrh	r3, [r3, #10]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d008      	beq.n	8006fd8 <find_volume+0x26c>
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	895b      	ldrh	r3, [r3, #10]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	895b      	ldrh	r3, [r3, #10]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d001      	beq.n	8006fdc <find_volume+0x270>
 8006fd8:	230d      	movs	r3, #13
 8006fda:	e140      	b.n	800725e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	3338      	adds	r3, #56	; 0x38
 8006fe0:	3311      	adds	r3, #17
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe f842 	bl	800506c <ld_word>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	891b      	ldrh	r3, [r3, #8]
 8006ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ff6:	8992      	ldrh	r2, [r2, #12]
 8006ff8:	0952      	lsrs	r2, r2, #5
 8006ffa:	b292      	uxth	r2, r2
 8006ffc:	fbb3 f1f2 	udiv	r1, r3, r2
 8007000:	fb01 f202 	mul.w	r2, r1, r2
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d003      	beq.n	8007014 <find_volume+0x2a8>
 800700c:	230d      	movs	r3, #13
 800700e:	e126      	b.n	800725e <find_volume+0x4f2>
 8007010:	200032ec 	.word	0x200032ec

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007016:	3338      	adds	r3, #56	; 0x38
 8007018:	3313      	adds	r3, #19
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe f826 	bl	800506c <ld_word>
 8007020:	4603      	mov	r3, r0
 8007022:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <find_volume+0x2cc>
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	3338      	adds	r3, #56	; 0x38
 800702e:	3320      	adds	r3, #32
 8007030:	4618      	mov	r0, r3
 8007032:	f7fe f833 	bl	800509c <ld_dword>
 8007036:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703a:	3338      	adds	r3, #56	; 0x38
 800703c:	330e      	adds	r3, #14
 800703e:	4618      	mov	r0, r3
 8007040:	f7fe f814 	bl	800506c <ld_word>
 8007044:	4603      	mov	r3, r0
 8007046:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007048:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <find_volume+0x2e6>
 800704e:	230d      	movs	r3, #13
 8007050:	e105      	b.n	800725e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007052:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007056:	4413      	add	r3, r2
 8007058:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800705a:	8911      	ldrh	r1, [r2, #8]
 800705c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800705e:	8992      	ldrh	r2, [r2, #12]
 8007060:	0952      	lsrs	r2, r2, #5
 8007062:	b292      	uxth	r2, r2
 8007064:	fbb1 f2f2 	udiv	r2, r1, r2
 8007068:	b292      	uxth	r2, r2
 800706a:	4413      	add	r3, r2
 800706c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800706e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	429a      	cmp	r2, r3
 8007074:	d201      	bcs.n	800707a <find_volume+0x30e>
 8007076:	230d      	movs	r3, #13
 8007078:	e0f1      	b.n	800725e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800707a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800707c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007082:	8952      	ldrh	r2, [r2, #10]
 8007084:	fbb3 f3f2 	udiv	r3, r3, r2
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <find_volume+0x328>
 8007090:	230d      	movs	r3, #13
 8007092:	e0e4      	b.n	800725e <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007094:	2303      	movs	r3, #3
 8007096:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d802      	bhi.n	80070aa <find_volume+0x33e>
 80070a4:	2302      	movs	r3, #2
 80070a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	f640 72f5 	movw	r2, #4085	; 0xff5
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d802      	bhi.n	80070ba <find_volume+0x34e>
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	1c9a      	adds	r2, r3, #2
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80070c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070c6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80070c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80070ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070cc:	441a      	add	r2, r3
 80070ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80070d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80070d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d6:	441a      	add	r2, r3
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80070dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d11e      	bne.n	8007122 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80070e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e6:	3338      	adds	r3, #56	; 0x38
 80070e8:	332a      	adds	r3, #42	; 0x2a
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fd ffbe 	bl	800506c <ld_word>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <find_volume+0x38e>
 80070f6:	230d      	movs	r3, #13
 80070f8:	e0b1      	b.n	800725e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80070fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fc:	891b      	ldrh	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <find_volume+0x39a>
 8007102:	230d      	movs	r3, #13
 8007104:	e0ab      	b.n	800725e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	3338      	adds	r3, #56	; 0x38
 800710a:	332c      	adds	r3, #44	; 0x2c
 800710c:	4618      	mov	r0, r3
 800710e:	f7fd ffc5 	bl	800509c <ld_dword>
 8007112:	4602      	mov	r2, r0
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711a:	69db      	ldr	r3, [r3, #28]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	647b      	str	r3, [r7, #68]	; 0x44
 8007120:	e01f      	b.n	8007162 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	891b      	ldrh	r3, [r3, #8]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d101      	bne.n	800712e <find_volume+0x3c2>
 800712a:	230d      	movs	r3, #13
 800712c:	e097      	b.n	800725e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007134:	441a      	add	r2, r3
 8007136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007138:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800713a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800713e:	2b02      	cmp	r3, #2
 8007140:	d103      	bne.n	800714a <find_volume+0x3de>
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	e00a      	b.n	8007160 <find_volume+0x3f4>
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	69da      	ldr	r2, [r3, #28]
 800714e:	4613      	mov	r3, r2
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	4413      	add	r3, r2
 8007154:	085a      	lsrs	r2, r3, #1
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007168:	899b      	ldrh	r3, [r3, #12]
 800716a:	4619      	mov	r1, r3
 800716c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716e:	440b      	add	r3, r1
 8007170:	3b01      	subs	r3, #1
 8007172:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007174:	8989      	ldrh	r1, [r1, #12]
 8007176:	fbb3 f3f1 	udiv	r3, r3, r1
 800717a:	429a      	cmp	r2, r3
 800717c:	d201      	bcs.n	8007182 <find_volume+0x416>
 800717e:	230d      	movs	r3, #13
 8007180:	e06d      	b.n	800725e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007184:	f04f 32ff 	mov.w	r2, #4294967295
 8007188:	619a      	str	r2, [r3, #24]
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	2280      	movs	r2, #128	; 0x80
 8007196:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800719c:	2b03      	cmp	r3, #3
 800719e:	d149      	bne.n	8007234 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	3338      	adds	r3, #56	; 0x38
 80071a4:	3330      	adds	r3, #48	; 0x30
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fd ff60 	bl	800506c <ld_word>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d140      	bne.n	8007234 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80071b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b4:	3301      	adds	r3, #1
 80071b6:	4619      	mov	r1, r3
 80071b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071ba:	f7fe fa07 	bl	80055cc <move_window>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d137      	bne.n	8007234 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80071c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c6:	2200      	movs	r2, #0
 80071c8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	3338      	adds	r3, #56	; 0x38
 80071ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fd ff4a 	bl	800506c <ld_word>
 80071d8:	4603      	mov	r3, r0
 80071da:	461a      	mov	r2, r3
 80071dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d127      	bne.n	8007234 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80071e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e6:	3338      	adds	r3, #56	; 0x38
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fd ff57 	bl	800509c <ld_dword>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4a1d      	ldr	r2, [pc, #116]	; (8007268 <find_volume+0x4fc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d11e      	bne.n	8007234 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80071f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f8:	3338      	adds	r3, #56	; 0x38
 80071fa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fd ff4c 	bl	800509c <ld_dword>
 8007204:	4603      	mov	r3, r0
 8007206:	4a19      	ldr	r2, [pc, #100]	; (800726c <find_volume+0x500>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d113      	bne.n	8007234 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	3338      	adds	r3, #56	; 0x38
 8007210:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007214:	4618      	mov	r0, r3
 8007216:	f7fd ff41 	bl	800509c <ld_dword>
 800721a:	4602      	mov	r2, r0
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	3338      	adds	r3, #56	; 0x38
 8007224:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd ff37 	bl	800509c <ld_dword>
 800722e:	4602      	mov	r2, r0
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007236:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800723a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <find_volume+0x504>)
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <find_volume+0x504>)
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	4b09      	ldr	r3, [pc, #36]	; (8007270 <find_volume+0x504>)
 800724a:	881a      	ldrh	r2, [r3, #0]
 800724c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	4a08      	ldr	r2, [pc, #32]	; (8007274 <find_volume+0x508>)
 8007254:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007256:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007258:	f7fe f950 	bl	80054fc <clear_lock>
#endif
	return FR_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3758      	adds	r7, #88	; 0x58
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	41615252 	.word	0x41615252
 800726c:	61417272 	.word	0x61417272
 8007270:	200032f0 	.word	0x200032f0
 8007274:	20003314 	.word	0x20003314

08007278 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007282:	2309      	movs	r3, #9
 8007284:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d01c      	beq.n	80072c6 <validate+0x4e>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d018      	beq.n	80072c6 <validate+0x4e>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d013      	beq.n	80072c6 <validate+0x4e>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	889a      	ldrh	r2, [r3, #4]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	88db      	ldrh	r3, [r3, #6]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d10c      	bne.n	80072c6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	785b      	ldrb	r3, [r3, #1]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fd fe3c 	bl	8004f30 <disk_status>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <validate+0x4e>
			res = FR_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d102      	bne.n	80072d2 <validate+0x5a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	e000      	b.n	80072d4 <validate+0x5c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	6013      	str	r3, [r2, #0]
	return res;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80072f6:	f107 0310 	add.w	r3, r7, #16
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7ff fc9c 	bl	8006c38 <get_ldnumber>
 8007300:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	2b00      	cmp	r3, #0
 8007306:	da01      	bge.n	800730c <f_mount+0x28>
 8007308:	230b      	movs	r3, #11
 800730a:	e02b      	b.n	8007364 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800730c:	4a17      	ldr	r2, [pc, #92]	; (800736c <f_mount+0x88>)
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007314:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800731c:	69b8      	ldr	r0, [r7, #24]
 800731e:	f7fe f8ed 	bl	80054fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	490d      	ldr	r1, [pc, #52]	; (800736c <f_mount+0x88>)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d002      	beq.n	800734a <f_mount+0x66>
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d001      	beq.n	800734e <f_mount+0x6a>
 800734a:	2300      	movs	r3, #0
 800734c:	e00a      	b.n	8007364 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800734e:	f107 010c 	add.w	r1, r7, #12
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	2200      	movs	r2, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff fd07 	bl	8006d6c <find_volume>
 800735e:	4603      	mov	r3, r0
 8007360:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007362:	7dfb      	ldrb	r3, [r7, #23]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	200032ec 	.word	0x200032ec

08007370 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b09a      	sub	sp, #104	; 0x68
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	4613      	mov	r3, r2
 800737c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <f_open+0x18>
 8007384:	2309      	movs	r3, #9
 8007386:	e1bb      	b.n	8007700 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007388:	79fb      	ldrb	r3, [r7, #7]
 800738a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800738e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007390:	79fa      	ldrb	r2, [r7, #7]
 8007392:	f107 0114 	add.w	r1, r7, #20
 8007396:	f107 0308 	add.w	r3, r7, #8
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fce6 	bl	8006d6c <find_volume>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80073a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f040 819f 	bne.w	80076ee <f_open+0x37e>
		dj.obj.fs = fs;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	f107 0318 	add.w	r3, r7, #24
 80073ba:	4611      	mov	r1, r2
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fbc5 	bl	8006b4c <follow_path>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80073c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d11a      	bne.n	8007406 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80073d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073d4:	b25b      	sxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	da03      	bge.n	80073e2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80073da:	2306      	movs	r3, #6
 80073dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80073e0:	e011      	b.n	8007406 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073e2:	79fb      	ldrb	r3, [r7, #7]
 80073e4:	f023 0301 	bic.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	bf14      	ite	ne
 80073ec:	2301      	movne	r3, #1
 80073ee:	2300      	moveq	r3, #0
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	461a      	mov	r2, r3
 80073f4:	f107 0318 	add.w	r3, r7, #24
 80073f8:	4611      	mov	r1, r2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fd ff36 	bl	800526c <chk_lock>
 8007400:	4603      	mov	r3, r0
 8007402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	f003 031c 	and.w	r3, r3, #28
 800740c:	2b00      	cmp	r3, #0
 800740e:	d07f      	beq.n	8007510 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007410:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007414:	2b00      	cmp	r3, #0
 8007416:	d017      	beq.n	8007448 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007418:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800741c:	2b04      	cmp	r3, #4
 800741e:	d10e      	bne.n	800743e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007420:	f7fd ff80 	bl	8005324 <enq_lock>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d006      	beq.n	8007438 <f_open+0xc8>
 800742a:	f107 0318 	add.w	r3, r7, #24
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff f8dc 	bl	80065ec <dir_register>
 8007434:	4603      	mov	r3, r0
 8007436:	e000      	b.n	800743a <f_open+0xca>
 8007438:	2312      	movs	r3, #18
 800743a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	f043 0308 	orr.w	r3, r3, #8
 8007444:	71fb      	strb	r3, [r7, #7]
 8007446:	e010      	b.n	800746a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007448:	7fbb      	ldrb	r3, [r7, #30]
 800744a:	f003 0311 	and.w	r3, r3, #17
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <f_open+0xea>
					res = FR_DENIED;
 8007452:	2307      	movs	r3, #7
 8007454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007458:	e007      	b.n	800746a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <f_open+0xfa>
 8007464:	2308      	movs	r3, #8
 8007466:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800746a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800746e:	2b00      	cmp	r3, #0
 8007470:	d168      	bne.n	8007544 <f_open+0x1d4>
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d063      	beq.n	8007544 <f_open+0x1d4>
				dw = GET_FATTIME();
 800747c:	f7fd fcf6 	bl	8004e6c <get_fattime>
 8007480:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	330e      	adds	r3, #14
 8007486:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007488:	4618      	mov	r0, r3
 800748a:	f7fd fe45 	bl	8005118 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800748e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007490:	3316      	adds	r3, #22
 8007492:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd fe3f 	bl	8005118 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	330b      	adds	r3, #11
 800749e:	2220      	movs	r2, #32
 80074a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fe fe17 	bl	80060dc <ld_clust>
 80074ae:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074b4:	2200      	movs	r2, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fe2f 	bl	800611a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	331c      	adds	r3, #28
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fd fe28 	bl	8005118 <st_dword>
					fs->wflag = 1;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2201      	movs	r2, #1
 80074cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80074ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d037      	beq.n	8007544 <f_open+0x1d4>
						dw = fs->winsect;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80074da:	f107 0318 	add.w	r3, r7, #24
 80074de:	2200      	movs	r2, #0
 80074e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fb1f 	bl	8005b26 <remove_chain>
 80074e8:	4603      	mov	r3, r0
 80074ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80074ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d126      	bne.n	8007544 <f_open+0x1d4>
							res = move_window(fs, dw);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe f866 	bl	80055cc <move_window>
 8007500:	4603      	mov	r3, r0
 8007502:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800750a:	3a01      	subs	r2, #1
 800750c:	615a      	str	r2, [r3, #20]
 800750e:	e019      	b.n	8007544 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007510:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007514:	2b00      	cmp	r3, #0
 8007516:	d115      	bne.n	8007544 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007518:	7fbb      	ldrb	r3, [r7, #30]
 800751a:	f003 0310 	and.w	r3, r3, #16
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007522:	2304      	movs	r3, #4
 8007524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007528:	e00c      	b.n	8007544 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800752a:	79fb      	ldrb	r3, [r7, #7]
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b00      	cmp	r3, #0
 8007532:	d007      	beq.n	8007544 <f_open+0x1d4>
 8007534:	7fbb      	ldrb	r3, [r7, #30]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <f_open+0x1d4>
						res = FR_DENIED;
 800753e:	2307      	movs	r3, #7
 8007540:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007544:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007548:	2b00      	cmp	r3, #0
 800754a:	d128      	bne.n	800759e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800755c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	f023 0301 	bic.w	r3, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	bf14      	ite	ne
 8007576:	2301      	movne	r3, #1
 8007578:	2300      	moveq	r3, #0
 800757a:	b2db      	uxtb	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	f107 0318 	add.w	r3, r7, #24
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f7fd feef 	bl	8005368 <inc_lock>
 800758a:	4602      	mov	r2, r0
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d102      	bne.n	800759e <f_open+0x22e>
 8007598:	2302      	movs	r3, #2
 800759a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800759e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 80a3 	bne.w	80076ee <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ac:	4611      	mov	r1, r2
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd94 	bl	80060dc <ld_clust>
 80075b4:	4602      	mov	r2, r0
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	331c      	adds	r3, #28
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fd fd6c 	bl	800509c <ld_dword>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	88da      	ldrh	r2, [r3, #6]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	79fa      	ldrb	r2, [r7, #7]
 80075e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3330      	adds	r3, #48	; 0x30
 80075fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f7fd fdd6 	bl	80051b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d06e      	beq.n	80076ee <f_open+0x37e>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d06a      	beq.n	80076ee <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	895b      	ldrh	r3, [r3, #10]
 8007624:	461a      	mov	r2, r3
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	899b      	ldrh	r3, [r3, #12]
 800762a:	fb02 f303 	mul.w	r3, r2, r3
 800762e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800763c:	e016      	b.n	800766c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007642:	4618      	mov	r0, r3
 8007644:	f7fe f87f 	bl	8005746 <get_fat>
 8007648:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800764a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800764c:	2b01      	cmp	r3, #1
 800764e:	d802      	bhi.n	8007656 <f_open+0x2e6>
 8007650:	2302      	movs	r3, #2
 8007652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800765c:	d102      	bne.n	8007664 <f_open+0x2f4>
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800766c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007670:	2b00      	cmp	r3, #0
 8007672:	d103      	bne.n	800767c <f_open+0x30c>
 8007674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007678:	429a      	cmp	r2, r3
 800767a:	d8e0      	bhi.n	800763e <f_open+0x2ce>
				}
				fp->clust = clst;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007680:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007686:	2b00      	cmp	r3, #0
 8007688:	d131      	bne.n	80076ee <f_open+0x37e>
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	899b      	ldrh	r3, [r3, #12]
 800768e:	461a      	mov	r2, r3
 8007690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007692:	fbb3 f1f2 	udiv	r1, r3, r2
 8007696:	fb01 f202 	mul.w	r2, r1, r2
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d026      	beq.n	80076ee <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe f82f 	bl	8005708 <clust2sect>
 80076aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80076ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <f_open+0x34a>
						res = FR_INT_ERR;
 80076b2:	2302      	movs	r3, #2
 80076b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80076b8:	e019      	b.n	80076ee <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	899b      	ldrh	r3, [r3, #12]
 80076be:	461a      	mov	r2, r3
 80076c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80076c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	7858      	ldrb	r0, [r3, #1]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a1a      	ldr	r2, [r3, #32]
 80076dc:	2301      	movs	r3, #1
 80076de:	f7fd fc67 	bl	8004fb0 <disk_read>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <f_open+0x37e>
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80076ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d002      	beq.n	80076fc <f_open+0x38c>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80076fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007700:	4618      	mov	r0, r3
 8007702:	3768      	adds	r7, #104	; 0x68
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b08e      	sub	sp, #56	; 0x38
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f107 0214 	add.w	r2, r7, #20
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f7ff fda5 	bl	8007278 <validate>
 800772e:	4603      	mov	r3, r0
 8007730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007738:	2b00      	cmp	r3, #0
 800773a:	d107      	bne.n	800774c <f_read+0x44>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	7d5b      	ldrb	r3, [r3, #21]
 8007740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007748:	2b00      	cmp	r3, #0
 800774a:	d002      	beq.n	8007752 <f_read+0x4a>
 800774c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007750:	e135      	b.n	80079be <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	7d1b      	ldrb	r3, [r3, #20]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <f_read+0x5a>
 800775e:	2307      	movs	r3, #7
 8007760:	e12d      	b.n	80079be <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	429a      	cmp	r2, r3
 8007774:	f240 811e 	bls.w	80079b4 <f_read+0x2ac>
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800777c:	e11a      	b.n	80079b4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	8992      	ldrh	r2, [r2, #12]
 8007786:	fbb3 f1f2 	udiv	r1, r3, r2
 800778a:	fb01 f202 	mul.w	r2, r1, r2
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	2b00      	cmp	r3, #0
 8007792:	f040 80d5 	bne.w	8007940 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	8992      	ldrh	r2, [r2, #12]
 800779e:	fbb3 f3f2 	udiv	r3, r3, r2
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	8952      	ldrh	r2, [r2, #10]
 80077a6:	3a01      	subs	r2, #1
 80077a8:	4013      	ands	r3, r2
 80077aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d12f      	bne.n	8007812 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	633b      	str	r3, [r7, #48]	; 0x30
 80077c0:	e013      	b.n	80077ea <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	4619      	mov	r1, r3
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7fe faa5 	bl	8005d20 <clmt_clust>
 80077d6:	6338      	str	r0, [r7, #48]	; 0x30
 80077d8:	e007      	b.n	80077ea <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7fd ffaf 	bl	8005746 <get_fat>
 80077e8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d804      	bhi.n	80077fa <f_read+0xf2>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2202      	movs	r2, #2
 80077f4:	755a      	strb	r2, [r3, #21]
 80077f6:	2302      	movs	r3, #2
 80077f8:	e0e1      	b.n	80079be <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d104      	bne.n	800780c <f_read+0x104>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2201      	movs	r2, #1
 8007806:	755a      	strb	r2, [r3, #21]
 8007808:	2301      	movs	r3, #1
 800780a:	e0d8      	b.n	80079be <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007810:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f7fd ff74 	bl	8005708 <clust2sect>
 8007820:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d104      	bne.n	8007832 <f_read+0x12a>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2202      	movs	r2, #2
 800782c:	755a      	strb	r2, [r3, #21]
 800782e:	2302      	movs	r3, #2
 8007830:	e0c5      	b.n	80079be <f_read+0x2b6>
			sect += csect;
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	4413      	add	r3, r2
 8007838:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	899b      	ldrh	r3, [r3, #12]
 800783e:	461a      	mov	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	fbb3 f3f2 	udiv	r3, r3, r2
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d041      	beq.n	80078d2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800784e:	69fa      	ldr	r2, [r7, #28]
 8007850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007852:	4413      	add	r3, r2
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	8952      	ldrh	r2, [r2, #10]
 8007858:	4293      	cmp	r3, r2
 800785a:	d905      	bls.n	8007868 <f_read+0x160>
					cc = fs->csize - csect;
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	895b      	ldrh	r3, [r3, #10]
 8007860:	461a      	mov	r2, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	7858      	ldrb	r0, [r3, #1]
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	69ba      	ldr	r2, [r7, #24]
 8007870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007872:	f7fd fb9d 	bl	8004fb0 <disk_read>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <f_read+0x17e>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2201      	movs	r2, #1
 8007880:	755a      	strb	r2, [r3, #21]
 8007882:	2301      	movs	r3, #1
 8007884:	e09b      	b.n	80079be <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	7d1b      	ldrb	r3, [r3, #20]
 800788a:	b25b      	sxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	da18      	bge.n	80078c2 <f_read+0x1ba>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a1a      	ldr	r2, [r3, #32]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800789a:	429a      	cmp	r2, r3
 800789c:	d911      	bls.n	80078c2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a1a      	ldr	r2, [r3, #32]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	8992      	ldrh	r2, [r2, #12]
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b0:	18d0      	adds	r0, r2, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	899b      	ldrh	r3, [r3, #12]
 80078bc:	461a      	mov	r2, r3
 80078be:	f7fd fc57 	bl	8005170 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	899b      	ldrh	r3, [r3, #12]
 80078c6:	461a      	mov	r2, r3
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80078d0:	e05c      	b.n	800798c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d02e      	beq.n	800793a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	7d1b      	ldrb	r3, [r3, #20]
 80078e0:	b25b      	sxtb	r3, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	da18      	bge.n	8007918 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	7858      	ldrb	r0, [r3, #1]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a1a      	ldr	r2, [r3, #32]
 80078f4:	2301      	movs	r3, #1
 80078f6:	f7fd fb7b 	bl	8004ff0 <disk_write>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <f_read+0x202>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	755a      	strb	r2, [r3, #21]
 8007906:	2301      	movs	r3, #1
 8007908:	e059      	b.n	80079be <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	7d1b      	ldrb	r3, [r3, #20]
 800790e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	7858      	ldrb	r0, [r3, #1]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007922:	2301      	movs	r3, #1
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	f7fd fb43 	bl	8004fb0 <disk_read>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <f_read+0x232>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	755a      	strb	r2, [r3, #21]
 8007936:	2301      	movs	r3, #1
 8007938:	e041      	b.n	80079be <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	899b      	ldrh	r3, [r3, #12]
 8007944:	4618      	mov	r0, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	8992      	ldrh	r2, [r2, #12]
 800794e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007952:	fb01 f202 	mul.w	r2, r1, r2
 8007956:	1a9b      	subs	r3, r3, r2
 8007958:	1ac3      	subs	r3, r0, r3
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800795c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	429a      	cmp	r2, r3
 8007962:	d901      	bls.n	8007968 <f_read+0x260>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	8992      	ldrh	r2, [r2, #12]
 8007976:	fbb3 f0f2 	udiv	r0, r3, r2
 800797a:	fb00 f202 	mul.w	r2, r0, r2
 800797e:	1a9b      	subs	r3, r3, r2
 8007980:	440b      	add	r3, r1
 8007982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007984:	4619      	mov	r1, r3
 8007986:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007988:	f7fd fbf2 	bl	8005170 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	4413      	add	r3, r2
 8007992:	627b      	str	r3, [r7, #36]	; 0x24
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	699a      	ldr	r2, [r3, #24]
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	441a      	add	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	619a      	str	r2, [r3, #24]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	441a      	add	r2, r3
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f aee1 	bne.w	800777e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3738      	adds	r7, #56	; 0x38
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f107 0208 	add.w	r2, r7, #8
 80079d4:	4611      	mov	r1, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7ff fc4e 	bl	8007278 <validate>
 80079dc:	4603      	mov	r3, r0
 80079de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d168      	bne.n	8007ab8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7d1b      	ldrb	r3, [r3, #20]
 80079ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d062      	beq.n	8007ab8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7d1b      	ldrb	r3, [r3, #20]
 80079f6:	b25b      	sxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	da15      	bge.n	8007a28 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	7858      	ldrb	r0, [r3, #1]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1a      	ldr	r2, [r3, #32]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	f7fd faf0 	bl	8004ff0 <disk_write>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <f_sync+0x54>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e04f      	b.n	8007aba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	7d1b      	ldrb	r3, [r3, #20]
 8007a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a22:	b2da      	uxtb	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007a28:	f7fd fa20 	bl	8004e6c <get_fattime>
 8007a2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a34:	4619      	mov	r1, r3
 8007a36:	4610      	mov	r0, r2
 8007a38:	f7fd fdc8 	bl	80055cc <move_window>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d138      	bne.n	8007ab8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	330b      	adds	r3, #11
 8007a50:	781a      	ldrb	r2, [r3, #0]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	330b      	adds	r3, #11
 8007a56:	f042 0220 	orr.w	r2, r2, #32
 8007a5a:	b2d2      	uxtb	r2, r2
 8007a5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	461a      	mov	r2, r3
 8007a68:	68f9      	ldr	r1, [r7, #12]
 8007a6a:	f7fe fb56 	bl	800611a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f103 021c 	add.w	r2, r3, #28
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fd fb4c 	bl	8005118 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3316      	adds	r3, #22
 8007a84:	6939      	ldr	r1, [r7, #16]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fd fb46 	bl	8005118 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3312      	adds	r3, #18
 8007a90:	2100      	movs	r1, #0
 8007a92:	4618      	mov	r0, r3
 8007a94:	f7fd fb25 	bl	80050e2 <st_word>
					fs->wflag = 1;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fd fdc1 	bl	8005628 <sync_fs>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7d1b      	ldrb	r3, [r3, #20]
 8007aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff ff7b 	bl	80079c6 <f_sync>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d118      	bne.n	8007b0c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f107 0208 	add.w	r2, r7, #8
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fbc8 	bl	8007278 <validate>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10c      	bne.n	8007b0c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7fd fcc4 	bl	8005484 <dec_lock>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
	...

08007b18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4613      	mov	r3, r2
 8007b24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007b2e:	4b1f      	ldr	r3, [pc, #124]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b30:	7a5b      	ldrb	r3, [r3, #9]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d131      	bne.n	8007b9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007b38:	4b1c      	ldr	r3, [pc, #112]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b3a:	7a5b      	ldrb	r3, [r3, #9]
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b42:	2100      	movs	r1, #0
 8007b44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007b46:	4b19      	ldr	r3, [pc, #100]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b48:	7a5b      	ldrb	r3, [r3, #9]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	4a17      	ldr	r2, [pc, #92]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007b56:	4b15      	ldr	r3, [pc, #84]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b58:	7a5b      	ldrb	r3, [r3, #9]
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	4b13      	ldr	r3, [pc, #76]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b60:	4413      	add	r3, r2
 8007b62:	79fa      	ldrb	r2, [r7, #7]
 8007b64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007b66:	4b11      	ldr	r3, [pc, #68]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b68:	7a5b      	ldrb	r3, [r3, #9]
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	1c5a      	adds	r2, r3, #1
 8007b6e:	b2d1      	uxtb	r1, r2
 8007b70:	4a0e      	ldr	r2, [pc, #56]	; (8007bac <FATFS_LinkDriverEx+0x94>)
 8007b72:	7251      	strb	r1, [r2, #9]
 8007b74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007b76:	7dbb      	ldrb	r3, [r7, #22]
 8007b78:	3330      	adds	r3, #48	; 0x30
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	3301      	adds	r3, #1
 8007b84:	223a      	movs	r2, #58	; 0x3a
 8007b86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3302      	adds	r3, #2
 8007b8c:	222f      	movs	r2, #47	; 0x2f
 8007b8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	3303      	adds	r3, #3
 8007b94:	2200      	movs	r2, #0
 8007b96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
 8007baa:	bf00      	nop
 8007bac:	20003514 	.word	0x20003514

08007bb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007bba:	2200      	movs	r2, #0
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ffaa 	bl	8007b18 <FATFS_LinkDriverEx>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	6039      	str	r1, [r7, #0]
 8007bda:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007bdc:	88fb      	ldrh	r3, [r7, #6]
 8007bde:	2b7f      	cmp	r3, #127	; 0x7f
 8007be0:	d802      	bhi.n	8007be8 <ff_convert+0x18>
		c = chr;
 8007be2:	88fb      	ldrh	r3, [r7, #6]
 8007be4:	81fb      	strh	r3, [r7, #14]
 8007be6:	e025      	b.n	8007c34 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	2bff      	cmp	r3, #255	; 0xff
 8007bf2:	d805      	bhi.n	8007c00 <ff_convert+0x30>
 8007bf4:	88fb      	ldrh	r3, [r7, #6]
 8007bf6:	3b80      	subs	r3, #128	; 0x80
 8007bf8:	4a12      	ldr	r2, [pc, #72]	; (8007c44 <ff_convert+0x74>)
 8007bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bfe:	e000      	b.n	8007c02 <ff_convert+0x32>
 8007c00:	2300      	movs	r3, #0
 8007c02:	81fb      	strh	r3, [r7, #14]
 8007c04:	e016      	b.n	8007c34 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007c06:	2300      	movs	r3, #0
 8007c08:	81fb      	strh	r3, [r7, #14]
 8007c0a:	e009      	b.n	8007c20 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <ff_convert+0x74>)
 8007c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c14:	88fa      	ldrh	r2, [r7, #6]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d006      	beq.n	8007c28 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007c1a:	89fb      	ldrh	r3, [r7, #14]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	81fb      	strh	r3, [r7, #14]
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	2b7f      	cmp	r3, #127	; 0x7f
 8007c24:	d9f2      	bls.n	8007c0c <ff_convert+0x3c>
 8007c26:	e000      	b.n	8007c2a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007c28:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	3380      	adds	r3, #128	; 0x80
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007c34:	89fb      	ldrh	r3, [r7, #14]
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	08009358 	.word	0x08009358

08007c48 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	4603      	mov	r3, r0
 8007c50:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007c52:	88fb      	ldrh	r3, [r7, #6]
 8007c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c58:	d201      	bcs.n	8007c5e <ff_wtoupper+0x16>
 8007c5a:	4b3e      	ldr	r3, [pc, #248]	; (8007d54 <ff_wtoupper+0x10c>)
 8007c5c:	e000      	b.n	8007c60 <ff_wtoupper+0x18>
 8007c5e:	4b3e      	ldr	r3, [pc, #248]	; (8007d58 <ff_wtoupper+0x110>)
 8007c60:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	1c9a      	adds	r2, r3, #2
 8007c66:	617a      	str	r2, [r7, #20]
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007c6c:	8a7b      	ldrh	r3, [r7, #18]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d068      	beq.n	8007d44 <ff_wtoupper+0xfc>
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	8a7b      	ldrh	r3, [r7, #18]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d364      	bcc.n	8007d44 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	1c9a      	adds	r2, r3, #2
 8007c7e:	617a      	str	r2, [r7, #20]
 8007c80:	881b      	ldrh	r3, [r3, #0]
 8007c82:	823b      	strh	r3, [r7, #16]
 8007c84:	8a3b      	ldrh	r3, [r7, #16]
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	81fb      	strh	r3, [r7, #14]
 8007c8a:	8a3b      	ldrh	r3, [r7, #16]
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007c90:	88fa      	ldrh	r2, [r7, #6]
 8007c92:	8a79      	ldrh	r1, [r7, #18]
 8007c94:	8a3b      	ldrh	r3, [r7, #16]
 8007c96:	440b      	add	r3, r1
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	da49      	bge.n	8007d30 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007c9c:	89fb      	ldrh	r3, [r7, #14]
 8007c9e:	2b08      	cmp	r3, #8
 8007ca0:	d84f      	bhi.n	8007d42 <ff_wtoupper+0xfa>
 8007ca2:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <ff_wtoupper+0x60>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cdf 	.word	0x08007cdf
 8007cb0:	08007cf5 	.word	0x08007cf5
 8007cb4:	08007cfd 	.word	0x08007cfd
 8007cb8:	08007d05 	.word	0x08007d05
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007d15 	.word	0x08007d15
 8007cc4:	08007d1d 	.word	0x08007d1d
 8007cc8:	08007d25 	.word	0x08007d25
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	8a7b      	ldrh	r3, [r7, #18]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	005b      	lsls	r3, r3, #1
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	80fb      	strh	r3, [r7, #6]
 8007cdc:	e027      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007cde:	88fa      	ldrh	r2, [r7, #6]
 8007ce0:	8a7b      	ldrh	r3, [r7, #18]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	b29b      	uxth	r3, r3
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	88fa      	ldrh	r2, [r7, #6]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	80fb      	strh	r3, [r7, #6]
 8007cf2:	e01c      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007cf4:	88fb      	ldrh	r3, [r7, #6]
 8007cf6:	3b10      	subs	r3, #16
 8007cf8:	80fb      	strh	r3, [r7, #6]
 8007cfa:	e018      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	3b20      	subs	r3, #32
 8007d00:	80fb      	strh	r3, [r7, #6]
 8007d02:	e014      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	3b30      	subs	r3, #48	; 0x30
 8007d08:	80fb      	strh	r3, [r7, #6]
 8007d0a:	e010      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007d0c:	88fb      	ldrh	r3, [r7, #6]
 8007d0e:	3b1a      	subs	r3, #26
 8007d10:	80fb      	strh	r3, [r7, #6]
 8007d12:	e00c      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007d14:	88fb      	ldrh	r3, [r7, #6]
 8007d16:	3308      	adds	r3, #8
 8007d18:	80fb      	strh	r3, [r7, #6]
 8007d1a:	e008      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007d1c:	88fb      	ldrh	r3, [r7, #6]
 8007d1e:	3b50      	subs	r3, #80	; 0x50
 8007d20:	80fb      	strh	r3, [r7, #6]
 8007d22:	e004      	b.n	8007d2e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007d24:	88fb      	ldrh	r3, [r7, #6]
 8007d26:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007d2a:	80fb      	strh	r3, [r7, #6]
 8007d2c:	bf00      	nop
			}
			break;
 8007d2e:	e008      	b.n	8007d42 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007d30:	89fb      	ldrh	r3, [r7, #14]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d195      	bne.n	8007c62 <ff_wtoupper+0x1a>
 8007d36:	8a3b      	ldrh	r3, [r7, #16]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	697a      	ldr	r2, [r7, #20]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007d40:	e78f      	b.n	8007c62 <ff_wtoupper+0x1a>
			break;
 8007d42:	bf00      	nop
	}

	return chr;
 8007d44:	88fb      	ldrh	r3, [r7, #6]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	08009458 	.word	0x08009458
 8007d58:	0800964c 	.word	0x0800964c

08007d5c <__errno>:
 8007d5c:	4b01      	ldr	r3, [pc, #4]	; (8007d64 <__errno+0x8>)
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000028 	.word	0x20000028

08007d68 <__libc_init_array>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	4d0d      	ldr	r5, [pc, #52]	; (8007da0 <__libc_init_array+0x38>)
 8007d6c:	4c0d      	ldr	r4, [pc, #52]	; (8007da4 <__libc_init_array+0x3c>)
 8007d6e:	1b64      	subs	r4, r4, r5
 8007d70:	10a4      	asrs	r4, r4, #2
 8007d72:	2600      	movs	r6, #0
 8007d74:	42a6      	cmp	r6, r4
 8007d76:	d109      	bne.n	8007d8c <__libc_init_array+0x24>
 8007d78:	4d0b      	ldr	r5, [pc, #44]	; (8007da8 <__libc_init_array+0x40>)
 8007d7a:	4c0c      	ldr	r4, [pc, #48]	; (8007dac <__libc_init_array+0x44>)
 8007d7c:	f000 fc8e 	bl	800869c <_init>
 8007d80:	1b64      	subs	r4, r4, r5
 8007d82:	10a4      	asrs	r4, r4, #2
 8007d84:	2600      	movs	r6, #0
 8007d86:	42a6      	cmp	r6, r4
 8007d88:	d105      	bne.n	8007d96 <__libc_init_array+0x2e>
 8007d8a:	bd70      	pop	{r4, r5, r6, pc}
 8007d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d90:	4798      	blx	r3
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7ee      	b.n	8007d74 <__libc_init_array+0xc>
 8007d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d9a:	4798      	blx	r3
 8007d9c:	3601      	adds	r6, #1
 8007d9e:	e7f2      	b.n	8007d86 <__libc_init_array+0x1e>
 8007da0:	08009744 	.word	0x08009744
 8007da4:	08009744 	.word	0x08009744
 8007da8:	08009744 	.word	0x08009744
 8007dac:	08009748 	.word	0x08009748

08007db0 <memset>:
 8007db0:	4402      	add	r2, r0
 8007db2:	4603      	mov	r3, r0
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d100      	bne.n	8007dba <memset+0xa>
 8007db8:	4770      	bx	lr
 8007dba:	f803 1b01 	strb.w	r1, [r3], #1
 8007dbe:	e7f9      	b.n	8007db4 <memset+0x4>

08007dc0 <siprintf>:
 8007dc0:	b40e      	push	{r1, r2, r3}
 8007dc2:	b500      	push	{lr}
 8007dc4:	b09c      	sub	sp, #112	; 0x70
 8007dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8007dc8:	9002      	str	r0, [sp, #8]
 8007dca:	9006      	str	r0, [sp, #24]
 8007dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007dd0:	4809      	ldr	r0, [pc, #36]	; (8007df8 <siprintf+0x38>)
 8007dd2:	9107      	str	r1, [sp, #28]
 8007dd4:	9104      	str	r1, [sp, #16]
 8007dd6:	4909      	ldr	r1, [pc, #36]	; (8007dfc <siprintf+0x3c>)
 8007dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ddc:	9105      	str	r1, [sp, #20]
 8007dde:	6800      	ldr	r0, [r0, #0]
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	a902      	add	r1, sp, #8
 8007de4:	f000 f868 	bl	8007eb8 <_svfiprintf_r>
 8007de8:	9b02      	ldr	r3, [sp, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	b01c      	add	sp, #112	; 0x70
 8007df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007df4:	b003      	add	sp, #12
 8007df6:	4770      	bx	lr
 8007df8:	20000028 	.word	0x20000028
 8007dfc:	ffff0208 	.word	0xffff0208

08007e00 <__ssputs_r>:
 8007e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e04:	688e      	ldr	r6, [r1, #8]
 8007e06:	429e      	cmp	r6, r3
 8007e08:	4682      	mov	sl, r0
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	4690      	mov	r8, r2
 8007e0e:	461f      	mov	r7, r3
 8007e10:	d838      	bhi.n	8007e84 <__ssputs_r+0x84>
 8007e12:	898a      	ldrh	r2, [r1, #12]
 8007e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e18:	d032      	beq.n	8007e80 <__ssputs_r+0x80>
 8007e1a:	6825      	ldr	r5, [r4, #0]
 8007e1c:	6909      	ldr	r1, [r1, #16]
 8007e1e:	eba5 0901 	sub.w	r9, r5, r1
 8007e22:	6965      	ldr	r5, [r4, #20]
 8007e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	444b      	add	r3, r9
 8007e30:	106d      	asrs	r5, r5, #1
 8007e32:	429d      	cmp	r5, r3
 8007e34:	bf38      	it	cc
 8007e36:	461d      	movcc	r5, r3
 8007e38:	0553      	lsls	r3, r2, #21
 8007e3a:	d531      	bpl.n	8007ea0 <__ssputs_r+0xa0>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	f000 fb63 	bl	8008508 <_malloc_r>
 8007e42:	4606      	mov	r6, r0
 8007e44:	b950      	cbnz	r0, 8007e5c <__ssputs_r+0x5c>
 8007e46:	230c      	movs	r3, #12
 8007e48:	f8ca 3000 	str.w	r3, [sl]
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	6921      	ldr	r1, [r4, #16]
 8007e5e:	464a      	mov	r2, r9
 8007e60:	f000 fabe 	bl	80083e0 <memcpy>
 8007e64:	89a3      	ldrh	r3, [r4, #12]
 8007e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	6126      	str	r6, [r4, #16]
 8007e72:	6165      	str	r5, [r4, #20]
 8007e74:	444e      	add	r6, r9
 8007e76:	eba5 0509 	sub.w	r5, r5, r9
 8007e7a:	6026      	str	r6, [r4, #0]
 8007e7c:	60a5      	str	r5, [r4, #8]
 8007e7e:	463e      	mov	r6, r7
 8007e80:	42be      	cmp	r6, r7
 8007e82:	d900      	bls.n	8007e86 <__ssputs_r+0x86>
 8007e84:	463e      	mov	r6, r7
 8007e86:	6820      	ldr	r0, [r4, #0]
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4641      	mov	r1, r8
 8007e8c:	f000 fab6 	bl	80083fc <memmove>
 8007e90:	68a3      	ldr	r3, [r4, #8]
 8007e92:	1b9b      	subs	r3, r3, r6
 8007e94:	60a3      	str	r3, [r4, #8]
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	4433      	add	r3, r6
 8007e9a:	6023      	str	r3, [r4, #0]
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e7db      	b.n	8007e58 <__ssputs_r+0x58>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	f000 fba5 	bl	80085f0 <_realloc_r>
 8007ea6:	4606      	mov	r6, r0
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d1e1      	bne.n	8007e70 <__ssputs_r+0x70>
 8007eac:	6921      	ldr	r1, [r4, #16]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	f000 fabe 	bl	8008430 <_free_r>
 8007eb4:	e7c7      	b.n	8007e46 <__ssputs_r+0x46>
	...

08007eb8 <_svfiprintf_r>:
 8007eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ebc:	4698      	mov	r8, r3
 8007ebe:	898b      	ldrh	r3, [r1, #12]
 8007ec0:	061b      	lsls	r3, r3, #24
 8007ec2:	b09d      	sub	sp, #116	; 0x74
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	460d      	mov	r5, r1
 8007ec8:	4614      	mov	r4, r2
 8007eca:	d50e      	bpl.n	8007eea <_svfiprintf_r+0x32>
 8007ecc:	690b      	ldr	r3, [r1, #16]
 8007ece:	b963      	cbnz	r3, 8007eea <_svfiprintf_r+0x32>
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	f000 fb19 	bl	8008508 <_malloc_r>
 8007ed6:	6028      	str	r0, [r5, #0]
 8007ed8:	6128      	str	r0, [r5, #16]
 8007eda:	b920      	cbnz	r0, 8007ee6 <_svfiprintf_r+0x2e>
 8007edc:	230c      	movs	r3, #12
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee4:	e0d1      	b.n	800808a <_svfiprintf_r+0x1d2>
 8007ee6:	2340      	movs	r3, #64	; 0x40
 8007ee8:	616b      	str	r3, [r5, #20]
 8007eea:	2300      	movs	r3, #0
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	2320      	movs	r3, #32
 8007ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ef8:	2330      	movs	r3, #48	; 0x30
 8007efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080a4 <_svfiprintf_r+0x1ec>
 8007efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f02:	f04f 0901 	mov.w	r9, #1
 8007f06:	4623      	mov	r3, r4
 8007f08:	469a      	mov	sl, r3
 8007f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f0e:	b10a      	cbz	r2, 8007f14 <_svfiprintf_r+0x5c>
 8007f10:	2a25      	cmp	r2, #37	; 0x25
 8007f12:	d1f9      	bne.n	8007f08 <_svfiprintf_r+0x50>
 8007f14:	ebba 0b04 	subs.w	fp, sl, r4
 8007f18:	d00b      	beq.n	8007f32 <_svfiprintf_r+0x7a>
 8007f1a:	465b      	mov	r3, fp
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7ff ff6d 	bl	8007e00 <__ssputs_r>
 8007f26:	3001      	adds	r0, #1
 8007f28:	f000 80aa 	beq.w	8008080 <_svfiprintf_r+0x1c8>
 8007f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f2e:	445a      	add	r2, fp
 8007f30:	9209      	str	r2, [sp, #36]	; 0x24
 8007f32:	f89a 3000 	ldrb.w	r3, [sl]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80a2 	beq.w	8008080 <_svfiprintf_r+0x1c8>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f46:	f10a 0a01 	add.w	sl, sl, #1
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	9307      	str	r3, [sp, #28]
 8007f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f52:	931a      	str	r3, [sp, #104]	; 0x68
 8007f54:	4654      	mov	r4, sl
 8007f56:	2205      	movs	r2, #5
 8007f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f5c:	4851      	ldr	r0, [pc, #324]	; (80080a4 <_svfiprintf_r+0x1ec>)
 8007f5e:	f7f8 f937 	bl	80001d0 <memchr>
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	b9d8      	cbnz	r0, 8007f9e <_svfiprintf_r+0xe6>
 8007f66:	06d0      	lsls	r0, r2, #27
 8007f68:	bf44      	itt	mi
 8007f6a:	2320      	movmi	r3, #32
 8007f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f70:	0711      	lsls	r1, r2, #28
 8007f72:	bf44      	itt	mi
 8007f74:	232b      	movmi	r3, #43	; 0x2b
 8007f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f80:	d015      	beq.n	8007fae <_svfiprintf_r+0xf6>
 8007f82:	9a07      	ldr	r2, [sp, #28]
 8007f84:	4654      	mov	r4, sl
 8007f86:	2000      	movs	r0, #0
 8007f88:	f04f 0c0a 	mov.w	ip, #10
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f92:	3b30      	subs	r3, #48	; 0x30
 8007f94:	2b09      	cmp	r3, #9
 8007f96:	d94e      	bls.n	8008036 <_svfiprintf_r+0x17e>
 8007f98:	b1b0      	cbz	r0, 8007fc8 <_svfiprintf_r+0x110>
 8007f9a:	9207      	str	r2, [sp, #28]
 8007f9c:	e014      	b.n	8007fc8 <_svfiprintf_r+0x110>
 8007f9e:	eba0 0308 	sub.w	r3, r0, r8
 8007fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	9304      	str	r3, [sp, #16]
 8007faa:	46a2      	mov	sl, r4
 8007fac:	e7d2      	b.n	8007f54 <_svfiprintf_r+0x9c>
 8007fae:	9b03      	ldr	r3, [sp, #12]
 8007fb0:	1d19      	adds	r1, r3, #4
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	9103      	str	r1, [sp, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfbb      	ittet	lt
 8007fba:	425b      	neglt	r3, r3
 8007fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8007fc0:	9307      	strge	r3, [sp, #28]
 8007fc2:	9307      	strlt	r3, [sp, #28]
 8007fc4:	bfb8      	it	lt
 8007fc6:	9204      	strlt	r2, [sp, #16]
 8007fc8:	7823      	ldrb	r3, [r4, #0]
 8007fca:	2b2e      	cmp	r3, #46	; 0x2e
 8007fcc:	d10c      	bne.n	8007fe8 <_svfiprintf_r+0x130>
 8007fce:	7863      	ldrb	r3, [r4, #1]
 8007fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd2:	d135      	bne.n	8008040 <_svfiprintf_r+0x188>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	1d1a      	adds	r2, r3, #4
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	9203      	str	r2, [sp, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	bfb8      	it	lt
 8007fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fe4:	3402      	adds	r4, #2
 8007fe6:	9305      	str	r3, [sp, #20]
 8007fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080b4 <_svfiprintf_r+0x1fc>
 8007fec:	7821      	ldrb	r1, [r4, #0]
 8007fee:	2203      	movs	r2, #3
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	f7f8 f8ed 	bl	80001d0 <memchr>
 8007ff6:	b140      	cbz	r0, 800800a <_svfiprintf_r+0x152>
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	eba0 000a 	sub.w	r0, r0, sl
 8007ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	4303      	orrs	r3, r0
 8008006:	3401      	adds	r4, #1
 8008008:	9304      	str	r3, [sp, #16]
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	4826      	ldr	r0, [pc, #152]	; (80080a8 <_svfiprintf_r+0x1f0>)
 8008010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008014:	2206      	movs	r2, #6
 8008016:	f7f8 f8db 	bl	80001d0 <memchr>
 800801a:	2800      	cmp	r0, #0
 800801c:	d038      	beq.n	8008090 <_svfiprintf_r+0x1d8>
 800801e:	4b23      	ldr	r3, [pc, #140]	; (80080ac <_svfiprintf_r+0x1f4>)
 8008020:	bb1b      	cbnz	r3, 800806a <_svfiprintf_r+0x1b2>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	3307      	adds	r3, #7
 8008026:	f023 0307 	bic.w	r3, r3, #7
 800802a:	3308      	adds	r3, #8
 800802c:	9303      	str	r3, [sp, #12]
 800802e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008030:	4433      	add	r3, r6
 8008032:	9309      	str	r3, [sp, #36]	; 0x24
 8008034:	e767      	b.n	8007f06 <_svfiprintf_r+0x4e>
 8008036:	fb0c 3202 	mla	r2, ip, r2, r3
 800803a:	460c      	mov	r4, r1
 800803c:	2001      	movs	r0, #1
 800803e:	e7a5      	b.n	8007f8c <_svfiprintf_r+0xd4>
 8008040:	2300      	movs	r3, #0
 8008042:	3401      	adds	r4, #1
 8008044:	9305      	str	r3, [sp, #20]
 8008046:	4619      	mov	r1, r3
 8008048:	f04f 0c0a 	mov.w	ip, #10
 800804c:	4620      	mov	r0, r4
 800804e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008052:	3a30      	subs	r2, #48	; 0x30
 8008054:	2a09      	cmp	r2, #9
 8008056:	d903      	bls.n	8008060 <_svfiprintf_r+0x1a8>
 8008058:	2b00      	cmp	r3, #0
 800805a:	d0c5      	beq.n	8007fe8 <_svfiprintf_r+0x130>
 800805c:	9105      	str	r1, [sp, #20]
 800805e:	e7c3      	b.n	8007fe8 <_svfiprintf_r+0x130>
 8008060:	fb0c 2101 	mla	r1, ip, r1, r2
 8008064:	4604      	mov	r4, r0
 8008066:	2301      	movs	r3, #1
 8008068:	e7f0      	b.n	800804c <_svfiprintf_r+0x194>
 800806a:	ab03      	add	r3, sp, #12
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	462a      	mov	r2, r5
 8008070:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008072:	a904      	add	r1, sp, #16
 8008074:	4638      	mov	r0, r7
 8008076:	f3af 8000 	nop.w
 800807a:	1c42      	adds	r2, r0, #1
 800807c:	4606      	mov	r6, r0
 800807e:	d1d6      	bne.n	800802e <_svfiprintf_r+0x176>
 8008080:	89ab      	ldrh	r3, [r5, #12]
 8008082:	065b      	lsls	r3, r3, #25
 8008084:	f53f af2c 	bmi.w	8007ee0 <_svfiprintf_r+0x28>
 8008088:	9809      	ldr	r0, [sp, #36]	; 0x24
 800808a:	b01d      	add	sp, #116	; 0x74
 800808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008090:	ab03      	add	r3, sp, #12
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	462a      	mov	r2, r5
 8008096:	4b06      	ldr	r3, [pc, #24]	; (80080b0 <_svfiprintf_r+0x1f8>)
 8008098:	a904      	add	r1, sp, #16
 800809a:	4638      	mov	r0, r7
 800809c:	f000 f87a 	bl	8008194 <_printf_i>
 80080a0:	e7eb      	b.n	800807a <_svfiprintf_r+0x1c2>
 80080a2:	bf00      	nop
 80080a4:	08009708 	.word	0x08009708
 80080a8:	08009712 	.word	0x08009712
 80080ac:	00000000 	.word	0x00000000
 80080b0:	08007e01 	.word	0x08007e01
 80080b4:	0800970e 	.word	0x0800970e

080080b8 <_printf_common>:
 80080b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080bc:	4616      	mov	r6, r2
 80080be:	4699      	mov	r9, r3
 80080c0:	688a      	ldr	r2, [r1, #8]
 80080c2:	690b      	ldr	r3, [r1, #16]
 80080c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080c8:	4293      	cmp	r3, r2
 80080ca:	bfb8      	it	lt
 80080cc:	4613      	movlt	r3, r2
 80080ce:	6033      	str	r3, [r6, #0]
 80080d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080d4:	4607      	mov	r7, r0
 80080d6:	460c      	mov	r4, r1
 80080d8:	b10a      	cbz	r2, 80080de <_printf_common+0x26>
 80080da:	3301      	adds	r3, #1
 80080dc:	6033      	str	r3, [r6, #0]
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	0699      	lsls	r1, r3, #26
 80080e2:	bf42      	ittt	mi
 80080e4:	6833      	ldrmi	r3, [r6, #0]
 80080e6:	3302      	addmi	r3, #2
 80080e8:	6033      	strmi	r3, [r6, #0]
 80080ea:	6825      	ldr	r5, [r4, #0]
 80080ec:	f015 0506 	ands.w	r5, r5, #6
 80080f0:	d106      	bne.n	8008100 <_printf_common+0x48>
 80080f2:	f104 0a19 	add.w	sl, r4, #25
 80080f6:	68e3      	ldr	r3, [r4, #12]
 80080f8:	6832      	ldr	r2, [r6, #0]
 80080fa:	1a9b      	subs	r3, r3, r2
 80080fc:	42ab      	cmp	r3, r5
 80080fe:	dc26      	bgt.n	800814e <_printf_common+0x96>
 8008100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008104:	1e13      	subs	r3, r2, #0
 8008106:	6822      	ldr	r2, [r4, #0]
 8008108:	bf18      	it	ne
 800810a:	2301      	movne	r3, #1
 800810c:	0692      	lsls	r2, r2, #26
 800810e:	d42b      	bmi.n	8008168 <_printf_common+0xb0>
 8008110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008114:	4649      	mov	r1, r9
 8008116:	4638      	mov	r0, r7
 8008118:	47c0      	blx	r8
 800811a:	3001      	adds	r0, #1
 800811c:	d01e      	beq.n	800815c <_printf_common+0xa4>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	68e5      	ldr	r5, [r4, #12]
 8008122:	6832      	ldr	r2, [r6, #0]
 8008124:	f003 0306 	and.w	r3, r3, #6
 8008128:	2b04      	cmp	r3, #4
 800812a:	bf08      	it	eq
 800812c:	1aad      	subeq	r5, r5, r2
 800812e:	68a3      	ldr	r3, [r4, #8]
 8008130:	6922      	ldr	r2, [r4, #16]
 8008132:	bf0c      	ite	eq
 8008134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008138:	2500      	movne	r5, #0
 800813a:	4293      	cmp	r3, r2
 800813c:	bfc4      	itt	gt
 800813e:	1a9b      	subgt	r3, r3, r2
 8008140:	18ed      	addgt	r5, r5, r3
 8008142:	2600      	movs	r6, #0
 8008144:	341a      	adds	r4, #26
 8008146:	42b5      	cmp	r5, r6
 8008148:	d11a      	bne.n	8008180 <_printf_common+0xc8>
 800814a:	2000      	movs	r0, #0
 800814c:	e008      	b.n	8008160 <_printf_common+0xa8>
 800814e:	2301      	movs	r3, #1
 8008150:	4652      	mov	r2, sl
 8008152:	4649      	mov	r1, r9
 8008154:	4638      	mov	r0, r7
 8008156:	47c0      	blx	r8
 8008158:	3001      	adds	r0, #1
 800815a:	d103      	bne.n	8008164 <_printf_common+0xac>
 800815c:	f04f 30ff 	mov.w	r0, #4294967295
 8008160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008164:	3501      	adds	r5, #1
 8008166:	e7c6      	b.n	80080f6 <_printf_common+0x3e>
 8008168:	18e1      	adds	r1, r4, r3
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	2030      	movs	r0, #48	; 0x30
 800816e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008172:	4422      	add	r2, r4
 8008174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800817c:	3302      	adds	r3, #2
 800817e:	e7c7      	b.n	8008110 <_printf_common+0x58>
 8008180:	2301      	movs	r3, #1
 8008182:	4622      	mov	r2, r4
 8008184:	4649      	mov	r1, r9
 8008186:	4638      	mov	r0, r7
 8008188:	47c0      	blx	r8
 800818a:	3001      	adds	r0, #1
 800818c:	d0e6      	beq.n	800815c <_printf_common+0xa4>
 800818e:	3601      	adds	r6, #1
 8008190:	e7d9      	b.n	8008146 <_printf_common+0x8e>
	...

08008194 <_printf_i>:
 8008194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	7e0f      	ldrb	r7, [r1, #24]
 800819a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800819c:	2f78      	cmp	r7, #120	; 0x78
 800819e:	4691      	mov	r9, r2
 80081a0:	4680      	mov	r8, r0
 80081a2:	460c      	mov	r4, r1
 80081a4:	469a      	mov	sl, r3
 80081a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081aa:	d807      	bhi.n	80081bc <_printf_i+0x28>
 80081ac:	2f62      	cmp	r7, #98	; 0x62
 80081ae:	d80a      	bhi.n	80081c6 <_printf_i+0x32>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	f000 80d8 	beq.w	8008366 <_printf_i+0x1d2>
 80081b6:	2f58      	cmp	r7, #88	; 0x58
 80081b8:	f000 80a3 	beq.w	8008302 <_printf_i+0x16e>
 80081bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081c4:	e03a      	b.n	800823c <_printf_i+0xa8>
 80081c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081ca:	2b15      	cmp	r3, #21
 80081cc:	d8f6      	bhi.n	80081bc <_printf_i+0x28>
 80081ce:	a101      	add	r1, pc, #4	; (adr r1, 80081d4 <_printf_i+0x40>)
 80081d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081d4:	0800822d 	.word	0x0800822d
 80081d8:	08008241 	.word	0x08008241
 80081dc:	080081bd 	.word	0x080081bd
 80081e0:	080081bd 	.word	0x080081bd
 80081e4:	080081bd 	.word	0x080081bd
 80081e8:	080081bd 	.word	0x080081bd
 80081ec:	08008241 	.word	0x08008241
 80081f0:	080081bd 	.word	0x080081bd
 80081f4:	080081bd 	.word	0x080081bd
 80081f8:	080081bd 	.word	0x080081bd
 80081fc:	080081bd 	.word	0x080081bd
 8008200:	0800834d 	.word	0x0800834d
 8008204:	08008271 	.word	0x08008271
 8008208:	0800832f 	.word	0x0800832f
 800820c:	080081bd 	.word	0x080081bd
 8008210:	080081bd 	.word	0x080081bd
 8008214:	0800836f 	.word	0x0800836f
 8008218:	080081bd 	.word	0x080081bd
 800821c:	08008271 	.word	0x08008271
 8008220:	080081bd 	.word	0x080081bd
 8008224:	080081bd 	.word	0x080081bd
 8008228:	08008337 	.word	0x08008337
 800822c:	682b      	ldr	r3, [r5, #0]
 800822e:	1d1a      	adds	r2, r3, #4
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	602a      	str	r2, [r5, #0]
 8008234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800823c:	2301      	movs	r3, #1
 800823e:	e0a3      	b.n	8008388 <_printf_i+0x1f4>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	6829      	ldr	r1, [r5, #0]
 8008244:	0606      	lsls	r6, r0, #24
 8008246:	f101 0304 	add.w	r3, r1, #4
 800824a:	d50a      	bpl.n	8008262 <_printf_i+0xce>
 800824c:	680e      	ldr	r6, [r1, #0]
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	2e00      	cmp	r6, #0
 8008252:	da03      	bge.n	800825c <_printf_i+0xc8>
 8008254:	232d      	movs	r3, #45	; 0x2d
 8008256:	4276      	negs	r6, r6
 8008258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800825c:	485e      	ldr	r0, [pc, #376]	; (80083d8 <_printf_i+0x244>)
 800825e:	230a      	movs	r3, #10
 8008260:	e019      	b.n	8008296 <_printf_i+0x102>
 8008262:	680e      	ldr	r6, [r1, #0]
 8008264:	602b      	str	r3, [r5, #0]
 8008266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800826a:	bf18      	it	ne
 800826c:	b236      	sxthne	r6, r6
 800826e:	e7ef      	b.n	8008250 <_printf_i+0xbc>
 8008270:	682b      	ldr	r3, [r5, #0]
 8008272:	6820      	ldr	r0, [r4, #0]
 8008274:	1d19      	adds	r1, r3, #4
 8008276:	6029      	str	r1, [r5, #0]
 8008278:	0601      	lsls	r1, r0, #24
 800827a:	d501      	bpl.n	8008280 <_printf_i+0xec>
 800827c:	681e      	ldr	r6, [r3, #0]
 800827e:	e002      	b.n	8008286 <_printf_i+0xf2>
 8008280:	0646      	lsls	r6, r0, #25
 8008282:	d5fb      	bpl.n	800827c <_printf_i+0xe8>
 8008284:	881e      	ldrh	r6, [r3, #0]
 8008286:	4854      	ldr	r0, [pc, #336]	; (80083d8 <_printf_i+0x244>)
 8008288:	2f6f      	cmp	r7, #111	; 0x6f
 800828a:	bf0c      	ite	eq
 800828c:	2308      	moveq	r3, #8
 800828e:	230a      	movne	r3, #10
 8008290:	2100      	movs	r1, #0
 8008292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008296:	6865      	ldr	r5, [r4, #4]
 8008298:	60a5      	str	r5, [r4, #8]
 800829a:	2d00      	cmp	r5, #0
 800829c:	bfa2      	ittt	ge
 800829e:	6821      	ldrge	r1, [r4, #0]
 80082a0:	f021 0104 	bicge.w	r1, r1, #4
 80082a4:	6021      	strge	r1, [r4, #0]
 80082a6:	b90e      	cbnz	r6, 80082ac <_printf_i+0x118>
 80082a8:	2d00      	cmp	r5, #0
 80082aa:	d04d      	beq.n	8008348 <_printf_i+0x1b4>
 80082ac:	4615      	mov	r5, r2
 80082ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80082b2:	fb03 6711 	mls	r7, r3, r1, r6
 80082b6:	5dc7      	ldrb	r7, [r0, r7]
 80082b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082bc:	4637      	mov	r7, r6
 80082be:	42bb      	cmp	r3, r7
 80082c0:	460e      	mov	r6, r1
 80082c2:	d9f4      	bls.n	80082ae <_printf_i+0x11a>
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d10b      	bne.n	80082e0 <_printf_i+0x14c>
 80082c8:	6823      	ldr	r3, [r4, #0]
 80082ca:	07de      	lsls	r6, r3, #31
 80082cc:	d508      	bpl.n	80082e0 <_printf_i+0x14c>
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	6861      	ldr	r1, [r4, #4]
 80082d2:	4299      	cmp	r1, r3
 80082d4:	bfde      	ittt	le
 80082d6:	2330      	movle	r3, #48	; 0x30
 80082d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082e0:	1b52      	subs	r2, r2, r5
 80082e2:	6122      	str	r2, [r4, #16]
 80082e4:	f8cd a000 	str.w	sl, [sp]
 80082e8:	464b      	mov	r3, r9
 80082ea:	aa03      	add	r2, sp, #12
 80082ec:	4621      	mov	r1, r4
 80082ee:	4640      	mov	r0, r8
 80082f0:	f7ff fee2 	bl	80080b8 <_printf_common>
 80082f4:	3001      	adds	r0, #1
 80082f6:	d14c      	bne.n	8008392 <_printf_i+0x1fe>
 80082f8:	f04f 30ff 	mov.w	r0, #4294967295
 80082fc:	b004      	add	sp, #16
 80082fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008302:	4835      	ldr	r0, [pc, #212]	; (80083d8 <_printf_i+0x244>)
 8008304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008308:	6829      	ldr	r1, [r5, #0]
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008310:	6029      	str	r1, [r5, #0]
 8008312:	061d      	lsls	r5, r3, #24
 8008314:	d514      	bpl.n	8008340 <_printf_i+0x1ac>
 8008316:	07df      	lsls	r7, r3, #31
 8008318:	bf44      	itt	mi
 800831a:	f043 0320 	orrmi.w	r3, r3, #32
 800831e:	6023      	strmi	r3, [r4, #0]
 8008320:	b91e      	cbnz	r6, 800832a <_printf_i+0x196>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	f023 0320 	bic.w	r3, r3, #32
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	2310      	movs	r3, #16
 800832c:	e7b0      	b.n	8008290 <_printf_i+0xfc>
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	f043 0320 	orr.w	r3, r3, #32
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	2378      	movs	r3, #120	; 0x78
 8008338:	4828      	ldr	r0, [pc, #160]	; (80083dc <_printf_i+0x248>)
 800833a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800833e:	e7e3      	b.n	8008308 <_printf_i+0x174>
 8008340:	0659      	lsls	r1, r3, #25
 8008342:	bf48      	it	mi
 8008344:	b2b6      	uxthmi	r6, r6
 8008346:	e7e6      	b.n	8008316 <_printf_i+0x182>
 8008348:	4615      	mov	r5, r2
 800834a:	e7bb      	b.n	80082c4 <_printf_i+0x130>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	6826      	ldr	r6, [r4, #0]
 8008350:	6961      	ldr	r1, [r4, #20]
 8008352:	1d18      	adds	r0, r3, #4
 8008354:	6028      	str	r0, [r5, #0]
 8008356:	0635      	lsls	r5, r6, #24
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	d501      	bpl.n	8008360 <_printf_i+0x1cc>
 800835c:	6019      	str	r1, [r3, #0]
 800835e:	e002      	b.n	8008366 <_printf_i+0x1d2>
 8008360:	0670      	lsls	r0, r6, #25
 8008362:	d5fb      	bpl.n	800835c <_printf_i+0x1c8>
 8008364:	8019      	strh	r1, [r3, #0]
 8008366:	2300      	movs	r3, #0
 8008368:	6123      	str	r3, [r4, #16]
 800836a:	4615      	mov	r5, r2
 800836c:	e7ba      	b.n	80082e4 <_printf_i+0x150>
 800836e:	682b      	ldr	r3, [r5, #0]
 8008370:	1d1a      	adds	r2, r3, #4
 8008372:	602a      	str	r2, [r5, #0]
 8008374:	681d      	ldr	r5, [r3, #0]
 8008376:	6862      	ldr	r2, [r4, #4]
 8008378:	2100      	movs	r1, #0
 800837a:	4628      	mov	r0, r5
 800837c:	f7f7 ff28 	bl	80001d0 <memchr>
 8008380:	b108      	cbz	r0, 8008386 <_printf_i+0x1f2>
 8008382:	1b40      	subs	r0, r0, r5
 8008384:	6060      	str	r0, [r4, #4]
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	6123      	str	r3, [r4, #16]
 800838a:	2300      	movs	r3, #0
 800838c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008390:	e7a8      	b.n	80082e4 <_printf_i+0x150>
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	462a      	mov	r2, r5
 8008396:	4649      	mov	r1, r9
 8008398:	4640      	mov	r0, r8
 800839a:	47d0      	blx	sl
 800839c:	3001      	adds	r0, #1
 800839e:	d0ab      	beq.n	80082f8 <_printf_i+0x164>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	079b      	lsls	r3, r3, #30
 80083a4:	d413      	bmi.n	80083ce <_printf_i+0x23a>
 80083a6:	68e0      	ldr	r0, [r4, #12]
 80083a8:	9b03      	ldr	r3, [sp, #12]
 80083aa:	4298      	cmp	r0, r3
 80083ac:	bfb8      	it	lt
 80083ae:	4618      	movlt	r0, r3
 80083b0:	e7a4      	b.n	80082fc <_printf_i+0x168>
 80083b2:	2301      	movs	r3, #1
 80083b4:	4632      	mov	r2, r6
 80083b6:	4649      	mov	r1, r9
 80083b8:	4640      	mov	r0, r8
 80083ba:	47d0      	blx	sl
 80083bc:	3001      	adds	r0, #1
 80083be:	d09b      	beq.n	80082f8 <_printf_i+0x164>
 80083c0:	3501      	adds	r5, #1
 80083c2:	68e3      	ldr	r3, [r4, #12]
 80083c4:	9903      	ldr	r1, [sp, #12]
 80083c6:	1a5b      	subs	r3, r3, r1
 80083c8:	42ab      	cmp	r3, r5
 80083ca:	dcf2      	bgt.n	80083b2 <_printf_i+0x21e>
 80083cc:	e7eb      	b.n	80083a6 <_printf_i+0x212>
 80083ce:	2500      	movs	r5, #0
 80083d0:	f104 0619 	add.w	r6, r4, #25
 80083d4:	e7f5      	b.n	80083c2 <_printf_i+0x22e>
 80083d6:	bf00      	nop
 80083d8:	08009719 	.word	0x08009719
 80083dc:	0800972a 	.word	0x0800972a

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <memmove>:
 80083fc:	4288      	cmp	r0, r1
 80083fe:	b510      	push	{r4, lr}
 8008400:	eb01 0402 	add.w	r4, r1, r2
 8008404:	d902      	bls.n	800840c <memmove+0x10>
 8008406:	4284      	cmp	r4, r0
 8008408:	4623      	mov	r3, r4
 800840a:	d807      	bhi.n	800841c <memmove+0x20>
 800840c:	1e43      	subs	r3, r0, #1
 800840e:	42a1      	cmp	r1, r4
 8008410:	d008      	beq.n	8008424 <memmove+0x28>
 8008412:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008416:	f803 2f01 	strb.w	r2, [r3, #1]!
 800841a:	e7f8      	b.n	800840e <memmove+0x12>
 800841c:	4402      	add	r2, r0
 800841e:	4601      	mov	r1, r0
 8008420:	428a      	cmp	r2, r1
 8008422:	d100      	bne.n	8008426 <memmove+0x2a>
 8008424:	bd10      	pop	{r4, pc}
 8008426:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800842a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800842e:	e7f7      	b.n	8008420 <memmove+0x24>

08008430 <_free_r>:
 8008430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008432:	2900      	cmp	r1, #0
 8008434:	d044      	beq.n	80084c0 <_free_r+0x90>
 8008436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843a:	9001      	str	r0, [sp, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f1a1 0404 	sub.w	r4, r1, #4
 8008442:	bfb8      	it	lt
 8008444:	18e4      	addlt	r4, r4, r3
 8008446:	f000 f913 	bl	8008670 <__malloc_lock>
 800844a:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <_free_r+0x94>)
 800844c:	9801      	ldr	r0, [sp, #4]
 800844e:	6813      	ldr	r3, [r2, #0]
 8008450:	b933      	cbnz	r3, 8008460 <_free_r+0x30>
 8008452:	6063      	str	r3, [r4, #4]
 8008454:	6014      	str	r4, [r2, #0]
 8008456:	b003      	add	sp, #12
 8008458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800845c:	f000 b90e 	b.w	800867c <__malloc_unlock>
 8008460:	42a3      	cmp	r3, r4
 8008462:	d908      	bls.n	8008476 <_free_r+0x46>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf01      	itttt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	1949      	addeq	r1, r1, r5
 8008472:	6021      	streq	r1, [r4, #0]
 8008474:	e7ed      	b.n	8008452 <_free_r+0x22>
 8008476:	461a      	mov	r2, r3
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	b10b      	cbz	r3, 8008480 <_free_r+0x50>
 800847c:	42a3      	cmp	r3, r4
 800847e:	d9fa      	bls.n	8008476 <_free_r+0x46>
 8008480:	6811      	ldr	r1, [r2, #0]
 8008482:	1855      	adds	r5, r2, r1
 8008484:	42a5      	cmp	r5, r4
 8008486:	d10b      	bne.n	80084a0 <_free_r+0x70>
 8008488:	6824      	ldr	r4, [r4, #0]
 800848a:	4421      	add	r1, r4
 800848c:	1854      	adds	r4, r2, r1
 800848e:	42a3      	cmp	r3, r4
 8008490:	6011      	str	r1, [r2, #0]
 8008492:	d1e0      	bne.n	8008456 <_free_r+0x26>
 8008494:	681c      	ldr	r4, [r3, #0]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	6053      	str	r3, [r2, #4]
 800849a:	4421      	add	r1, r4
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	e7da      	b.n	8008456 <_free_r+0x26>
 80084a0:	d902      	bls.n	80084a8 <_free_r+0x78>
 80084a2:	230c      	movs	r3, #12
 80084a4:	6003      	str	r3, [r0, #0]
 80084a6:	e7d6      	b.n	8008456 <_free_r+0x26>
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	1961      	adds	r1, r4, r5
 80084ac:	428b      	cmp	r3, r1
 80084ae:	bf04      	itt	eq
 80084b0:	6819      	ldreq	r1, [r3, #0]
 80084b2:	685b      	ldreq	r3, [r3, #4]
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	bf04      	itt	eq
 80084b8:	1949      	addeq	r1, r1, r5
 80084ba:	6021      	streq	r1, [r4, #0]
 80084bc:	6054      	str	r4, [r2, #4]
 80084be:	e7ca      	b.n	8008456 <_free_r+0x26>
 80084c0:	b003      	add	sp, #12
 80084c2:	bd30      	pop	{r4, r5, pc}
 80084c4:	20003520 	.word	0x20003520

080084c8 <sbrk_aligned>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4e0e      	ldr	r6, [pc, #56]	; (8008504 <sbrk_aligned+0x3c>)
 80084cc:	460c      	mov	r4, r1
 80084ce:	6831      	ldr	r1, [r6, #0]
 80084d0:	4605      	mov	r5, r0
 80084d2:	b911      	cbnz	r1, 80084da <sbrk_aligned+0x12>
 80084d4:	f000 f8bc 	bl	8008650 <_sbrk_r>
 80084d8:	6030      	str	r0, [r6, #0]
 80084da:	4621      	mov	r1, r4
 80084dc:	4628      	mov	r0, r5
 80084de:	f000 f8b7 	bl	8008650 <_sbrk_r>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d00a      	beq.n	80084fc <sbrk_aligned+0x34>
 80084e6:	1cc4      	adds	r4, r0, #3
 80084e8:	f024 0403 	bic.w	r4, r4, #3
 80084ec:	42a0      	cmp	r0, r4
 80084ee:	d007      	beq.n	8008500 <sbrk_aligned+0x38>
 80084f0:	1a21      	subs	r1, r4, r0
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 f8ac 	bl	8008650 <_sbrk_r>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d101      	bne.n	8008500 <sbrk_aligned+0x38>
 80084fc:	f04f 34ff 	mov.w	r4, #4294967295
 8008500:	4620      	mov	r0, r4
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	20003524 	.word	0x20003524

08008508 <_malloc_r>:
 8008508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800850c:	1ccd      	adds	r5, r1, #3
 800850e:	f025 0503 	bic.w	r5, r5, #3
 8008512:	3508      	adds	r5, #8
 8008514:	2d0c      	cmp	r5, #12
 8008516:	bf38      	it	cc
 8008518:	250c      	movcc	r5, #12
 800851a:	2d00      	cmp	r5, #0
 800851c:	4607      	mov	r7, r0
 800851e:	db01      	blt.n	8008524 <_malloc_r+0x1c>
 8008520:	42a9      	cmp	r1, r5
 8008522:	d905      	bls.n	8008530 <_malloc_r+0x28>
 8008524:	230c      	movs	r3, #12
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	2600      	movs	r6, #0
 800852a:	4630      	mov	r0, r6
 800852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008530:	4e2e      	ldr	r6, [pc, #184]	; (80085ec <_malloc_r+0xe4>)
 8008532:	f000 f89d 	bl	8008670 <__malloc_lock>
 8008536:	6833      	ldr	r3, [r6, #0]
 8008538:	461c      	mov	r4, r3
 800853a:	bb34      	cbnz	r4, 800858a <_malloc_r+0x82>
 800853c:	4629      	mov	r1, r5
 800853e:	4638      	mov	r0, r7
 8008540:	f7ff ffc2 	bl	80084c8 <sbrk_aligned>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	4604      	mov	r4, r0
 8008548:	d14d      	bne.n	80085e6 <_malloc_r+0xde>
 800854a:	6834      	ldr	r4, [r6, #0]
 800854c:	4626      	mov	r6, r4
 800854e:	2e00      	cmp	r6, #0
 8008550:	d140      	bne.n	80085d4 <_malloc_r+0xcc>
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	4631      	mov	r1, r6
 8008556:	4638      	mov	r0, r7
 8008558:	eb04 0803 	add.w	r8, r4, r3
 800855c:	f000 f878 	bl	8008650 <_sbrk_r>
 8008560:	4580      	cmp	r8, r0
 8008562:	d13a      	bne.n	80085da <_malloc_r+0xd2>
 8008564:	6821      	ldr	r1, [r4, #0]
 8008566:	3503      	adds	r5, #3
 8008568:	1a6d      	subs	r5, r5, r1
 800856a:	f025 0503 	bic.w	r5, r5, #3
 800856e:	3508      	adds	r5, #8
 8008570:	2d0c      	cmp	r5, #12
 8008572:	bf38      	it	cc
 8008574:	250c      	movcc	r5, #12
 8008576:	4629      	mov	r1, r5
 8008578:	4638      	mov	r0, r7
 800857a:	f7ff ffa5 	bl	80084c8 <sbrk_aligned>
 800857e:	3001      	adds	r0, #1
 8008580:	d02b      	beq.n	80085da <_malloc_r+0xd2>
 8008582:	6823      	ldr	r3, [r4, #0]
 8008584:	442b      	add	r3, r5
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	e00e      	b.n	80085a8 <_malloc_r+0xa0>
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	1b52      	subs	r2, r2, r5
 800858e:	d41e      	bmi.n	80085ce <_malloc_r+0xc6>
 8008590:	2a0b      	cmp	r2, #11
 8008592:	d916      	bls.n	80085c2 <_malloc_r+0xba>
 8008594:	1961      	adds	r1, r4, r5
 8008596:	42a3      	cmp	r3, r4
 8008598:	6025      	str	r5, [r4, #0]
 800859a:	bf18      	it	ne
 800859c:	6059      	strne	r1, [r3, #4]
 800859e:	6863      	ldr	r3, [r4, #4]
 80085a0:	bf08      	it	eq
 80085a2:	6031      	streq	r1, [r6, #0]
 80085a4:	5162      	str	r2, [r4, r5]
 80085a6:	604b      	str	r3, [r1, #4]
 80085a8:	4638      	mov	r0, r7
 80085aa:	f104 060b 	add.w	r6, r4, #11
 80085ae:	f000 f865 	bl	800867c <__malloc_unlock>
 80085b2:	f026 0607 	bic.w	r6, r6, #7
 80085b6:	1d23      	adds	r3, r4, #4
 80085b8:	1af2      	subs	r2, r6, r3
 80085ba:	d0b6      	beq.n	800852a <_malloc_r+0x22>
 80085bc:	1b9b      	subs	r3, r3, r6
 80085be:	50a3      	str	r3, [r4, r2]
 80085c0:	e7b3      	b.n	800852a <_malloc_r+0x22>
 80085c2:	6862      	ldr	r2, [r4, #4]
 80085c4:	42a3      	cmp	r3, r4
 80085c6:	bf0c      	ite	eq
 80085c8:	6032      	streq	r2, [r6, #0]
 80085ca:	605a      	strne	r2, [r3, #4]
 80085cc:	e7ec      	b.n	80085a8 <_malloc_r+0xa0>
 80085ce:	4623      	mov	r3, r4
 80085d0:	6864      	ldr	r4, [r4, #4]
 80085d2:	e7b2      	b.n	800853a <_malloc_r+0x32>
 80085d4:	4634      	mov	r4, r6
 80085d6:	6876      	ldr	r6, [r6, #4]
 80085d8:	e7b9      	b.n	800854e <_malloc_r+0x46>
 80085da:	230c      	movs	r3, #12
 80085dc:	603b      	str	r3, [r7, #0]
 80085de:	4638      	mov	r0, r7
 80085e0:	f000 f84c 	bl	800867c <__malloc_unlock>
 80085e4:	e7a1      	b.n	800852a <_malloc_r+0x22>
 80085e6:	6025      	str	r5, [r4, #0]
 80085e8:	e7de      	b.n	80085a8 <_malloc_r+0xa0>
 80085ea:	bf00      	nop
 80085ec:	20003520 	.word	0x20003520

080085f0 <_realloc_r>:
 80085f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f4:	4680      	mov	r8, r0
 80085f6:	4614      	mov	r4, r2
 80085f8:	460e      	mov	r6, r1
 80085fa:	b921      	cbnz	r1, 8008606 <_realloc_r+0x16>
 80085fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008600:	4611      	mov	r1, r2
 8008602:	f7ff bf81 	b.w	8008508 <_malloc_r>
 8008606:	b92a      	cbnz	r2, 8008614 <_realloc_r+0x24>
 8008608:	f7ff ff12 	bl	8008430 <_free_r>
 800860c:	4625      	mov	r5, r4
 800860e:	4628      	mov	r0, r5
 8008610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008614:	f000 f838 	bl	8008688 <_malloc_usable_size_r>
 8008618:	4284      	cmp	r4, r0
 800861a:	4607      	mov	r7, r0
 800861c:	d802      	bhi.n	8008624 <_realloc_r+0x34>
 800861e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008622:	d812      	bhi.n	800864a <_realloc_r+0x5a>
 8008624:	4621      	mov	r1, r4
 8008626:	4640      	mov	r0, r8
 8008628:	f7ff ff6e 	bl	8008508 <_malloc_r>
 800862c:	4605      	mov	r5, r0
 800862e:	2800      	cmp	r0, #0
 8008630:	d0ed      	beq.n	800860e <_realloc_r+0x1e>
 8008632:	42bc      	cmp	r4, r7
 8008634:	4622      	mov	r2, r4
 8008636:	4631      	mov	r1, r6
 8008638:	bf28      	it	cs
 800863a:	463a      	movcs	r2, r7
 800863c:	f7ff fed0 	bl	80083e0 <memcpy>
 8008640:	4631      	mov	r1, r6
 8008642:	4640      	mov	r0, r8
 8008644:	f7ff fef4 	bl	8008430 <_free_r>
 8008648:	e7e1      	b.n	800860e <_realloc_r+0x1e>
 800864a:	4635      	mov	r5, r6
 800864c:	e7df      	b.n	800860e <_realloc_r+0x1e>
	...

08008650 <_sbrk_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d06      	ldr	r5, [pc, #24]	; (800866c <_sbrk_r+0x1c>)
 8008654:	2300      	movs	r3, #0
 8008656:	4604      	mov	r4, r0
 8008658:	4608      	mov	r0, r1
 800865a:	602b      	str	r3, [r5, #0]
 800865c:	f7fa f834 	bl	80026c8 <_sbrk>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_sbrk_r+0x1a>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_sbrk_r+0x1a>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	20003528 	.word	0x20003528

08008670 <__malloc_lock>:
 8008670:	4801      	ldr	r0, [pc, #4]	; (8008678 <__malloc_lock+0x8>)
 8008672:	f000 b811 	b.w	8008698 <__retarget_lock_acquire_recursive>
 8008676:	bf00      	nop
 8008678:	2000352c 	.word	0x2000352c

0800867c <__malloc_unlock>:
 800867c:	4801      	ldr	r0, [pc, #4]	; (8008684 <__malloc_unlock+0x8>)
 800867e:	f000 b80c 	b.w	800869a <__retarget_lock_release_recursive>
 8008682:	bf00      	nop
 8008684:	2000352c 	.word	0x2000352c

08008688 <_malloc_usable_size_r>:
 8008688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800868c:	1f18      	subs	r0, r3, #4
 800868e:	2b00      	cmp	r3, #0
 8008690:	bfbc      	itt	lt
 8008692:	580b      	ldrlt	r3, [r1, r0]
 8008694:	18c0      	addlt	r0, r0, r3
 8008696:	4770      	bx	lr

08008698 <__retarget_lock_acquire_recursive>:
 8008698:	4770      	bx	lr

0800869a <__retarget_lock_release_recursive>:
 800869a:	4770      	bx	lr

0800869c <_init>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr

080086a8 <_fini>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	bf00      	nop
 80086ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ae:	bc08      	pop	{r3}
 80086b0:	469e      	mov	lr, r3
 80086b2:	4770      	bx	lr
